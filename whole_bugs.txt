keyword	url	commit
clang workaround	 https://github.com/zxySeaStar/esp32-idf-zy/commit/1e2b1238c6a03c941e81a422b7cebe5f3dd795fd	cbor: add a workaround for -ffreestanding being passed to clangToolchain CMake files for clang currently pass -ffreestanding optionto prevent clang from picking the wrong copy of stdint.h. This is atemporary hack until we fix clang distributions to not include theGCC version of stdint.h. This hack, however, results in setting__STDC_HOSTED__=0, which is being checked by cbor header files,making some required functions unavailable as a result.Undefine __STDC_HOSTED__ as a workaround. This flag is only passedwhen compiling cbor itself.
clang workaround	 https://github.com/zx2c4/linux-rng/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/zpplibs/zpp-crc32c/commit/6ebe1931028febe1bf2759e2001790157225ea83	workaround for zig clang macos arm64 bug
clang workaround	 https://github.com/Zopolis4/gcj/commit/164a761a9f4798dc69ecab80097807636dc17d61	libstdc++: Use __cpp_concepts instead of custom macro [PR103891]With the new value of __cpp_concepts required by P2493, we can testwhether the compiler supports conditionally trivial special members.This allows us to remove the workaround that disables fully-constexprstd::variant for Clang. Now it should work for non-GCC compilers (suchas future releases of Clang) that support conditionally trivialdestructors and define the new value of __cpp_concepts.libstdc++-v3/ChangeLog:
clang workaround	 https://github.com/Zirias/zfbsd-ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/Zirias/zfbsd-ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/Zirias/zfbsd-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/zhaobijun/tg/commit/ac8ccaf9703ba016015a7187e74891f751c944e9	Workaround clang 3.4 warning.
clang workaround	 https://github.com/zhaobijun/tg/commit/ac5e1960f9c06ff186779111f618821d623f758f	Workaround clang 3.4 bug.
clang workaround	 https://github.com/ZhangYanTJU/OpenFOAM-ESI/commit/29f7fcc515c14eb42429cec53ae1c888403ddc7e	COMP: workaround clang-13 optimization issue (vtk handling)
clang workaround	 https://github.com/zephyrproject-rtos/sdk-ng-testing/commit/f29d2718d8267acd3eea4cdb71e6bfb0843b3d58	gcc: Pull in Clang 9 bug workaroundPull in the workaround to fix building with Clang 9.This is required to support building GCC on the macOS 11 and above.Signed-off-by: Stephanos Ioannidis <root@stephanos.io>
clang workaround	 https://github.com/zephyrproject-rtos/sdk-ng/commit/f29d2718d8267acd3eea4cdb71e6bfb0843b3d58	gcc: Pull in Clang 9 bug workaroundPull in the workaround to fix building with Clang 9.This is required to support building GCC on the macOS 11 and above.Signed-off-by: Stephanos Ioannidis <root@stephanos.io>
clang workaround	 https://github.com/yzgyyang/freebsd-ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/yzgyyang/freebsd-ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/yzgyyang/freebsd-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/youling257/android-mainline/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/YoeDistro/yoe-distro/commit/8cdd0fa028a944ecc094cbf54a0dcd549efafc55	Layer Updates:  sources/meta-clang* sources/meta-clang 03648d6...d5219d8 (5):  > libraw: Workaround clang hang on RISCV compiling libraw  > opensbi: Enable clang as compiler for opensbi  > libcxx: Install unwind_itanium.h and unwind_arm_ehabi.h  > bcc: Upgrade to 0.24.0  > clang: Upgrade to upcoming clang14 release branchSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/YaAlex3/kernel_samsung_r7/commit/0b8ca09c2e3a033b7d6adec9da8325ab1814994b	ANDROID: enable ARM64_ERRATUM_843419 by default with LTO_CLANGThis reverts a workaround we needed with an old version of thetoolchain.Bug: 145210207Change-Id: If28b9f97da21c046adff7d5a58943a4fc06cb390Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Diab Neiroukh <lazerl0rd@thezest.dev>
clang workaround	 https://github.com/y2kbadbug/freebsd-ports-y2kbadbug/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/y2kbadbug/freebsd-ports-y2kbadbug/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/XZI-Project/android_build_soong/commit/7146d5f6e57e34e73d611f179805163982be086f	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/xu1119/torvalds-linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/XBurst/Linux-XBurst/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/xanmod/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/wowdev/noggit3/commit/51a1bc7fe471b125a0c2a732ef53705cdcf54223	cmake: explicitly check for windows-only compiler flags- clang workaround
clang workaround	 https://github.com/WopsS/RED4ext.SDK/commit/d7b201881f5f5ebeb3dbd6e3c4ae6cbd3528e3a7	Merge pull request #56 from jac3km4/clang-patchAdd a clang workaround
clang workaround	 https://github.com/WopsS/RED4ext.SDK/commit/c0ddec5bbf5e911b201befa0baa8b09a6ef24b03	Add a clang workaround
clang workaround	 https://github.com/woodsts/linux-stable/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/wlav/cppyy-backend/commit/df9a5d6cc64d77b7d2df26337ec903330f4adb96	move clang printing workaround (allocator/char_traits) into meta
clang workaround	 https://github.com/WireGuard/wireguard-linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/WireGuard/wireguard-linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/WindstilleTeam/wstsound/commit/9b3870d84c946ee9a83fab839bf2f06eb0b4b902	Workaround -Wunreachable-code warning in clang-12 on MacOS
clang workaround	 https://github.com/WebKit/WebKit/commit/ecc8bcf73d9711e9d55e2a52f9aba3abfaa77848	Revert some structured binding workarounds with Clanghttps://bugs.webkit.org/show_bug.cgi?id=236098Reviewed by Sam Weinig.Revert structured bindings workarounds made in r288309, r261572, r249524 now that this is fixed in clang.Source/WebCore:* Modules/indexeddb/server/MemoryObjectStore.cpp:* Modules/indexeddb/server/SQLiteIDBBackingStore.cpp:* inspector/agents/InspectorNetworkAgent.cpp:Source/WebKit:* NetworkProcess/storage/StorageAreaBase.cpp:Canonical link: https://commits.webkit.org/246825@maingit-svn-id: https://svn.webkit.org/repository/webkit/trunk@289128 268f45cc-cd09-0410-ab3c-d52691b4dbfc
clang workaround	 https://github.com/webatintel/webtest/commit/9b0cb5bfea17d501dbe2a003b3cb8a6c037e786a	workaround unit test to keep it runnable on Windows (#10)* workaround unit test to keep it runnable on WindowsBazel build break origin karma tests and only runnable on WSL* Add auto format with clang-format* update
clang workaround	 https://github.com/WarheadCore/WarheadBand/commit/5d8b472ed72ebc2f78b5010a995ac1f7511f5be2	fix(Core/Misc): Remove Clang 7 workaround (#10521)
clang workaround	 https://github.com/wahahasunk/test/commit/c1de0bc28c5e1d03ad6d5a807288283598d31ed1	workaround for clang compilation
clang workaround	 https://github.com/wahahasunk/test/commit/aaac4c1bdee66b0053bf86895575e6177c61fb7b	Clang workaround for c++20 non-compliance
clang workaround	 https://github.com/wadesalazar/open-vds/commit/74408a481900b7055329bc2a4e7da915f8077997	Workaround clang warning
clang workaround	 https://github.com/Wabi-Studios/Blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/vsrinivas/fuchsia/commit/aecc939e427da9d8b58a9d556af69243c49572e6	[appmgr] Appease clang-tidyRemove obsolete workaround while I'm here.Fixed: 64385Change-Id: I2bb5e1f7c098fdd4dc72702d2a5346c43d18de93Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/670762Fuchsia-Auto-Submit: Tamir Duberstein <tamird@google.com>Reviewed-by: Shai Barack <shayba@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang workaround	 https://github.com/vsrinivas/fuchsia/commit/2b4a448e38f1c9f5b0d581e1addb04a01dd2e92e	[starnix] Force generation of missing definesSystem header defines that are defined via calling a function are notgenerated by rust-bindings.This CL introduces a workaround by redefining these includes asconstants so that clang compute them and rust-bindings recognize them.Change-Id: I0c5a43cc6638a2c88d2a922d9ca9bcbcaca946b1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/661346Reviewed-by: Adam Barth <abarth@google.com>Fuchsia-Auto-Submit: Benjamin Lerman <qsr@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang workaround	 https://github.com/vsrinivas/fuchsia/commit/2956f19738b524808a0c609640edbbbb46d7489f	[kernel][x86] Remove <cpuid.h> inclusion workaroundPreviously, both GCC and Clang supplied <cpuid.h> without a multipleinclusion guard. This has since been fixed (as of GCC 11.2.1 and Clang14.0.0).Fixed: 64109Change-Id: I37a0f045890829eda7447c17be4c7b7f2fc41a53Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/650342Fuchsia-Auto-Submit: Joshua Seaton <joshuaseaton@google.com>Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Joshua Seaton <joshuaseaton@google.com>
clang workaround	 https://github.com/voice-analyzer/voice-analyzer-ios/commit/d86dd4e336ffeb1dc9835601f902510dcc49661d	build using /usr/bin/clang since xcode toolchain doesn't workthe xcode toolchain's clang ($XCODE_APP_DIR/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang)complains about not finding libraries like libiconv and libSystem. other possible workarounds like setting or unsettingDYLD_FALLBACK_LIBRARY_PATH didn't work, so we use the /usr/bin/clang instead, which doesn't suffer such problems.
clang workaround	 https://github.com/vmware/concord-bft/commit/e94d6e6b79a5d77f0936700cc5ba9d6bd9b3f6b3	Clang-tidy: Remove clang-tidy workaround in CMakeWith the prior clang-tidy changes in place, we don't need the workaround inCMake anymore. It is a workaround because we overwrite clang-tidy'sconfiguration to only do a single/simple test. However, we don't want anychecks to be reported for some files. Now, we have .clang-tidy-ignore whichignores source files for real.
clang workaround	 https://github.com/Vignesh2107/sen6VW/commit/1e2b1238c6a03c941e81a422b7cebe5f3dd795fd	cbor: add a workaround for -ffreestanding being passed to clangToolchain CMake files for clang currently pass -ffreestanding optionto prevent clang from picking the wrong copy of stdint.h. This is atemporary hack until we fix clang distributions to not include theGCC version of stdint.h. This hack, however, results in setting__STDC_HOSTED__=0, which is being checked by cbor header files,making some required functions unavailable as a result.Undefine __STDC_HOSTED__ as a workaround. This flag is only passedwhen compiling cbor itself.
clang workaround	 https://github.com/VhalPurohit/katana/commit/603d688b631a3f9fbf7b1a63f5bfced3650cb9b9	Fix clang warnings when building with sanitizers (#432)* Fix clang warnings when building with sanitizers* Workarounds for the legacy version of Python (3.6)
clang workaround	 https://github.com/vesoft-inc/nebula-common/commit/13132322a6ab9d2173dabcfc6af4c8750c029382	Workaround to fix clang build on aarch64 (#557)
clang workaround	 https://github.com/vesoft-inc/nebula/commit/368acb844a0d2ed311f754659efed649bc08be9f	Workaround to fix clang build on aarch64 (#557)
clang workaround	 https://github.com/VelinPavlov/OpenSC/commit/2f145f58047ff8f5a0eab093d7fd71d678e21c54	Workaround for broken Ubuntu Focal imageshttps://travis-ci.community/t/clang-10-was-recently-broken-on-linux-unmet-dependencies-for-clang-10-clang-tidy-10-valgrind/11527
clang workaround	 https://github.com/vbuslov/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/VasiliyRyabtsev/quirrel-peg/commit/e35ed9c49749a2a2ec2566af72a5b513c5bd7729	Revert "clang 32 bit workaround and optimization"No need for this workaround anymoreThis reverts commit 1f7694bd3ec2a117f07ffec4353c0d1d00391958.
clang workaround	 https://github.com/val-verde/builders/commit/62b73c7b0dd8f2ff8b8352da110960ded091fb38	Add MTUNE_CFLAG workaround for clang compilers that precede apple-m1 cpu support.
clang workaround	 https://github.com/vabridgers/codechecker/commit/0bd7dd2365d238d037fb2f0af07f20a252d7b089	[clang-tidy][cfg] Remove an alias from the extreme profileIt seems like that `bugprone-narrowing-conversions` check is the same asthe `cppcoreguidelines-narrowing-conversions` check.Check this:https://github.com/llvm/llvm-project/blob/c63522e6ba7782c335043893ae7cbd37eca24fe5/clang-tools-extra/clang-tidy/bugprone/BugproneTidyModule.cpp#L136-L137It seems like both of these checks were included in the `extreme`profile, thus each of these reports were duplicated basically.Hereby I'm proposing to keep only one of them in the profile toworkaround this issue.According to Compiler Explorer https://godbolt.org/z/hvMnqrfEx,clang-tidy reports these issues only once, with the`[check,alias,alias...]` schema, thus it does the right thing.However, PR #3238 introduced a logic that splits these reportsinto individual reports.I'm not sure if that is the right way of dealing with check aliases, butwe definitely need something more robust than including/excluding checksfrom profiles.
clang workaround	 https://github.com/usc-isi-bass/php/commit/356ef5bd0e871d58c274110d3689870b8cb264b9	Fix CLANG/RELEASE build (this is a workaround for probable bug in CLANG)
clang workaround	 https://github.com/UPBGE/upbge/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/Unity-Technologies/com.unity.webrtc/commit/320ec08ca166fa845882b5ac1c7faf1ec119791f	fix: Fix RTCStats.Type regression on Windows (#619)* when retrying build, don't fail when directory already exist* workaround RTCStats.Type mapping issue after changing compiler from VS to Clang* fix StatsMemberGetLong cast from uint64_t to int64_t* remove unused OnAudioReceived delegate* remove extra common_audio/include/audio_util.h include
clang workaround	 https://github.com/underground-software/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/underground-software/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/ultimatepp/ultimatepp/commit/9d56de714c7b6e041c11a365bdd6d956aa0875db	Core: Removed bad_alloc workaround in heap.cpp for win32 clang
clang workaround	 https://github.com/twistedfall/opencv-rust/commit/f60891163c979a1bf9f0ca79c5d89f793bbb0f43	Revert Test building with clang against the OpenCV built with clangIt was actually a workaround for broken struct return handling
clang workaround	 https://github.com/tumashu/guix/commit/a8d1e6bfa22c3f7f14e37584848e08a953ea4e02	gnu: libomp: Update to 13.0.0.* gnu/packages/llvm.scm (libomp): Update to 13.0.0.[arguments]: Add workaround to #:configure-flags.[native-inputs]: Change from CLANG-9 and LLVM-9 to CLANG and LLVM.
clang workaround	 https://github.com/tsduck/tsduck/commit/1994831410e4c9e6c7d60ff3a25b7ae64bab1ebf	Workaround for clang 12.0.0 bug
clang workaround	 https://github.com/triSYCL/sycl/commit/db5f100fe4ca252d7f392659e7da5dba10331ae7	[HIP] Remove workaround in __clang_hip_runtime_wrapper.hRemove the workaround for -fopenmp in __clang_hip_runtime_wrapper.hsince it causes device functions in HIP wrapper headers disabled whencompiling HIP program with -fopenmp.Reviewed by: Aaron Enye Shi, Jon ChesterfieldDifferential Revision: https://reviews.llvm.org/D106070
clang workaround	 https://github.com/triSYCL/sycl/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/triSYCL/sycl/commit/5ff52be5d98a621db6de079ad09d0f94854938e8	[sanitizer] Restore __thumb__ workaroundIt was removed in D114934 and failed clang-thumbv7-full-2stage.
clang workaround	 https://github.com/trilinos/Trilinos/commit/e9b883a1588e81f990e13447097a809fbe8e0191	Stokhos:  Fix static initializationA couple of Stokhos classes have static data members that internally have RCP'sin them.  On blake with the clang compiler, these static data members werebeing initialized before some static data used internally within RCP, leadingto exceptions and failed tests.  This removes the static data to workaroundthis problem.For issue #10228.
clang workaround	 https://github.com/trezor/trezor-firmware/commit/cf3c57d0ae15e97f98a27a83c3767312cb071e59	feat(crypto): improve trezor-crypto fuzzer, add new dictionary extraction programIntroduce fuzzing harnesses for zkp* functions and adapt some differential fuzzingAdditional documentation and minor cleanupAdd temporary workaround for clang-14 and more explicit Makefile behavior
clang workaround	 https://github.com/tq-systems/linux-em/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/torvalds/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/torvalds/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/TimurEke/AutoPasPublic/commit/f01ba9a14503de43291c9c14a021546784658705	workaround for clang bug
clang workaround	 https://github.com/TimenDillema/BlenderSculptTesting/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/threedslider/Vanilla/commit/dec37ef3c9864d47c96df72306ea98bbe4802544	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/threedslider/Vanilla/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/thornung/OpenSC/commit/2f145f58047ff8f5a0eab093d7fd71d678e21c54	Workaround for broken Ubuntu Focal imageshttps://travis-ci.community/t/clang-10-was-recently-broken-on-linux-unmet-dependencies-for-clang-10-clang-tidy-10-valgrind/11527
clang workaround	 https://github.com/thepowersgang/mrustc/commit/eff9b984766f938c3a2ef7981856f9631f112e2b	src/hir/hir_ops.cpp: workaround for [-Werror,-Wreturn-type] on Clang
clang workaround	 https://github.com/thekevinday/fll/commit/caecd994419bfaf395b192d23b4ad2c4359239cf	Workaround: Clang compiler problems, add _clang_not_a_compile_time_constant_workaround_.This should also be added to the level_0 and monolithic build settings files.
clang workaround	 https://github.com/thekevinday/fll/commit/90bf698e6b183770e80d440c7457cc8446780123	Workaround: Clang compiler problems, add _clang_not_a_compile_time_constant_workaround_ define.CLang fails to handle this well and errors out with: "initializer element is not a compile-time constant".Provide a custom define _clang_not_a_compile_time_constant_workaround_ to be used as a work-around for the problematic CLang compiler.
clang workaround	 https://github.com/tewk/MINGW-packages/commit/bb822c43ffcce3cb861d4e61b6662de322606267	coin: limit GCC bug workaround to MINGW32clang doesn't know about that flag.
clang workaround	 https://github.com/tewk/MINGW-packages/commit/8e147a357d24ee197b3aaa0bd18b7a3d66d87e46	aws-c-common: Update to 0.6.11* Remove workarounds for clang and werror, changed in upstream.* Add workaround for non-ascii file names in tests directory.
clang workaround	 https://github.com/tewk/MINGW-packages/commit/88bdcf27ce9db4737ed673124dbebe283b6a4c61	drmingw: Fix build for clangenable clang32add libssp depsworkaround cmake
clang workaround	 https://github.com/tewk/MINGW-packages/commit/5a1fc78f1ff7d88f880afd2dfeaa7e8a1ad7991f	python-glcontext: Udpate to 2.3.4Add workaround for clang compiler error
clang workaround	 https://github.com/tewk/MINGW-packages/commit/3d033bf31e3cb07be31476054a4679c05285c4a8	flang: always build with clang and link with lld.It depends on clang anyway, and 64-bit GCC is giving errors about objectfiles being too big.  Clang has a workaround for the 10M COFF stringtable limit, but binutils doesn't seem to be aware of it, so link withLLD.
clang workaround	 https://github.com/termux-desktop/x11-packages/commit/324ca39373b66403533f860cd574ede2d3711deb	emacs-x: remove setjmp workaround for 32bit arches@xtkoba pointed out that this was due to a clang bug, which should befixed in the libllvm that is shipped with ndk-r23:https://github.com/termux/termux-packages/pull/7473
clang workaround	 https://github.com/termux/x11-packages/commit/324ca39373b66403533f860cd574ede2d3711deb	emacs-x: remove setjmp workaround for 32bit arches@xtkoba pointed out that this was due to a clang bug, which should befixed in the libllvm that is shipped with ndk-r23:https://github.com/termux/termux-packages/pull/7473
clang workaround	 https://github.com/termux/termux-packages/commit/67babc6702ce74e7565141447f774f39e0fa5757	emacs: remove setjmp workaround@xtkoba pointed out that this was due to a clang bug, which should befixed in the libllvm that is shipped with ndk-r23:https://github.com/termux/termux-packages/pull/7473#issuecomment-913555494
clang workaround	 https://github.com/termux/termux-packages/commit/5c443178084249a728e0854acc9d8021bb98980e	emacs-x: remove setjmp workaround for 32bit arches@xtkoba pointed out that this was due to a clang bug, which should befixed in the libllvm that is shipped with ndk-r23:https://github.com/termux/termux-packages/pull/7473
clang workaround	 https://github.com/tenzir/vast/commit/5c1bcaf4f73cafb0eece75415d134d754a90f0b7	Add separate apply overloads for long for clangFor a reason we do not quite understand clang treats long and unsignedlong as separate types from int64_t and uint64_t respectively, so thisserves as a workaround for that.
clang workaround	 https://github.com/tdlib/td/commit/ac8ccaf9703ba016015a7187e74891f751c944e9	Workaround clang 3.4 warning.
clang workaround	 https://github.com/tdlib/td/commit/ac5e1960f9c06ff186779111f618821d623f758f	Workaround clang 3.4 bug.
clang workaround	 https://github.com/tangalbert919/arch-chromium-canary/commit/556aa2844b00e91bb8206ddf6ccc72464e203050	Add patch to remove unknown compiler flagClang 13 does not recognize -no-opaque-pointers, and it is unclear if Clang14 or 15 will be able to, since neither are currently supported by Arch Linux.Remove this flag for now.Remove the orchestrator patch while we are at it. We will use Gentoo'sworkaround instead.
clang workaround	 https://github.com/tai/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/swift-project/pilotclient/commit/916448ef6a7bd91104cfec71dcad3370b43463a9	[Clang][Windows] Remove workarounds
clang workaround	 https://github.com/Swamoy14/build_soong/commit/4f45da0605538edf95f0a2e2219d83b25aaf9bb6	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/SUSE/kernel/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/SUSE/kernel/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/SuperElastix/elastix/commit/a1d53a7e8a79178ead57aa821e8c50ad151d5715	COMP: Workaround "no type named 'JacobianW...' [clang-diagnostic-error]"LLVM 13.0.0 Clang-Tidy said:> elxTransformBase.hxx(1259): error: no type named 'JacobianWriterType' in 'elastix::TransformBase<elastix::ElastixTemplate<itk::Image<float, 2>, itk::Image<float, 2>>>' [clang-diagnostic-error]Apparently, it does not like a member function of a local class to use a type outside the class.Fixed by removing `JacobianWriterType` (anywhere anyway, also where it didn't really harm) and adding helper type alias, `PrivateJacobianImageType`.
clang workaround	 https://github.com/sujaykumarh/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/SubhenduMishra29/blendercompatibe/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/strake/ghc/commit/c273c5f40d15b24f636327b4bdfcd980173e264b	ghc-prim: Reduce scope of Clang sync_fetch_and_nand workaroundAs described in https://bugs.llvm.org/show_bug.cgi?id=8842, Clangremoved the __sync_fetch_and_nand builtins due to inconsistency in GCC'sbehavior in 2010.  However, GCC has since clarified the behavior oftheir builtins and consequently Clang re-added them in 2014.Consequently this workaround should no longer be necessary.Test Plan: Validate building with ClangSubscribers: rwbarton, thomie, carterDifferential Revision: https://phabricator.haskell.org/D4480
clang workaround	 https://github.com/storypku/bazel-galaxy/commit/087f7ad76e1528e09776ea52b832675e046413a5	Bazel: updated bazelrc and workaround tcmalloc build error for clang
clang workaround	 https://github.com/StollD/linux-fedora/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/StollD/linux-fedora/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/starfive-tech/meta-starfive/commit/a23b865ebdf5e6ea38ad73fe04847feaee7767c7	dubhe: Update Clang/LLVM versionUpdated Clang/LLVM to support full B v1.0 extension and V extension.Currently there is a minor workaround for compiler-rt to move thelibclang_rt.builtins.a as libclang_rt.builtins-riscv64.a in a differentdirectory.Signed-off-by: Jun Yuan Tan <junyuan.tan@starfivetech.com>
clang workaround	 https://github.com/starfive-tech/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/stan-dev/math/commit/006dac78b233a3bb6b667ee40fc95f0f324e039e	clang workaround
clang workaround	 https://github.com/sstsai/sonda/commit/00d06b5f101321ac6d806352a208679b5c3461e1	Squashed 'extern/boost/config/' changes from 088b79a0c..e108255ffe108255ff Merge branch 'develop'fc4e48a91 Merge pull request #411 from boostorg/msvc_20220c21be040 Correct two phase lookup config for msvc-14.3.77df5deb6 Configuration update for msvc-2022.ad40eb581 Merge pull request #410 from sdarwin/metae12a9c522 Update metadata0b62f7d5a Merge branch 'develop'037a9b4d2 Merge pull request #409 from boostorg/vs2022_ci1aa177da0 Change VS cxxstd=20 to cxxstd=latest64bf41929 Add Visual Studio 2022 runner.57f06834e Merge pull request #405 from ohhmm/develop528db2c58 Merge pull request #408 from boostorg/atomic_macros7cc7f9400 Update for present, but broken <concepts> on latest MacOS clang.35c4a13e6 Print out <atomic> macros.b12d44fc7 Disable __int128 on CUDA device code.1e5f50939 Add first nvcc github action. (#407)2fdfd43e2 Fix for clang CUDA generation, fixes https://github.com/boostorg/config/issues/297f34bcff86 Add VC143 toolset8f05b6457 Merge branch 'develop'85292621e Add emscripten testing and support. (#403)0d95a7405 Merge pull request #398 from boostorg/issue336163599973 Update nodiscard attribute: It's not supported on functions pre-c++11 even if __has_cpp_attribute indicates it is supported. Also update test case. Fixes https://github.com/boostorg/config/issues/336.fac8ba93c Merge pull request #397 from boostorg/codecvt88866861d MSVC update that handled deprecation of <codecvt> and availability of <stop_token>. See also https://github.com/boostorg/config/issues/391.f1b2746fb Merge pull request #395 from boostorg/mclow-patch-38df65862c Fix typo01f00de73 Bump version to 1.78.047614564e Merge pull request #393 from boostorg/issue39276d4eaf4b Patch for noinline attribute on the HIP compiler. Fixes https://github.com/boostorg/config/issues/392.c3de80c2e Merge pull request #387 from boostorg/issue382a8bdf6ae2 Merge pull request #388 from boostorg/gcc4-4-fixes42cff9687 Try and fix gcc-4.4 -fno-rtti failure.73557f776 Correct boost_no_ctype_functions.ipp for C++20. See https://github.com/boostorg/config/issues/382.cfc6545ce Merge pull request #385 from boostorg/pr/boost-clang-versioneb3a0a98a Merge pull request #380 from xantares/mingw_tlsb80c25f47 Print __apple_build_version__ in config_info8595667b3 Fix spelling of __APPLE__a5b2dbdcf Merge pull request #384 from boostorg/pr/detail-workaround-guardf1b4a51ce Merge pull request #383 from boostorg/pr/clang-major-workaround098ca4a3c Document BOOST_CLANG_VERSION0148ea5ea Print BOOST_CLANG, BOOST_CLANG_VERSION in config_info1e63c7729 Define BOOST_CLANG_VERSION_WORKAROUND_GUARDf6fdfb929 Define BOOST_CLANG_VERSIONe52aa5865 Update detail/workaround.hpp include guard9e8099384 Define __clang_major___WORKAROUND_GUARD98c3ac815 Allow thread_local on mingw with gcc>=11git-subtree-dir: extern/boost/configgit-subtree-split: e108255ffb5d2557ed3398b3fc575a2e9fd434cc
clang workaround	 https://github.com/SquallATF/mingw-w64/commit/bbf8ca00fb848dd5b56d804248ab52bfe455c7a6	headers: Enable WIDL_EXPLICIT_AGGREGATE_RETURNS on arm/aarch64 tooWhile clang does match MSVC with regards to aggregate returns, whenrun in MSVC mode, it matches GCC when run in mingw mode - and thesame behaviour extends to arm/aarch64 too.Thus, this workaround needs to be enabled on all architectures,not only on x86.Signed-off-by: Martin Storsj閺?<martin@martin.st>
clang workaround	 https://github.com/sprasad-microsoft/smb3-kernel-client/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/sprasad-microsoft/smb3-kernel-client/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/SpiceOS-Beta/android_build_soong/commit/47c6d7a13faa1044b0c525583388ec813c7265e5	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Pranav Vashi <neobuddy89@gmail.com>Signed-off-by: Anush02198 <Anush.4376@gmail.com>
clang workaround	 https://github.com/SpadesX/SpadesX/commit/02da116c033d5171df43bb439bb8cb1268dafbd1	Types.h: Make LOG_X compatible with ClangThe previously used ##__VA_ARGS__ is usedin macros when normal __VA_ARGS__ cant be.Such as removing remaining , if argumentsare empty.But ## is a GNU extension and Clang wouldcomplain about that fact with a warning.And since we have warnings as errors.Clang would create an error.Thus we have to make variadic macros compatiblewith C99 standart and not use ##.This cant be done in a simple manner and thus aninternal (INT) LOG functions have to be used.One for printf and second for fprintf.This way we can workaround the limitationand hope that __VA_OPT__ becomes availablein the upcoming C standart release which wouldresolve this hacky workaround.
clang workaround	 https://github.com/SophistSolutions/Stroika/commit/9a76a929394806239518b656481dfe539469ee80	workaround macos clang bug - qCompiler_KeyedCollectionWithTraitsCTORNotWorkingNestedClass_Buggy
clang workaround	 https://github.com/SophistSolutions/Stroika/commit/0d06a1aec6df6175844b3c259c49061f0957ba1e	recent if constexpr bug workaround was not needed for clang++-7
clang workaround	 https://github.com/SophistSolutions/Stroika/commit/00c701861d89aefb4447ff59099604a555912e29	lose obsolete bug workarounds for https://stroika.atlassian.net/browse/STK-601 - re-enabling most ubsan usage on clang/and macos/xcode
clang workaround	 https://github.com/sonygod/blender_3/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/sobotka/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/smfrench/smb3-kernel/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/slarew/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/slarew/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/skyhuppa/Infinix-X573_kernel_test/commit/7cc2e40395bc302369e2969a3ed856a8971deff5	Revert "ANDROID: Kbuild, LLVMLinux: allow overriding clang target triple"This reverts commit 4c451dba25d2829a6a0c532196cce83e2e65b47e.AOSP's distribution of GNU binutils always had a curious target tripleprefix on the binaries.  Now that GNU binutils is deprecated for AndroidCommon Kernels, we can now remove this out of tree workaround. Nowbuilding Android kernels with LLVM matches upstream (seeDocumentation/kbuild/llvm.rst).Bug: 118439987Bug: 120440614Bug: 141693040Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Iecaa3264a440f795f2f3a44bdf74fe28ad4ed1ccSigned-off-by: Divyanshu-Modi <divyan.m05@gmail.com>
clang workaround	 https://github.com/skupperproject/skupper-router/commit/f5894a16fc02a4a32aa6ebac7d66c2c7d054c307	NO-JIRA Update Clang versions in Travis CI; remove workarounds (#1426)Keep pip install --upgrade, it prevents problems, e.g. to get precompiled wheel in Aarch64
clang workaround	 https://github.com/skanayi/node-epxorter-fork/commit/fda358a1ec010a59f37988a6c7d36bc180caa454	Workaround LLVM/Clang 11.0 for Darwin builds (#2200)LLVM/Clang 11.0 adds a `-Wundef-prefix=TARGET_OS_` build flag whichbreaks this build flag.Signed-off-by: Ben Kochie <superq@gmail.com>
clang workaround	 https://github.com/sinkap/linux-krsi/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/sherpa/sherpa/commit/fa6b6a821aa4e38bf7964143c1259566a309c9ea	Modified region code to remove implicit prototype errorChanges to remove build error or clang:     regparser.y:629:5: error: implicit declaration of function 'regYYrestart' is      invalid in C99 [-Werror,-Wimplicit-function-declaration]and remove the workaround added to docs/install.rst in #1142.The changes coincide with CIAO region lib bug fix SL-251.
clang workaround	 https://github.com/shawnxiaos/nodeexporter/commit/fda358a1ec010a59f37988a6c7d36bc180caa454	Workaround LLVM/Clang 11.0 for Darwin builds (#2200)LLVM/Clang 11.0 adds a `-Wundef-prefix=TARGET_OS_` build flag whichbreaks this build flag.Signed-off-by: Ben Kochie <superq@gmail.com>
clang workaround	 https://github.com/Setya-code/pdns/commit/5383ab20e31d7b1dc52ee221d2daef92d583637d	Merge pull request #11176 from omoerbeek/dnsdist-workaround-openbsd-compiler-bugdnsdist: Work around a compiler bug seen on OpenBSD/amd64 using clang-13
clang workaround	 https://github.com/SerenityOS/serenity/commit/48687c3fbb3083d364b1257c3c000e4860b2fb48	Tests: Remove Clang workaround from TestSourceLocationClang 13 now correctly handles `__builtin_FILE()` and`-ffile-prefix-map` being specified together, so this test should fullypass.
clang workaround	 https://github.com/SerenityOS/serenity/commit/4566387ba5bc6f8b0907a1e5fb3f097435b89d0f	AK: Add workaround for clang-format 12 problems with concepts
clang workaround	 https://github.com/SeokWooo/fmt/commit/3e7a29cc9221f7c595c8fc322328d06e4a0bbd9e	Workaround clang/gcc incompatibility
clang workaround	 https://github.com/sentenai/node_exporter/commit/fda358a1ec010a59f37988a6c7d36bc180caa454	Workaround LLVM/Clang 11.0 for Darwin builds (#2200)LLVM/Clang 11.0 adds a `-Wundef-prefix=TARGET_OS_` build flag whichbreaks this build flag.Signed-off-by: Ben Kochie <superq@gmail.com>
clang workaround	 https://github.com/scp-fs2open/fs2open.github.com/commit/9ab7a4626a5e5948028517694687db956d54fef3	Fix nested and animated submodel collisions (#4065)* Calculate per-frame rotation axis* function prototypes* Add new submodel localization functions* Fix collision detection for moving submodels* Remove offending assert* Add safeguard for stopped animations* Fix last frame speed calc* Fix childs with parent submodel rotations* Fix Warnings* Clang Bug Workaround* clang tidy* Incorporate FeedbackCo-authored-by: Goober5000 <ipw47@mailbox.org>
clang workaround	 https://github.com/scipp/scipp/commit/ed8cb632cb5f8e977d41dfc7fce9e88718181715	Remove old apply-clang workaround
clang workaround	 https://github.com/sbates130272/linux-p2pmem/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/sbates130272/linux-p2pmem/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/Sarisan/WSL2-Linux-Kernel/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/sarce1979/php/commit/356ef5bd0e871d58c274110d3689870b8cb264b9	Fix CLANG/RELEASE build (this is a workaround for probable bug in CLANG)
clang workaround	 https://github.com/sapphire1896/serenity/commit/48687c3fbb3083d364b1257c3c000e4860b2fb48	Tests: Remove Clang workaround from TestSourceLocationClang 13 now correctly handles `__builtin_FILE()` and`-ffile-prefix-map` being specified together, so this test should fullypass.
clang workaround	 https://github.com/sapphire1896/serenity/commit/4566387ba5bc6f8b0907a1e5fb3f097435b89d0f	AK: Add workaround for clang-format 12 problems with concepts
clang workaround	 https://github.com/Sapana-Khemkar/dotnet-runtime/commit/78f4a7de7e89ddefa88f9e9da7604ecb5c58d3b7	Workaround clang crash due to large array assignment (#62675)
clang workaround	 https://github.com/SAP/project-foxhound/commit/434ed284454a2a5bf941c4bd6fddbc445a3dec13	Bug 1736502 - Work around clang trunk changes that break our clang-trunk build. r=andiShort of solving this by fully embracing the monorepo build and removingthe projects/ workarounds (which will also require a compat more witholder clang versions we still build with the same script), we can solvethe bustage with a small hack.Differential Revision: https://phabricator.services.mozilla.com/D131458
clang workaround	 https://github.com/SanyaWaffles/WIGZDoom/commit/fe1514ce0440b19e398372e3ddb95142a87f775c	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/sailfishos-mirror/qtbase/commit/eb4206ba236fe333a4e77cf122df96daecf2b40b	tst_qmetatype: remove the previous clang-arm workaroundLet's see whether splitting the TUs has made the test amenable to becompiled on Clang for ARM again.Pick-to: 6.3Change-Id: I6bf1e31189f5058dc393adefabaf3014dce4bcf2Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
clang workaround	 https://github.com/sailfishos-mirror/gecko-dev/commit/434ed284454a2a5bf941c4bd6fddbc445a3dec13	Bug 1736502 - Work around clang trunk changes that break our clang-trunk build. r=andiShort of solving this by fully embracing the monorepo build and removingthe projects/ workarounds (which will also require a compat more witholder clang versions we still build with the same script), we can solvethe bustage with a small hack.Differential Revision: https://phabricator.services.mozilla.com/D131458
clang workaround	 https://github.com/sailfishos-mirror/drm/commit/eaf234c1489f53035fba1698c1a27781f5755be6	meson: switch to cc.get_supported_argumentsThis is generally faster, as meson is able to parallelize the checks forus.This also removes the workaround for checking gcc/clang -Wno-*arguments, which meson now handles internally so we don't need to handleit ourselves.Signed-off-by: Dylan Baker <dylan@pnwbakers.com>Reviewed-by: Simon Ser <contact@emersion.fr>
clang workaround	 https://github.com/sailfishos-mirror/bind9/commit/ae508c17bcf9a5c67a5c889f79624449f1e998d6	Remove workaround for ancient clang versions (<< 3.2 and << 4.0.1)Some ancient versions of clang reported uninitialized memory use falsepositive (see https://bugs.llvm.org/show_bug.cgi?id=14461).  Since clang4.0.1 has been long obsoleted, just remove the workarounds.
clang workaround	 https://github.com/sagemath/sagetrac-mirror/commit/9619910ea2d4e308d958ddb793b7ff4e95411a5a	remove obsolete workaroundit actually breaks building Pillow with Homebrew's clang/llvm
clang workaround	 https://github.com/sagemath/sagetrac-mirror/commit/87a2e5724f240d8bb4127771bc187627809aa816	Trac #32207: homebrew  llvm / clang - followup to #30835in #30835 problems with using clang(++) from Homebrew on macOS werefound* Pillow build broken* PATH needs to be adjusted (?)After Pillow update to 9.0.1 the only problem is caused by an obsoleteworkaroundfor Darwin/XCode in Pillow's spkg-install. The branch here removes it.URL: https://trac.sagemath.org/32207Reported by: dimpaseTicket author(s): Dima PasechnikReviewer(s): John Palmieri
clang workaround	 https://github.com/sagemath/sage/commit/9619910ea2d4e308d958ddb793b7ff4e95411a5a	remove obsolete workaroundit actually breaks building Pillow with Homebrew's clang/llvm
clang workaround	 https://github.com/sagemath/sage/commit/87a2e5724f240d8bb4127771bc187627809aa816	Trac #32207: homebrew  llvm / clang - followup to #30835in #30835 problems with using clang(++) from Homebrew on macOS werefound* Pillow build broken* PATH needs to be adjusted (?)After Pillow update to 9.0.1 the only problem is caused by an obsoleteworkaroundfor Darwin/XCode in Pillow's spkg-install. The branch here removes it.URL: https://trac.sagemath.org/32207Reported by: dimpaseTicket author(s): Dima PasechnikReviewer(s): John Palmieri
clang workaround	 https://github.com/saganatt/O2Physics-correlations/commit/3a6b3a43817337e79224ea06d174896778f3fef6	V0 analysis - Armenteros & PID cuts, Run2/Run3 switch (#410)* lambdakzeroanalysis(MC) - Armenteros, PID cuts and QA mass axes configurable* cleaning up TaskNames* lambdakzeroanalysis(MC), cascadeanalysis - add run2-run3 switches as workaround until centV0M is filled for run3* cascadeanalysis histRegistry, lambdaAnalysis armenterosParameter, Clang fixes* better task names, units on axes, clang fixes, delete forgotten histograms in lambdaMC* lambdakzeroanalysis - tpc pid use tpcNSigma, configurable cut changed to float
clang workaround	 https://github.com/Ryan-rsm-McKenzie/bsa/commit/d88fce17274bdfe701e9c193fa26f3b789c03810	add `variant::emplace` workaround for clang-13
clang workaround	 https://github.com/RyanHir/toolchain-builder/commit/d58f3cb2b631e40e1ae4628ac15d320f2422e6a9	[GCC 7-10; Darwin] Workaround genconditions bug with M1.Although the conditions that are referenced within the patch filesshould not be doing anything withApple Clang 13, it is able to fix the compile failure when the M1 isthe host.This patch was originally found athttps://github.com/crosstool-ng/crosstool-ng/pull/1638 which pulls fromhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=92061. This patch was meantto work around a bug in Clang 9 or lower, but fixes a Clang 13 issue.It gets weirder because the core issue is not present with GCC 11 eventhough the contents of the patch are not applied.
clang workaround	 https://github.com/rust-lang/rust-bindgen/commit/69ee6fb243f56648a66c492f5b7395bc37d59f06	parser: Simplify parse_macro for clang 4.0+Here we delete a workaround that is no longer needed.
clang workaround	 https://github.com/RPCS3/rpcs3/commit/c1de0bc28c5e1d03ad6d5a807288283598d31ed1	workaround for clang compilation
clang workaround	 https://github.com/RPCS3/rpcs3/commit/aaac4c1bdee66b0053bf86895575e6177c61fb7b	Clang workaround for c++20 non-compliance
clang workaround	 https://github.com/rosqual/rosdiscover-cxx-recover/commit/1e6deb670e44430191059add3ce6960652b8babe	added clang header workaround
clang workaround	 https://github.com/ros-planning/moveit2/commit/419db3b3b0245e9857e212ef86e441e60a4b10e4	Compilation fixes for Jammy and bring back Rolling CI (#1095)* Use jammy dockers and clang-format-12* Fix unused depend, and move to python3-lxml* add ompl to repos, fix versions and ogre* Remove ogre keys* Fix boolean node operator* Stop building dockers on branch and fix servo null pointer* update pre-commit to clang-format-12 and pre-commit fixes* clang-format workaround and more pre-commit fixes
clang workaround	 https://github.com/rollbear/trompeloeil/commit/73be1f03f84108ed5b9ae0d510d576f6b799ccde	Use right #ifdef's for selecting preprocessor workarounds on clang-msvc
clang workaround	 https://github.com/rohankumardubey/serenity/commit/48687c3fbb3083d364b1257c3c000e4860b2fb48	Tests: Remove Clang workaround from TestSourceLocationClang 13 now correctly handles `__builtin_FILE()` and`-ffile-prefix-map` being specified together, so this test should fullypass.
clang workaround	 https://github.com/rohankumardubey/serenity/commit/4566387ba5bc6f8b0907a1e5fb3f097435b89d0f	AK: Add workaround for clang-format 12 problems with concepts
clang workaround	 https://github.com/robotology/robotology-superbuild/commit/99407199d99232938f823b1d6e9087cea8ffd1ff	Merge pull request #968 from robotology/fix966Add workaround for gazebo-yarp-plugins internal compiler error by switching to clang
clang workaround	 https://github.com/roberteg16/Quark/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/RobertCNelson/linux-stable-rcn-ee/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/RobertCNelson/linux-stable-rcn-ee/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/roapsyme/kernel_xiaomi_vayu/commit/808cc4b90c868779b96e8df5ac227fbba6e779cb	arch: arm64: add empty bitops.S file to avoid regressionsFor some bizarre reason without this file we're getting a heavyreduction in bitops operations performance, resulting in callbenchread time increase from ~5.5k ns to 8.9k nsregardless of toolchain used (Clang-10/GCC-10.2).'dd if=/dev/zero of=/dev/null count=10000000' results w/o this workaround:GCC LTO
clang workaround	 https://github.com/riscv-android-src/platform-external-perfetto/commit/fee7ff542546e9708decc8618ee519d92ac90b4e	tracing: Add another workaround for a Clang/LLVM bug am: 62900eb9baOriginal change: https://android-review.googlesource.com/c/platform/external/perfetto/+/1808738Change-Id: I410e5b7b24a4705e29c3a0e61791d52c17fbb2da
clang workaround	 https://github.com/riscv-android-src/platform-external-perfetto/commit/800772c663d26151ae088896097475af5b15e29b	tracing: Add another workaround for a Clang/LLVM bug am: 62900eb9ba am: fee7ff5425Original change: https://android-review.googlesource.com/c/platform/external/perfetto/+/1808738Change-Id: I58fb4d296397e8b23844c3db1e6f04585b46241b
clang workaround	 https://github.com/richardbiely/gaia-ecs/commit/1fc2a4aa5706d08e3f5d29fba069e4072fe689e9	Workaround for clang 8 bug with find_first_of in constexpr context
clang workaround	 https://github.com/rgnwall/FreeBSD-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/reupen/columns_ui/commit/50b1582d4cd7b0250177ca56bff736519b6ae301	Fix Clang compilationThis gets Clang compilation working again (albeit with a couple of workarounds).
clang workaround	 https://github.com/repinger/exynos9611_m21_kernel/commit/b229586eb6b66807efe3934c64fd9446a0ab31be	ANDROID: enable ARM64_ERRATUM_843419 by default with LTO_CLANGThis reverts a workaround we needed with an old version of thetoolchain.Bug: 145210207Change-Id: If28b9f97da21c046adff7d5a58943a4fc06cb390Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
clang workaround	 https://github.com/renatoalencar/php-heart/commit/356ef5bd0e871d58c274110d3689870b8cb264b9	Fix CLANG/RELEASE build (this is a workaround for probable bug in CLANG)
clang workaround	 https://github.com/rehsack/meta-openembedded/commit/ec2cfccc2a4f3141a80ba1cf3b439f06b39c470a	iotop: Use lld with clang on armBFD linker is crashing when using clang, workaround it by always usinglld when using clang on armSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/rehsack/meta-openembedded/commit/d49282245ce0ed88fdf3b319588033093f07bd3c	jemalloc: Fix build with glibc 2.35+clangCompiler crashes when using glibc 2.35, it should be fixed in clang butuntil then workaround it here.Signed-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/rehsack/meta-openembedded/commit/32d397a06d4cd4b6c05dbacc473d06e84283c1c4	protobuf: Disable tailcall on mips/clangClang13 crashes and lets workaround it for nowSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/RedemptionEngine/redemption/commit/fe1514ce0440b19e398372e3ddb95142a87f775c	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/434ed284454a2a5bf941c4bd6fddbc445a3dec13	Bug 1736502 - Work around clang trunk changes that break our clang-trunk build. r=andiShort of solving this by fully embracing the monorepo build and removingthe projects/ workarounds (which will also require a compat more witholder clang versions we still build with the same script), we can solvethe bustage with a small hack.Differential Revision: https://phabricator.services.mozilla.com/D131458
clang workaround	 https://github.com/rAzoR8/SpvGenTwo/commit/df081892581c8744cd31fa8cba7fbfe2e427db25	try to workaround default argument followed by param pack apple clang bug
clang workaround	 https://github.com/randombit/botan/commit/cb078d85004b5b635335bd412638562d636c50a0	workaround a miscompilation issue in clang 12 (XCode 13)
clang workaround	 https://github.com/randombit/botan/commit/af4744e9135d329c864c9faffb103c3a22c13629	Cleanup SHA-3 Clang workaround
clang workaround	 https://github.com/randombit/botan/commit/805bf8fff67f1b2b737ab83a15ffcd11e168988c	Merge GH #2860 Cleanup SHA-3 Clang workaround
clang workaround	 https://github.com/randombit/botan/commit/2dd45b5420a6abca3e3be769db28cf812da1e13a	Merge GH #2803 Workaround miscompilation of SHA-3 in Clang 12 + XCode 13
clang workaround	 https://github.com/rakista112/ArkCITest/commit/d9681d5f41d49a0bc89fead80639301430153660	needed workaround on CI linux-clang
clang workaround	 https://github.com/rakista112/ArkCITest/commit/4f02025563bced48a45283ec24f34fa47c265177	workaround on linux-clang ci to enforce clang 10
clang workaround	 https://github.com/rafaeljw/linux-pm/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/qxmpp-project/qxmpp/commit/102493de1743d6b010d0274635da37ea3f434473	tests: E2eeMetadata: Workaround compile error with clang 13
clang workaround	 https://github.com/quyykk/es-lsp/commit/e28d32c9a0580fe90c4999d0d0b930d4fb593058	Workaround for clang missing a C++20 DR solution.
clang workaround	 https://github.com/quotient-im/libQuotient/commit/dc458f3952b0005a0feb63fbebed11ae9ad5a062	Rely on GTAD 0.9 that calls clang-format itselfThere was that ugly workaround in CMakeLists.txt to produce the list offiles to be formatted and making a separate build target forclang-format. As GTAD 0.9 calls clang-format itself this workaround isno more necessary; generate-unformatted-api and format-api build targetsare now gone, and clang-format is no more one-build-system-configurationbehind GTAD on the list of files to handle.
clang workaround	 https://github.com/quotient-im/gtad/commit/bddb527c7d94fb725b0fe89242a2e0f728c0a85a	Invoke clang-format from GTADThis is to address a long-standing issue with having to additionallyformat generated source files outside of GTAD. libQuotient has a fairlyugly workaround in its CMakeLists.txt for that.
clang workaround	 https://github.com/QuantGen/BGDataExt/commit/24852ae58f5ec4181545f17792cbf95edf369167	Remove unused OpenMP supportclang on Mac doesn't support OpenMP without workarounds.
clang workaround	 https://github.com/QtPiDeck/QtPiDeckCommon/commit/9f2d1c017d82f88f2bd9493b3cae1c0f78cbc755	Rewrite internal messaging system (#133)* Rewrite internal messaging system* Fix unused variables warnings* Add msvc/qt5 workaround for QByteArray::reserve* Add missing unordered_map header include* clang-tidy* clang-tidy* clang-tidy* Fix compile warning* Remove constructors from MessageHeader* Add first test for MessageTypeMapper* Add default branch to switch* Remove unused variable* Add tests for MessageTypeMapper* clang-tidy* Return and accept QIODevice in SocketHolder* Add tests for MessageSender* Compile errors* Change data in TestMessage(qt5/qt6 char workaround)* Add MessageHeader::make* Add 1 test for MessageReceiver* Fix unused arguments warning* Change from using to constexpr bool for derived_from* Fix Utilities::derived_from usage* clang-tidy
clang workaround	 https://github.com/QtPiDeck/QtPiDeckCommon/commit/655faef832b486c5baa693d09835ebcd6c533ec5	Improve code coverage (#122)* Add ccurrent method to Application class* Fix application tests* Add tests for Application::ioc* Add tests for Connection class* Add tests for DeckDataStream* Add tests for MessageHeader* Use qs in tests* Add tests for CommandViewModel* Use template qt dependencies for Application class* Add a workaround for gcc* Remove redundant EXPORT* Add tests for Application class* Fix typo* Unused variables* Fix test failing on gcc* Clang-tidy* Clang-tidy* Add more tests* Change prop addition check* clang-tidy* Fix gcc errors* clang-tidy
clang workaround	 https://github.com/Qt-CI/qtbase/commit/eb4206ba236fe333a4e77cf122df96daecf2b40b	tst_qmetatype: remove the previous clang-arm workaroundLet's see whether splitting the TUs has made the test amenable to becompiled on Clang for ARM again.Pick-to: 6.3Change-Id: I6bf1e31189f5058dc393adefabaf3014dce4bcf2Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
clang workaround	 https://github.com/qt/qtbase/commit/eb4206ba236fe333a4e77cf122df96daecf2b40b	tst_qmetatype: remove the previous clang-arm workaroundLet's see whether splitting the TUs has made the test amenable to becompiled on Clang for ARM again.Pick-to: 6.3Change-Id: I6bf1e31189f5058dc393adefabaf3014dce4bcf2Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
clang workaround	 https://github.com/QMCPACK/qmcpack/commit/d70b82a95aa6cd1b04f7947684fa5d931a44c819	Workaround Clang complex<double/float> conversion.
clang workaround	 https://github.com/QMCPACK/qmcpack/commit/ad9b77872e2ae4f8c97a197f5e8911553ca39768	Merge pull request #3286 from quantumsteve/clang_asan_ffast-mathWorkaround test failure caused by clang, -ffast-math and santizers
clang workaround	 https://github.com/pytorch/FBGEMM/commit/135412d2646f3bd753c8f1cfd33616110bbccd27	Disable clang inline asm workaround for clang-14 and later (#861)Summary:Pull Request resolved: https://github.com/pytorch/FBGEMM/pull/861clang-14 will improve handling of inline assembly when `-masm=intel` is used (https://reviews.llvm.org/D113707)The workaround used so far used for clang will no longer be necessary for clang-14 and triggers a syntax error.Reviewed By: efiksDifferential Revision: D33553604fbshipit-source-id: d036628f1cd7deb60e0bdebee25c95a7020cb38d
clang workaround	 https://github.com/Python-for-HPC/PyOMP/commit/db5f100fe4ca252d7f392659e7da5dba10331ae7	[HIP] Remove workaround in __clang_hip_runtime_wrapper.hRemove the workaround for -fopenmp in __clang_hip_runtime_wrapper.hsince it causes device functions in HIP wrapper headers disabled whencompiling HIP program with -fopenmp.Reviewed by: Aaron Enye Shi, Jon ChesterfieldDifferential Revision: https://reviews.llvm.org/D106070
clang workaround	 https://github.com/Python-for-HPC/PyOMP/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/PXOSP-ROM/android_build_soong/commit/5b73d3d3fdb5cc16745f21faaf6ebb0c467ca0a1	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/protonplus-org/build_soong/commit/a7975b2ae3ab0f568639c08323fb07e606e9e624	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/prosyslab/sparrow/commit/886a37d836bd51f5dfe4366729a4956b511f977b	[Clang] workaround for clangml's misterious behavior
clang workaround	 https://github.com/prometheus/node_exporter/commit/fda358a1ec010a59f37988a6c7d36bc180caa454	Workaround LLVM/Clang 11.0 for Darwin builds (#2200)LLVM/Clang 11.0 adds a `-Wundef-prefix=TARGET_OS_` build flag whichbreaks this build flag.Signed-off-by: Ben Kochie <superq@gmail.com>
clang workaround	 https://github.com/projects-nexus/android_xtreme_kernel_lavender/commit/496da7df5cd0b571c2869bcd9e5f8f0ea4ac438c	arm64: sysreg: Make mrs_s and msr_s macros work with Clang and LTOClang's integrated assembler does not allow assembly macros definedin one inline asm block using the .macro directive to be used acrossseparate asm blocks. LLVM developers consider this a feature and not abug, recommending code refactoring:  https://bugs.llvm.org/show_bug.cgi?id=19749As binutils doesn't allow macros to be redefined, this change usesUNDEFINE_MRS_S and UNDEFINE_MSR_S to define corresponding macrosin-place and workaround gcc and clang limitations on redefining macrosacross different assembler blocks.Specifically, the current state after preprocessing looks like this:asm volatile(".macro mXX_s ... .endm");void f(){
clang workaround	 https://github.com/projects-nexus/android_kernel_xiaomi_lavender-LTO/commit/6d16f8147c351d7eefd7a65ae8c5a46860d225d0	arm64: sysreg: Make mrs_s and msr_s macros work with Clang and LTOClang's integrated assembler does not allow assembly macros definedin one inline asm block using the .macro directive to be used acrossseparate asm blocks. LLVM developers consider this a feature and not abug, recommending code refactoring:  https://bugs.llvm.org/show_bug.cgi?id=19749As binutils doesn't allow macros to be redefined, this change usesUNDEFINE_MRS_S and UNDEFINE_MSR_S to define corresponding macrosin-place and workaround gcc and clang limitations on redefining macrosacross different assembler blocks.Specifically, the current state after preprocessing looks like this:asm volatile(".macro mXX_s ... .endm");void f(){
clang workaround	 https://github.com/ProjectIgnis/EDOPro/commit/82ec04b6aaedf6696461ff5914b30fe69eff1ed8	Add workaround to build under clang <11 (llvm 8)
clang workaround	 https://github.com/Project-Elixir/build_soong/commit/4f45da0605538edf95f0a2e2219d83b25aaf9bb6	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/ProjectBlaze/build_soong/commit/0a7543c5d0474e4cf971dd054a592183b89b2bbf	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/Prismatic-Studios/qtbase/commit/eb4206ba236fe333a4e77cf122df96daecf2b40b	tst_qmetatype: remove the previous clang-arm workaroundLet's see whether splitting the TUs has made the test amenable to becompiled on Clang for ARM again.Pick-to: 6.3Change-Id: I6bf1e31189f5058dc393adefabaf3014dce4bcf2Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
clang workaround	 https://github.com/prati0100/linux-next/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/prati0100/linux-next/commit/1aa0e8b144b6474c4914439d232d15bfe883636b	Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bugAdd a config option to guard (future) usage of asm_volatile_goto() thatincludes "tied outputs", i.e. "+" constraints that specify both an inputand output parameter.  clang-13 has a bug[1] that causes compilation ofsuch inline asm to fail, and KVM wants to use a "+m" constraint toimplement a uaccess form of CMPXCHG[2].  E.g. the test code fails with  <stdin>:1:29: error: invalid operand in inline asm: '.long (${1:l}) - .'  int foo(int *x) { asm goto (".long (%l[bar]) - .\n": "+m"(*x) ::: bar); return *x; bar: return 0; }                            ^  <stdin>:1:29: error: unknown token in expression  <inline asm>:1:9: note: instantiated into assembly here          .long () - .                 ^  2 errors generated.on clang-13, but passes on gcc (with appropriate asm goto support).  Thebug is fixed in clang-14, but won't be backported to clang-13 as thechanges are too invasive/risky.gcc also had a similar bug[3], fixed in gcc-11, where gcc failed toaccount for its behavior of assigning two numbers to tied outputs (onefor input, one for output) when evaluating symbolic references.[1] https://github.com/ClangBuiltLinux/linux/issues/1512[2] https://lore.kernel.org/all/YfMruK8%2F1izZ2VHS@google.com[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98096Suggested-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Cc: stable@vger.kernel.orgSigned-off-by: Sean Christopherson <seanjc@google.com>Message-Id: <20220202004945.2540433-2-seanjc@google.com>Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
clang workaround	 https://github.com/prati0100/linux-0day/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/Prajwal-Koirala/fuchsia/commit/2b4a448e38f1c9f5b0d581e1addb04a01dd2e92e	[starnix] Force generation of missing definesSystem header defines that are defined via calling a function are notgenerated by rust-bindings.This CL introduces a workaround by redefining these includes asconstants so that clang compute them and rust-bindings recognize them.Change-Id: I0c5a43cc6638a2c88d2a922d9ca9bcbcaca946b1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/661346Reviewed-by: Adam Barth <abarth@google.com>Fuchsia-Auto-Submit: Benjamin Lerman <qsr@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang workaround	 https://github.com/Prajwal-Koirala/fuchsia/commit/2956f19738b524808a0c609640edbbbb46d7489f	[kernel][x86] Remove <cpuid.h> inclusion workaroundPreviously, both GCC and Clang supplied <cpuid.h> without a multipleinclusion guard. This has since been fixed (as of GCC 11.2.1 and Clang14.0.0).Fixed: 64109Change-Id: I37a0f045890829eda7447c17be4c7b7f2fc41a53Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/650342Fuchsia-Auto-Submit: Joshua Seaton <joshuaseaton@google.com>Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Joshua Seaton <joshuaseaton@google.com>
clang workaround	 https://github.com/PowerDNS/pdns/commit/5383ab20e31d7b1dc52ee221d2daef92d583637d	Merge pull request #11176 from omoerbeek/dnsdist-workaround-openbsd-compiler-bugdnsdist: Work around a compiler bug seen on OpenBSD/amd64 using clang-13
clang workaround	 https://github.com/polymage-labs/mlirx/commit/db5f100fe4ca252d7f392659e7da5dba10331ae7	[HIP] Remove workaround in __clang_hip_runtime_wrapper.hRemove the workaround for -fopenmp in __clang_hip_runtime_wrapper.hsince it causes device functions in HIP wrapper headers disabled whencompiling HIP program with -fopenmp.Reviewed by: Aaron Enye Shi, Jon ChesterfieldDifferential Revision: https://reviews.llvm.org/D106070
clang workaround	 https://github.com/polymage-labs/mlirx/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/polymage-labs/mlirx/commit/3557c7c1226fa222499a2b9d4cbc36dfeda6f53c	[libc++] Remove workarounds for [[nodebug]] not working properly on typedefs in older ClangsClang used to support [[nodebug]] everywhere except on typedefs. Sincewe don't support such old Clangs anymore, we can get rid of _LIBCPP_NODEBUG_TYPEin favour of always using _LIBCPP_NODEBUG.Differential Revision: https://reviews.llvm.org/D108996
clang workaround	 https://github.com/pocl/pocl/commit/594e9211eededd40c2614c6209250200fd151c28	LLVM 13: workaround undefined "reserve_id_t" in Clang's opencl-c.h header
clang workaround	 https://github.com/pochenchen42/linux-dev/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/pmed/v8pp/commit/97fc5cc536477ca041463de4cef97cc415ddd8c5	fix `detail::is_sequence`, `is_mapping` metafunctions for clangClang doesn't accept template template parameters with default templatearguments. Workaround this with additional `is_sequence_impl`,`is_mapping_impl` template classes and using aliases for them.
clang workaround	 https://github.com/PKRoma/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/PKRoma/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/PixysOS/build_soong/commit/d0f0c688407bb3887435a1ec86b6442062e1dd22	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang workaround	 https://github.com/PixelPlusUI-SnowCone/build_soong/commit/064d1d0c25b4bfc22bdb6a170123dca51b8134d4	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/PixelPlusUI/build_soong/commit/6735c6feba75290effc2adcd11f65ecf3063d0c6	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/PixelExperience-Devices/kernel_oneplus_msm8998/commit/82d9b937ecf3e43a0f5c36e6493c1686db56dfb0	tree: Remove unnecessary GCC_VERSION invocationsUnnecessary in our case where we compile with Clang and latter GCC versions of which have likely fixed the issues the source code is trying to workaround.Signed-off-by: ederekun <sedrickvince@gmail.com>Change-Id: Ic07855d6141179a5715cb7c644dbd058f4946451
clang workaround	 https://github.com/PixelExperience-Devices/kernel_motorola_msm8998/commit/79f171132c99d1c4402696df7d7b8b5eb8713da0	tree: Remove unnecessary GCC_VERSION invocationsUnnecessary in our case where we compile with Clang and latter GCC versions of which have likely fixed the issues the source code is trying to workaround.Signed-off-by: ederekun <sedrickvince@gmail.com>Change-Id: Ic07855d6141179a5715cb7c644dbd058f4946451
clang workaround	 https://github.com/PixelExperience/build_soong/commit/21aa390c8bcc9ffdfdbacf01b7cd84fba7387712	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/PixelDust-Twelve/android_build_soong/commit/f731759681b4750c0f382159a5be2d612a117c35	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: spezi77 <spezi7713@gmx.net>
clang workaround	 https://github.com/pixeldust-project-caf/android_build_soong/commit/d65f0c33dce586421e1633fa8bb5b1c79e99a932	Revert "Remove workaround for Qualcomm Kryo 385"This reverts commit 6603cce710cd9e596e240e1b6276b7e93574d5af.This wasn't a good idea without having the specific clang toolchain handy!Signed-off-by: spezi77 <spezi7713@gmx.net>
clang workaround	 https://github.com/pixeldust-project-caf/android_build_soong/commit/6603cce710cd9e596e240e1b6276b7e93574d5af	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: spezi77 <spezi7713@gmx.net>
clang workaround	 https://github.com/php/php-src/commit/356ef5bd0e871d58c274110d3689870b8cb264b9	Fix CLANG/RELEASE build (this is a workaround for probable bug in CLANG)
clang workaround	 https://github.com/phillipmacon/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/pgrAm/JSD-OS/commit/89210304e5fa5e95db2cebc1bd827487b5095633	refactor filesytem stuff & clang bug workaround
clang workaround	 https://github.com/pfsense/FreeBSD-src/commit/459bffca057e20ab94b7db87b3369ffe512b7a1a	Reapply r349876:Apply a workaround to be able to build clang 8.0.0 headers with clang3.4.1, which is still in the stable/10 branch.It looks like clang 3.4.1 implements static_asserts by instantiating atemporary static object, and if those are in an anonymous union, itresults in "error: anonymous union can only contain non-static datamembers".To work around this implementation limitation, move the static_assertsin question out of the anonymous unions.This should make building the latest stable/11 from stable/10 possibleagain.Reported by:
clang workaround	 https://github.com/pfsense/FreeBSD-src/commit/361dbd2fbacfd14d1168733f566a357a6c70b35f	Remove -mlong-calls vhen building arm libraries and llvm.Clang from 9.0.0 onwards already has the necessary relocation rangeextenders, so this workaround is no longer needed (it produces longerand slower code). Tested on real hardware, and in cross-compileenvironment.Submitted by:
clang workaround	 https://github.com/pfsense/FreeBSD-src/commit/2abf37d5cecb16d8abffd5a6dedafba17496196e	Retire CLANG_NO_IAS34CLANG_NO_IAS34 was introduced in r276696 to allow then-HEAD kernels tobe built with clang 3.4 in FreeBSD 10.  As FreeBSD 11 and later includesa version of Clang with a sufficiently capable integrated assembler wedo not need the workaround any longer.Sponsored by:
clang workaround	 https://github.com/pfsense/FreeBSD-src/commit/189b62e0bd775932e370dbfaf42ddd50745c2edb	Reapply r349876:Apply a workaround to be able to build clang 8.0.0 headers with clang3.4.1, which is still in the stable/10 branch.It looks like clang 3.4.1 implements static_asserts by instantiating atemporary static object, and if those are in an anonymous union, itresults in "error: anonymous union can only contain non-static datamembers".To work around this implementation limitation, move the static_assertsin question out of the anonymous unions.This should make building the latest stable/11 from stable/10 possibleagain.Reported by:
clang workaround	 https://github.com/pfsense/FreeBSD-ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/pfsense/FreeBSD-ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/pfsense/FreeBSD-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/peterzuger/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/peterzuger/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/PerlFFI/FFI-Platypus-Type-PtrObject/commit/0cb935827a1b25a1d8d21c50b4e8c51d067b0509	workarounds for macos bigsur clang
clang workaround	 https://github.com/percona/percona-xtradb-cluster/commit/89711392eebbeb4907abe5fc75d0a5602846d181	Bug #33217633 clang on windows build broken in InnoDBA workaround for Clang failure on Windows:https://bugs.llvm.org/show_bug.cgi?id=51538Reviewed-by: Tor Didriksen <tor.didriksen@oracle.com>
clang workaround	 https://github.com/percona/percona-xtrabackup/commit/89711392eebbeb4907abe5fc75d0a5602846d181	Bug #33217633 clang on windows build broken in InnoDBA workaround for Clang failure on Windows:https://bugs.llvm.org/show_bug.cgi?id=51538Reviewed-by: Tor Didriksen <tor.didriksen@oracle.com>
clang workaround	 https://github.com/percona/percona-server/commit/89711392eebbeb4907abe5fc75d0a5602846d181	Bug #33217633 clang on windows build broken in InnoDBA workaround for Clang failure on Windows:https://bugs.llvm.org/show_bug.cgi?id=51538Reviewed-by: Tor Didriksen <tor.didriksen@oracle.com>
clang workaround	 https://github.com/pembem22/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/pe-gm/build_soong/commit/21aa390c8bcc9ffdfdbacf01b7cd84fba7387712	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/pdidev/test_env/commit/40a1255687f62e6f8334d80b9e6fa659e1af847b	Workaround openmpi clang/gfortran -fPIC issue
clang workaround	 https://github.com/pavelkryukov/patience-sorting/commit/3ea90331d2cf539c0e6458891c4b63b6ef9e5286	Workaround Clang compilation issues
clang workaround	 https://github.com/panda-sheep/nebula-hackathon-2021/commit/368acb844a0d2ed311f754659efed649bc08be9f	Workaround to fix clang build on aarch64 (#557)
clang workaround	 https://github.com/panchoa99/ITKMirror/commit/e9b898359cb3726035627f048742f7265cd25523	Merge pull request #2472 from N-Dekker/Workaround-Clang-3.8-error-default-initialization-constCOMP: Workaround Clang 3 error default initialization const MatrixGTest
clang workaround	 https://github.com/Panchajanya1999/linux-mainline/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/openSUSE/kernel/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/OpenSC/OpenSC/commit/2f145f58047ff8f5a0eab093d7fd71d678e21c54	Workaround for broken Ubuntu Focal imageshttps://travis-ci.community/t/clang-10-was-recently-broken-on-linux-unmet-dependencies-for-clang-10-clang-tidy-10-valgrind/11527
clang workaround	 https://github.com/OpenMW/openmw/commit/1e1ebb049e71579f2250f39e380df8d1c3457f29	Workaround clang and actually erase from the vector
clang workaround	 https://github.com/OpenModelica/OpenModelica/commit/0f5d54d3f588d7ca71cf1e52f2254b76908e40bf	Fix Jenkins pipeline (#8113)A Jenkins update seems to have made restrictions to unstash. Removesymbolic links before we stash omc-clang as a workaround.
clang workaround	 https://github.com/openmaple/MapleCompiler/commit/538eb8ec2c681fa659ad6535cbc009f903e62937	Workaround clang issue of using constval vector as the 2nd argument of vector shift operators
clang workaround	 https://github.com/openmaple/MapleCompiler/commit/05b2ecc9b075b1fdbd665177cce07045ec239121	Workaround clang issue of using constval vector as the 2nd argument of vector shift operators
clang workaround	 https://github.com/OpenMandrivaAssociation/qt6-qttools/commit/75fac0ff114e1c6fed8968d822bd98796068dc1e	workaround for CMake Error at /usr/lib64/cmake/Qt6/QtBuild.cmake:389 (message):DEBUG util.py:634:    Unknown platform linux-clang
clang workaround	 https://github.com/OpenMandrivaAssociation/plasma-desktop/commit/80e6822d210b7bea144813961ddc1d549290054e	Remove workaround for fixed clang bug*
clang workaround	 https://github.com/OpenMandrivaAssociation/pimcommon/commit/3fe4f23c0d2bd20ea33b5ca03088eccaaedc2a08	Remove workaround for fixed clang bug
clang workaround	 https://github.com/OpenMandrivaAssociation/php/commit/168f05706fe3b29e061af7a276cbed366f34dff8	8.0.10, drop aarch64 gcc workaround [fixed in clang 13]
clang workaround	 https://github.com/OpenMandrivaAssociation/kwin/commit/0755b7e6b0674aa0ecf9eb42cb27b64f04ff8ff4	Remove workaround for fixed clang bug
clang workaround	 https://github.com/OpenMandrivaAssociation/kmbox/commit/3b1de0d1f8e64149c1cf0378ae4de9bfb4847f08	Remove workaround for fixed clang bug
clang workaround	 https://github.com/OpenMandrivaAssociation/kimap/commit/dbc883c9efb9cdf2bb5e642cd440a0cfc1f6c5e0	Remove workaround for fixed clang bug
clang workaround	 https://github.com/OpenMandrivaAssociation/khelpcenter/commit/4cc5c5195f90566a5a2c39c9052ee29e84ae8565	Remove workaround for fixed clang bug
clang workaround	 https://github.com/OpenMandrivaAssociation/kernel-release/commit/989be368b71ede49e77e5e38462d4b5271141e18	Use lld for clang builds, with better workaround
clang workaround	 https://github.com/OpenMandrivaAssociation/boost/commit/650c3b573966d034a32a0a63d927abcb61f1d47a	try to workaround build with LLVM/clangffs
clang workaround	 https://github.com/openharmony-gitee-mirror/developtools_hdc_standard/commit/4c493c916ab78867d30c5be11c91b7f2ca105110	workaround for random_device linking issue against ohos darwin-clangSigned-off-by: zhaifenghw <zhaifeng@huawei.com>
clang workaround	 https://github.com/openharmony/developtools_hdc_standard/commit/4c493c916ab78867d30c5be11c91b7f2ca105110	workaround for random_device linking issue against ohos darwin-clangSigned-off-by: zhaifenghw <zhaifeng@huawei.com>
clang workaround	 https://github.com/openembedded/meta-openembedded/commit/ec2cfccc2a4f3141a80ba1cf3b439f06b39c470a	iotop: Use lld with clang on armBFD linker is crashing when using clang, workaround it by always usinglld when using clang on armSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/openembedded/meta-openembedded/commit/d49282245ce0ed88fdf3b319588033093f07bd3c	jemalloc: Fix build with glibc 2.35+clangCompiler crashes when using glibc 2.35, it should be fixed in clang butuntil then workaround it here.Signed-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/openembedded/meta-openembedded/commit/ce1c406d6355ba0d312dce2cb60c089377d253cb	gimp: Disable vector icons on x86 with clangIt workarounds qemu crashes seen when building with clange.g.| make[3]: *** [Makefile:2397: 24/gimp-controller.svg] Segmentation fault| make[3]: *** Waiting for unfinished jobs....| make[3]: *** [Makefile:2397: 24/gimp-color-space-perceptual.svg] Segmentation fault| make[3]: *** [Makefile:2397: 24/gimp-controller-keyboard.svg] Segmentation fault| make[3]: *** [Makefile:2397: 24/gimp-colormap.svg] Segmentation faultSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/openembedded/meta-openembedded/commit/32d397a06d4cd4b6c05dbacc473d06e84283c1c4	protobuf: Disable tailcall on mips/clangClang13 crashes and lets workaround it for nowSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/openbsd/ports/commit/9dc90fd3d63d082f60e1d8879820968462ce7a1a	As a workaround use -O1 for now. clang-13 does not like dnsdist andmiscompiles the Lua binding setup code.
clang workaround	 https://github.com/openbsd/ports/commit/85813a8274917786777018cc343050da370d0191	Simplify COMPILER setup to unbreak mupdf on sparc64 and other non-clang archsmupdf now builds C++ code and requires a compiler thatsupports -std=c++17, so zap COMPILER_LANGS=c.Also zap MODGCC4_ARCHS=armv7, which doesn't do what you think it does inthis context (base-clang would still be picked up on armv7).  mupdf onarmv7 should be tested again before adding another workaround.ok kmos@ sthen@ (maintainer)
clang workaround	 https://github.com/openbsd/ports/commit/6594b034ecb4bf2dd8247a868e0fa63c8a2f60df	lang/gambit: remove the -O1 workaround againAfter tweaks to malloc(3), clang 13 now builds this fast enough for thepackage building machines.prodded by otto@, ok juanfra@
clang workaround	 https://github.com/openbsd/ports/commit/30f99c71ebff5cedf98560559b766a558139aa30	workaround for segfault in games/amnesia-tddclang 13 is stricter and -O2 causes segfault. clang 11 worked with -O2.As a workaround, override with -O0 until root cause is identified. Bumprevision.Reproduced on FreeBSD by Vasily (upstream and author of FreeBSD port).While here, take maintainership.ok brynet@
clang workaround	 https://github.com/openbmc/phosphor-logging/commit/a91a62b0f2202c0b624f4858e05d5fb8aaf23cba	lg2: workaround clang-tidy's lack of source_locationclang/clang-tidy do not currently support C++20 source_location,which causes repositories attempting to use lg2 but with clang-tidyenabled to fail with lots of missing-type errors.  Workaround thisby detecting the situation and falling back to usestd::experimental::source_location.Signed-off-by: Patrick Williams <patrick@stwcx.xyz>Change-Id: Idb5a555243568c394505890035423d39e9b22407
clang workaround	 https://github.com/OPAE/linux-dfl/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/oneapi-src/oneDAL/commit/45ec42a99b497333526ef79b3500118943d6031b	Fix perf in linear models with SOA tables (#1569)* almost fixed* clang* soa workaround from knn* xxgemm* fix xxgemm parameters* working gemm* pobeda?* ready for review* clang* delete unusable variables* numrows in data* pobeda* apply comments* change name of variabl* clang* soa workaround* clang* cehck block status* DATATABLE* apply comments* clang* only tls 256 256* without tls 512x256* 128 512 + if SOA* best perf in da world* 512x512* soa tables fix* clang* apply comments* clang* status
clang workaround	 https://github.com/OmarEmaraDev/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/oliverlee/turtle/commit/fea8c00d5fdcbe39a7310d62c08df0a7909f776e	Add clang + libc++ workaround
clang workaround	 https://github.com/oliverlee/turtle/commit/d3dbb8fa87d12cd97dfac77c5fb232db6a583c75	Workaround floating point types as NTTPs with Clang
clang workaround	 https://github.com/oliverlee/turtle/commit/bcdee966ff38ad3fd8987421d56313cf3efee3e0	Workaround missing range algorithms in Clang 14
clang workaround	 https://github.com/ODEX-TOS/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/objectcomputing/OpenDDS/commit/3ba0be256a0cef6e320f1de78e841274e86424d3	Add Clang SONAME Workaround to GHA ASAN Buildhttps://github.com/DOCGroup/ACE_TAO/issues/1790
clang workaround	 https://github.com/noir-protocol/noir/commit/914e412f3d39af140b76b94a05ce2cecf756eee6	style: workaround fix for invalid clang-format correction
clang workaround	 https://github.com/nodfur/nixpkgs/commit/3b2d3f65b799d4c682fb4b0cf025f0812429faa4	darwin.CF: Drop clang 7 workaround
clang workaround	 https://github.com/NixOS/nixpkgs/commit/3b2d3f65b799d4c682fb4b0cf025f0812429faa4	darwin.CF: Drop clang 7 workaround
clang workaround	 https://github.com/NixOS/nix/commit/e7d79c78616425cbbea6619ea28ea9a5ec75cabe	Make the default SQLiteError constructor publicOtherwise the clang builds fail because the constructor of `SQLiteBusy`inherits it, `SQLiteError::_throw` tries to call it, which fails.Strangely, gcc works fine with it. Not sure what the correct behavior isand who is buggy here, but either way, making it public is at the worsta reasonable workaround
clang workaround	 https://github.com/nginx/njs/commit/6aa570e37b74e315da9ec167d0631e9fbe46e16a	Removing MSAN unpoison workarounds for clang-9 and below.MSAN unpoison workaround was introduced in 13dbdff9b76f (0.3.9) for afalse-positive bug in clang-9 and below.Also, after 80d95b2881f6 (0.4.1) the bug is not triggered anymore.
clang workaround	 https://github.com/neXenio/kbls-botan/commit/cb078d85004b5b635335bd412638562d636c50a0	workaround a miscompilation issue in clang 12 (XCode 13)
clang workaround	 https://github.com/neXenio/kbls-botan/commit/af4744e9135d329c864c9faffb103c3a22c13629	Cleanup SHA-3 Clang workaround
clang workaround	 https://github.com/neXenio/kbls-botan/commit/805bf8fff67f1b2b737ab83a15ffcd11e168988c	Merge GH #2860 Cleanup SHA-3 Clang workaround
clang workaround	 https://github.com/neXenio/kbls-botan/commit/2dd45b5420a6abca3e3be769db28cf812da1e13a	Merge GH #2803 Workaround miscompilation of SHA-3 in Clang 12 + XCode 13
clang workaround	 https://github.com/networkit/networkit/commit/dcb8355bbde89103a95e03c1343f06f0ce5476f3	Updates breathe version; adds workarounds for clang-12 errors/bugs
clang workaround	 https://github.com/NetBSD/pkgsrc/commit/cf84038420248fca8cb4d7d518926e327edb5c6f	clang: provide patches to build on illumos distributionsWorkaround features which are not available on old illumos (Solaris < 11.4)linker.
clang workaround	 https://github.com/neonkingfr/drm/commit/eaf234c1489f53035fba1698c1a27781f5755be6	meson: switch to cc.get_supported_argumentsThis is generally faster, as meson is able to parallelize the checks forus.This also removes the workaround for checking gcc/clang -Wno-*arguments, which meson now handles internally so we don't need to handleit ourselves.Signed-off-by: Dylan Baker <dylan@pnwbakers.com>Reviewed-by: Simon Ser <contact@emersion.fr>
clang workaround	 https://github.com/nbd168/wireless/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/nashmuhandes/LAD/commit/fe1514ce0440b19e398372e3ddb95142a87f775c	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/nanocurrency/nano-node/commit/9e2e8d259eb808d3d5023eb1ea26b62f6fa79694	Formatting workaround to make clang-format happy on OSX (#3467)Co-authored-by: theohax <theo@nano.org>
clang workaround	 https://github.com/nangtani/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/n1kutochkin/diploma/commit/ac8ccaf9703ba016015a7187e74891f751c944e9	Workaround clang 3.4 warning.
clang workaround	 https://github.com/n1kutochkin/diploma/commit/ac5e1960f9c06ff186779111f618821d623f758f	Workaround clang 3.4 bug.
clang workaround	 https://github.com/mysql/mysql-server/commit/89711392eebbeb4907abe5fc75d0a5602846d181	Bug #33217633 clang on windows build broken in InnoDBA workaround for Clang failure on Windows:https://bugs.llvm.org/show_bug.cgi?id=51538Reviewed-by: Tor Didriksen <tor.didriksen@oracle.com>
clang workaround	 https://github.com/mwc-lord/noggit3-mwc/commit/51a1bc7fe471b125a0c2a732ef53705cdcf54223	cmake: explicitly check for windows-only compiler flags- clang workaround
clang workaround	 https://github.com/MusicPlayerDaemon/MPD/commit/02502514f68197925ac155ff62b59b00b18dd450	meson.build: require clang 7 (remove bug workaround)
clang workaround	 https://github.com/multipath-tcp/mptcp_net-next/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/multipath-tcp/mptcp_net-next/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/msys2/MINGW-packages/commit/bb822c43ffcce3cb861d4e61b6662de322606267	coin: limit GCC bug workaround to MINGW32clang doesn't know about that flag.
clang workaround	 https://github.com/msys2/MINGW-packages/commit/8e147a357d24ee197b3aaa0bd18b7a3d66d87e46	aws-c-common: Update to 0.6.11* Remove workarounds for clang and werror, changed in upstream.* Add workaround for non-ascii file names in tests directory.
clang workaround	 https://github.com/msys2/MINGW-packages/commit/88bdcf27ce9db4737ed673124dbebe283b6a4c61	drmingw: Fix build for clangenable clang32add libssp depsworkaround cmake
clang workaround	 https://github.com/msys2/MINGW-packages/commit/866f6ccc8cb29789a84fd6fcfdc15c642c5c695f	qt6-base: extend CLANG workarounds to all clang variants
clang workaround	 https://github.com/msys2/MINGW-packages/commit/5a1fc78f1ff7d88f880afd2dfeaa7e8a1ad7991f	python-glcontext: Udpate to 2.3.4Add workaround for clang compiler error
clang workaround	 https://github.com/msys2/MINGW-packages/commit/3d033bf31e3cb07be31476054a4679c05285c4a8	flang: always build with clang and link with lld.It depends on clang anyway, and 64-bit GCC is giving errors about objectfiles being too big.  Clang has a workaround for the 10M COFF stringtable limit, but binutils doesn't seem to be aware of it, so link withLLD.
clang workaround	 https://github.com/msys2/MINGW-packages/commit/3ab175352cfac9d85cba5b41bd95889e01c3333d	Merge pull request #8795 from jeremyd2019/glibmm-clang-workaroundglibmm: fix build with clang
clang workaround	 https://github.com/msm8974-mainline/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/mrirecon/bart/commit/2de61b248ee2b05f9923cd1caa9615d79acd4784	clang workarounds
clang workaround	 https://github.com/mozilla/gecko-dev/commit/434ed284454a2a5bf941c4bd6fddbc445a3dec13	Bug 1736502 - Work around clang trunk changes that break our clang-trunk build. r=andiShort of solving this by fully embracing the monorepo build and removingthe projects/ workarounds (which will also require a compat more witholder clang versions we still build with the same script), we can solvethe bustage with a small hack.Differential Revision: https://phabricator.services.mozilla.com/D131458
clang workaround	 https://github.com/MoustaphaSaad/mn/commit/57608581789a1a17d0f16a02d29899b1594ea878	Example queues (#111)* example-queues first draft* fix send_try* workaround clang issue
clang workaround	 https://github.com/moto-timo/meta-openembedded/commit/32d397a06d4cd4b6c05dbacc473d06e84283c1c4	protobuf: Disable tailcall on mips/clangClang13 crashes and lets workaround it for nowSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/mosra/corrade/commit/59823941093bee9f99e5a63cb4218b53a7bd5495	Utility: workarounds to make Path compile on GCC 4.8 and Clang 3.8.
clang workaround	 https://github.com/mosra/corrade/commit/2fa0ba175fc738c000d8dddefcbe1d6e70bac75e	Reintroduce most of the remaining MSVC 2019 workarounds for 2022.Don't want to suffer another five years with a newCORRADE_MSVC2022_COMPATIBILITY macro, so I'm just going to disable thesecase by case, *optimistically* assuming the crashes and otherdeficiencies might be finally fixed with MSVC 2025 ... or maybe theyswitch to clang-cl by then. Who knows.
clang workaround	 https://github.com/Moon-code22/light_blender_for_sheepit/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/MontaVista-OpenSourceTechnology/linux-live-app-coredump/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/mongodb/mongo/commit/70edddbf56bfca262558baecbc535256b189d976	SERVER-45445 Workaround Clang's buggy -frewrite-includes
clang workaround	 https://github.com/MollySophia/linux-next-primus/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/MochiLibraries/Biohazrd/commit/b0c320081e731bad5aed72a88d345e53502b618c	Added workaround for Clang breaking `NullReferenceException` on Linux.See https://github.com/MochiLibraries/ClangSharp.Pathogen/issues/7
clang workaround	 https://github.com/mmp/pbrt-v4/commit/81c2a8135b95175c8c422a397509df358f1919ac	Disable clang-12 build in github actions.Workaround multi-day github actions flakiness:E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/universe/l/llvm-toolchain-12/libclang-12-dev_12.0.0-3ubuntu1~20.04.4_amd64.deb  404  Not Found [IP: 52.252.75.106 80]et al.
clang workaround	 https://github.com/mmlb/home-manager-nixpkgs/commit/3b2d3f65b799d4c682fb4b0cf025f0812429faa4	darwin.CF: Drop clang 7 workaround
clang workaround	 https://github.com/mmind/linux-riscv/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/mirror/mingw-w64/commit/bbf8ca00fb848dd5b56d804248ab52bfe455c7a6	headers: Enable WIDL_EXPLICIT_AGGREGATE_RETURNS on arm/aarch64 tooWhile clang does match MSVC with regards to aggregate returns, whenrun in MSVC mode, it matches GCC when run in mingw mode - and thesame behaviour extends to arm/aarch64 too.Thus, this workaround needs to be enabled on all architectures,not only on x86.Signed-off-by: Martin Storsj閺?<martin@martin.st>
clang workaround	 https://github.com/miraclestars/android_kernel_samsung_sm8250/commit/4f9168b9aca287296986e2c9c6b59f50efe2083a	arm64: Silence clang warning on mismatched value/register sizes[ Upstream commit: 27a22fbdeedd6c5c451cf5f830d51782bf50c3a2 ]Clang reports a warning on the __tlbi(aside1is, 0) macro expansion sincethe value size does not match the register size specified in the inlineasm. Construct the ASID value using the __TLBI_VADDR() macro.Fixes: 222fc0c8503d ("arm64: compat: Workaround Neoverse-N1 #1542419 for compat user-space")Reported-by: Nathan Chancellor <natechancellor@gmail.com>Cc: James Morse <james.morse@arm.com>Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>Signed-off-by: James Morse <james.morse@arm.com>Signed-off-by: Sasha Levin <sashal@kernel.org>
clang workaround	 https://github.com/miraclestars/android_kernel_samsung_sm8250/commit/1ca414dc31e75ff95a8d53343d0a026e8e3bbfdf	riscv: Workaround mcount name prior to clang-13[ Upstream commit 7ce04771503074a7de7f539cc43f5e1b385cb99b ]Prior to clang 13.0.0, the RISC-V name for the mcount symbol was"mcount", which differs from the GCC version of "_mcount", which resultsin the following errors:riscv64-linux-gnu-ld: init/main.o: in function `__traceiter_initcall_level':main.c:(.text+0xe): undefined reference to `mcount'riscv64-linux-gnu-ld: init/main.o: in function `__traceiter_initcall_start':main.c:(.text+0x4e): undefined reference to `mcount'riscv64-linux-gnu-ld: init/main.o: in function `__traceiter_initcall_finish':main.c:(.text+0x92): undefined reference to `mcount'riscv64-linux-gnu-ld: init/main.o: in function `.LBB32_28':main.c:(.text+0x30c): undefined reference to `mcount'riscv64-linux-gnu-ld: init/main.o: in function `free_initmem':main.c:(.text+0x54c): undefined reference to `mcount'This has been corrected in https://reviews.llvm.org/D98881 but theminimum supported clang version is 10.0.1. To avoid build errors and togain a working function tracer, adjust the name of the mcount symbol forolder versions of clang in mount.S and recordmcount.pl.Link: https://github.com/ClangBuiltLinux/linux/issues/1331Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>Signed-off-by: Sasha Levin <sashal@kernel.org>
clang workaround	 https://github.com/mingw-w64/mingw-w64/commit/bbf8ca00fb848dd5b56d804248ab52bfe455c7a6	headers: Enable WIDL_EXPLICIT_AGGREGATE_RETURNS on arm/aarch64 tooWhile clang does match MSVC with regards to aggregate returns, whenrun in MSVC mode, it matches GCC when run in mingw mode - and thesame behaviour extends to arm/aarch64 too.Thus, this workaround needs to be enabled on all architectures,not only on x86.Signed-off-by: Martin Storsj閺?<martin@martin.st>
clang workaround	 https://github.com/mi-msm8937/android_device_xiaomi_land/commit/151c58e45e67e5d7edb1794cf7d324b3fae754db	land: libshims: Workaround a race condition that broke preflashClang optimization made the function return too fast, for our old GCCcamera stack at least. Turn those optimizations off to simulate someform of latency, and we're back in business!Change-Id: Ie25058e95017064154ccead12703f4c6e35b6d0b
clang workaround	 https://github.com/Millak/guix/commit/a8d1e6bfa22c3f7f14e37584848e08a953ea4e02	gnu: libomp: Update to 13.0.0.* gnu/packages/llvm.scm (libomp): Update to 13.0.0.[arguments]: Add workaround to #:configure-flags.[native-inputs]: Change from CLANG-9 and LLVM-9 to CLANG and LLVM.
clang workaround	 https://github.com/miju12/build_soong/commit/4f45da0605538edf95f0a2e2219d83b25aaf9bb6	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/microsoft/STL/commit/71e9a4ec541491880e06b20af6b4a0b3723cdf12	Workaround clang-format misbehavior in `P0898R3_concepts` test (#2356)
clang workaround	 https://github.com/microsoft/cppwinrt/commit/c350ff38d526f138115bae16fb0a0ebca9b99f1d	Clang workarounds (#867)
clang workaround	 https://github.com/mhjacobson/avr-objc/commit/a3b1d051bebd6972b3b9567f50d60a6e0df932f2	Makefile: remove workaround for now-fixed clang bug
clang workaround	 https://github.com/mhjacobson/avr-objc/commit/8016feffddc18003411765b3f50d25221b5475a6	Makefile: remove workaround for now-fixed clang bug
clang workaround	 https://github.com/MeshInspector/MeshLib/commit/331073edf6c04625f9bf94f4e8398c071a3580dc	Convex hull (#76)* Convex hull* workaround for Clang
clang workaround	 https://github.com/Medusa-Team/linux-medusa/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/mcellteam/mcell/commit/f9ab653f7ff4cc1f94f7971c39e99d3a6abe5ee5	Workaround for possible macos clang compiler issue
clang workaround	 https://github.com/Mbed-TLS/mbedtls-test/commit/2c6bb35b69f5ace567ee0b08e0abfc42d42223a9	Workaround to make test_clang_opt on FreeBSD accept static_assertAt the time of writing, `all.sh test_clang_opt` fails on FreeBSDbecause it uses `-std=c99 -pedantic` and Clang on FreeBSDthinks that our code is trying to use a C11 feature(static_assert). Which is true, but harmless since our codechecks for this feature's availability. As a workaround,instrument the compilation not to treat the use of C11 featuresas errors, only as warnings.
clang workaround	 https://github.com/Maxzor/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/maxold1985/test/commit/82ec04b6aaedf6696461ff5914b30fe69eff1ed8	Add workaround to build under clang <11 (llvm 8)
clang workaround	 https://github.com/MariaDB/server/commit/c2146ce774e962830dd982b2060787f5a71713c2	MDEV-24841: More workaroundsFor some reason, the tests of the MemorySanitizer build on 10.5 failedwith both clang 13 and clang 14 with SIGSEGV. On 10.6 where it workedbetter, some more places to work around were identified.
clang workaround	 https://github.com/ManjuVajra/OMW-VR/commit/1e1ebb049e71579f2250f39e380df8d1c3457f29	Workaround clang and actually erase from the vector
clang workaround	 https://github.com/malaterre/GDCM/commit/3144bb5ff8479bd3f9dc7efb10771328e8c6b63a	Removed pre-C++11 workarounds for fixed-sized integer supportMy motivation here was to stop defining __STDC_LIMIT_MACROS, which, since it has a double underscore, triggers clang -Wreserved-id-macro warnings.
clang workaround	 https://github.com/madmann91/sol/commit/1db95b59f2f32dc401ccc11972b66c44fa7477d2	Add default parameter to `PathTracer` constructor (with gcc/clang workaround)
clang workaround	 https://github.com/madame-rachelle/qzdoom/commit/fe1514ce0440b19e398372e3ddb95142a87f775c	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/madame-rachelle/hgzdoom/commit/fe1514ce0440b19e398372e3ddb95142a87f775c	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/macports/macports-ports/commit/38f842d95b7a457f7759fc271e50c4b858c790a3	boost176: Use PATH workaround to enforce correct 'clang++' compiler
clang workaround	 https://github.com/luxis1999/iommufd/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/luncliff/vcpkg-registry/commit/839dca4d7c4902ca1d6ea0aab50562d8c29248cf	[libdispatch] build with clang-cl* workaround post build check failure* support android triplets[libdispatch] fixing Windows build(WIP)* additional patch for x86-windows (still failing)
clang workaround	 https://github.com/LuBaolu/intel-iommu/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/LuBaolu/intel-iommu/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/lssfau/walberla/commit/a013d16f104e3d65c6e80105b8c866bd2e350246	Workaround for __BIGGEST_ALIGNMENT__ on ClangOn x86_64, this is always 128 bits, rendering it incompatible with AVX.GCC reports the maximum enabled vector width (which is what we want) and Intel reports the maximum supported vector width (which is okay too).
clang workaround	 https://github.com/LorenzoBianconi/bpf-next/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/LLNL/axom/commit/99f2a300eec2d67bf9660bc27317d75fea9909a2	Workaround: define FMT_DEPRECATED to be same as AXOM_DEPRECATEDWorkaround for compiler error in clang/nvcc configuration on blueos.
clang workaround	 https://github.com/ljmf00/lldb-d/commit/db5f100fe4ca252d7f392659e7da5dba10331ae7	[HIP] Remove workaround in __clang_hip_runtime_wrapper.hRemove the workaround for -fopenmp in __clang_hip_runtime_wrapper.hsince it causes device functions in HIP wrapper headers disabled whencompiling HIP program with -fopenmp.Reviewed by: Aaron Enye Shi, Jon ChesterfieldDifferential Revision: https://reviews.llvm.org/D106070
clang workaround	 https://github.com/ljmf00/lldb-d/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/ljmf00/lldb-d/commit/3557c7c1226fa222499a2b9d4cbc36dfeda6f53c	[libc++] Remove workarounds for [[nodebug]] not working properly on typedefs in older ClangsClang used to support [[nodebug]] everywhere except on typedefs. Sincewe don't support such old Clangs anymore, we can get rid of _LIBCPP_NODEBUG_TYPEin favour of always using _LIBCPP_NODEBUG.Differential Revision: https://reviews.llvm.org/D108996
clang workaround	 https://github.com/linux-surface/kernel/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/linuxppc/linux-ci/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/linuxppc/linux-ci/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/linux-mailinglist-archives/stable.vger.kernel.org.0/commit/b97e34246d9793150279fdb4d8b2d2f26e9f57db	[PATCH 5.13 075/800] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/stable.vger.kernel.org.0/commit/6529b73658d92472530fc02b6dd56ff57ed1a347	[PATCH 5.10 062/593] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/stable.vger.kernel.org.0/commit/4166307832b12ca8f0bfd4eca5bae7bd4aada4de	[PATCH 5.12 071/700] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/stable.vger.kernel.org.0/commit/2b90d025b4c590570a55b4ba435142dc228e133b	[PATCH 5.4 040/348] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linuxppc-dev.lists.ozlabs.org.0/commit/a0499e764f5bcc5982ab489afecf5ad5c8a5202a	[PATCH] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linuxppc-dev.lists.ozlabs.org.0/commit/76824e525cb49c27f2e656009a435086a992de69	Re: [PATCH] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linuxppc-dev.lists.ozlabs.org.0/commit/11cbe50282dbc9c0bc356d75c5d8e6180b84aec6	Re: [PATCH] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.3/commit/b5b859facb43b6f8d2c840886a46790c55e77524	[PATCH v2 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.3/commit/92ffe7046b68c54d903004be8fbbce4a417796d4	Re: [PATCH 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.3/commit/86445ee1f2e9709302a9a31ab791930dbee50e05	Re: [PATCH 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.3/commit/778f341e4ca3abf8dbf6541eb9de51fee23c4f2a	Re: [PATCH 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.3/commit/4638d07fe5119b0c49aa103819a53056474d6297	[PATCH 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/d14592b4965d67eb90d13e899e65eea7baf50010	[PATCH 5.12 071/700] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/7dcbe5c69173edfe3e5f51fbc45ef373e66ff05b	Re: [PATCH] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/7cbad4d9adc3c5ed712cff8912a632cc7fb389ce	[PATCH 5.13 075/800] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/78641000247313c0035c7c13e7695fa8e08b0faf	[PATCH 5.4 040/348] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/6c057b1a414c05e3b342b15c425bb4fe60b11cb6	[PATCH 5.10 062/593] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/1316e506bb3365d19cddc5cb8207ef81b5294b7a	[PATCH] KVM: PPC: Book3S HV: Workaround high stack usage with clang
clang workaround	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/e54a63fc34c2026c61bf8e402654e48b4c6cced8	[PATCH 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/d17a8572e6b9147b2a1490f2f21b20ded42a1cbd	Re: [PATCH 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/a72cf5a9b8baa9d165475ca93ba1634abd0dfbb0	[PATCH v2 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/4f66ad1db7da6b272c0466d0a5d376f9735c6207	Re: [PATCH 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/030ca49b1a1459547a5eec4e38587fb2c6fe87d9	Re: [PATCH 1/5] Kconfig: Add option for asm goto w/ tied outputs to workaround clang-13 bug
clang workaround	 https://github.com/LightX-Project/build_soong/commit/5d60c6e5f500109a430aa0ee6c2bbef9b2f8ecbb	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/LibreOffice/core/commit/8c717ea3854130067919658e9ec7433e0b5e2ba0	GCC bug 96878 is fixed in upcoming GCC 12However, restricting the workaround to GCC <= 11 then revealed that some oldversions of Clang apparently had a similar issue, causing "error: use of classtemplate 'OStringLiteral' requires template arguments; argument deduction notallowed here", and thus also need the workaround.  I saw the non-workaround codefail with a build of Clang 6.0.0 and succeed with a build of Clang 7.0.0.Change-Id: I6e4cf6c8c3a11618a578401574e5679e6b65d7f4Reviewed-on: https://gerrit.libreoffice.org/c/core/+/120657Tested-by: JenkinsReviewed-by: Stephan Bergmann <sbergman@redhat.com>
clang workaround	 https://github.com/libMesh/libmesh/commit/172f5708f4f9504dfeb16ce0d6f67806532bcb0a	Workaround bad warnings+assembly in old compilersWithout this, gcc 9 and older and clang 9 and older both give uswarnings about returning dangling references at compile time, followedby segfaults at runtime.
clang workaround	 https://github.com/LESSAOSP/build_soong/commit/d5b66df6a7c62d13622aebe57e018c37c9c13df6	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/lemourin/coro-cloudstorage-fuse/commit/8644d460efa21e4e59cbb8521c9206bc61bfa551	filesystem_context: workaround poor if constexpr clang handling.
clang workaround	 https://github.com/lemourin/coro-cloudstorage/commit/ddf053370c1bb67abd667c82dc4e071ba1645db6	account_manager_handler: workaround clang crash.
clang workaround	 https://github.com/lemourin/coro-cloudstorage/commit/cba734c0f26b20ac2923d57654e649b6424bc729	account_manager_handler: workaround for clang.
clang workaround	 https://github.com/lemourin/coro-cloudstorage/commit/5fc0e8e010d8de36f1ee12f3159723bf73fbd250	abstract_cloud_provider: workaround weird if constexpr clang handling.
clang workaround	 https://github.com/LekKit/RVVM/commit/bd92397bb8dce936ec74da51c8b4e46f72b0a43a	Fix icache coherency in RVJIT on RISC-V ClangClang omits the riscv_flush_icache() syscall for some reason when __builtin___clear_cache() is used - GCC does fine thoThis breaks the JIT on RISC-V hosts with non-coherent icache, like RVVM itself (JIT in JIT, yay)Current workaround issues the syscall direcly (not sure if it's a proper fix, but it'll do for now)
clang workaround	 https://github.com/LekKit/RVVM/commit/21df5c35aff4bbf3c8ed4c9406555f2dc2a90013	Workaround for broken Clang __atomic on i386Clang 13 seems to have problems with __atomic builtins, like incorrectly assuming atomic alignment, and failing to build RVVM on i386 without libatomic (which shouldn't be required anyways and isn't present on FreeBSD, for example)Fixed by prioritizing usage of C11 atomics
clang workaround	 https://github.com/leaningtech/cheerp-compiler/commit/db811e7027a74ca044390f32d556c28dedf948f8	Workaround GEPs on NULL objectsThey are used to implement an offsetof, but on Cheerp that is broken.This should be properly reported on the clang side.
clang workaround	 https://github.com/leaningtech/cheerp-compiler/commit/ce368e1aa51f3d9f0a5f6ff0be3c02a9cf1e2d2e	[libc][NFC] Workaround clang assertion in inline asmThe clobber list "cc" is added to inline assembly to workaround a clang assertion that triggers when building with a clang built with assertions enabled. See bug [53391](https://github.com/llvm/llvm-project/issues/53391).See https://godbolt.org/z/z3bc6a9PM showing functionally same output assembly.Reviewed By: sivachandra, lntueDifferential Revision: https://reviews.llvm.org/D118099
clang workaround	 https://github.com/leaningtech/cheerp-compiler/commit/a2e988e63db45939d7b944109926c7a47bd067e4	Better workaround for un-convertible function typesClang, as an hack, returns opaque struct types as placeholders. In the past we have been returningplaceholder function types instead to avoid type-unsafe casts between struct pointers and function pointers.It turns out that clang uses the struct types internally as flags to decide if a function is incomplete.This new fix avoids the problem by converting the struct placeholders into function placeholders atthe pointer/reference boundary. The idea is that pure function types can only be used directly forfunctions and are left as opaque structs to let clang detect the incomplete case. Whenever the functiontype is used in an aggregate type it must be with a pointer or reference in the middle instead.
clang workaround	 https://github.com/leaningtech/cheerp-compiler/commit/884832407e47579a28e8c363492a620901f2eab4	[clangd] Avoid a code completion crashThis is a workaround (adding a newline to the eof) in clangd to avoid the codecompletion crash, see https://github.com/clangd/clangd/issues/332.In principle, this is a clang bug, we should fix it in clang, but it is nottrivial.Reviewed By: sammccallDifferential Revision: https://reviews.llvm.org/D117456
clang workaround	 https://github.com/leaningtech/cheerp-compiler/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/leaningtech/cheerp-compiler/commit/5ff52be5d98a621db6de079ad09d0f94854938e8	[sanitizer] Restore __thumb__ workaroundIt was removed in D114934 and failed clang-thumbv7-full-2stage.
clang workaround	 https://github.com/lcdupree/libmdbx/commit/c4a696be1dc860c93462a0993e5c86c9e415ca63	mdbx-test: add workaround for CLANG/LLVM STL stupidity of `std::set<>`.
clang workaround	 https://github.com/lcdupree/libmdbx/commit/79281d59c7b7bf3b28e34725811c8102f8063efc	mdbx++: workaround  macro for clang bugs.
clang workaround	 https://github.com/lcdupree/libmdbx/commit/4bb0c57e290cf9a078d069597fd14ad3eb4c3155	mdbx: minor fixes/workarounds for CLANG < 9.x
clang workaround	 https://github.com/kyxg/AutoTrash/commit/aef0a7a6b645a1f3eeff96ea429f496b630d535a	Clang 3.6 bug workaround.
clang workaround	 https://github.com/KyuofoxProject/android_build_soong/commit/9072ec23b72df9c8e8307abe9a1ac27473dbf3ca	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/kvm-riscv/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/Kuree/hgdb/commit/82880c696a29c69f0655e30637703a4b99df0e97	workaround clang-tidy false positive on memory leak
clang workaround	 https://github.com/kronosnet/ci-tools/commit/01efe860e77909577338967405296f98919ad941	debian/ubuntu: explicitly install llvmclang packages in ubuntu are borked, workaround itSigned-off-by: Fabio M. Di Nitto <fdinitto@redhat.com>
clang workaround	 https://github.com/krieselreihe/litr/commit/fe27851f0ae270b39478a7433d63569afe3a72fd	Use clang to build project in CIThis is currently a workaround to mitigate an issue in Toml11: https://github.com/ToruNiina/toml11/issues/165
clang workaround	 https://github.com/kraj/uclibc-ng/commit/592574ae535c35de500f6c3e8d8400d0bb0d985a	Fix bug in ARM memset implementationThe ARM implementation of memset has a bug when the fill-value is negative or outside the[0, 255] range. To reproduce:    char array[256];    memset(array, -5, 256);This is supposed to fill the array with int8 values -5, -5, -5, ... . On ARM, this doesnot work because the implementation assumes the high bytes of the fill-value argument arealready zero. However in this test case they are filled with 1-bits. The aarch64 and x86_64implementations do not have this problem: they first convert the fill-value to an unsignedbyte following the specification of memset.With GCC one can use  `memset(ptr, (-5 & 0xFF), size)` as a workaround, but for clangusers that does not work: clang optimizes the `& 0xFF` away because it assumes thatmemset will do it.Signed-off-by: Tom Bannink <tombannink@gmail.com>Acked-by: Peter Korsgaard <peter@korsgaard.com>
clang workaround	 https://github.com/kostex/Blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/kolbusa/stalonetray/commit/64ea5260981e0befee2272cca727319383b4dab5	clang-format of chromium icons workaround
clang workaround	 https://github.com/KhronosGroup/LLVM-SPIRV-Backend/commit/db5f100fe4ca252d7f392659e7da5dba10331ae7	[HIP] Remove workaround in __clang_hip_runtime_wrapper.hRemove the workaround for -fopenmp in __clang_hip_runtime_wrapper.hsince it causes device functions in HIP wrapper headers disabled whencompiling HIP program with -fopenmp.Reviewed by: Aaron Enye Shi, Jon ChesterfieldDifferential Revision: https://reviews.llvm.org/D106070
clang workaround	 https://github.com/KhronosGroup/LLVM-SPIRV-Backend/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/KFTrack/KinKal/commit/f98309cced850985bd8c4c078e241c9616e03f2b	Merge pull request #112 from ryuwd/patch-6Disable clang-tidy check in CI to workaround c++ std library (?) incompatibility when using clang; Upgrade ROOT to 6.24.6
clang workaround	 https://github.com/kfrlib/kfr/commit/72429b0ac086a73e8181cb754677f72f2b77d917	Workaround for clang bug
clang workaround	 https://github.com/KeyWorksRW/wxUiEditor/commit/21c7954ad0dc2709f0196a39edf5772132e7127e	Workaround for clang-format bugOddly enough, the // clang-format off toggled back and forth between every call to the formatter.  Placing a blank line after it solved the problems.
clang workaround	 https://github.com/kernel-patches/bpf-rc/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/kernel-patches/bpf/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/kerkamran/rpctest/commit/c1de0bc28c5e1d03ad6d5a807288283598d31ed1	workaround for clang compilation
clang workaround	 https://github.com/kerkamran/rpctest/commit/aaac4c1bdee66b0053bf86895575e6177c61fb7b	Clang workaround for c++20 non-compliance
clang workaround	 https://github.com/KDE/kdevelop/commit/a4f80046f483e055a58007866cb495493fc0626f	TestFiles::testFiles (clang): remove obsolete workaroundtext/x-opencl-src was added to shared-mime-info 4 years ago inhttps://gitlab.freedesktop.org/xdg/shared-mime-info/-/commit/4ab969c398671c519a10a601ad3eeb46f04361deThis MIME type is present in shared-mime-info version >= 1.9. Evenoldstable Debian "buster" has version 1.10. KDevelop's dependencyrequirements don't allow building it on old distribution versions. Sothere is no reason to keep the workaround.This reverts commit 056932ba02856b7c808dbd2db844b6e190c7fd0d.
clang workaround	 https://github.com/KatanaGraph/katana/commit/603d688b631a3f9fbf7b1a63f5bfced3650cb9b9	Fix clang warnings when building with sanitizers (#432)* Fix clang warnings when building with sanitizers* Workarounds for the legacy version of Python (3.6)
clang workaround	 https://github.com/Karlson2k/libmicrohttpd/commit/e2a52a91c687afc8f15b98a33ee6ed01a0a4a1ff	configure: improved test for undefined behavior sanitizerAdded workaround for clang bug
clang workaround	 https://github.com/Jtb1308/Blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/jsoo1/guix/commit/a8d1e6bfa22c3f7f14e37584848e08a953ea4e02	gnu: libomp: Update to 13.0.0.* gnu/packages/llvm.scm (libomp): Update to 13.0.0.[arguments]: Add workaround to #:configure-flags.[native-inputs]: Change from CLANG-9 and LLVM-9 to CLANG and LLVM.
clang workaround	 https://github.com/jro1979oliver/kernel_motorola_msm8998/commit/79f171132c99d1c4402696df7d7b8b5eb8713da0	tree: Remove unnecessary GCC_VERSION invocationsUnnecessary in our case where we compile with Clang and latter GCC versions of which have likely fixed the issues the source code is trying to workaround.Signed-off-by: ederekun <sedrickvince@gmail.com>Change-Id: Ic07855d6141179a5715cb7c644dbd058f4946451
clang workaround	 https://github.com/jpirko/linux_mlxsw/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/jonmason/ntb/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/johnsonjh/OpenVi/commit/b9b78ab6bc27ec1f3f3a31f2b190d70f5113662d	Important fix to `GNUmakefile` for linking with Clang's `lld` linker; Workaround to accommodate the case of `make clean all -j N' when `N` > 1
clang workaround	 https://github.com/johnmcfarlane/cnl/commit/80a1a82b1f7fbcb337525a390b5917052467332a	Merge pull request #920 from johnmcfarlane/clang-tidy-bug-numberRemove Clang-Tidy bug workaround
clang workaround	 https://github.com/joergroedel/linux-iommu/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/JnCrMx/blender-test/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/jluiiizz/gdcm/commit/3144bb5ff8479bd3f9dc7efb10771328e8c6b63a	Removed pre-C++11 workarounds for fixed-sized integer supportMy motivation here was to stop defining __STDC_LIMIT_MACROS, which, since it has a double underscore, triggers clang -Wreserved-id-macro warnings.
clang workaround	 https://github.com/jk-jeon/dragonbox/commit/dd52aa72c4fd27867235f16b381ced8c8ca65f47	Workaround clang-format & correctly attribute jeaiii
clang workaround	 https://github.com/jkelling/omp5tests/commit/f63fbb0ea078667651f2c4b18c404b5531126eb4	allocate: workaround for clang nvptx (barrier)
clang workaround	 https://github.com/jhueckelheim/ORAQL/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/jhnc-oss/meta-openembedded/commit/ec2cfccc2a4f3141a80ba1cf3b439f06b39c470a	iotop: Use lld with clang on armBFD linker is crashing when using clang, workaround it by always usinglld when using clang on armSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/jhnc-oss/meta-openembedded/commit/d49282245ce0ed88fdf3b319588033093f07bd3c	jemalloc: Fix build with glibc 2.35+clangCompiler crashes when using glibc 2.35, it should be fixed in clang butuntil then workaround it here.Signed-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/jhnc-oss/meta-openembedded/commit/ce1c406d6355ba0d312dce2cb60c089377d253cb	gimp: Disable vector icons on x86 with clangIt workarounds qemu crashes seen when building with clange.g.| make[3]: *** [Makefile:2397: 24/gimp-controller.svg] Segmentation fault| make[3]: *** Waiting for unfinished jobs....| make[3]: *** [Makefile:2397: 24/gimp-color-space-perceptual.svg] Segmentation fault| make[3]: *** [Makefile:2397: 24/gimp-controller-keyboard.svg] Segmentation fault| make[3]: *** [Makefile:2397: 24/gimp-colormap.svg] Segmentation faultSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/jhnc-oss/meta-openembedded/commit/32d397a06d4cd4b6c05dbacc473d06e84283c1c4	protobuf: Disable tailcall on mips/clangClang13 crashes and lets workaround it for nowSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/jfedorov/gromacs/commit/5f78fcd97cf1dca7f3228e1097114735a453f654	Remove workaround for old clangNo longer needed as we require a more recent clang than version 6.
clang workaround	 https://github.com/jeffmerkey/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/jeffmerkey/leaf-linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/jcmvbkbc/linux-xtensa/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/jcmvbkbc/linux-xtensa/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/JayXon/Leanify/commit/14665217f4caa0a05dd46c5e64eeb6f660000b06	workaround to fix clang build on windowsuse of undeclared identifier '__m256i'
clang workaround	 https://github.com/jasper-software/jasper/commit/9ae2abfc34dfc9ada845b06973a3cf39d85c3a17	Added a temporary hack to workaround a build problem when C++ test codeis built in the GitHub Actions CI framework with Clang on Ubuntu.
clang workaround	 https://github.com/JacquesLucke/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/iwamatsu/linux-watchdog/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/ispc/ispc/commit/d3202cf2eaaf9c282a2eaa1938eac418844bd10e	Workaround for clang include undefining strcasecmp
clang workaround	 https://github.com/isc-projects/bind9/commit/ae508c17bcf9a5c67a5c889f79624449f1e998d6	Remove workaround for ancient clang versions (<< 3.2 and << 4.0.1)Some ancient versions of clang reported uninitialized memory use falsepositive (see https://bugs.llvm.org/show_bug.cgi?id=14461).  Since clang4.0.1 has been long obsoleted, just remove the workarounds.
clang workaround	 https://github.com/ionutnechita/linux-sunlight/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/ionutnechita/linux-sunlight/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/interruptinuse/mingw-w64-subdirs/commit/bbf8ca00fb848dd5b56d804248ab52bfe455c7a6	headers: Enable WIDL_EXPLICIT_AGGREGATE_RETURNS on arm/aarch64 tooWhile clang does match MSVC with regards to aggregate returns, whenrun in MSVC mode, it matches GCC when run in mingw mode - and thesame behaviour extends to arm/aarch64 too.Thus, this workaround needs to be enabled on all architectures,not only on x86.Signed-off-by: Martin Storsj閺?<martin@martin.st>
clang workaround	 https://github.com/intel/intel-graphics-compiler/commit/de1190f1798372bc1c5d7153b21dfaf5e72f0229	 Workaround clang-9 issue in CMCLclang-9 has some issues matching cl::pair template constructor, so aworkaround was used to utilize another non-template constructor.clang-10 has no such issue.
clang workaround	 https://github.com/intel/gvt-linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/intel/gvt-linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/InsightSoftwareConsortium/ITK/commit/e9b898359cb3726035627f048742f7265cd25523	Merge pull request #2472 from N-Dekker/Workaround-Clang-3.8-error-default-initialization-constCOMP: Workaround Clang 3 error default initialization const MatrixGTest
clang workaround	 https://github.com/InBetweenNames/gentooLTO/commit/3a76813c608a93404d61d978791a3607125e0893	clang: libc++ & more lto workarounds (#710)
clang workaround	 https://github.com/illuhad/hipSYCL/commit/fb29500ccc034d52c0a3a7eafd110497d6fe8567	Merge pull request #559 from illuhad/hotfix/ci-cuda-workaroundAdd workaround for libstdc++ 11 clang CUDA issue
clang workaround	 https://github.com/illuhad/hipSYCL/commit/9ab3f59d0b4db495ccd88c6e4817e54277b88047	Workaround for libstdc++ 11 clang CUDA issue
clang workaround	 https://github.com/illuhad/hipSYCL/commit/49c583fa717231ed73b52204a49de10fe6928ca8	Add workaround for missing device signbit in clang on Windows
clang workaround	 https://github.com/IITH-Compilers/LLVM-Loop-Profiler_MonoRepo/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/ihor-drachuk/alog/commit/7b0f8ce86ded185f07dcc8326b5a123c0ea9fc33	Workaround specially for clang compiler (Mac OS)
clang workaround	 https://github.com/igotacategorytheory/481assignment1/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/iamharvir/OpenDDS_issue_3606/commit/3ba0be256a0cef6e320f1de78e841274e86424d3	Add Clang SONAME Workaround to GHA ASAN Buildhttps://github.com/DOCGroup/ACE_TAO/issues/1790
clang workaround	 https://github.com/hurchalla/modular_arithmetic/commit/faf5f57020649f0857c9d709ff4970701aab67d4	workaround clang asm performance bug
clang workaround	 https://github.com/huixie90/cpp_papers/commit/71f96489724f313dac32236b140dafbb03cb75d8	clang-format hack to workaround 13.x bug that is apparently fixed in 14.x+
clang workaround	 https://github.com/Homebrew/homebrew-core/commit/ed7cd923397ef7bb7f26d6ddb68fb23a7026d0d1	ldc: add comment explaining `test` block workaround (#87639)Setting `fails_with :gcc` will make `brew` set `CC=llvm_clang` duringthe test block, but `llvm_clang` is a shim that won't be in `PATH` andshouldn't be used for the test.The workaround can look a little cryptic, so let's add a comment for alittle bit of context to explain what's going on here.
clang workaround	 https://github.com/Hissah123/Blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/hexagon-geo-surv/meta-openembedded/commit/ec2cfccc2a4f3141a80ba1cf3b439f06b39c470a	iotop: Use lld with clang on armBFD linker is crashing when using clang, workaround it by always usinglld when using clang on armSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/hexagon-geo-surv/meta-openembedded/commit/d49282245ce0ed88fdf3b319588033093f07bd3c	jemalloc: Fix build with glibc 2.35+clangCompiler crashes when using glibc 2.35, it should be fixed in clang butuntil then workaround it here.Signed-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/hexagon-geo-surv/meta-openembedded/commit/ce1c406d6355ba0d312dce2cb60c089377d253cb	gimp: Disable vector icons on x86 with clangIt workarounds qemu crashes seen when building with clange.g.| make[3]: *** [Makefile:2397: 24/gimp-controller.svg] Segmentation fault| make[3]: *** Waiting for unfinished jobs....| make[3]: *** [Makefile:2397: 24/gimp-color-space-perceptual.svg] Segmentation fault| make[3]: *** [Makefile:2397: 24/gimp-controller-keyboard.svg] Segmentation fault| make[3]: *** [Makefile:2397: 24/gimp-colormap.svg] Segmentation faultSigned-off-by: Khem Raj <raj.khem@gmail.com>
clang workaround	 https://github.com/herrnst/dddvb-linux-kernel/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/herrnst/dddvb-linux-kernel/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/helmesjo/convertible/commit/db3884163708c6dcb51ea619470d4f79f728b0b3	Removed (now) redundant 'std::constructible_from' workaround (for clang with libc++).
clang workaround	 https://github.com/helmesjo/convertible/commit/9e4e80e026823500ca3f56822cb8ac56587db0d8	Workaround: Fixed 'std::derived_from' workaround for Clang/Apple/Emscripten (some kind of variant at least).
clang workaround	 https://github.com/helmesjo/convertible/commit/83fc228b3b4d7abf2745821abf4a082105299592	Workaround: Add missing 'std::common_reference' (nothing more than 'const std::common_type_t<...>&') for versions of Clang/Apple/Emscripten (& libc++)
clang workaround	 https://github.com/helmesjo/convertible/commit/7dd88e3bb27e16768d2ceacbd2561ce701b6c9e6	Added workaround for missing 'std::assignable_from', 'std::convertible_to', 'std::equality_comparable_with' & 'common_reference_t' in Clang <= 13.0 or Emscripten.
clang workaround	 https://github.com/helmesjo/convertible/commit/6a4ac2aa7a9004d4a3ae5f3b359fcba2fda68353	Workaround: Fixed 'std::common_reference_with' workaround for Clang/Apple/Emscripten (some kind of variant at least).
clang workaround	 https://github.com/helmesjo/convertible/commit/5e2e50c36b3bf17d070d9758c0030e3a8f91b26f	Workaround: Add missing 'std::copy_constructible' for Clang/Apple/Emscripten
clang workaround	 https://github.com/helmesjo/convertible/commit/53f0cec013a31b5d0ce9e1776b7039bdc75df69e	Removed (now) redundant 'std::copy_constructible' workaround (for clang with libc++).
clang workaround	 https://github.com/helmesjo/convertible/commit/4929598a7c17498ea273621fbec1886ff17a6f0b	Workaround: Fixed 'std::constructible_from' workaround for Clang/Apple/Emscripten (some kind of variant at least).
clang workaround	 https://github.com/helmesjo/convertible/commit/0f99b8d8dcf4b630a52896ee6b2a79c58254dc4d	Workaround: Add missing 'std::invocable' for Clang/Apple/Emscripten
clang workaround	 https://github.com/HeavensExperience-Staging/build_soong/commit/81db10938e43c4226edfcf49a19d6b243f8e60ae	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/HeavensExperience/build_soong/commit/4f45da0605538edf95f0a2e2219d83b25aaf9bb6	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/haveneer/cpp-advanced-training/commit/83cceba9b47843676ce73b38a322b30540c98ab6	Add workaround for clang (where coroutines are still experimental)
clang workaround	 https://github.com/HardenedBSD/ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/HardenedBSD/ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/HardenedBSD/ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/haggertk/linux-stable/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/haderech/libcxx/commit/5ec2188a58979e9662d86e4dc4fd6e256e7257a3	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/guix-mirror/guix/commit/a8d1e6bfa22c3f7f14e37584848e08a953ea4e02	gnu: libomp: Update to 13.0.0.* gnu/packages/llvm.scm (libomp): Update to 13.0.0.[arguments]: Add workaround to #:configure-flags.[native-inputs]: Change from CLANG-9 and LLVM-9 to CLANG and LLVM.
clang workaround	 https://github.com/grovesNL/spirv_cross/commit/0a4a7108305093a632626735c132d55fe552753c	Remove temporary clang workaround
clang workaround	 https://github.com/gromacs/gromacs/commit/5f78fcd97cf1dca7f3228e1097114735a453f654	Remove workaround for old clangNo longer needed as we require a more recent clang than version 6.
clang workaround	 https://github.com/gregtatum/gecko/commit/2cff1b241b9a83b40d167d6eda5cbb1d895c9c82	Bug 1736502 - Work around clang trunk changes that break our clang-trunk build. r=andiShort of solving this by fully embracing the monorepo build and removingthe projects/ workarounds (which will also require a compat more witholder clang versions we still build with the same script), we can solvethe bustage with a small hack.Differential Revision: https://phabricator.services.mozilla.com/D131458
clang workaround	 https://github.com/gregkh/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/gregkh/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/greghogan/guix/commit/a8d1e6bfa22c3f7f14e37584848e08a953ea4e02	gnu: libomp: Update to 13.0.0.* gnu/packages/llvm.scm (libomp): Update to 13.0.0.[arguments]: Add workaround to #:configure-flags.[native-inputs]: Change from CLANG-9 and LLVM-9 to CLANG and LLVM.
clang workaround	 https://github.com/greearb/linux-ct-5.17/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/grate-driver/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/GPSBabel/gpsbabel/commit/a5980a4e95a125e96606c4b75b857034c92d6b81	use precompiled headers to speed up compile time (#851)* speed up compiles with precompiled headers.* workaround QTBUG with precompiled headers and clang.* avoid including QtCore.* add ability to turn off precompiled headers.
clang workaround	 https://github.com/GPSBabel/gpsbabel/commit/25acbdf78c0f43a7c6d284736f5ca7249efe5a89	Use PImpl idiom to hide Format and Filter headers from users of Vecs, FilterVecs. (#854)* use pimpl to hide vec implementation of formats.* use PIMPL for filter_vecs.* sort vecs and filter_vecs include files.* workaround memory leak issues with pimpl vecs, filter_vecs.with some compilers sanitize address and valgrind reported errors.The number of errors varied with compiler/platform.Valgrind and sanitize address found different errors as well.MacOS with clang 13 ran error free.Linux with gcc9 and clang 10 showed multiple errors.The errors detected were related to the destruction of the Formatand Filter instances.* move ctors/dtors back to h files.* catch nuke_format up with vecs.
clang workaround	 https://github.com/googlestadia/vsi-lldb/commit/f9706c5f9ea440522a63f804f43e8842a646a8c9	[natvis] Improve Natvis std::string workaround for LLVM 11+When compiled with -fno-standalone-debug, clang-10 (and possiblyearlier versions) used to omit debug info required to displaystd::string properly. As a workaround, piece of Natvis code was addedthat relies on c_str() method in the cases where it's available.Since clang-11 enough information is produced by the compiler andthe workaround is no longer needed (it's also significantly slower).This change keeps the original workaround if the debugged binary wascompiled with Clang version 10 or less, and it removes it otherwise.GitOrigin-RevId: f9c93d4f71f75cb059abf3ab0df437ae6d1674af
clang workaround	 https://github.com/googlesamples/unity-jar-resolver/commit/56aaa44a7a1a9ba24e7ae21d740c5be0445e2047	Workaround to link Swift Standard LibrariesThe Xcode project generate from Unity may not be able to link SwiftStandard Libaries properly if1. Some pods include Swift frameworks2. Podfile sets to link frameworks staticallyThe workround attempts to fix this by1. Add a Dummy.swift file to the Xcode project.2. Enable `CLANG_ENABLE_MODULES` and `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES`   build settings.3. Change `SWIFT_VERSION` to the value specified in iOS Resolver   settings. Default to "5".This workaround is turned OFF by default.
clang workaround	 https://github.com/googlesamples/unity-jar-resolver/commit/04dc47c163a6863a3a1fbc817462fb12f93ecaa5	Workaround to link Swift Standard LibrariesThe Xcode project generate from Unity may not be able to link SwiftStandard Libaries properly if1. Some pods include Swift frameworks2. Podfile sets to link frameworks staticallyThe workround attempts to fix this by1. Add a Dummy.swift file to the Xcode project.2. Enable `CLANG_ENABLE_MODULES` and `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES`   build settings.3. Change `SWIFT_VERSION` to the value specified in iOS Resolver   settings. Default to "5".This workaround is turned OFF by default.
clang workaround	 https://github.com/googleprodkernel/linux-mm/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/googleprodkernel/linux-mm/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/googleapis/google-cloud-cpp/commit/96c993e3fadf322dbc0c5c1c5bc12f0905877831	ci: use clang-format-13's BasedOnStyle setting (#8649)Fixes: #6513This avoids the need to copy `.clang-format` files as a workaround.
clang workaround	 https://github.com/google/perfetto/commit/fee7ff542546e9708decc8618ee519d92ac90b4e	tracing: Add another workaround for a Clang/LLVM bug am: 62900eb9baOriginal change: https://android-review.googlesource.com/c/platform/external/perfetto/+/1808738Change-Id: I410e5b7b24a4705e29c3a0e61791d52c17fbb2da
clang workaround	 https://github.com/google/perfetto/commit/800772c663d26151ae088896097475af5b15e29b	tracing: Add another workaround for a Clang/LLVM bug am: 62900eb9ba am: fee7ff5425Original change: https://android-review.googlesource.com/c/platform/external/perfetto/+/1808738Change-Id: I58fb4d296397e8b23844c3db1e6f04585b46241b
clang workaround	 https://github.com/google/kmsan/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/goldshellofficial/libunifex/commit/f802b9d67222ec77a4fc8bda0411f18c737040d8	Vanilla clang needs the -O2 ASAN workaround too
clang workaround	 https://github.com/goldshellofficial/libunifex/commit/1a988ae9dad363e30e9f30effa7eb3cefdff5a66	Merge pull request #285 from facebookexperimental/fix-clang-O2-asan-workaroundVanilla clang needs the -O2 ASAN workaround too
clang workaround	 https://github.com/GoBigorGoHome/JHelperXProject/commit/bad4cf6272c931152883b0fab3c438316d85c01d	Remove a workaround for a fixed problem of Clang
clang workaround	 https://github.com/GNUWeeb/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/gnustep/tools-make/commit/93c893bcde796cda53c93119a0782b408a89297f	Add workaround for Clang bug on Windows MSVC
clang workaround	 https://github.com/gnu-mirror-unofficial/guix/commit/a8d1e6bfa22c3f7f14e37584848e08a953ea4e02	gnu: libomp: Update to 13.0.0.* gnu/packages/llvm.scm (libomp): Update to 13.0.0.[arguments]: Add workaround to #:configure-flags.[native-inputs]: Change from CLANG-9 and LLVM-9 to CLANG and LLVM.
clang workaround	 https://github.com/gnoliyil/fuchsia/commit/aecc939e427da9d8b58a9d556af69243c49572e6	[appmgr] Appease clang-tidyRemove obsolete workaround while I'm here.Fixed: 64385Change-Id: I2bb5e1f7c098fdd4dc72702d2a5346c43d18de93Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/670762Fuchsia-Auto-Submit: Tamir Duberstein <tamird@google.com>Reviewed-by: Shai Barack <shayba@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang workaround	 https://github.com/gnoliyil/fuchsia/commit/2b4a448e38f1c9f5b0d581e1addb04a01dd2e92e	[starnix] Force generation of missing definesSystem header defines that are defined via calling a function are notgenerated by rust-bindings.This CL introduces a workaround by redefining these includes asconstants so that clang compute them and rust-bindings recognize them.Change-Id: I0c5a43cc6638a2c88d2a922d9ca9bcbcaca946b1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/661346Reviewed-by: Adam Barth <abarth@google.com>Fuchsia-Auto-Submit: Benjamin Lerman <qsr@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang workaround	 https://github.com/gnoliyil/fuchsia/commit/2956f19738b524808a0c609640edbbbb46d7489f	[kernel][x86] Remove <cpuid.h> inclusion workaroundPreviously, both GCC and Clang supplied <cpuid.h> without a multipleinclusion guard. This has since been fixed (as of GCC 11.2.1 and Clang14.0.0).Fixed: 64109Change-Id: I37a0f045890829eda7447c17be4c7b7f2fc41a53Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/650342Fuchsia-Auto-Submit: Joshua Seaton <joshuaseaton@google.com>Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Joshua Seaton <joshuaseaton@google.com>
clang workaround	 https://github.com/gitlab-freedesktop-mirrors/drm/commit/eaf234c1489f53035fba1698c1a27781f5755be6	meson: switch to cc.get_supported_argumentsThis is generally faster, as meson is able to parallelize the checks forus.This also removes the workaround for checking gcc/clang -Wno-*arguments, which meson now handles internally so we don't need to handleit ourselves.Signed-off-by: Dylan Baker <dylan@pnwbakers.com>Reviewed-by: Simon Ser <contact@emersion.fr>
clang workaround	 https://github.com/ghostbsd/ghostbsd-ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/ghostbsd/ghostbsd-ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/ghostbsd/ghostbsd-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/ghex-org/hwmalloc/commit/52f4e87829c0c2653bc5023470fcb92c3acc519b	Merge pull request #32 from boeschf/masterworkaround for CI: clang+hip
clang workaround	 https://github.com/ghex-org/GHEX/commit/e636715f5685882babc604a574433343c8168c16	workaround for clang+openmp
clang workaround	 https://github.com/ghex-org/GHEX/commit/2628101d2b5f5d006785e110339478dfcd8bd954	clang workaround for openmp
clang workaround	 https://github.com/Gepetto/robotpkg-wip/commit/2f7e7b3a9e3b78f8dcfac8d504ec27450ea7e13a	[wip/py-example-adder] Update to v4.0.0Changes in v4.0.0:- workaround missing submodule- add RPATH- add package.xml- reformat for black & clang-format 12Packaging changes:- removed wip/example-adder
clang workaround	 https://github.com/geopd/Mystique_sakura/commit/09e36fdda62a6ebb8eb409dbebe22de757aeb44f	ANDROID: enable ARM64_ERRATUM_843419 by default with LTO_CLANGThis reverts a workaround we needed with an old version of thetoolchain.Bug: 145210207Change-Id: If28b9f97da21c046adff7d5a58943a4fc06cb390Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Diab Neiroukh <lazerl0rd@thezest.dev>Signed-off-by: CloudedQuartz <ravenklawasd@gmail.com>Signed-off-by: GeoPD <geoemmanuelpd2001@gmail.com>
clang workaround	 https://github.com/gentoo-mirror/lto-overlay/commit/3a76813c608a93404d61d978791a3607125e0893	clang: libc++ & more lto workarounds (#710)
clang workaround	 https://github.com/GeGuNa/pdns/commit/5383ab20e31d7b1dc52ee221d2daef92d583637d	Merge pull request #11176 from omoerbeek/dnsdist-workaround-openbsd-compiler-bugdnsdist: Work around a compiler bug seen on OpenBSD/amd64 using clang-13
clang workaround	 https://github.com/GeGuNa/freebsd-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/GeGuNa/bind9/commit/ae508c17bcf9a5c67a5c889f79624449f1e998d6	Remove workaround for ancient clang versions (<< 3.2 and << 4.0.1)Some ancient versions of clang reported uninitialized memory use falsepositive (see https://bugs.llvm.org/show_bug.cgi?id=14461).  Since clang4.0.1 has been long obsoleted, just remove the workarounds.
clang workaround	 https://github.com/gavinhoward/bc/commit/621adbd71d3cc81e56b7f8ec01551ab34feb9c56	Workaround a clang bugClang seems to think that BC_C11 is not defined, but if you look in theinclude/status.h header, you'll see that it is definitely defined. So,we need to work around the Clang bug.Signed-off-by: Gavin Howard <gavin@yzena.com>
clang workaround	 https://github.com/fwupd/fwupd/commit/3822422b1e450752322a5dc9fd0011b9b4238b3c	trivial: Workaround two false 'unused' warnings from clang
clang workaround	 https://github.com/FurtherOS/build_soong/commit/75f2aa2c554498177d78278af119114c07bbc53b	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>Signed-off-by: Rahul K <rahul-k@bigdi.cc>
clang workaround	 https://github.com/freedesktop/drm-tip/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/freedesktop/drm-misc/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/freedesktop/drm-misc/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/freedesktop/drm-intel/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/freebsd/freebsd-ports-kde/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/freebsd/freebsd-ports-kde/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/freebsd/freebsd-ports-kde/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/freebsd/freebsd-ports-haskell/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/freebsd/freebsd-ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/freebsd/freebsd-ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/freebsd/freebsd-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/foxhoundsk/sched-profiler/commit/63e1847e5cd0ac0a6bfd0939304e5bca9f542eb0	Fix compilation issue of ClangAtomic helpers in BPF can't pass the check of Clang, this issue hasalready fixed in previous versions of Clang, however it still present inClang-11 or Clang-12. The workaround is to apply '-mcpu=v3' flag.ref: https://patchwork.ozlabs.org/project/netdev/patch/20200219004236.2291125-1-yhs@fb.com/#2365858
clang workaround	 https://github.com/foonathan/lexy/commit/86f807852ec1f453ba7aeca7c69c062f7650fa37	Workaround clang-cl compiler bug
clang workaround	 https://github.com/foonathan/lexy/commit/743dd6fd9dc78723a2e9da6b87a453606e9da311	Extend auto NTTP clang compiler bug workaround to clang 7
clang workaround	 https://github.com/foonathan/lexy/commit/447489a19954e01047a488631bdeed8339de99ec	Workaround compiler bug in clang-cl
clang workaround	 https://github.com/fmtlib/fmt/commit/3e7a29cc9221f7c595c8fc322328d06e4a0bbd9e	Workaround clang/gcc incompatibility
clang workaround	 https://github.com/FlokoROM/frameworks_base/commit/3ec23b068a92780e2a48ba4ccfdd93838e178d2a	Workaround global ThinLTO build breakThese projects triggers Clang crash for global ThinLTO build. DisableThinLTO for these projects for now.This CL has no affect for normal builds.Test: GLOBAL_THINLTO=true mBug: 169004486Change-Id: Id0c7d243250b6dc7f1ec3099c77cebc179d2c3b3Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang workaround	 https://github.com/fjarcticfox/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/FireBurn/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/FireBurn/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/fidus58/networkit_with_attributes/commit/dcb8355bbde89103a95e03c1343f06f0ce5476f3	Updates breathe version; adds workarounds for clang-12 errors/bugs
clang workaround	 https://github.com/falkdavid/blender-branches/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/facebookincubator/velox/commit/6a1e4b294ff95eb88ce8ec33a35b129ca2aff5ad	Fix deprecated declarations warning coming from DuckDB (#1310)Summary:As reported here https://github.com/facebookincubator/velox/issues/1286, newer Clang versions report a `deprecated-declarations` warning from DuckDB. This warning is from the Thrift library that DuckDB embeds. Even the Thrift master has this issue.The workaround, for now, is to disable this warning.Unfortunately, we cannot test this on CI as the Clang version is still 11.0.3. I was able to verify this on my local machine that has Clang 13.1.6Resolves https://github.com/facebookincubator/velox/issues/1286Pull Request resolved: https://github.com/facebookincubator/velox/pull/1310Reviewed By: kgpaiDifferential Revision: D35252309Pulled By: mbasmanovafbshipit-source-id: 06a2e1d7c8e130f13c91cd361585a0ed940409da
clang workaround	 https://github.com/facebookincubator/Glean/commit/a7362bb8dcdc7bfcff6ae1acde676d1854848e9c	Workaround #119 (clang miscompile on ubuntu 20) (#122)Summary:We use ubuntu 22 for the clang container. However, hhvm doesn't haveimages for ubuntu 22 yet, so we just won't run the hhvm tests on thatcontainer.To summarize:- clang builds miscompile glean:cppexception on ubuntu 20, but passes on ubuntu 22- hhvm runs on ubuntu 20, but not on 22 yetConclusion: retain the fast clang build for useful signal. For hhvmtests , watch the regular CI until we get hhvm for ubuntu/jammyPull Request resolved: https://github.com/facebookincubator/Glean/pull/122Reviewed By: nhawkesDifferential Revision: D35005228Pulled By: phlalxfbshipit-source-id: ac9147d322b87b2a705e3e8d648adb18777426d2
clang workaround	 https://github.com/facebookincubator/BOLT/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/facebookincubator/BOLT/commit/5ff52be5d98a621db6de079ad09d0f94854938e8	[sanitizer] Restore __thumb__ workaroundIt was removed in D114934 and failed clang-thumbv7-full-2stage.
clang workaround	 https://github.com/facebookexperimental/libunifex/commit/f802b9d67222ec77a4fc8bda0411f18c737040d8	Vanilla clang needs the -O2 ASAN workaround too
clang workaround	 https://github.com/facebookexperimental/libunifex/commit/1a988ae9dad363e30e9f30effa7eb3cefdff5a66	Merge pull request #285 from facebookexperimental/fix-clang-O2-asan-workaroundVanilla clang needs the -O2 ASAN workaround too
clang workaround	 https://github.com/facebook/fbthrift/commit/925468e5df0808c5da34afbb20a2cbca71513435	Revert clang9 ICE workaroundSummary: We can now assume a newer version of clangReviewed By: yfeldblumDifferential Revision: D32625289fbshipit-source-id: 5cdbf72eb2662aa8a20e37eda2676c9e9fc9c99c
clang workaround	 https://github.com/eyalz800/zpp_bits/commit/07335110028c6f63c46be5269fc3c689f056d5e6	Workaround crash in clang-12.
clang workaround	 https://github.com/Evolution-X/build_soong/commit/5c19943c694a7fb450d5fa2a2d494a8f6cb35ff7	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: Joey Huab <joey@evolution-x.org>
clang workaround	 https://github.com/evanacox/fuchsia/commit/2956f19738b524808a0c609640edbbbb46d7489f	[kernel][x86] Remove <cpuid.h> inclusion workaroundPreviously, both GCC and Clang supplied <cpuid.h> without a multipleinclusion guard. This has since been fixed (as of GCC 11.2.1 and Clang14.0.0).Fixed: 64109Change-Id: I37a0f045890829eda7447c17be4c7b7f2fc41a53Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/650342Fuchsia-Auto-Submit: Joshua Seaton <joshuaseaton@google.com>Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Joshua Seaton <joshuaseaton@google.com>
clang workaround	 https://github.com/evadot/freebsd-ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/evadot/freebsd-ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/evadot/freebsd-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/espressif/esp-idf/commit/1e2b1238c6a03c941e81a422b7cebe5f3dd795fd	cbor: add a workaround for -ffreestanding being passed to clangToolchain CMake files for clang currently pass -ffreestanding optionto prevent clang from picking the wrong copy of stdint.h. This is atemporary hack until we fix clang distributions to not include theGCC version of stdint.h. This hack, however, results in setting__STDC_HOSTED__=0, which is being checked by cbor header files,making some required functions unavailable as a result.Undefine __STDC_HOSTED__ as a workaround. This flag is only passedwhen compiling cbor itself.
clang workaround	 https://github.com/Ericsson/codechecker/commit/0bd7dd2365d238d037fb2f0af07f20a252d7b089	[clang-tidy][cfg] Remove an alias from the extreme profileIt seems like that `bugprone-narrowing-conversions` check is the same asthe `cppcoreguidelines-narrowing-conversions` check.Check this:https://github.com/llvm/llvm-project/blob/c63522e6ba7782c335043893ae7cbd37eca24fe5/clang-tools-extra/clang-tidy/bugprone/BugproneTidyModule.cpp#L136-L137It seems like both of these checks were included in the `extreme`profile, thus each of these reports were duplicated basically.Hereby I'm proposing to keep only one of them in the profile toworkaround this issue.According to Compiler Explorer https://godbolt.org/z/hvMnqrfEx,clang-tidy reports these issues only once, with the`[check,alias,alias...]` schema, thus it does the right thing.However, PR #3238 introduced a logic that splits these reportsinto individual reports.I'm not sure if that is the right way of dealing with check aliases, butwe definitely need something more robust than including/excluding checksfrom profiles.
clang workaround	 https://github.com/embed-3d/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/elytraOS/build_soong/commit/160a4a25aeb4773d6e051be85bb258704cb359ad	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/elpaablo/build_soong/commit/32b63f64149cbd4c25780b67a1173cf604d6fbb2	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/eliemichel/OpenMfxForBlender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/elevenia/edts-telegram-td/commit/ac8ccaf9703ba016015a7187e74891f751c944e9	Workaround clang 3.4 warning.
clang workaround	 https://github.com/elevenia/edts-telegram-td/commit/ac5e1960f9c06ff186779111f618821d623f758f	Workaround clang 3.4 bug.
clang workaround	 https://github.com/EFanZh/LeetCode/commit/0b292713bdaa97e69a411cd924675e1083f1e45e	Use C++17 standard to workaround a Clang-Tidy bug
clang workaround	 https://github.com/edgeble/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/ederekun/x_kernel_oneplus_msm8998/commit/d33538500998b5074b95387c5d28dbdf187a9c4e	tree: Remove unnecessary GCC_VERSION invocationsUnnecessary in our case where we compile with Clang and latter GCC versions of which have likely fixed the issues the source code is trying to workaround.Signed-off-by: ederekun <sedrickvince@gmail.com>
clang workaround	 https://github.com/ECP-WarpX/WarpX/commit/d0cc41acec8fbba8d66fabd3351751adf00903d7	Add structure for proton-boron fusion module (#2217)* Add structure for proton-boron fusion module* Fix clang compile error* Generalize structure for other nuclear fusion types* Workaround: try to use std::vectors to fix clang compile error* Simplify workaround for clang* Rebase on 2245 and add empty particle creation functor* Apply suggestions from code reviewCo-authored-by: Axel Huebl <axel.huebl@plasma.ninja>* Add couple of consts and runtime assert* Add another constCo-authored-by: Axel Huebl <axel.huebl@plasma.ninja>
clang workaround	 https://github.com/ECP-WarpX/artemis/commit/d0cc41acec8fbba8d66fabd3351751adf00903d7	Add structure for proton-boron fusion module (#2217)* Add structure for proton-boron fusion module* Fix clang compile error* Generalize structure for other nuclear fusion types* Workaround: try to use std::vectors to fix clang compile error* Simplify workaround for clang* Rebase on 2245 and add empty particle creation functor* Apply suggestions from code reviewCo-authored-by: Axel Huebl <axel.huebl@plasma.ninja>* Add couple of consts and runtime assert* Add another constCo-authored-by: Axel Huebl <axel.huebl@plasma.ninja>
clang workaround	 https://github.com/ecmwf/atlas/commit/2b30657028471a31e575d036d7ac4fd2caa21062	Try workaround clang 3.8 compilation problem
clang workaround	 https://github.com/drdteam/raze-gles/commit/957a23d2820d54f5e92ae6227104f35a7cdc4b1b	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/drdteam/gzdoom-gles/commit/fe1514ce0440b19e398372e3ddb95142a87f775c	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/DozNaka/KawaKernel-A217X/commit/efb4ce6f2917e041b25e16335fa15283cf952eb9	riscv: Workaround mcount name prior to clang-13[ Upstream commit 7ce04771503074a7de7f539cc43f5e1b385cb99b ]Prior to clang 13.0.0, the RISC-V name for the mcount symbol was"mcount", which differs from the GCC version of "_mcount", which resultsin the following errors:riscv64-linux-gnu-ld: init/main.o: in function `__traceiter_initcall_level':main.c:(.text+0xe): undefined reference to `mcount'riscv64-linux-gnu-ld: init/main.o: in function `__traceiter_initcall_start':main.c:(.text+0x4e): undefined reference to `mcount'riscv64-linux-gnu-ld: init/main.o: in function `__traceiter_initcall_finish':main.c:(.text+0x92): undefined reference to `mcount'riscv64-linux-gnu-ld: init/main.o: in function `.LBB32_28':main.c:(.text+0x30c): undefined reference to `mcount'riscv64-linux-gnu-ld: init/main.o: in function `free_initmem':main.c:(.text+0x54c): undefined reference to `mcount'This has been corrected in https://reviews.llvm.org/D98881 but theminimum supported clang version is 10.0.1. To avoid build errors and togain a working function tracer, adjust the name of the mcount symbol forolder versions of clang in mount.S and recordmcount.pl.Link: https://github.com/ClangBuiltLinux/linux/issues/1331Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>Signed-off-by: Sasha Levin <sashal@kernel.org>
clang workaround	 https://github.com/DotOS/android_build_soong/commit/45ac4fc8fe2cb52a37cd47ce64ff64b091552bb3	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/dotnet/runtime/commit/78f4a7de7e89ddefa88f9e9da7604ecb5c58d3b7	Workaround clang crash due to large array assignment (#62675)
clang workaround	 https://github.com/DosFreak/Raze/commit/957a23d2820d54f5e92ae6227104f35a7cdc4b1b	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/D-os/bionic/commit/d8854293d1894bc60c2164de11127a66e07fcd56	Merge "Workaround Clang cannot build ifunc with LTO"
clang workaround	 https://github.com/D-os/bionic/commit/44b13472fee9d4a28318d82168282d0fc3bc75cc	Merge "Workaround Clang cannot build ifunc with LTO" am: d8854293d1Original change: https://android-review.googlesource.com/c/platform/bionic/+/1864137Change-Id: I8e69698604197a6be24f01b1c8a0be347e2beff9
clang workaround	 https://github.com/DoraemonOS/android_build_soong/commit/3b28092bba09ddd33a24e172d109ed1dc6f2210f	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: H閻 Phan <phandinhhungvp2001@gmail.com>
clang workaround	 https://github.com/Dogenano-xdg/dogenano-node/commit/9e2e8d259eb808d3d5023eb1ea26b62f6fa79694	Formatting workaround to make clang-format happy on OSX (#3467)Co-authored-by: theohax <theo@nano.org>
clang workaround	 https://github.com/DNKpp/Simple-Iterator/commit/570055dadcfb7af9e4593fa0009f655eea762e7f	use requires workarounds statements, due to clang issuesSigned-off-by: DNKpp <dnkpp2011@gmail.com>
clang workaround	 https://github.com/dmlc/xgboost/commit/d4796482b591f211929c50a50468aa69ce689cb8	Fix failures on R hub and Win builder. (#7763)* Update date.* Workaround amalgamation build with clang. (SimpleDMatrix instantiation)* Workaround compiler error with driver push.* Revert autoconf requirement.* Fix model IO on 32-bit environment. (i386)* Clarify the function name.
clang workaround	 https://github.com/dmalhotra/SCTL/commit/fc3f7e72f3333cdc90c4eb5b5ef3cf3fb8077dde	Workaround for clang compilation issues
clang workaround	 https://github.com/dlwlrma123/build_soong/commit/6c8f504c932476aee15c3b00b3c3ba4e45d94e4d	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/dkavolis/iterator_facade/commit/b9217c06f83f7e30d9db34852e026a065843515e	clang workaround
clang workaround	 https://github.com/Divyanshu-Modi/linux-5.x/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/dirty-south-supercomputing/torvalds-linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/dirty-south-supercomputing/torvalds-linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/dirk-netl/OpenFoamBenchmarks/commit/29f7fcc515c14eb42429cec53ae1c888403ddc7e	COMP: workaround clang-13 optimization issue (vtk handling)
clang workaround	 https://github.com/Dirk1980ac/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/dgreid/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/dgreid/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/dgist-datalab/cxl-kernel/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/dfelinto/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/defold/defold/commit/688360b325fe49fd00ba323497b9406054fb67c7	Enable Linux builds to use local compiler (#6361)* Updated to support Linux builds on WSL* Added support for local clang on Linux* Updated CI to use Ubuntu 20.04* Removed github ci workaround hack* list update alternatives* list update alternatives* list clang exes* add clang update alternative* use the prepackaged clang-13 version for cross platform* FIxed support for the prepackaged compiler* Build fix on CI for iPhoneOS* Use host toolchain when cross compiling for Darwin* Fixed cross compile build for darwin* Fixed build for android* Fixes for build platform variable* Use install_sdk to find signtool for editor* Added host_platform
clang workaround	 https://github.com/deeplex/deeppack/commit/1450871cd2ecf7cb194810c11ea35a659a12922c	Enable (object|tuple)_utils for clang 12- Add a workaround for a broken string_view <=> lookup by clang 12
clang workaround	 https://github.com/deadmorous/silver_bullets/commit/b6aade9d47dd413f142a12069c9d352cbf9f0d66	fs_ns_workaround: Fixed gcc and clang compiler identification.
clang workaround	 https://github.com/DaveWysochanskiRH/kernel/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/DaveWysochanskiRH/kernel/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/damonitor/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/dakkshesh07/linux-dejavu/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/dakkshesh07/android_kernel_realme_RMX1921-base/commit/a2b41c321a74d55d0d497dc8b8bba0f05f795dc0	ANDROID: enable ARM64_ERRATUM_843419 by default with LTO_CLANGThis reverts a workaround we needed with an old version of thetoolchain.Bug: 145210207Change-Id: If28b9f97da21c046adff7d5a58943a4fc06cb390Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Diab Neiroukh <lazerl0rd@thezest.dev>Signed-off-by: CloudedQuartz <ravenklawasd@gmail.com>Signed-off-by: Dakkshesh <dakkshesh5@gmail.com>
clang workaround	 https://github.com/czender/sw/commit/919fa792d031daa9b834b34be65648e6ee89913c	Workaround Conflict between GCC and Clang OpenMP implementations
clang workaround	 https://github.com/CYCLONE-AOSP/android_build_soong/commit/5a4992f7e251cc9926b8d78a5f8a291aebb4c1c1	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/cyberknight777/linux-dragonheart/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/CTSRD-CHERI/compiler-rt/commit/c3887d793317aa2070f372ad024934027c0a4be7	[CMake][compiler-rt][libunwind] Compile assembly files as ASM not C, unify workaroundsIt isn't very wise to pass an assembly file to the compiler and tell it to compile as a C file and hope that the compiler recognizes it as assembly instead.Simply don't mark the file as C and CMake will recognize the rest.This was attempted earlier in https://reviews.llvm.org/D85706, but reverted due to architecture issues on Apple.Subsequent digging revealed a similar change was done earlier for libunwind in https://reviews.llvm.org/rGb780df052dd2b246a760d00e00f7de9ebdab9d09.Afterwards workarounds were added for MinGW and Apple:* https://reviews.llvm.org/rGb780df052dd2b246a760d00e00f7de9ebdab9d09* https://reviews.llvm.org/rGd4ded05ba851304b26a437896bc3962ef56f62cbThe workarounds in libunwind and compiler-rt are unified and comments added pointing to each other.The workaround is updated to only be used for MinGW for CMake versions before 3.17, which fixed the issue (https://gitlab.kitware.com/cmake/cmake/-/merge_requests/4287).Additionally fixed Clang not being passed as the assembly compiler for compiler-rt runtime build.Example error:[525/634] Building C object lib/tsan/CMakeFiles/clang_rt.tsan-aarch64.dir/rtl/tsan_rtl_aarch64.S.oFAILED: lib/tsan/CMakeFiles/clang_rt.tsan-aarch64.dir/rtl/tsan_rtl_aarch64.S.o/opt/tooling/drive/host/bin/clang --target=aarch64-linux-gnu -I/opt/tooling/drive/llvm/compiler-rt/lib/tsan/.. -isystem /opt/tooling/drive/toolchain/opt/drive/toolchain/include -x c -Wall -Wno-unused-parameter -fno-lto -fPIC -fno-builtin -fno-exceptions -fomit-frame-pointer -funwind-tables -fno-stack-protector -fno-sanitize=safe-stack -fvisibility=hidden -fno-lto -O3 -gline-tables-only -Wno-gnu -Wno-variadic-macros -Wno-c99-extensions -Wno-non-virtual-dtor -fPIE -fno-rtti -Wframe-larger-than=530 -Wglobal-constructors --sysroot=. -MD -MT lib/tsan/CMakeFiles/clang_rt.tsan-aarch64.dir/rtl/tsan_rtl_aarch64.S.o -MF lib/tsan/CMakeFiles/clang_rt.tsan-aarch64.dir/rtl/tsan_rtl_aarch64.S.o.d -o lib/tsan/CMakeFiles/clang_rt.tsan-aarch64.dir/rtl/tsan_rtl_aarch64.S.o -c /opt/tooling/drive/llvm/compiler-rt/lib/tsan/rtl/tsan_rtl_aarch64.S/opt/tooling/drive/llvm/compiler-rt/lib/tsan/rtl/tsan_rtl_aarch64.S:29:1: error: expected identifier or '('.section .text^1 error generated.Differential Revision: https://reviews.llvm.org/D86308
clang workaround	 https://github.com/crdroidandroid/android_build_soong/commit/1177ddcae6320533a9905e0b17b384daa0ea8884	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang workaround	 https://github.com/crd-next/android_build_soong/commit/87a545bff2e9b90342f4e117077586e55c3e370f	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang workaround	 https://github.com/cpradog/FreeBSD-ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/cpradog/FreeBSD-ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/cpradog/FreeBSD-ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/contour-terminal/contour/commit/995ede4ba03fad34e5bf18d8237c052a669cc221	[terminal] Restrict compile error workaround to Clang<=11 rather than FreeBSD platform.
clang workaround	 https://github.com/conda-forge/pynio-feedstock/commit/43d1b405fe7b48cc5046d73822ae66391e91fde6	Revert gcc 10 tentative definition behaviourGCC 10 changes how to handle tentative definitions, with thiscodebase this generates errors like (simplifying a bit):[... libnio.a(NclNewHDF5.o):(.bss+0x0): multiple definition of `possibleDimNames';[...] libnio.a(NclHDF5.o):(.bss+0x0): first defined hereA workaround is available to use the old behaviour, fixing this issue,see also https://gcc.gnu.org/gcc-10/porting_to.html (par. Default to-fnoc-common). Probably this is not compatible with clang.
clang workaround	 https://github.com/ComputationalRadiationPhysics/picongpu/commit/c3a95babec2a2fbedba00e542136ea7e064b38de	workaround Boost.Config disabling variadic macros with clang as CUDA compilerFixes: #3796
clang workaround	 https://github.com/ColinIanKing/stress-ng/commit/7a1b210905befcbf320245a73f6d2d2b13edc55a	stress-sparsematrix: workaround clang warnings on JLFA macroThe Judy macro JLFA can cause spurious warnings on type converstionsbetween int and Word_t; these can be safely ignored, use pragmas toavoid this.Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
clang workaround	 https://github.com/ColinIanKing/linux-next/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/ColinIanKing/linux-next/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/ColinIanKing/linux-next/commit/45bd8951806eb5e857772c593de021b09057950d	arm64: Improve HAVE_DYNAMIC_FTRACE_WITH_REGS selection for clangWill and Anders reported that using just 'CC=clang' with CONFIG_FTRACE=yand CONFIG_STACK_TRACER=y would result in an error while linking:  aarch64-linux-gnu-ld: .init.data has both ordered [`__patchable_function_entries' in init/main.o] and unordered [`.meminit.data' in mm/sparse.o] sections  aarch64-linux-gnu-ld: final link failed: bad valueThis error was exposed by commit f12b034afeb3 ("scripts/Makefile.clang:default to LLVM_IAS=1") in combination with binutils older than 2.36.When '-fpatchable-function-entry' was implemented in LLVM, two codepaths were added for adding the section attributes, one for theintegrated assembler and another for GNU as, due to binutilsdeficiencies at the time. If the integrated assembler was used,attributes that GNU ld < 2.36 could not handle were added, presumablywith the assumption that use of the integrated assembler meant the wholeLLVM stack was being used, namely ld.lld.Prior to the kernel change previously mentioned, that assumption wasvalid, as there were three commonly used combinations of tools forcompiling, assembling, and linking respectively:$ make CC=clang (clang, GNU as, GNU ld)$ make LLVM=1 (clang, GNU as, ld.lld)$ make LLVM=1 LLVM_IAS=1 (clang, integrated assembler, ld.lld)After the default switch of the integrated assembler, the second andthird commands become equivalent and the first command means "clang,integrated assembler, and GNU ld", which was not a combination that wasconsidered when the aforementioned LLVM change was implemented.It is not possible to go back and fix LLVM, as this change wasimplemented in the 10.x series, which is no longer supported. Toworkaround this on the kernel side, split out the selection ofHAVE_DYNAMIC_FTRACE_WITH_REGS to two separate configurations, one forGCC and one for clang.The GCC config inherits the '-fpatchable-function-entry' check. TheClang config does not it, as '-fpatchable-function-entry' is alwaysavailable for LLVM 11.0.0 and newer, which is the supported range ofversions for the kernel.The Clang config makes sure that the user is using GNU as or theintegrated assembler with ld.lld or GNU ld 2.36 or newer, which willavoid the error above.Link: https://github.com/ClangBuiltLinux/linux/issues/1507Link: https://github.com/ClangBuiltLinux/linux/issues/788Link: https://lore.kernel.org/YlCA5PoIjF6nhwYj@dev-arch.thelio-3990X/Link: https://sourceware.org/bugzilla/show_bug.cgi?id=26256Link: https://github.com/llvm/llvm-project/commit/7fa5290d5bd5632d7a36a4ea9f46e81e04fb819eLink: https://github.com/llvm/llvm-project/commit/853a2649160c1c80b9bbd38a20b53ca8fab704e8Reported-by: Anders Roxell <anders.roxell@linaro.org>Reported-by: Will Deacon <will@kernel.org>Tested-by: Will Deacon <will@kernel.org>Signed-off-by: Nathan Chancellor <nathan@kernel.org>Link: https://lore.kernel.org/r/20220413181420.3522187-1-nathan@kernel.orgSigned-off-by: Will Deacon <will@kernel.org>
clang workaround	 https://github.com/coelckers/gzdoom/commit/fe1514ce0440b19e398372e3ddb95142a87f775c	- updated continuous integration workflow* Switch from macOS 10.15 to 11, Xcode 12.4 to 12.5* Switch from Clang 11 to 12* Remove no longer needed workaround for Clang 6 with GCC 11 deinstallation
clang workaround	 https://github.com/CodeIntelligenceTesting/a_util_test/commit/54d53751b1e35b9c20010693350ef276b9a2e6b8	workaround to compile with clang
clang workaround	 https://github.com/ClickHouse/ClickHouse/commit/11a029c96b3f694170032dce915e70e876710087	Attempt to workaround clang-tidy bug
clang workaround	 https://github.com/CleverRaven/Cataclysm-DDA/commit/cc066b86a850d2bda759c0f709e3139542f9748a	Revert "Workaround for linking error w/ clang & glibc 2.31+"This reverts commit 942f1efca779326af3aca2a0a1b129f40610a3bf.
clang workaround	 https://github.com/CleverRaven/Cataclysm-DDA/commit/2fa0fcd2df5e71c7f809c5c49a00b10dc3197880	Merge pull request #54241 from BrettDong/glibcRevert "Workaround for linking error w/ clang & glibc 2.31+"
clang workaround	 https://github.com/ckormanyos/wide-integer/commit/3c735a4bc4150f9f9886b5b0648937d69e051d55	Workaround clang-tidy CI pkg update failure
clang workaround	 https://github.com/chromium/chromium/commit/c55f938c38072603695aa0e86bdabaeda7683e4d	[clang] Build with -DLLVM_DISABLE_ASSEMBLY_FILES=ONThis is a temporary workaround forhttps://reviews.llvm.org/rG5426da8ffa4a6d55adab21026ce6ebe8f1cc6ef2 notworking with our build for some reason.Bug: 1312610Change-Id: I77d8525951dc93a3bd6ff3c84ca546c92a169840Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3566256Auto-Submit: Arthur Eubanks <aeubanks@google.com>Reviewed-by: Nico Weber <thakis@chromium.org>Commit-Queue: Nico Weber <thakis@chromium.org>Cr-Commit-Position: refs/heads/main@{#988219}
clang workaround	 https://github.com/chromium/chromium/commit/9ec90be29cbef77a5fdfbd9f26521221cd9a1e9f	[clang] Remove -DLLVM_DISABLE_ASSEMBLY_FILES=ONThis was originally added due to the assembler complaining about assembly files in LLVM.Let's try removing this workaround now that we're using clang to build clang on Linux.Bug: 1312610Change-Id: Id16060eb2a2caf0835595780d643e400b71311e5Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3586210Reviewed-by: Nico Weber <thakis@chromium.org>Commit-Queue: Arthur Eubanks <aeubanks@google.com>Cr-Commit-Position: refs/heads/main@{#992676}
clang workaround	 https://github.com/chriskohlhoff/asio/commit/fc901d79c11c72a0ba81764820d3c6a788c0f075	Add workaround for apparent coroutine codegen bug with Apple's clang.
clang workaround	 https://github.com/chloekek/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/Chilledheart/yass/commit/59fdac632bf0367040e48ceef8f9841ad1967760	workaround about clang-cl cross-compiling under windowssee https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_TARGET.htmlrelated to #3
clang workaround	 https://github.com/cheshirekow/protostruct/commit/64380a70b8b1530f91b667461f8808083b049f71	[protostruct] Build repairs after premature merge* Generate protostruct bindings for new messages* Workaround clang-8 can't find standard headers* write c typename in generated .proto file if less than 32 bits* add missing type handlers for small integer types* add stdalign and stdbool to .h reconstruction template* Fix protostruct pbwire parser names for integer types less than  32bits in width
clang workaround	 https://github.com/CherishOS/android_build_soong/commit/8827c4dde86203bdd6056110e70ec18ec40677a7	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: H閻 Phan <phandinhhungvp2001@gmail.com>
clang workaround	 https://github.com/Chatmod134/Benamin/commit/356ef5bd0e871d58c274110d3689870b8cb264b9	Fix CLANG/RELEASE build (this is a workaround for probable bug in CLANG)
clang workaround	 https://github.com/chapel-lang/chapel/commit/b559c9bac49c6d2468623f083f87e8e9c43ee692	Filter compile args from gasnetTo avoid GCC flags passed to clang.This is a workaround. Maybe we could stop buildingGasnet with GCC always, instead.---Signed-off-by: Michael Ferguson <mppf@users.noreply.github.com>
clang workaround	 https://github.com/ceph/ceph-client/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/cavoke-project/cavoke/commit/e72ceb2c53d72c4cc6262fb373265a761235de37	CI, CMake + minor fixes (#82)* cmake now has `-DBUILD_ALL`by default cmake includes all targets, but with `-DBUILD_ALL=ON` you can now choose what do you want to enable. Useful for ci* [ci] new jobs: games + clangformat, clangtidy, cppcheck for master* [ci] fix* [ci] fix* [ci] fix* [ci] fix* [ci] fix* [ci] fix* [server] add workaround for boost/process* [ci] try clangformat, clangtidy, cppcheck* disable clang-tidy* clang-format* cppcheck fix* [ci] try most recent clang-format
clang workaround	 https://github.com/catboost/catboost/commit/d0f350d6ee58799c57a1f81751b43b7c1b1d7863	Extend workaround for different functions having the same mangled name to clang on windows.DEVTOOLSSUPPORT-12386ref:48d0afd619db73d2dd7c5ee6f84a43b3043d91f2
clang workaround	 https://github.com/captainys/TOWNSEMU/commit/b396b76a0db38c1d1ba84242b500e1b38cf085b2	Workaround for clang's bug.
clang workaround	 https://github.com/candy-staging/build_soong/commit/4f45da0605538edf95f0a2e2219d83b25aaf9bb6	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/calra123/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/CAF-ProtonAOSP/android_build_soong/commit/4f45da0605538edf95f0a2e2219d83b25aaf9bb6	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/cabal7/ports/commit/9724b5e9e0b31a29080565f3bbbd7f3f4fcf3499	security/libtasn1: remove clang workaroundThe previously applied clang 10+ workaround which lowered -Ooptimization to -O1 appears to be no longer needed according to theupstream issue https://gitlab.com/gnutls/libtasn1/-/issues/30.PR:
clang workaround	 https://github.com/cabal7/ports/commit/846ff4e9529104b008946f89b9fb3d3a27c13773	java/openjdk11: Restore LLVM/Clang 13 workaroundThis restores the previous LLVM/Clang 13 workaround.  I had thoughtthe upstream changes would address this, but still seeing reports ofcrashes when compiled with LLVM/Clang 13.PR:
clang workaround	 https://github.com/cabal7/ports/commit/15328c5dfa085018b5980eb1e7959b9f50fca41d	cad/horizon-eda: Add back the workaround for clang crash that was mistakenly removed earlierReported by:
clang workaround	 https://github.com/c3lang/c3c/commit/2294372f6e59b9a549c9f53aeeae4f4c9b2ab9f9	Workaround for clang 13.0 warning
clang workaround	 https://github.com/brycelelbach/wg21_p2300_std_execution/commit/e3627f3b90e914591cdf2d0a93aae98aa252eb27	Merge pull request #412 from senior-zero/fix_checked_completion_signaturesWorkaround clang bug in checked_completion_signatures
clang workaround	 https://github.com/brycelelbach/wg21_p2300_std_execution/commit/cd2ebbe90d251ce3a69d4f75d5430613b420723e	Merge pull request #483 from kirkshoop/workaround-clang-iceworkaround for ICE in appleclang 13.1
clang workaround	 https://github.com/brycelelbach/wg21_p2300_std_execution/commit/b408d41d13663d2a21d297d08dc9015ccee5e59f	Workaround clang bug 51934
clang workaround	 https://github.com/brycelelbach/wg21_p2300_std_execution/commit/874b3293ec3bc15741c3f4daf4b9989c4c514e58	Merge pull request #480 from gonzalobg/bugfix/gcc_support* Workaround clang bug 51934* Make __types complete for GCC* Disable everything that fails to build with GCC* Enable GCC on CI* Disable -Wnon-template-friend for GCC* Remove spurious spacesCo-authored-by: Eric Niebler <eniebler@boost.org>
clang workaround	 https://github.com/brycelelbach/wg21_p2300_std_execution/commit/353480c841e6af4654287e6a46227a4c4f9fb2a3	Workaround clang bug in checked_completion_signatures
clang workaround	 https://github.com/brechtvl/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/boostorg/utility/commit/05e0d1688dcfcd3fdd65bdb6884b7edd1ad2c93c	Re-enabled 32-bit clang-win AppVeyor job on VS2019 image.32-bit clang does not fail with the mspdb error on the VS2019 image.Apply the same env script workaround as for the 64-bit clang.
clang workaround	 https://github.com/boostorg/gil/commit/22be33bb6198631266df214cf47dc85cae923a76	ci: Remove cxxstd=2a from GitHub Actions ci.yml workflowThis is workaround for clang issue with cxxstd=2a:  error: no member named 'is_constant_evaluated' in namespace 'std'See https://github.com/boostorg/gil/pull/621#issuecomment-1096942965
clang workaround	 https://github.com/boostorg/filesystem/commit/43f213fbd8d98f821a97b3079c191ab06081c781	Removed unified initializers for global initializer objects.This was supposed to be a workaround for clang bug that required aninitializer for global constant objects without a user-defined constructor,but the initializer classes do have user-defined constructors, so thisworkaround should not be needed. Removing it simplifies code a bit.
clang workaround	 https://github.com/boostorg/filesystem/commit/4319cf13887aaf5892e0b36c4eab99424277ebaa	Another attempt to workaround clang < 3.9 bug.
clang workaround	 https://github.com/boostorg/config/commit/f1b4a51ceaad4cb951790d4487658ac560146460	Merge pull request #383 from boostorg/pr/clang-major-workaroundDefine __clang_major___WORKAROUND_GUARD
clang workaround	 https://github.com/boostorg/config/commit/9e80993844cb3d69bfdfa10f059706d7f22eb324	Define __clang_major___WORKAROUND_GUARD
clang workaround	 https://github.com/boostorg/config/commit/1e63c7729dcf574df29c6702dd0e36fd47aa5f4f	Define BOOST_CLANG_VERSION_WORKAROUND_GUARD
clang workaround	 https://github.com/boostorg/asio/commit/5ca6c06ac3247f25644e96b27af3bab9c5c6ab4c	Add workaround for apparent coroutine codegen bug with Apple's clang.
clang workaround	 https://github.com/bolucat/Fuchsia/commit/aecc939e427da9d8b58a9d556af69243c49572e6	[appmgr] Appease clang-tidyRemove obsolete workaround while I'm here.Fixed: 64385Change-Id: I2bb5e1f7c098fdd4dc72702d2a5346c43d18de93Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/670762Fuchsia-Auto-Submit: Tamir Duberstein <tamird@google.com>Reviewed-by: Shai Barack <shayba@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang workaround	 https://github.com/bolucat/Fuchsia/commit/2b4a448e38f1c9f5b0d581e1addb04a01dd2e92e	[starnix] Force generation of missing definesSystem header defines that are defined via calling a function are notgenerated by rust-bindings.This CL introduces a workaround by redefining these includes asconstants so that clang compute them and rust-bindings recognize them.Change-Id: I0c5a43cc6638a2c88d2a922d9ca9bcbcaca946b1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/661346Reviewed-by: Adam Barth <abarth@google.com>Fuchsia-Auto-Submit: Benjamin Lerman <qsr@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang workaround	 https://github.com/bolucat/Fuchsia/commit/2956f19738b524808a0c609640edbbbb46d7489f	[kernel][x86] Remove <cpuid.h> inclusion workaroundPreviously, both GCC and Clang supplied <cpuid.h> without a multipleinclusion guard. This has since been fixed (as of GCC 11.2.1 and Clang14.0.0).Fixed: 64109Change-Id: I37a0f045890829eda7447c17be4c7b7f2fc41a53Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/650342Fuchsia-Auto-Submit: Joshua Seaton <joshuaseaton@google.com>Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Joshua Seaton <joshuaseaton@google.com>
clang workaround	 https://github.com/bluez/bluetooth-next/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/bluez/bluetooth-next/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/bluescarni/yacma/commit/0bde32cd405c64cfb618da84e7c76afbdb9a0c8b	Tentative clang warning workaround.
clang workaround	 https://github.com/bluescarni/obake/commit/c7b004be3dbc58d83b4fd66eeffc9749504c3f36	Tentative clang warning workaround.
clang workaround	 https://github.com/bluescarni/heyoka/commit/4cc9204d2e5cd4ca1aaafded4570ba6255becb0e	Squashed 'cmake/yacma/' changes from 9b555308..0bde32cd0bde32cd Tentative clang warning workaround.b51f63cb License update.git-subtree-dir: cmake/yacmagit-subtree-split: 0bde32cd405c64cfb618da84e7c76afbdb9a0c8b
clang workaround	 https://github.com/Blaze-AOSP/build_soong/commit/4eceab9784e1cd76537b4d4130159f8963ea20ee	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>
clang workaround	 https://github.com/Bill-Gray/find_orb/commit/2f730a03006b015642c2da738ab62ec9c419134c	Workaround for a failure-to-converge issue in 'inverf' (inverse error function),  reported by Ralph Pass on a Mac using clang-13.0.0.  We still don't know why this happens,  and it remains worrisome.
clang workaround	 https://github.com/Bforartists/Bforartists/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/bflattened/runtime/commit/78f4a7de7e89ddefa88f9e9da7604ecb5c58d3b7	Workaround clang crash due to large array assignment (#62675)
clang workaround	 https://github.com/bettio/AtomVM-WIP/commit/7809357b4021e4a9d5ee196c17c59163d19ee732	macOS GitHub Workflow: apply workaround to maps and base64 testsWhen testing "test_map.beam" and "test_base64.beam", 12 is returned as resultinstead of 0.This has been happening on macOS 11 with:- Apple clang version 13.0.0 (clang-1300.0.29.30)- Xcode 13.2.1Remove this workaround as soon as the issue is fixed.
clang workaround	 https://github.com/BeSky/ClickHouse/commit/11a029c96b3f694170032dce915e70e876710087	Attempt to workaround clang-tidy bug
clang workaround	 https://github.com/bcopeland/wireless-testing/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/badlydrawnrod/arviss/commit/440ed4432d47af927b4f8e46372fee9afd7a0ca6	Builds and docs (#36)* Stop RISC-V builds if clang is too old.* Best laid plans.* Update docs to show clang workaround.* Update overall examples README.
clang workaround	 https://github.com/badlydrawnrod/arviss/commit/10ac0911d96f9dda79c3dc64cde102b0b08e2f39	Builds and docs2 (#37)* Stop RISC-V builds if clang is too old.* Best laid plans.* Update docs to show clang workaround.* Update overall examples README.* Update overall examples README.* Adjust text.
clang workaround	 https://github.com/bad-alloc-heavy-industries/substrate/commit/3e6b7d510f5043e28f22d35193a26f84f150586c	is_unsigned_v: workaround MSYS clang leaking the signedness of unscoped enums
clang workaround	 https://github.com/azerothcore/azerothcore-wotlk/commit/5d8b472ed72ebc2f78b5010a995ac1f7511f5be2	fix(Core/Misc): Remove Clang 7 workaround (#10521)
clang workaround	 https://github.com/aws/s2n-tls/commit/14ed186a13c1ffae7fbb036ed5d2849ce7c17403	More fixes for BIKE R3 optimized builds (#2867)* Add workaround for gcc-5 in bike_r3 av512 sampling code* Add clang < 4 to the previous workaround* Macro fix for clang 3.9* Fix typo in clang version check
clang workaround	 https://github.com/Avarice12/platform_build_soong/commit/14552b6fecf8dbe4731cf02246a27eac2176c38e	Remove workaround for Qualcomm Kryo 385Kryo 385 have Cortex-A55 as little core and Cortex-A75 without dotproduct as big core.Motivation:    Clang already supports Cortex-A55 and Cortex-A75 without    dot product.Particular problem:    This workaround are no longer required after Clang introduced    Cortex-A55 and Cortex-A75 without dot product after commit    https://github.com/llvm/llvm-project/commit/b252ffd2cca9e9f3ed65b8912603abc1f006ac5aChange-Id: I04201705e1d49524f50a0eec9eda035cb40ff63cSigned-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
clang workaround	 https://github.com/Atom-X-Devs/android_kernel_xiaomi_sm7325/commit/01035aa56431c33792d5d0df43ea9b5dee9dd53c	Revert "ANDROID: Kbuild, LLVMLinux: allow overriding clang target triple"This reverts commit 4c451dba25d2829a6a0c532196cce83e2e65b47e.AOSP's distribution of GNU binutils always had a curious target tripleprefix on the binaries.  Now that GNU binutils is deprecated for AndroidCommon Kernels, we can now remove this out of tree workaround. Nowbuilding Android kernels with LLVM matches upstream (seeDocumentation/kbuild/llvm.rst).Bug: 118439987Bug: 120440614Bug: 141693040Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Iecaa3264a440f795f2f3a44bdf74fe28ad4ed1ccSigned-off-by: Divyanshu-Modi <divyan.m05@gmail.com>
clang workaround	 https://github.com/atomvm/AtomVM/commit/7809357b4021e4a9d5ee196c17c59163d19ee732	macOS GitHub Workflow: apply workaround to maps and base64 testsWhen testing "test_map.beam" and "test_base64.beam", 12 is returned as resultinstead of 0.This has been happening on macOS 11 with:- Apple clang version 13.0.0 (clang-1300.0.29.30)- Xcode 13.2.1Remove this workaround as soon as the issue is fixed.
clang workaround	 https://github.com/aszorenyi/android_frameworks_base/commit/c13e27f0aadfb741be33b35e86c693c05f253ea9	Workaround global ThinLTO build breakThese projects triggers Clang crash for global ThinLTO build. DisableThinLTO for these projects for now.This CL has no affect for normal builds.Test: GLOBAL_THINLTO=true mBug: 169004486Change-Id: Id0c7d243250b6dc7f1ec3099c77cebc179d2c3b3Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang workaround	 https://github.com/arthurpassosorg/ClickHouse-tmp/commit/11a029c96b3f694170032dce915e70e876710087	Attempt to workaround clang-tidy bug
clang workaround	 https://github.com/ArrowOS-Devices/android_kernel_xiaomi_daisy/commit/09e36fdda62a6ebb8eb409dbebe22de757aeb44f	ANDROID: enable ARM64_ERRATUM_843419 by default with LTO_CLANGThis reverts a workaround we needed with an old version of thetoolchain.Bug: 145210207Change-Id: If28b9f97da21c046adff7d5a58943a4fc06cb390Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Diab Neiroukh <lazerl0rd@thezest.dev>Signed-off-by: CloudedQuartz <ravenklawasd@gmail.com>Signed-off-by: GeoPD <geoemmanuelpd2001@gmail.com>
clang workaround	 https://github.com/ArkScript-lang/Ark/commit/d9681d5f41d49a0bc89fead80639301430153660	needed workaround on CI linux-clang
clang workaround	 https://github.com/ArkScript-lang/Ark/commit/4f02025563bced48a45283ec24f34fa47c265177	workaround on linux-clang ci to enforce clang 10
clang workaround	 https://github.com/Arc-Team/android_frameworks_base/commit/8cb2d6071abcf35bcfcf7005327629769acd36fb	Workaround global ThinLTO build breakThese projects triggers Clang crash for global ThinLTO build. DisableThinLTO for these projects for now.This CL has no affect for normal builds.Test: GLOBAL_THINLTO=true mBug: 169004486Change-Id: Id0c7d243250b6dc7f1ec3099c77cebc179d2c3b3Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang workaround	 https://github.com/archlinux/svntogit-packages/commit/a332fa84f1f2be8bbb42e1e805151776f5eb8ca2	upgpkg: libreoffice-fresh 7.3.0-4: build skia using clang per upstream suggestion, solves gcc lto workaround - https://gerrit.libreoffice.org/c/core/+/124017git-svn-id: file:///srv/repos/svn-packages/svn@436193 eb2447ed-0c53-47e4-bac8-5bc4a241df78
clang workaround	 https://github.com/arborx/ArborX/commit/5ee4970345f31f36ddfd16b527be8a916f6edfe1	Forgot silly Cuda+Clang workaround
clang workaround	 https://github.com/arborx/ArborX/commit/0edbf87ad6be5fe109f4787c86d3a977e1e6d68e	Use Clang+CUDA workaround in kDOP unit test
clang workaround	 https://github.com/apple/swift/commit/e2bd75d6223eb5080ac412321625f983ab5a67cf	Merge pull request #41304 from apple/rokhinip/88700717-workaroundWorkaround clang backend bug
clang workaround	 https://github.com/apache/qpid-dispatch/commit/f5894a16fc02a4a32aa6ebac7d66c2c7d054c307	NO-JIRA Update Clang versions in Travis CI; remove workarounds (#1426)Keep pip install --upgrade, it prevents problems, e.g. to get precompiled wheel in Aarch64
clang workaround	 https://github.com/aospm/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/aospm/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/Antonioya/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/animetosho/ParPar/commit/2369da933a041d601fbe05d52d64f774fa514bdf	Workaround for Clang ARMv7 crash
clang workaround	 https://github.com/andyholst/linux-stable-fork/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/AnabelSMRuggiero/ann/commit/af05d5bcfc81c6d443127102dbf329b753fe25f7	added fnma, fms, and a workaround for clang's over eager template instantiation.
clang workaround	 https://github.com/ammarfaizi2/linux-block/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/ammarfaizi2/linux-block/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/amitukind/WebGL-Game-Engine/commit/7a85c7edd5f53cb9707fe92a88844e3a0d13ad13	Workaround for Clang compilation failure
clang workaround	 https://github.com/amir73il/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang workaround	 https://github.com/amir73il/linux/commit/4eb0a7c8e195d4549221f9df3a0313254c493949	Merge tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slabPull slab fixes from Vlastimil Babka: - Build fix (workaround) for clang. - Fix a /proc/kcore based slabinfo script broken by struct slab changes   in 5.17-rc1.* tag 'slab-for-5.17-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:  tools/cgroup/slabinfo: update to work with struct slab  slab: remove __alloc_size attribute from __kmalloc_track_caller
clang workaround	 https://github.com/am11/CrossRepoCITesting/commit/187c23bbaccf83fdbe2b56090984f6bdc485933b	Switch back to clang since workaround is found
clang workaround	 https://github.com/AliceO2Group/O2Physics/commit/3a6b3a43817337e79224ea06d174896778f3fef6	V0 analysis - Armenteros & PID cuts, Run2/Run3 switch (#410)* lambdakzeroanalysis(MC) - Armenteros, PID cuts and QA mass axes configurable* cleaning up TaskNames* lambdakzeroanalysis(MC), cascadeanalysis - add run2-run3 switches as workaround until centV0M is filled for run3* cascadeanalysis histRegistry, lambdaAnalysis armenterosParameter, Clang fixes* better task names, units on axes, clang fixes, delete forgotten histograms in lambdaMC* lambdakzeroanalysis - tpc pid use tpcNSigma, configurable cut changed to float
clang workaround	 https://github.com/alexshcer/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/alexander-mipt/LLVM-edu/commit/6afd6e96ce203ca6b2840df48e939434237bf82e	[libc++] Workaround failures with modules on Clang ToT
clang workaround	 https://github.com/alex65536/sofcheck/commit/b6a128283a0a71ee837f721ffc9d9077a914bc3f	Workaround a strange clang-tidy bug
clang workaround	 https://github.com/albertgoncalves/salvm/commit/800b9defd362d0ef6aaeef16a3f1a26e874e7a38	workaround nix's broken clang
clang workaround	 https://github.com/albertgoncalves/maaz/commit/3bdae2914cd16bdd872e5a279a3cbe69f28bbbb8	workaround nix's broken clang
clang workaround	 https://github.com/albertgoncalves/jmpr/commit/e9b762bc8198586f6a136560bf99ca6ca109f485	workaround nix's broken clang
clang workaround	 https://github.com/albertgoncalves/dstrs/commit/3b91a0eba8dec61709e073ea664c63aea46fd442	workaround nix's broken clang
clang workaround	 https://github.com/albertgoncalves/cproto/commit/530bddcdd8379659d1d7e105aa6158c024dce259	workaround nix's broken clang
clang workaround	 https://github.com/ACON3D/blender/commit/88e774aa34c8ffd90c7bc7e71d3bc290d78b4f2d	Cleanup: workaround for unstable formatting in clang-formatRunning multiple times would re-indent differently.
clang workaround	 https://github.com/acd1034/monadic-parser-combinator/commit/783a119495c4db3dce578389f85a661c3ae5d497	Workaround for Clang
clang workaround	 https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/commit/2a186f8bc40bb99f11c2de3f0a93a3aab643fd91	Enable icx compiler to vectorize OSL_OMP_COMPLEX_SIMD_LOOP (#1475)Avoid many clang vectorization workarounds for OSL_INTEL_LLVM_COMPILER_VERSIONAdded Makefile option VEC_REPORT to turn on generation of optimization reportsReduce impact of REQUIRE_INF_NAN for icx by explicitly honoring inf, nan, and signed zeros vs. disabling fast-mathSigned-off-by: Alex M. Wells <alex.m.wells@intel.com>
clang workaround	 https://github.com/abu-lib/debug/commit/eb95738ef20f586a85f6e6ae362bfca7bd3db0c5	Added clang workaround
clang workaround	 https://github.com/abs0/libmdbx/commit/c4a696be1dc860c93462a0993e5c86c9e415ca63	mdbx-test: add workaround for CLANG/LLVM STL stupidity of `std::set<>`.
clang workaround	 https://github.com/abs0/libmdbx/commit/c07697922593f5b411238f1122ef2ed721ec0296	mdbx++: add workaround for modern libstd++ with CLANG < 4.xChange-Id: Ic82694f4f51bfdb2d6f6f072fdf9af791c0eb6f8
clang workaround	 https://github.com/abs0/libmdbx/commit/4bb0c57e290cf9a078d069597fd14ad3eb4c3155	mdbx: minor fixes/workarounds for CLANG < 9.x
clang workaround	 https://github.com/ABDELILAH-OUHAJJOU/fwupd/commit/3822422b1e450752322a5dc9fd0011b9b4238b3c	trivial: Workaround two false 'unused' warnings from clang
clang workaround	 https://github.com/99degree/android_kernel_xiaomi_curtana/commit/3c6366f80fc4c3fa5515780025141044843bcada	Workaround clang build fail due to include non-vmlinuz libfdt_env.h
clang workaround	 https://github.com/3541/liba3/commit/4b8ba8d4c9e27ecc7d9c3d7691ed4154b4552631	FIX: Workaround missing constructible_from on Apple Clang.
clang workaround	 https://github.com/12101111/overlay/commit/43a4620b1475a7ac0e96089f0de4e401901ceb44	net-libs/gnutls: workaround clang ICE on aarch64
clang workaround	 https://github.com/0x1F9F1/Open1560/commit/709123f53918907adb5e62c4ea6a6833a56685c4	Hacky workaround to fix clang vector deleting destructor support
clang bug	 https://github.com/WebKit/WebKit/commit/bcc6ec1e6cf543c8a5b2f2a7d38484e92a6f724c	[build.webkit.org] Add GTK queue using clanghttps://bugs.webkit.org/show_bug.cgi?id=229637Reviewed by Michael Catanzaro.This commit adds a specific queue to build with clang in place of GCC.It will help cover both toolchains and catch bugs and warningsthat happen to be raised by/to affect only clang.Initially, it'll be a build-only queue, moving to a complete build andtester in the future. It'll use clang-12, the version available in thecurrent SDK used by GTK and WPE.* CISupport/build-webkit-org/config.json:* CISupport/build-webkit-org/factories_unittest.py:(TestExpectedBuildSteps):Canonical link: https://commits.webkit.org/248032@maingit-svn-id: https://svn.webkit.org/repository/webkit/trunk@290792 268f45cc-cd09-0410-ab3c-d52691b4dbfc
clang bug	 https://github.com/Inori/GPCS4/commit/1b24efd8811fcb0cf42949eb8798d65a93328303	fix clang compatible bug
clang bug	 https://github.com/ianabel/MCTrans/commit/b8d260561537e9a5fa56fe6e98ad61740a8f4db5	fix bug in neutrals on clang
clang bug	 https://github.com/pmontalb/CmakeUtilities/commit/0dec3daac0a9b2548383bd214ec67c975c948878	fixed bug with clang-lto preset, formatted the clang-format file, fixed issue with clang-ubsan options and added a script for automatically building all presets
clang bug	 https://github.com/pmontalb/CmakeUtilities/commit/e1d01d87e6f402e498428da698d14224e5ed89f5	fixed bug with clang-lto preset, formatted the clang-format file, fixed issue with clang-ubsan options and added a script for automatically building all presets
clang bug	 https://github.com/NOAA-EMC/spack-stack/commit/427d85ad98f603e1393130b4946497392ff5d722	Bug fix for shumlib to recognize apple-clang as clang
clang bug	 https://github.com/acts-project/detray/commit/fa6a353d0be6db35008cdb311b70c41f2b84608a	Merge pull request #225 from beomki-yeo/bug/clang_cudaFix Warnings from Clang compilation
clang bug	 https://github.com/NOAA-FIMS/FIMS/commit/c769e40b30d93c5d738eced87650b82889cd57ea	Merge pull request #22 from NOAA-FIMS/bug-issue-15-clang-tidy-workflowFix #15 clang tidy workflow bug
clang bug	 https://github.com/goplus/c2go/commit/e21d362c2a59fb45fba9016ee6b58fdc797b9ce9	todo: bug of clang ast.json
clang bug	 https://github.com/Davidgould187/Bitcoin/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/oneapi-src/oneDAL/commit/de05843cbfa575e92be880493de6586c5a616d70	Fix bugs in RandomForest (#2077)* fix bugs in RandomForest* fix clang-format* fix totalWeights* fix clang format* fix _minImpurityDecrese for non weights* fix clang-format* minor
clang bug	 https://github.com/InglesTwins/machine_learning_des/commit/0bad390f97c6f6e8094f0906a1cae795ed469352	Still had one bug in clang-format file
clang bug	 https://github.com/furszy/bitcoin/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/hebasto/bitcoin-qtw/commit/aa87fceffca9b845e6955ddb13f9bb8e178cb297	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/acts-project/detray/commit/83e9f742a911364b0f20b92df914761fb44b619c	Fix bug in clang cuda
clang bug	 https://github.com/domob1812/namecoin-core/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/kpua/bitcoin/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/JarlPenguin/platform_frameworks_native/commit/cb067f0c20f2cd95ff5ee7f64445df9fc9460b26	Deleted clang property in Android.bp filesDeleted deprecated clang property in Android.bp files using bpmodify.Bug: 208980553Test: treehuggerChange-Id: Id1d1bd76fcd9221b7ac720b001a98de080629d36
clang bug	 https://github.com/ROCmSoftwarePlatform/rocSPARSE/commit/0cfcc76a32a41a6e656e6773a4c9ee805a3ee931	bsrmm ldb bug (#323)* fixing bug in bsrmm for small block dimension* fix bug in bsrmm where for block dim 2 we were not using ldb* fix compilation error* fix PR issues* fixes from PR suggestions* fix documentation and rename dense_matrix_t* correction to user manual* corrections to usermanual* clang formatting* clang formatting* clang formattingCo-authored-by: jsandham <james.sandham@amd.com>
clang bug	 https://github.com/bitcoin/bitcoin/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/xaya/xaya/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/Nandite/Pcl-Optics/commit/389b3bc72cb2c9e59e8868fe30d122ad10c81714	The clang format file has been updated due to [Bug 45337] from llvm clang-format.It is about the change of RawStringFormats.
clang bug	 https://github.com/dhruv/bitcoin-core-ci/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/Brif169/bitcoin/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/crdroidandroid/android_kernel_xiaomi_sm6150/commit/f8ee3f1bbe5f711851c8da9e1da49c0b516e641d	arm64: configs: enable LTO_CLANG and CFI_CLANGTest: build and boot to homeBug: 142345730Change-Id: I604dbcec7444262c753814a9dd0fc53aebc5511fSigned-off-by: Kyle Lin <kylelin@google.com>
clang bug	 https://github.com/BeSky/ClickHouse/commit/11a029c96b3f694170032dce915e70e876710087	Attempt to workaround clang-tidy bug
clang bug	 https://github.com/pmontalb/chip8/commit/3ba71636e9cf988659d2d241e60487b320a470b7	fixed bugs with clang-ubsan, achieved 100% code coverage
clang bug	 https://github.com/davidstone/cmake_strict_defaults/commit/75e2d9db5a41aad43b944ba148d615c7f3475196	Update clang bug links
clang bug	 https://github.com/Actinium-project/Actinium-ng/commit/fa43933e3b3f8bd2992340bdd744fdab680565f8	ci: Temporarily use clang-13 to work around clang-14 TSan bug
clang bug	 https://github.com/brycelelbach/wg21_p2300_std_execution/commit/b408d41d13663d2a21d297d08dc9015ccee5e59f	Workaround clang bug 51934
clang bug	 https://github.com/bolucat/Fuchsia/commit/24d45146d26fae86021b9030d0937b459b33bd56	[netstack/tests] Remove covered socket optionsFound using:  grep ', sock_str' src/connectivity/network/netstack/tests/manual/sockopttest.c | \    sed 's/.*"\(.*\)".*/\1/' | \    xargs -I % sh -c 'git grep % src/connectivity/network/tests > /dev/null && echo %'Appease clang-tidy some while I'm here.Bug: 91734Change-Id: I7ae9cbcb7de490596817607db60a443b4a308c7bReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/633986Fuchsia-Auto-Submit: Tamir Duberstein <tamird@google.com>Reviewed-by: Ghanan Gowripalan <ghanan@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang bug	 https://github.com/jhueckelheim/ORAQL/commit/47653db6d2a3964c14cca5ffa73e79aeee292e8b	[clang] Fix an infinite loop during typo-correctionSee https://bugs.llvm.org/show_bug.cgi?id=50797#c6Differential Revision: https://reviews.llvm.org/D105533
clang bug	 https://github.com/pro-bitcoin/pro-bitcoin/commit/da67b75c5cd747acd7fd662b0af20e67fd9670be	Merge bitcoin/bitcoin#22903: Enable clang-tidy bugprone-argument-comment and fix violationsfa57fa1a2e764792b873998ddf38db2ac061dcb6 Enable clang-tidy bugprone-argument-comment and fix violations (MarcoFalke)Pull request description:  Named arguments can be dangerous when they are wrong, because they are not enforced by the compiler. Currently there are only minor typos, no actual bugs.  Fix the typos and add the `.clang-tidy` file to make it easier to find them in the future.ACKs for top commit:  practicalswift:    cr ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6  fanquake:    ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6Tree-SHA512: b66f01e0a1e77e56ed8454002176df660cc2cc0947a90785aa33cc5b8003a1f99fd8b2f8f89f2a0bf180ff2c42c031d69e669d127bb557b879c17975275a220b
clang bug	 https://github.com/ProtonAOSP-lavender/android_build_soong/commit/655a7d50f44b1e1d66d0fe4ef7e5ad0d1ed6919a	[rust] Update clang version used for bindgenBug: http://b/185528062Test: presubmitChange-Id: I0060643b0dec998d1d4f8da2c504c79223995f98
clang bug	 https://github.com/Kuree/hgdb/commit/12b519cfcea3a09bbddfc25b5a0c5751b9f3dac9	landed on another clang-tidy bug
clang bug	 https://github.com/ProtonAOSP-lavender/android_build_soong/commit/8a71786b52a4f52db98e56e1b557523f05011df5	Switch to clang r416183b 12.0.5.Bug: http://b/182416735Test: TreehuggerChange-Id: Ibc26561baaec925c2c05ae710de24aaaab18bef5
clang bug	 https://github.com/omnirom/android_frameworks_base/commit/a5daa1718799aeaffd6139e389051857fcb8de4d	SoundPool: Fix clang-tidyTest: touch *.cpp,  mma, verify no clang-tidy warningsTest: SoundPoolAacTest, SoundPoolHapticTest,Test: SoundPoolMidiTest, SoundPoolOggTestBug: 182414042Change-Id: I77af4f0999c46931d6993d917443df1fa8425353
clang bug	 https://github.com/mozilla/gecko-dev/commit/839cfff0f87a2ed70fbfaec9da7e17f1c37917b4	Bug 1686975: Add clang-query to the clang-tidy tools r=andiDifferential Revision: https://phabricator.services.mozilla.com/D101939
clang bug	 https://github.com/dvstLab/ginkgo-kernel/commit/84f8915f60c04cd78f7cb0eb7f63768bd8216570	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cd
clang bug	 https://github.com/percona/percona-xtradb-cluster/commit/cd6aeb5520d53ada1baf1f716c78429b3fdab948	Bug#32324234: MYSQL CRASH OPTIMIZE_DISTINCT_GROUP_ORDER [noclose]Follow-up patch to avoid Clang -Werror,-Wmismatched-tags warning(change "class" to "struct" for consistency).Change-Id: Ic1fb8b6f671cc8557bd21822d7704c3fd121b9d7
clang bug	 https://github.com/posp-custom/build_soong/commit/655a7d50f44b1e1d66d0fe4ef7e5ad0d1ed6919a	[rust] Update clang version used for bindgenBug: http://b/185528062Test: presubmitChange-Id: I0060643b0dec998d1d4f8da2c504c79223995f98
clang bug	 https://github.com/curtin-space/pigweed/commit/f06e42b039f158613560beaf3f8ea291ea17d92c	pw_presubmit: Fix clang_tidy pass- Implement workarounds to fix system include paths in  generated compile_commands.json files: clang-tidy is otherwise  often unable to find some system headers.- Add basic .clang-tidy configuration- To run the pass in pigweed presubmits:  pw presubmit --step clang_tidy  pw presubmit -p other_checksBug: 45No-Docs-Update-Reason: Fix in internal APIChange-Id: I3f6cae98bfecaff86543804b28083bf304ad6a60Reviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/55000Commit-Queue: Henri Chataing <henrichataing@google.com>Reviewed-by: Wyatt Hepler <hepler@google.com>Reviewed-by: Keir Mierle <keir@google.com>
clang bug	 https://github.com/curtin-space/pigweed/commit/0211fdf8f27cd87c2245039a8c7eb3c1535d84b2	pw_trace: Fix UB in fake_backend.hUsing memcmp to compare nullptr's is undefined behavior, so specialhandling is required for the case when one of the pointers is null.Tested by running,    ninja -C out host_clang_ubsan/obj/pw_trace/test/trace_facade_test    out/host_clang_ubsan/obj/pw_trace/test/trace_facade_testBug: 541Change-Id: Id680516fe6066d827d64001bb772cb5ad4e73117Reviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/67343Reviewed-by: Ewout van Bekkum <ewout@google.com>Commit-Queue: Ted Pudlik <tpudlik@google.com>
clang bug	 https://github.com/posp-custom/build_soong/commit/8a71786b52a4f52db98e56e1b557523f05011df5	Switch to clang r416183b 12.0.5.Bug: http://b/182416735Test: TreehuggerChange-Id: Ibc26561baaec925c2c05ae710de24aaaab18bef5
clang bug	 https://github.com/ProtonAOSP-lavender/android_build_soong/commit/871e34290e606ed0f4bd464d4312237dd9721a60	rust: Pass additional Clang C flags from toolchainThe set of Clang flags passed to bindgen from the toolchain wasincomplete. In addition to ToolchainClangCflags(), we also need to callClangCflags().Bug: 184081465Test: m libgrpc_bindgenChange-Id: I0b62345fee2f55ba18b4a0c4d825f0447c99db06
clang bug	 https://github.com/ProtonAOSP-lavender/android_build_soong/commit/bf61afb7f77eb605dca583d0f6e02a1bc6ccc6cb	bp2build: export some cc toolchain flags into Starlark.This CL exports common/global/device/host clang/ld/ldd flagsfrom their Ninja variable initialization locations incc/config/global.go and cc/config/clang.go to make Bazel's cc_toolchainand Soong's cc actions more consistent with each other.This does not handle env-dependent or arch-specific toolchain flagsyet (logic in compiler.go and linker.go).Test: THBug: 187086342Bug: 187084737Bug: 186628704Bug: 187857770Change-Id: Ie403d7cd23f35160897b9dd902c799cbf1bd7f0c
clang bug	 https://github.com/posp-custom/build_soong/commit/871e34290e606ed0f4bd464d4312237dd9721a60	rust: Pass additional Clang C flags from toolchainThe set of Clang flags passed to bindgen from the toolchain wasincomplete. In addition to ToolchainClangCflags(), we also need to callClangCflags().Bug: 184081465Test: m libgrpc_bindgenChange-Id: I0b62345fee2f55ba18b4a0c4d825f0447c99db06
clang bug	 https://github.com/curtin-space/pigweed/commit/f3b9d0d55d74624251f208b1a9fe277807d4670a	build: pw_toolchain: Add host_clang_{asan, msan, ubsan} targetAdd new host build targets for runtime sanitizers(ASan, UBSan, MSan).Bug: 514Change-Id: I2abced4b159e28b07f93315ef0d2f090cbe7b9caReviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/66240Reviewed-by: Ted Pudlik <tpudlik@google.com>Commit-Queue: Dmitry Yatsushkevich <dmitryya@google.com>
clang bug	 https://github.com/curtin-space/pigweed/commit/7c295d2c54905f8065a4100eeb1a2db58e98cdd1	clang-tidy: Explicity list enforced checksThis is a no-op change: I switch from excluding certain modernize-checks to explicitly including.  I think this is clearer (since it showswhat we actually enforce).  The list was generated using `clang-tidy-list-checks`.Bug: 45Change-Id: Ie477d330ca2a2867f8f2edafb865d489478cf562Reviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/66900Commit-Queue: Auto-Submit <auto-submit@pigweed.google.com.iam.gserviceaccount.com>Pigweed-Auto-Submit: Ted Pudlik <tpudlik@google.com>Reviewed-by: Ewout van Bekkum <ewout@google.com>
clang bug	 https://github.com/pro-bitcoin/pro-bitcoin/commit/cf5bb048e80d4cde8828787b266b7f5f2e3b6d7b	Merge bitcoin/bitcoin#22932: Add CBlockIndex lock annotations, guard nStatus/nFile/nDataPos/nUndoPos by cs_main6ea56827842b9b2bd730edc38f3a7b1f46f6247b Guard CBlockIndex::nStatus/nFile/nDataPos/nUndoPos by cs_main (Jon Atack)5d59ae0ba88849b1eb0d7350871bc19fcd5ef601 Remove/inline ReadRawBlockFromDisk(block_data, pindex, message_start) (Hennadii Stepanov)eaeeb88768db529b5241ccd42f1e87579908b4df Require IsBlockPruned() to hold mutex cs_main (Jon Atack)ca47b005770f71aa229ecc1f7b8146a96ff02151 Require CBlockIndex::IsValid() to hold cs_main (Vasil Dimov)e9f3aa5f6a7b39e8d5f2069617e5e382798d8d60 Require CBlockIndex::RaiseValidity() to hold cs_main (Vasil Dimov)8ef457cb83fac796f8b6a56977b1016193fc1185 Require CBlockIndex::IsAssumedValid() to hold cs_main (Vasil Dimov)572393448b4d32f91b92edc84b4200ab52d62422 Require CBlockIndex::GetUndoPos() to hold mutex cs_main (Jon Atack)2e557ced2830fc54476e598d52225f1679205e7d Require WriteUndoDataForBlock() to hold mutex cs_main (Jon Atack)6fd4341c10b319399c58d71c4ddeae4417e337d7 Require CBlockIndex::GetBlockPos() to hold mutex cs_main (Jon Atack)Pull request description:  Issues:  - `CBlockIndex` member functions `GetBlockPos()`, `GetUndoPos()`, `IsAssumedValid()`, `RaiseValidity()`, and `IsValid()` and block storage functions `WriteUndoDataForBlock()` and `IsBlockPruned()` are missing thread safety lock annotations to help ensure that they are called with mutex cs_main to avoid bugs like #22895. Doing this also enables the next step:  - `CBlockIndex::nStatus` may be racy, i.e. potentially accessed by multiple threads, see #17161. A solution is to guard it by cs_main, along with fellow data members `nFile`, `nDataPos` and `nUndoPos`.  This pull:  - adds thread safety lock annotations for the functions listed above  - guards `CBlockIndex::nStatus`, `nFile`, `nDataPos` and `nUndoPos` by cs_main  How to review and test:  - debug build with clang and verify there are no `-Wthread-safety-analysis` warnings  - review the code to verify each annotation or lock is necessary and sensible, or if any are missing  - look for whether taking a lock can be replaced by a lock annotation instead  - for more information about Clang thread safety analysis, see      - https://clang.llvm.org/docs/ThreadSafetyAnalysis.html      - https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#lockingmutex-usage-notes      - https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#threads-and-synchronization  Mitigates/potentially closes #17161.ACKs for top commit:  laanwj:    Code review ACK 6ea56827842b9b2bd730edc38f3a7b1f46f6247bTree-SHA512: 3ebf429c8623c51f944a7245a2e48d2aa088dec4c4914b40aa6049e89856c1ee8586f6e2e3b65195190566637a33004468b51a781e61a082248748015167569b
clang bug	 https://github.com/boklm/tor-browser-build/commit/bfd59379b6b0934cb4a0771e1a668e447a540971	Bug 40125: Merge clang and fenix-clang projects
clang bug	 https://github.com/posp-custom/build_soong/commit/bf61afb7f77eb605dca583d0f6e02a1bc6ccc6cb	bp2build: export some cc toolchain flags into Starlark.This CL exports common/global/device/host clang/ld/ldd flagsfrom their Ninja variable initialization locations incc/config/global.go and cc/config/clang.go to make Bazel's cc_toolchainand Soong's cc actions more consistent with each other.This does not handle env-dependent or arch-specific toolchain flagsyet (logic in compiler.go and linker.go).Test: THBug: 187086342Bug: 187084737Bug: 186628704Bug: 187857770Change-Id: Ie403d7cd23f35160897b9dd902c799cbf1bd7f0c
clang bug	 https://github.com/eariassoto/dear_nes_lib/commit/06f0cac16997815a655984981b1d2c4aea9916f5	Fix bugs from clang warnings
clang bug	 https://github.com/silont-project/kernel_realme_trinket/commit/8bb871b06820c642253d6c0b43a88ebfd21b07c5	drivers: msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I10557fb29b4a5d4139d690661c22ab5be3fedaafSigned-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: dodyirawan85 <40514988+dodyirawan85@users.noreply.github.com>
clang bug	 https://github.com/marshmello61/kernel_realme_RMX2170/commit/74e88d6d182b43517a558a5360b4e1103b0ba9fa	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Samuel Pascua <pascua.samuel.14@gmail.com>
clang bug	 https://github.com/SudoerzAOSPMod/build_soong/commit/655a7d50f44b1e1d66d0fe4ef7e5ad0d1ed6919a	[rust] Update clang version used for bindgenBug: http://b/185528062Test: presubmitChange-Id: I0060643b0dec998d1d4f8da2c504c79223995f98
clang bug	 https://github.com/marshmello61/kernel_realme_RMX2170/commit/7ba68ecde1938bf5557949d5da4bb60e3f350ca9	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Samuel Pascua <pascua.samuel.14@gmail.com>
clang bug	 https://github.com/xdroid-CAF/xd_build_soong/commit/655a7d50f44b1e1d66d0fe4ef7e5ad0d1ed6919a	[rust] Update clang version used for bindgenBug: http://b/185528062Test: presubmitChange-Id: I0060643b0dec998d1d4f8da2c504c79223995f98
clang bug	 https://github.com/woodsts/linux-stable/commit/c24449b321095d8c80cdda3d68107269c1d5569f	Merge tag 'hyperv-fixes-signed-20220215' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linuxPull hyperv fixes from Wei Liu: - Rework use of DMA_BIT_MASK in vmbus to work around a clang bug   (Michael Kelley) - Fix NUMA topology (Long Li) - Fix a memory leak in vmbus (Miaoqian Lin) - One minor clean-up patch (Cai Huoqing)* tag 'hyperv-fixes-signed-20220215' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux:  Drivers: hv: utils: Make use of the helper macro LIST_HEAD()  Drivers: hv: vmbus: Rework use of DMA_BIT_MASK(64)  Drivers: hv: vmbus: Fix memory leak in vmbus_add_channel_kobj  PCI: hv: Fix NUMA node assignment when kernel boots with custom NUMA topology
clang bug	 https://github.com/xaya/xaya/commit/cf5bb048e80d4cde8828787b266b7f5f2e3b6d7b	Merge bitcoin/bitcoin#22932: Add CBlockIndex lock annotations, guard nStatus/nFile/nDataPos/nUndoPos by cs_main6ea56827842b9b2bd730edc38f3a7b1f46f6247b Guard CBlockIndex::nStatus/nFile/nDataPos/nUndoPos by cs_main (Jon Atack)5d59ae0ba88849b1eb0d7350871bc19fcd5ef601 Remove/inline ReadRawBlockFromDisk(block_data, pindex, message_start) (Hennadii Stepanov)eaeeb88768db529b5241ccd42f1e87579908b4df Require IsBlockPruned() to hold mutex cs_main (Jon Atack)ca47b005770f71aa229ecc1f7b8146a96ff02151 Require CBlockIndex::IsValid() to hold cs_main (Vasil Dimov)e9f3aa5f6a7b39e8d5f2069617e5e382798d8d60 Require CBlockIndex::RaiseValidity() to hold cs_main (Vasil Dimov)8ef457cb83fac796f8b6a56977b1016193fc1185 Require CBlockIndex::IsAssumedValid() to hold cs_main (Vasil Dimov)572393448b4d32f91b92edc84b4200ab52d62422 Require CBlockIndex::GetUndoPos() to hold mutex cs_main (Jon Atack)2e557ced2830fc54476e598d52225f1679205e7d Require WriteUndoDataForBlock() to hold mutex cs_main (Jon Atack)6fd4341c10b319399c58d71c4ddeae4417e337d7 Require CBlockIndex::GetBlockPos() to hold mutex cs_main (Jon Atack)Pull request description:  Issues:  - `CBlockIndex` member functions `GetBlockPos()`, `GetUndoPos()`, `IsAssumedValid()`, `RaiseValidity()`, and `IsValid()` and block storage functions `WriteUndoDataForBlock()` and `IsBlockPruned()` are missing thread safety lock annotations to help ensure that they are called with mutex cs_main to avoid bugs like #22895. Doing this also enables the next step:  - `CBlockIndex::nStatus` may be racy, i.e. potentially accessed by multiple threads, see #17161. A solution is to guard it by cs_main, along with fellow data members `nFile`, `nDataPos` and `nUndoPos`.  This pull:  - adds thread safety lock annotations for the functions listed above  - guards `CBlockIndex::nStatus`, `nFile`, `nDataPos` and `nUndoPos` by cs_main  How to review and test:  - debug build with clang and verify there are no `-Wthread-safety-analysis` warnings  - review the code to verify each annotation or lock is necessary and sensible, or if any are missing  - look for whether taking a lock can be replaced by a lock annotation instead  - for more information about Clang thread safety analysis, see      - https://clang.llvm.org/docs/ThreadSafetyAnalysis.html      - https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#lockingmutex-usage-notes      - https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#threads-and-synchronization  Mitigates/potentially closes #17161.ACKs for top commit:  laanwj:    Code review ACK 6ea56827842b9b2bd730edc38f3a7b1f46f6247bTree-SHA512: 3ebf429c8623c51f944a7245a2e48d2aa088dec4c4914b40aa6049e89856c1ee8586f6e2e3b65195190566637a33004468b51a781e61a082248748015167569b
clang bug	 https://github.com/josibake/champcoin/commit/cf5bb048e80d4cde8828787b266b7f5f2e3b6d7b	Merge bitcoin/bitcoin#22932: Add CBlockIndex lock annotations, guard nStatus/nFile/nDataPos/nUndoPos by cs_main6ea56827842b9b2bd730edc38f3a7b1f46f6247b Guard CBlockIndex::nStatus/nFile/nDataPos/nUndoPos by cs_main (Jon Atack)5d59ae0ba88849b1eb0d7350871bc19fcd5ef601 Remove/inline ReadRawBlockFromDisk(block_data, pindex, message_start) (Hennadii Stepanov)eaeeb88768db529b5241ccd42f1e87579908b4df Require IsBlockPruned() to hold mutex cs_main (Jon Atack)ca47b005770f71aa229ecc1f7b8146a96ff02151 Require CBlockIndex::IsValid() to hold cs_main (Vasil Dimov)e9f3aa5f6a7b39e8d5f2069617e5e382798d8d60 Require CBlockIndex::RaiseValidity() to hold cs_main (Vasil Dimov)8ef457cb83fac796f8b6a56977b1016193fc1185 Require CBlockIndex::IsAssumedValid() to hold cs_main (Vasil Dimov)572393448b4d32f91b92edc84b4200ab52d62422 Require CBlockIndex::GetUndoPos() to hold mutex cs_main (Jon Atack)2e557ced2830fc54476e598d52225f1679205e7d Require WriteUndoDataForBlock() to hold mutex cs_main (Jon Atack)6fd4341c10b319399c58d71c4ddeae4417e337d7 Require CBlockIndex::GetBlockPos() to hold mutex cs_main (Jon Atack)Pull request description:  Issues:  - `CBlockIndex` member functions `GetBlockPos()`, `GetUndoPos()`, `IsAssumedValid()`, `RaiseValidity()`, and `IsValid()` and block storage functions `WriteUndoDataForBlock()` and `IsBlockPruned()` are missing thread safety lock annotations to help ensure that they are called with mutex cs_main to avoid bugs like #22895. Doing this also enables the next step:  - `CBlockIndex::nStatus` may be racy, i.e. potentially accessed by multiple threads, see #17161. A solution is to guard it by cs_main, along with fellow data members `nFile`, `nDataPos` and `nUndoPos`.  This pull:  - adds thread safety lock annotations for the functions listed above  - guards `CBlockIndex::nStatus`, `nFile`, `nDataPos` and `nUndoPos` by cs_main  How to review and test:  - debug build with clang and verify there are no `-Wthread-safety-analysis` warnings  - review the code to verify each annotation or lock is necessary and sensible, or if any are missing  - look for whether taking a lock can be replaced by a lock annotation instead  - for more information about Clang thread safety analysis, see      - https://clang.llvm.org/docs/ThreadSafetyAnalysis.html      - https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#lockingmutex-usage-notes      - https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#threads-and-synchronization  Mitigates/potentially closes #17161.ACKs for top commit:  laanwj:    Code review ACK 6ea56827842b9b2bd730edc38f3a7b1f46f6247bTree-SHA512: 3ebf429c8623c51f944a7245a2e48d2aa088dec4c4914b40aa6049e89856c1ee8586f6e2e3b65195190566637a33004468b51a781e61a082248748015167569b
clang bug	 https://github.com/tuananhvga/mynvim/commit/47abfe3acd3b98ae98811ca6d1525b715d6db7b8	Merge pull request #40 from SergioRibera/mainBug fix when executing any packer command and Add Clang LSP
clang bug	 https://github.com/josibake/champcoin/commit/0d7ecd5bef91710d29b8fcd533938020e634dd2d	Merge bitcoin/bitcoin#23583: build, qt, macOS: Don't hard-code x86_64 as the arch when using qmaked0204199d6aad3dc581467b0679b46ac109ed08d Revert "doc: Install Rosetta on M1-macOS for qt in depends" (Hennadii Stepanov)f6e278167595b9f6f7f5d5f8b333d1b6c5f0b40b build, qt, macOS: Don't pass -device-option when building natively (Hennadii Stepanov)667f0689ca03a03350e15d919bed531dffbb8523 build, qt, macOS: Don't hard-code x86_64 as the arch when using qmake (Hennadii Stepanov)Pull request description:  On master (4018e23aa7e7bb57d721c7c41c55dfbb659b8c34) the Qt build system hard-coded the x86_64 as the architecture when using qmake.  This means that compiling the `qt` package on M1 Apple Silicon for the same system, i.e., without providing the `HOST` variable,—that is supposed to be compiled natively—is a cross-compiling actually:  ```  % make -C depends qt_configured  ...  Configure summary:  Building on: macx-clang (x86_64, CPU features: cx16 mmx sse sse2 sse3 ssse3 sse4.1)  Building for: macx-clang (arm64, CPU features: neon crc32)  Target compiler: clang (Apple) 13.0.0  Configuration: cross_compile largefile neon precompile_header silent release c++11 c++14 c++1z reduce_exports static stl  ...  ```  Also this bug caused another [issue](https://github.com/bitcoin/bitcoin/pull/22402) which currently is worked around by installing Rosetta.  With this PR it is no longer needed to have Rosetta installed on M1-based macOS, and:  ```  % make -C depends qt_configured  ...  Configure summary:  Build type: macx-clang (arm64, CPU features: neon crc32)  Compiler: clang (Apple) 13.0.0  Configuration: largefile neon precompile_header silent release c++11 c++14 c++1z reduce_exports static stl  ...  ```ACKs for top commit:  promag:    Tested ACK d0204199d6aad3dc581467b0679b46ac109ed08d  fanquake:    ACK d0204199d6aad3dc581467b0679b46ac109ed08dTree-SHA512: 2fcd88d172286b7d22ec7ea7ce0939b012211c0160df56de2f4cb69e99743c71df6b6ff4777c1722ec22b974f48a77cc22e7c14d7d64d02c4f82ac22bafe4087
clang bug	 https://github.com/SudoerzAOSPMod/build_soong/commit/8a71786b52a4f52db98e56e1b557523f05011df5	Switch to clang r416183b 12.0.5.Bug: http://b/182416735Test: TreehuggerChange-Id: Ibc26561baaec925c2c05ae710de24aaaab18bef5
clang bug	 https://github.com/mozilla/gecko-dev/commit/5d9084e8a0fd7771785fab4540cc3e0446478908	Bug 1689058 - Rename clang-cl toolchains to clang. r=firefox-build-system-reviewers,dmajorBug 1553230 made configure automatically get toolchain artifacts in somecases. The artifacts for clang-cl builds are clang.tar.zst, and extract toclang/. Configure derives the task name from that knowledge, and failsto find clang-cl tasks because of that.For consistency, these tasks should be called clang. They are clangbuilds anyways, and like any other clang builds, they also containclang-cl.Differential Revision: https://phabricator.services.mozilla.com/D103150
clang bug	 https://github.com/ChaptSpace/android_frameworks_native/commit/bd841fde843f1b4b8f8af8df208e43275af84d39	libbinder: disable unneeded clang-tidy disablesThese don't trigger any error.Bug: 186144656Test: buildChange-Id: Iac83ee2d55fa561a39d49b83d5ca162328211257
clang bug	 https://github.com/yaap/frameworks_av/commit/b58afa74d3bc8c2bf3696f8b2f73a0c3c2d1b308	C2 VTS: Format using clang-formatAdded .clang-format and formatted all the sources and headersBug: 184389394Test: atest VtsHalMediaC2V1_0TargetAudioDecTest \      VtsHalMediaC2V1_0TargetAudioEncTest \      VtsHalMediaC2V1_0TargetVideoDecTest \      VtsHalMediaC2V1_0TargetVideoEncTest \      VtsHalMediaC2V1_0TargetComponentTest \      VtsHalMediaC2V1_0TargetMasterTestChange-Id: Ia132a8c051b5ab442afb1114d220f822168a3632
clang bug	 https://github.com/xdroid-CAF/xd_build_soong/commit/8a71786b52a4f52db98e56e1b557523f05011df5	Switch to clang r416183b 12.0.5.Bug: http://b/182416735Test: TreehuggerChange-Id: Ibc26561baaec925c2c05ae710de24aaaab18bef5
clang bug	 https://github.com/Hycon-Devices/device_xiaomi_raphael/commit/f4dc0c6e6254bdd89576c87988021da6ae70b673	raphael: Replace clang-format with symlink.Automatic consistency.Bug: 122835115Test: manualChange-Id: I6583f9f7923a822aa11f1839fbf375c1063a89c6
clang bug	 https://github.com/SudoerzAOSPMod/build_soong/commit/871e34290e606ed0f4bd464d4312237dd9721a60	rust: Pass additional Clang C flags from toolchainThe set of Clang flags passed to bindgen from the toolchain wasincomplete. In addition to ToolchainClangCflags(), we also need to callClangCflags().Bug: 184081465Test: m libgrpc_bindgenChange-Id: I0b62345fee2f55ba18b4a0c4d825f0447c99db06
clang bug	 https://github.com/simd-everywhere/simde-no-tests/commit/b3f770ec7b1ce31c1b02aec43f8368d4635f530d	Cleanups of SIMDE_BUG_* definitions (#680)* operationalize clang bug 44589* remove unused bug references
clang bug	 https://github.com/mozilla/releases-comm-central/commit/bbaad6d8f91229b2ec289e59330c0dcff14165fc	Bug 1670354 - followup - apply clang-format. rs=clang-format DONTBUILD
clang bug	 https://github.com/mozilla/releases-comm-central/commit/dacddff1a0f6a1f1ad26177514a538758285177b	Bug 217434 - followup - apply clang-format. rs=clang-format
clang bug	 https://github.com/percona/percona-xtradb-cluster/commit/70de3e27f0f2de887135d703a1d8f1070c6744c5	Bug #32729945 FIX BUILD WARNINGS FROM GCC 11 [noclose]Post-push fix for clang: -Werror,-Wextra-semiChange-Id: I4f21390735cb70359b068d970ae3bf37cc4e46b2
clang bug	 https://github.com/ProjectElixir-Devices/kernel_oneplus_sm8250/commit/2b0482c51d0220cfd657ecd82b58b95551533fed	powerpc/barrier: Avoid collision with clang's __lwsync macrocommit 015d98149b326e0f1f02e44413112ca8b4330543 upstream.A change in clang 13 results in the __lwsync macro being defined as__builtin_ppc_lwsync, which emits 'lwsync' or 'msync' depending on whatthe target supports. This breaks the build because of -Werror inarch/powerpc, along with thousands of warnings: In file included from arch/powerpc/kernel/pmc.c:12: In file included from include/linux/bug.h:5: In file included from arch/powerpc/include/asm/bug.h:109: In file included from include/asm-generic/bug.h:20: In file included from include/linux/kernel.h:12: In file included from include/linux/bitops.h:32: In file included from arch/powerpc/include/asm/bitops.h:62: arch/powerpc/include/asm/barrier.h:49:9: error: '__lwsync' macro redefined [-Werror,-Wmacro-redefined] #define __lwsync()      __asm__ __volatile__ (stringify_in_c(LWSYNC) : : :"memory")        ^ <built-in>:308:9: note: previous definition is here #define __lwsync __builtin_ppc_lwsync        ^ 1 error generated.Undefine this macro so that the runtime patching introduced bycommit 2d1b2027626d ("powerpc: Fixup lwsync at runtime") continues towork properly with clang and the build no longer breaks.Cc: stable@vger.kernel.orgSigned-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://github.com/ClangBuiltLinux/linux/issues/1386Link: https://github.com/llvm/llvm-project/commit/62b5df7fe2b3fda1772befeda15598fbef96a614Link: https://lore.kernel.org/r/20210528182752.1852002-1-nathan@kernel.orgSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
clang bug	 https://github.com/SocratesWong/CS-6120-LLVM-Project/commit/7b2d62fd7f7befda2ce327d25075b0aac9bc6780	[clang-format] PR42434 Remove preprocessor and pragma lines from ObjectiveC guessclang-format see the `disable:` in   __pragma(warning(disable:)) as ObjectiveC method callRemove any line starting with `#` or __pragma line from being part of the ObjectiveC guesshttps://bugs.llvm.org/show_bug.cgi?id=42434Reviewed By: curdeius, krasimirDifferential Revision: https://reviews.llvm.org/D92922
clang bug	 https://github.com/librsync/librsync/commit/41d7922ccdc5ec37a65e20f08c104c2ce1553fd9	Add .clang-tidy to turn of a buggy check.The clang-analyzer-valist.Uninitialized check has a bug that givesfalse-positives. See https://bugs.llvm.org/show_bug.cgi?id=41311.
clang bug	 https://github.com/Nusantara-ROM/android_bionic/commit/289b095a56c31a3e334d35b0c851d6e881ebfe35	[master] Fix "deprecated instruction in IT block" warningBug: 179266557Test: make with new clang compilerChange-Id: I963609861659cbb2be8ed467654109938185c747
clang bug	 https://github.com/TKChattoraj/bitcoin/commit/eed99cf272426e5957bee35dc8e7d0798aec8ec0	bench: update nanobench from 4.3.4 to 4.3.6Most importantly, this update fixes a bug in nanobench that alwaysdisabled performance counters on linux.It also adds another sanitizer suppression that is caught in clang++ 12.
clang bug	 https://github.com/xaya/xaya/commit/eed99cf272426e5957bee35dc8e7d0798aec8ec0	bench: update nanobench from 4.3.4 to 4.3.6Most importantly, this update fixes a bug in nanobench that alwaysdisabled performance counters on linux.It also adds another sanitizer suppression that is caught in clang++ 12.
clang bug	 https://github.com/jonmason/meta-arm/commit/a0296bf8a0966585db72a8c6dd5fdc67ecf8e088	arm/edk2-firmware: force debug builds when using Clangedk2-firmware release builds with clang fail:MdePkg/Library/UefiMemoryAllocationLib/MemoryAllocationLib.c:142:15:error: variable 'Status' set but not used [-Werror,-Wunused-but-set-variable]This is upstream as https://bugzilla.tianocore.org/show_bug.cgi?id=3758,but until that is resolved we can just force debug builds with clang.Signed-off-by: Ross Burton <ross.burton@arm.com>Signed-off-by: Jon Mason <jon.mason@arm.com>
clang bug	 https://github.com/josibake/champcoin/commit/eed99cf272426e5957bee35dc8e7d0798aec8ec0	bench: update nanobench from 4.3.4 to 4.3.6Most importantly, this update fixes a bug in nanobench that alwaysdisabled performance counters on linux.It also adds another sanitizer suppression that is caught in clang++ 12.
clang bug	 https://github.com/MontaVista-OpenSourceTechnology/meta-arm/commit/a0296bf8a0966585db72a8c6dd5fdc67ecf8e088	arm/edk2-firmware: force debug builds when using Clangedk2-firmware release builds with clang fail:MdePkg/Library/UefiMemoryAllocationLib/MemoryAllocationLib.c:142:15:error: variable 'Status' set but not used [-Werror,-Wunused-but-set-variable]This is upstream as https://bugzilla.tianocore.org/show_bug.cgi?id=3758,but until that is resolved we can just force debug builds with clang.Signed-off-by: Ross Burton <ross.burton@arm.com>Signed-off-by: Jon Mason <jon.mason@arm.com>
clang bug	 https://github.com/GuillaumeDua/GCL_CPP/commit/d268569ad421ad67c119c680dc3e3c41bd9e4545	[mp/pack_traits] fix clang 12.0.0 issues/bug
clang bug	 https://github.com/jfalcou/eve/commit/43fd309b6ec74d7f7a9c8a794fc37cfe48466849	:bug: Fix some interactions with clang++ 11 (#618)* Fix consteval/constexpr interaction with clang-11* Fix reduce test
clang bug	 https://github.com/Dirk1980ac/linux/commit/df05c0e9496ce1e28b51f79f9fae94479a37fa60	Documentation: Raise the minimum supported version of LLVM to 11.0.0LLVM versions prior to 11.0.0 have a harder time with dead codeelimination, which can cause issues with commonly used expressions suchas BUILD_BUG_ON and the bitmask functions/macros in bitfield.h (see thefirst two issues links below).Whenever there is an issue within LLVM that has been resolved in a laterrelease, the only course of action is to gate the problematicconfiguration or source code on the toolchain verson or raise theminimum supported version of LLVM for building the kernel, as LLVM has alimited support lifetime compared to GCC. GCC major releases willtypically see a few point releases across a two year period on averagewhereas LLVM major releases are only supported until the next majorrelease and will only see one or two point releases within thattimeframe. For example, GCC 8.1 was released in May 2018 and GCC 8.5 wasreleased in May 2021, whereas LLVM 12.0.0 was released in April 2021 andits only point release, 12.0.1, was released in July 2021, giving aminimal window for fixes to be backported.To resolve these build errors around improper dead code elimination,raise the minimum supported version of LLVM for building the kernel to11.0.0. Doing so is a more proper solution than mucking around with corekernel macros that have always worked with GCC or disabling drivers forusing these macros in a proper manner. This type of issue may continueto crop up and require patching, which creates more debt for bumping theminimum supported version in the future.This should have a minimal impact to distributions. Using a script topull several different Docker images and check the output of'clang --version':archlinux:latest: clang version 13.0.0debian:oldoldstable-slim: clang version 3.8.1-24 (tags/RELEASE_381/final)debian:oldstable-slim: clang version 7.0.1-8+deb10u2 (tags/RELEASE_701/final)debian:stable-slim: Debian clang version 11.0.1-2debian:testing-slim: Debian clang version 11.1.0-4debian:unstable-slim: Debian clang version 11.1.0-4fedora:34: clang version 12.0.1 (Fedora 12.0.1-1.fc34)fedora:latest: clang version 13.0.0 (Fedora 13.0.0-3.fc35)fedora:rawhide: clang version 13.0.0 (Fedora 13.0.0-5.fc36)opensuse/leap:15.2: clang version 9.0.1opensuse/leap:latest: clang version 11.0.1opensuse/tumbleweed:latest: clang version 13.0.0ubuntu:bionic: clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)ubuntu:latest: clang version 10.0.0-4ubuntu1ubuntu:hirsute: Ubuntu clang version 12.0.0-3ubuntu1~21.04.2ubuntu:rolling: Ubuntu clang version 13.0.0-2ubuntu:devel: Ubuntu clang version 13.0.0-9In every case, the distribution's version of clang is either older thanthe current minimum supported version of LLVM 10.0.1 or equal to orgreater than the proposed 11.0.0 so nothing should change.Another benefit of this change is LLVM=1 works better with arm64 andx86_64 since commit f12b034afeb3 ("scripts/Makefile.clang: default toLLVM_IAS=1") enabled the integrated assembler by default, which onlyworks well with clang 11+ (clang-10 required it to be disabled tosuccessfully build a kernel).Link: https://github.com/ClangBuiltLinux/linux/issues/1293Link: https://github.com/ClangBuiltLinux/linux/issues/1506Link: https://github.com/ClangBuiltLinux/linux/issues/1511Link: https://github.com/llvm/llvm-project/commit/fa496ce3c6774097080c8a9cb808da56f383b938Link: https://groups.google.com/g/clang-built-linux/c/mPQb9_ZWW0s/m/W7o6S-QTBAAJLink: https://github.com/ClangBuiltLinux/misc-scriptsSigned-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Miguel Ojeda <ojeda@kernel.org>Reviewed-by: Mark Brown <broonie@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
clang bug	 https://github.com/vladlogyin/linux-tb-j616f/commit/df05c0e9496ce1e28b51f79f9fae94479a37fa60	Documentation: Raise the minimum supported version of LLVM to 11.0.0LLVM versions prior to 11.0.0 have a harder time with dead codeelimination, which can cause issues with commonly used expressions suchas BUILD_BUG_ON and the bitmask functions/macros in bitfield.h (see thefirst two issues links below).Whenever there is an issue within LLVM that has been resolved in a laterrelease, the only course of action is to gate the problematicconfiguration or source code on the toolchain verson or raise theminimum supported version of LLVM for building the kernel, as LLVM has alimited support lifetime compared to GCC. GCC major releases willtypically see a few point releases across a two year period on averagewhereas LLVM major releases are only supported until the next majorrelease and will only see one or two point releases within thattimeframe. For example, GCC 8.1 was released in May 2018 and GCC 8.5 wasreleased in May 2021, whereas LLVM 12.0.0 was released in April 2021 andits only point release, 12.0.1, was released in July 2021, giving aminimal window for fixes to be backported.To resolve these build errors around improper dead code elimination,raise the minimum supported version of LLVM for building the kernel to11.0.0. Doing so is a more proper solution than mucking around with corekernel macros that have always worked with GCC or disabling drivers forusing these macros in a proper manner. This type of issue may continueto crop up and require patching, which creates more debt for bumping theminimum supported version in the future.This should have a minimal impact to distributions. Using a script topull several different Docker images and check the output of'clang --version':archlinux:latest: clang version 13.0.0debian:oldoldstable-slim: clang version 3.8.1-24 (tags/RELEASE_381/final)debian:oldstable-slim: clang version 7.0.1-8+deb10u2 (tags/RELEASE_701/final)debian:stable-slim: Debian clang version 11.0.1-2debian:testing-slim: Debian clang version 11.1.0-4debian:unstable-slim: Debian clang version 11.1.0-4fedora:34: clang version 12.0.1 (Fedora 12.0.1-1.fc34)fedora:latest: clang version 13.0.0 (Fedora 13.0.0-3.fc35)fedora:rawhide: clang version 13.0.0 (Fedora 13.0.0-5.fc36)opensuse/leap:15.2: clang version 9.0.1opensuse/leap:latest: clang version 11.0.1opensuse/tumbleweed:latest: clang version 13.0.0ubuntu:bionic: clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)ubuntu:latest: clang version 10.0.0-4ubuntu1ubuntu:hirsute: Ubuntu clang version 12.0.0-3ubuntu1~21.04.2ubuntu:rolling: Ubuntu clang version 13.0.0-2ubuntu:devel: Ubuntu clang version 13.0.0-9In every case, the distribution's version of clang is either older thanthe current minimum supported version of LLVM 10.0.1 or equal to orgreater than the proposed 11.0.0 so nothing should change.Another benefit of this change is LLVM=1 works better with arm64 andx86_64 since commit f12b034afeb3 ("scripts/Makefile.clang: default toLLVM_IAS=1") enabled the integrated assembler by default, which onlyworks well with clang 11+ (clang-10 required it to be disabled tosuccessfully build a kernel).Link: https://github.com/ClangBuiltLinux/linux/issues/1293Link: https://github.com/ClangBuiltLinux/linux/issues/1506Link: https://github.com/ClangBuiltLinux/linux/issues/1511Link: https://github.com/llvm/llvm-project/commit/fa496ce3c6774097080c8a9cb808da56f383b938Link: https://groups.google.com/g/clang-built-linux/c/mPQb9_ZWW0s/m/W7o6S-QTBAAJLink: https://github.com/ClangBuiltLinux/misc-scriptsSigned-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Miguel Ojeda <ojeda@kernel.org>Reviewed-by: Mark Brown <broonie@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
clang bug	 https://github.com/rohankumardubey/skia/commit/1c5186754095526d520e97ddf7c9110ab8fe9ef8	Roll ANGLE from 421dbf200d36 to db83279a7f61 (11 revisions)https://chromium.googlesource.com/angle/angle.git/+log/421dbf200d36..db83279a7f612021-10-27 kpiddington@apple.com Metal: Use 'fast' normalize to match DEQP expectations2021-10-27 kpiddington@apple.com Metal: Use ES3 validation for GL_R/RG8_EXT formats2021-10-27 penghuang@chromium.org VANGLE: change the default vulkan device choose logic2021-10-27 angle-autoroll@skia-public.iam.gserviceaccount.com Roll VK-GL-CTS from e2aeccde416b to 49afd2823061 (34 revisions)2021-10-27 jmadill@chromium.org Vulkan: Fix accessing stale FB cached variable.2021-10-27 syoussefi@chromium.org Switch to python3 in DEPS2021-10-27 angle-autoroll@skia-public.iam.gserviceaccount.com Roll SwiftShader from 21810915c4f1 to d143249a93bc (1 revision)2021-10-27 angle-autoroll@skia-public.iam.gserviceaccount.com Roll vulkan-deps from 06cd4429bf9e to e706a029a256 (10 revisions)2021-10-27 thakis@chromium.org Run clang update script under python3 in angle2021-10-27 ajgo@chromium.org disable cfguards for all deqp tests2021-10-27 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from b7a27dd8face to 6e4379b531a3 (441 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC egdaniel@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: egdaniel@google.comTest: Test: CQ plus aboveChange-Id: I019e5fc0bfc015fbc88ae3bbd8b73346d9f991eaReviewed-on: https://skia-review.googlesource.com/c/skia/+/464420Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/Au-Zone/linux-maivin/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
clang bug	 https://github.com/vladlogyin/linux-tb-j616f/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
clang bug	 https://github.com/mhjacobson/avr-objc/commit/6187e336d706f1a87a7f0cbd9efa838f9d966737	objc.m: add workaround for GCC bug (difference from clang in how it emitsclasses when `sizeof (unsigned int) != sizeof (uint8_t *)`)
clang bug	 https://github.com/Panchajanya1999/linux-mainline/commit/df05c0e9496ce1e28b51f79f9fae94479a37fa60	Documentation: Raise the minimum supported version of LLVM to 11.0.0LLVM versions prior to 11.0.0 have a harder time with dead codeelimination, which can cause issues with commonly used expressions suchas BUILD_BUG_ON and the bitmask functions/macros in bitfield.h (see thefirst two issues links below).Whenever there is an issue within LLVM that has been resolved in a laterrelease, the only course of action is to gate the problematicconfiguration or source code on the toolchain verson or raise theminimum supported version of LLVM for building the kernel, as LLVM has alimited support lifetime compared to GCC. GCC major releases willtypically see a few point releases across a two year period on averagewhereas LLVM major releases are only supported until the next majorrelease and will only see one or two point releases within thattimeframe. For example, GCC 8.1 was released in May 2018 and GCC 8.5 wasreleased in May 2021, whereas LLVM 12.0.0 was released in April 2021 andits only point release, 12.0.1, was released in July 2021, giving aminimal window for fixes to be backported.To resolve these build errors around improper dead code elimination,raise the minimum supported version of LLVM for building the kernel to11.0.0. Doing so is a more proper solution than mucking around with corekernel macros that have always worked with GCC or disabling drivers forusing these macros in a proper manner. This type of issue may continueto crop up and require patching, which creates more debt for bumping theminimum supported version in the future.This should have a minimal impact to distributions. Using a script topull several different Docker images and check the output of'clang --version':archlinux:latest: clang version 13.0.0debian:oldoldstable-slim: clang version 3.8.1-24 (tags/RELEASE_381/final)debian:oldstable-slim: clang version 7.0.1-8+deb10u2 (tags/RELEASE_701/final)debian:stable-slim: Debian clang version 11.0.1-2debian:testing-slim: Debian clang version 11.1.0-4debian:unstable-slim: Debian clang version 11.1.0-4fedora:34: clang version 12.0.1 (Fedora 12.0.1-1.fc34)fedora:latest: clang version 13.0.0 (Fedora 13.0.0-3.fc35)fedora:rawhide: clang version 13.0.0 (Fedora 13.0.0-5.fc36)opensuse/leap:15.2: clang version 9.0.1opensuse/leap:latest: clang version 11.0.1opensuse/tumbleweed:latest: clang version 13.0.0ubuntu:bionic: clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)ubuntu:latest: clang version 10.0.0-4ubuntu1ubuntu:hirsute: Ubuntu clang version 12.0.0-3ubuntu1~21.04.2ubuntu:rolling: Ubuntu clang version 13.0.0-2ubuntu:devel: Ubuntu clang version 13.0.0-9In every case, the distribution's version of clang is either older thanthe current minimum supported version of LLVM 10.0.1 or equal to orgreater than the proposed 11.0.0 so nothing should change.Another benefit of this change is LLVM=1 works better with arm64 andx86_64 since commit f12b034afeb3 ("scripts/Makefile.clang: default toLLVM_IAS=1") enabled the integrated assembler by default, which onlyworks well with clang 11+ (clang-10 required it to be disabled tosuccessfully build a kernel).Link: https://github.com/ClangBuiltLinux/linux/issues/1293Link: https://github.com/ClangBuiltLinux/linux/issues/1506Link: https://github.com/ClangBuiltLinux/linux/issues/1511Link: https://github.com/llvm/llvm-project/commit/fa496ce3c6774097080c8a9cb808da56f383b938Link: https://groups.google.com/g/clang-built-linux/c/mPQb9_ZWW0s/m/W7o6S-QTBAAJLink: https://github.com/ClangBuiltLinux/misc-scriptsSigned-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Miguel Ojeda <ojeda@kernel.org>Reviewed-by: Mark Brown <broonie@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
clang bug	 https://github.com/coreboot/chrome-ec/commit/541e3dee10752720c2bba7e4d81544eaa284bfc6	test/utils: Switch to run-time test to fix clang buildThe BUILD_ASSERT that was used fails to compile with clang:error: static_assert expression is not an integralconstant expression        BUILD_ASSERT(str1 != str3)BRANCH=noneBUG=b:172020503TEST=make buildall -jTEST=./test/run_device_tests.py --board dartmonkey --compiler clang       --tests=utils  --remote 127.0.0.1:2551TEST=./test/run_device_tests.py --board dartmonkey --compiler gcc       --tests=utils  --remote 127.0.0.1:2551Signed-off-by: Tom Hughes <tomhughes@chromium.org>Change-Id: Id93ea45b653b86fd5a79ed565e1fa94ffd317723Reviewed-on: https://chromium-review.googlesource.com/c/chromiumos/platform/ec/+/3174596Reviewed-by: Patrick Georgi <pgeorgi@chromium.org>
clang bug	 https://github.com/rohankumardubey/skia/commit/1ddf724e3707d3de8728d449a897b0f06055c012	Roll ANGLE from 0dbe308d91a3 to 421dbf200d36 (8 revisions)https://chromium.googlesource.com/angle/angle.git/+log/0dbe308d91a3..421dbf200d362021-10-26 cclao@google.com Revert "Vulkan: Use different strategy for buffer memory allocation"2021-10-26 cclao@google.com Revert "Vulkan: Let BufferVk call into VMA for allocation when possible"2021-10-26 syoussefi@chromium.org Translator: Fix precision bug in HLSL generation2021-10-26 timvp@google.com Reland "Vulkan: Flush descriptor set updates during flush*Commands()"2021-10-26 angle-autoroll@skia-public.iam.gserviceaccount.com Roll vulkan-deps from 19d99befaa5f to 06cd4429bf9e (4 revisions)2021-10-26 angle-autoroll@skia-public.iam.gserviceaccount.com Roll SwiftShader from c5e237273696 to 21810915c4f1 (1 revision)2021-10-26 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 9d26607df45d to b7a27dd8face (437 revisions)2021-10-26 cclao@google.com Vulkan: Let BufferVk call into VMA for allocation when possibleIf this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC egdaniel@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: egdaniel@google.comChange-Id: If1d81af9c19b4966c27415d8548ef6b5cf7f4720Reviewed-on: https://skia-review.googlesource.com/c/skia/+/463998Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/Kyuofox/android-mainline/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
clang bug	 https://github.com/rohankumardubey/skia/commit/2b0935b71a4793b814623de682d6fa7640f72da5	Roll ANGLE from 9e8c929e7df9 to b638d29d4009 (10 revisions)https://chromium.googlesource.com/angle/angle.git/+log/9e8c929e7df9..b638d29d40092021-10-22 steven@valvesoftware.com TransformFeedbackTest: fix buffer read overrun2021-10-22 syoussefi@chromium.org Roll libunwind together with Chromium2021-10-22 steven@valvesoftware.com metal: fix crash when checking for flat attributes2021-10-22 steven@valvesoftware.com FramebufferTest: fix read overruns in glTexImage2D upload2021-10-22 steven@valvesoftware.com DrawBuffersTest: fix use-after-free bug2021-10-22 steven@valvesoftware.com avoid reading past end of stack array in GetEnvironmentVar2021-10-22 lubosz.sarnecki@collabora.com SurfaceVk: Use vkGetPhysicalDeviceSurfaceFormats2KHR.2021-10-22 angle-autoroll@skia-public.iam.gserviceaccount.com Roll vulkan-deps from f70ffc911963 to 4b6798af71b9 (11 revisions)2021-10-22 angle-autoroll@skia-public.iam.gserviceaccount.com Roll SwiftShader from 6683bca5f94e to c5e237273696 (1 revision)2021-10-22 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from af7960f051e8 to 75578cc5e47d (193 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC egdaniel@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: egdaniel@google.comChange-Id: I8f612341eacc225822468a5e3b83676ca07fdc2eReviewed-on: https://skia-review.googlesource.com/c/skia/+/462897Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/woodsts/linux-stable/commit/d2a02e3c8bb6b347818518edff5a4b40ff52d6d8	lib/crypto: blake2s: avoid indirect calls to compression function for Clang CFIblake2s_compress_generic is weakly aliased by blake2s_compress. Thecurrent harness for function selection uses a function pointer, which isordinarily inlined and resolved at compile time. But when Clang's CFI isenabled, CFI still triggers when making an indirect call via a weaksymbol. This seems like a bug in Clang's CFI, as though it's bucketingweak symbols and strong symbols differently. It also only seems totrigger when "full LTO" mode is used, rather than "thin LTO".[    0.000000][    T0] Kernel panic - not syncing: CFI failure (target: blake2s_compress_generic+0x0/0x1444)[    0.000000][    T0] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.16.0-mainline-06981-g076c855b846e #1[    0.000000][    T0] Hardware name: MT6873 (DT)[    0.000000][    T0] Call trace:[    0.000000][    T0]  dump_backtrace+0xfc/0x1dc[    0.000000][    T0]  dump_stack_lvl+0xa8/0x11c[    0.000000][    T0]  panic+0x194/0x464[    0.000000][    T0]  __cfi_check_fail+0x54/0x58[    0.000000][    T0]  __cfi_slowpath_diag+0x354/0x4b0[    0.000000][    T0]  blake2s_update+0x14c/0x178[    0.000000][    T0]  _extract_entropy+0xf4/0x29c[    0.000000][    T0]  crng_initialize_primary+0x24/0x94[    0.000000][    T0]  rand_initialize+0x2c/0x6c[    0.000000][    T0]  start_kernel+0x2f8/0x65c[    0.000000][    T0]  __primary_switched+0xc4/0x7be4[    0.000000][    T0] Rebooting in 5 seconds..Nonetheless, the function pointer method isn't so terrific anyway, sothis patch replaces it with a simple boolean, which also gets inlinedaway. This successfully works around the Clang bug.In general, I'm not too keen on all of the indirection involved here; itclearly does more harm than good. Hopefully the whole thing can getcleaned up down the road when lib/crypto is overhauled morecomprehensively. But for now, we go with a simple bandaid.Fixes: 6048fdcc5f26 ("lib/crypto: blake2s: include as built-in")Link: https://github.com/ClangBuiltLinux/linux/issues/1567Reported-by: Miles Chen <miles.chen@mediatek.com>Tested-by: Miles Chen <miles.chen@mediatek.com>Tested-by: Nathan Chancellor <nathan@kernel.org>Tested-by: John Stultz <john.stultz@linaro.org>Acked-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Eric Biggers <ebiggers@google.com>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
clang bug	 https://github.com/freedesktop/drm-intel/commit/d2a02e3c8bb6b347818518edff5a4b40ff52d6d8	lib/crypto: blake2s: avoid indirect calls to compression function for Clang CFIblake2s_compress_generic is weakly aliased by blake2s_compress. Thecurrent harness for function selection uses a function pointer, which isordinarily inlined and resolved at compile time. But when Clang's CFI isenabled, CFI still triggers when making an indirect call via a weaksymbol. This seems like a bug in Clang's CFI, as though it's bucketingweak symbols and strong symbols differently. It also only seems totrigger when "full LTO" mode is used, rather than "thin LTO".[    0.000000][    T0] Kernel panic - not syncing: CFI failure (target: blake2s_compress_generic+0x0/0x1444)[    0.000000][    T0] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.16.0-mainline-06981-g076c855b846e #1[    0.000000][    T0] Hardware name: MT6873 (DT)[    0.000000][    T0] Call trace:[    0.000000][    T0]  dump_backtrace+0xfc/0x1dc[    0.000000][    T0]  dump_stack_lvl+0xa8/0x11c[    0.000000][    T0]  panic+0x194/0x464[    0.000000][    T0]  __cfi_check_fail+0x54/0x58[    0.000000][    T0]  __cfi_slowpath_diag+0x354/0x4b0[    0.000000][    T0]  blake2s_update+0x14c/0x178[    0.000000][    T0]  _extract_entropy+0xf4/0x29c[    0.000000][    T0]  crng_initialize_primary+0x24/0x94[    0.000000][    T0]  rand_initialize+0x2c/0x6c[    0.000000][    T0]  start_kernel+0x2f8/0x65c[    0.000000][    T0]  __primary_switched+0xc4/0x7be4[    0.000000][    T0] Rebooting in 5 seconds..Nonetheless, the function pointer method isn't so terrific anyway, sothis patch replaces it with a simple boolean, which also gets inlinedaway. This successfully works around the Clang bug.In general, I'm not too keen on all of the indirection involved here; itclearly does more harm than good. Hopefully the whole thing can getcleaned up down the road when lib/crypto is overhauled morecomprehensively. But for now, we go with a simple bandaid.Fixes: 6048fdcc5f26 ("lib/crypto: blake2s: include as built-in")Link: https://github.com/ClangBuiltLinux/linux/issues/1567Reported-by: Miles Chen <miles.chen@mediatek.com>Tested-by: Miles Chen <miles.chen@mediatek.com>Tested-by: Nathan Chancellor <nathan@kernel.org>Tested-by: John Stultz <john.stultz@linaro.org>Acked-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Eric Biggers <ebiggers@google.com>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
clang bug	 https://github.com/the-moisrex/webpp/commit/97a59475d9ff73ce142010215d59da5803e464be	fixed a clang bug
clang bug	 https://github.com/RadeonOpenCompute/rocm-cmake/commit/ececd2eccae4d01e7ec154efe90ac43ebf4df317	Fix bugs in clang tidy cache (#45)* Use the config file flag* Fix bug with writing empty hash
clang bug	 https://github.com/doxygen/doxygen/commit/952d4ca7c5bcf5b3ec6c67b4a0e2808de6d04153	Merge pull request #8348 from albert-github/feature/bug_clang_dependencyMissing CLANG dependency
clang bug	 https://github.com/Octavi-Testing-Org/platform_frameworks_av/commit/b58afa74d3bc8c2bf3696f8b2f73a0c3c2d1b308	C2 VTS: Format using clang-formatAdded .clang-format and formatted all the sources and headersBug: 184389394Test: atest VtsHalMediaC2V1_0TargetAudioDecTest \      VtsHalMediaC2V1_0TargetAudioEncTest \      VtsHalMediaC2V1_0TargetVideoDecTest \      VtsHalMediaC2V1_0TargetVideoEncTest \      VtsHalMediaC2V1_0TargetComponentTest \      VtsHalMediaC2V1_0TargetMasterTestChange-Id: Ia132a8c051b5ab442afb1114d220f822168a3632
clang bug	 https://github.com/simd-everywhere/simde/commit/e090746b7079bf7c6b85b71d05a8732f84779436	Cleanups of SIMDE_BUG_* definitions (#680)* operationalize clang bug 44589* remove unused bug references
clang bug	 https://github.com/openblack/openblack/commit/4cd3097ec905adaf744643c89be0fa8f2f864574	Update Cam to be more like Black & White (#346)* Update Cam to be more like Black & White* Commit all, not just camera.cpp & clang-format* implement requests, fix errors and clean up* fixing bugs introduced in last commit* fixed issues with velocities being lockedMade space and ctrl move in world y rather than cam ychanged declaration back to initializer listchanged inputs for switch statments with proper use of break!put raycasting down the camview vector into a function* removed logging and extra include.* remove comments add imgui.ini to .gitignore* Delete imgui.ini* fixed issue with overshooting on hand dragchanged orbit cam pivot from raycast land point to hand posadded FPV rotation to shift + mmbCleaned code and removed unused variables* remove quaternion include.* Fixed issue with infinate scroll over horizonrenamed GetViewCenterLand to RaycastCamToLand and changed return to booladded RaycastMouseToLandattenuated speed for distant hand pulls* fixed sWidth and sHeight initialization issue.* change to pass by reference for 2 functions* Fly function added to camerafixed raycasting function bugsraycasting now returns an optional transformfixed bug with orbit around hand when above horizondouble click now flys the camera to the click positioncamera faces correct direction during fly (floaty like B&W)added code to abort a camera flycamera fly attempts to avoid obstacles (adjusts curve mid flight)* fix build warnings* fix issues.* format fix* fixed issues with mouse drag* remove commented code* mouse wheel scrolling more like B&W* fix clang-format issues.* fix issue with clicking once moving cameraslow down cam when dragging over horizonfix issue with succesive quick drags registering as double click to flyorbit cam supersedes dragdrag or orbitcam supersedes movement keysfix issue with orbit cam forcing camera y less than 0fix issue with dragging while cam facing uporbit cam no longer allowed to rot x less than -60 degrees* hand grab stops any current cam movement.* clean up includes* fix issue with drag popping introduced in 7a617f3* adjust overall speed to make world appear largerAdjust mouse scroll speed for closer zoomsadjust maximum orbit distance to be lessmake hand smaller (better match scale of world)move hand closer to groundslow hand dragging speed (again for scale)
clang bug	 https://github.com/ziglang/zig/commit/f253822415304fc069f68452f7f4abbded58a24e	stage2: do not set clang_passthrough_mode for `zig run`Thanks to @g-w1 for discovering this bug.closes #8450
clang bug	 https://github.com/buildtesters/buildtest/commit/a640ec63f297835867cad0a4b85bc378f9246fa8	bug when finding compiler for clang and cuda (#597)
clang bug	 https://github.com/coreboot/chrome-ec/commit/5c59fb8b6228f6d17ab0c335614e6564863ff7a5	driver: Remove unused functionWhen compiling with clang it warns that the function is unused:driver/accelgyro_lsm6dsm.c:45:29: error: unused function 'get_fifo_type'[-Werror,-Wunused-function]static inline enum dev_fifo get_fifo_type(const struct motion_sensor_t*s)BRANCH=noneBUG=b:172020503TEST=make CC=clang V=1 BOARD=arcada_ishSigned-off-by: Tom Hughes <tomhughes@chromium.org>Change-Id: Ibc52e25a2f750e8da8335e7835475db7a5d42670Reviewed-on: https://chromium-review.googlesource.com/c/chromiumos/platform/ec/+/3193275Reviewed-by: Daisuke Nojiri <dnojiri@chromium.org>
clang bug	 https://github.com/ROCmSoftwarePlatform/AMDMIGraphX/commit/4789b387c54c5c49ab20070d8ccb2c4b026bab7f	Upsample op (#646)* code backup for upsample op* clang format* fixed a bug* fix a bug* clang format* add unit tests for upsample* clang format* clang formatCo-authored-by: Paul Fultz II <pfultz2@yahoo.com>
clang bug	 https://github.com/dlwlrma123/kernel_rmx2020/commit/c731bb893276fda11b69a01ae235589e4c451a66	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
clang bug	 https://github.com/crdroidandroid/android_build_soong/commit/bf61afb7f77eb605dca583d0f6e02a1bc6ccc6cb	bp2build: export some cc toolchain flags into Starlark.This CL exports common/global/device/host clang/ld/ldd flagsfrom their Ninja variable initialization locations incc/config/global.go and cc/config/clang.go to make Bazel's cc_toolchainand Soong's cc actions more consistent with each other.This does not handle env-dependent or arch-specific toolchain flagsyet (logic in compiler.go and linker.go).Test: THBug: 187086342Bug: 187084737Bug: 186628704Bug: 187857770Change-Id: Ie403d7cd23f35160897b9dd902c799cbf1bd7f0c
clang bug	 https://github.com/SudoerzAOSPMod/build_soong/commit/bf61afb7f77eb605dca583d0f6e02a1bc6ccc6cb	bp2build: export some cc toolchain flags into Starlark.This CL exports common/global/device/host clang/ld/ldd flagsfrom their Ninja variable initialization locations incc/config/global.go and cc/config/clang.go to make Bazel's cc_toolchainand Soong's cc actions more consistent with each other.This does not handle env-dependent or arch-specific toolchain flagsyet (logic in compiler.go and linker.go).Test: THBug: 187086342Bug: 187084737Bug: 186628704Bug: 187857770Change-Id: Ie403d7cd23f35160897b9dd902c799cbf1bd7f0c
clang bug	 https://github.com/dlwlrma123/kernel_rmx2020/commit/0fee015fdf83900f09b5ae970461b8639dc01414	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>
clang bug	 https://github.com/LADSoft/OrangeC/commit/b5d3ea5dcb4d9158015436b1b24134e9e5167e74	#532 fix bug in clang bug fix
clang bug	 https://github.com/herrnst/dddvb-linux-kernel/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
clang bug	 https://github.com/sourceruckus/linux-mdl/commit/f12b034afeb3a977bbb1c6584dedc0f3dc666f14	scripts/Makefile.clang: default to LLVM_IAS=1LLVM_IAS=1 controls enabling clang's integrated assembler via-integrated-as. This was an explicit opt in until we could enableassembler support in Clang for more architecures. Now we have supportand CI coverage of LLVM_IAS=1 for all architecures except a few morebugs affecting s390 and powerpc.This commit flips the default from opt in via LLVM_IAS=1 to opt out viaLLVM_IAS=0.  CI systems or developers that were previously doing buildswith CC=clang or LLVM=1 without explicitly setting LLVM_IAS must nowexplicitly opt out via LLVM_IAS=0, otherwise they will be implicitlyopted-in.This finally shortens the command line invocation when cross compilingwith LLVM to simply:$ make ARCH=arm64 LLVM=1Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
clang bug	 https://github.com/aggresss/libwebrtc/commit/cc99299bbc9a83c92721aee108f38abc9ad63c93	Remove use_xcode_clang=true from iOS packaging script.Bug: webrtc:13197Change-Id: I90a71cf1a1af9ba372cf9d23b73b9aeb3ea7b0b1Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/232600Commit-Queue: Mirko Bonadei <mbonadei@webrtc.org>Reviewed-by: Artem Titov <titovartem@webrtc.org>Cr-Commit-Position: refs/heads/main@{#35135}
clang bug	 https://github.com/sourceruckus/linux-mdl/commit/2f629969b01dab4ef6254fdfcfda3d82b1ad5420	Merge tag 'kbuild-fixes-v5.15' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuildPull Kbuild fixes from Masahiro Yamada: - Fix bugs in checkkconfigsymbols.py - Fix missing sys import in gen_compile_commands.py - Fix missing FORCE warning for ARCH=sh builds - Fix -Wignored-optimization-argument warnings for Clang builds - Turn -Wignored-optimization-argument into an error in order to stop   building instead of sprinkling warnings* tag 'kbuild-fixes-v5.15' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuild:  kbuild: Add -Werror=ignored-optimization-argument to CLANG_FLAGS  x86/build: Do not add -falign flags unconditionally for clang  kbuild: Fix comment typo in scripts/Makefile.modpost  sh: Add missing FORCE prerequisites in Makefile  gen_compile_commands: fix missing 'sys' package  checkkconfigsymbols.py: Remove skipping of help lines in parse_kconfig_file  checkkconfigsymbols.py: Forbid passing 'HEAD' to --commit
clang bug	 https://github.com/oneapi-src/oneDAL/commit/4088c7994760c41c23f737b5322e559f99824d75	Add roc_auc_score metric implementation for daal4py (#1280)* test seg fault* fix bug with null numeric table in input* CLang format* cassert* delete asserts* roc_auc impl* draft* delete tbb* fix* comment* work version* add cpuTypeee* remove std usage, added safee dispatcher* clang* using TArray, change cpu use* clang* loop has been paralleled* apply comments* clang* apply comments* clang* added parallel sort* clang* test seg fault* fix bug with null numeric table in input* CLang format* cassert* delete asserts* apply comments* remove include* test seg fault* fix bug with null numeric table in input* CLang format* cassert* delete asserts* remove include* apply comments, insert status in dispatcher, move functions in daal namespace* clang* merge in one fucntion* clang* remove nElements* clang* remove from .h file* inline* fix windows* test seg fault* fix bug with null numeric table in input* CLang format* cassert* delete asserts* test seg fault* fix bug with null numeric table in input* CLang format* cassert* delete asserts* remove include* test seg fault* fix bug with null numeric table in input* CLang format* cassert* delete asserts* remove include
clang bug	 https://github.com/xdroid-CAF/xd_build_soong/commit/871e34290e606ed0f4bd464d4312237dd9721a60	rust: Pass additional Clang C flags from toolchainThe set of Clang flags passed to bindgen from the toolchain wasincomplete. In addition to ToolchainClangCflags(), we also need to callClangCflags().Bug: 184081465Test: m libgrpc_bindgenChange-Id: I0b62345fee2f55ba18b4a0c4d825f0447c99db06
clang bug	 https://github.com/percona/percona-xtradb-cluster/commit/9265f63dc0fbdd09ecde254d7405f3f9d0a366d8	Bug #32637681 CLANG ON SOLARIS: STATIC OBJECTS IN PLUGIN/UDF_SERVICESThe patch forBug #32555134 ADD SUPPORT FOR CLANG 11 ON SOLARISenabled the use of clang when building on Solaris/SPARC.There are some failing plugin/components tests.  Failures are causedby atexit() handling and execution of destructors during exit().Objects with static storage duration should have trivial destructors.This patch fixes plugin/udf_servicesChange-Id: I4913d920e77caff70be79efb22ab2e20dbb69f86
clang bug	 https://github.com/ColtOSTemp/platform_frameworks_av/commit/b58afa74d3bc8c2bf3696f8b2f73a0c3c2d1b308	C2 VTS: Format using clang-formatAdded .clang-format and formatted all the sources and headersBug: 184389394Test: atest VtsHalMediaC2V1_0TargetAudioDecTest \      VtsHalMediaC2V1_0TargetAudioEncTest \      VtsHalMediaC2V1_0TargetVideoDecTest \      VtsHalMediaC2V1_0TargetVideoEncTest \      VtsHalMediaC2V1_0TargetComponentTest \      VtsHalMediaC2V1_0TargetMasterTestChange-Id: Ia132a8c051b5ab442afb1114d220f822168a3632
clang bug	 https://github.com/SDL-Hercules-390/hyperion/commit/eda60ae7106b1f79109a3c975cf46540bba817e5	Warning Workaround for clang bug affecting CASSERT
clang bug	 https://github.com/percona/percona-xtradb-cluster/commit/16cf85ce129736beb00dade56626f6fd2087b863	Bug #32618320 CLANG ON SOLARIS: STATIC OBJECTS IN PLUGIN/KEYRINGThe patch forBug #32555134 ADD SUPPORT FOR CLANG 11 ON SOLARISenabled the use of clang when building on Solaris/SPARC.There are some failing plugin/components tests.  Failures are causedby atexit() handling and execution of destructors during exit().Objects with static storage duration should have trivial destructors.This patch fixes plugin/keyringChange-Id: I1a5de5fd618a197836df0c6cef2a4282dc039f31
clang bug	 https://github.com/coreboot/chrome-ec/commit/87798ac80d69e1ec173c94eaa76e4a142cb16ad6	chip/mt_scp: Fix return typeclang complains that the types do not match:chip/mt_scp/mt8183/ipi.c:349:9: error: implicit conversion fromenumeration type 'enum ec_error_list' to different enumeration type'enum ec_status' [-Werror,-Wenum-conversion]BRANCH=noneBUG=b:172020503TEST=make buildall -jTEST=CC=arm-none-eabi-clang make BOARD=kukui_scp -jSigned-off-by: Tom Hughes <tomhughes@chromium.org>Change-Id: I14e850f5e2ace5c3f3e59c7bc2aa90b3eaf92a9dReviewed-on: https://chromium-review.googlesource.com/c/chromiumos/platform/ec/+/3182620Reviewed-by: Edward Hill <ecgh@chromium.org>
clang bug	 https://github.com/xdroid-CAF/xd_build_soong/commit/bf61afb7f77eb605dca583d0f6e02a1bc6ccc6cb	bp2build: export some cc toolchain flags into Starlark.This CL exports common/global/device/host clang/ld/ldd flagsfrom their Ninja variable initialization locations incc/config/global.go and cc/config/clang.go to make Bazel's cc_toolchainand Soong's cc actions more consistent with each other.This does not handle env-dependent or arch-specific toolchain flagsyet (logic in compiler.go and linker.go).Test: THBug: 187086342Bug: 187084737Bug: 186628704Bug: 187857770Change-Id: Ie403d7cd23f35160897b9dd902c799cbf1bd7f0c
clang bug	 https://github.com/ProtonAOSP-lavender/android_build_soong/commit/db7dda89f3c1cd1267b50e65a6a9385484bcee3e	Switch to clang-r407598 (12.0.1).Also suppress a clang-tidy warning and a ubsan check to pass compilation.Bug: 171348143Test: build.Change-Id: Ie5162c15df172cefd7cff9776e54531fd620bc23
clang bug	 https://github.com/SchrodingerZhu/ahash-c/commit/62a8fedaa62457bb5035a77520cdfcc44e1da304	clang codegen is actually a bug
clang bug	 https://github.com/mozilla/releases-comm-central/commit/131ac5deaaedad348241785d190600ef44e59468	Bug 1652354 - preparation - apply clang-format (needed likely due to clang-format update). rs=me--HG--extra : amend_source : ce2a7384405ed9acc63442107536f951dfceeeb9
clang bug	 https://github.com/mozilla/releases-comm-central/commit/41c784419171ece3333da1ddb39c64b4d76155dc	Bug 1653690 - followup - clang-format. rs=clang-format DONTBUILD
clang bug	 https://github.com/mozilla/releases-comm-central/commit/94cfcf89b47cbad4002e6586777b52d8929818f5	Bug 1665475 - followup - clang-format. rs=clang-format
clang bug	 https://github.com/mozilla/releases-comm-central/commit/c9b4d0738823927bb0e7c1c75762e90344263764	Bug 1662090 - followup - clang-format. rs=clang-format
clang bug	 https://github.com/devitocodes/devito/commit/0f2738850de5056a6a36a1e0a7f52a80a5311aed	compiler: Work around clang[10,11,?] omp-offloading bug
clang bug	 https://github.com/projects-nexus/android_kernel_xiaomi_lavender-LTO/commit/6d16f8147c351d7eefd7a65ae8c5a46860d225d0	arm64: sysreg: Make mrs_s and msr_s macros work with Clang and LTOClang's integrated assembler does not allow assembly macros definedin one inline asm block using the .macro directive to be used acrossseparate asm blocks. LLVM developers consider this a feature and not abug, recommending code refactoring:  https://bugs.llvm.org/show_bug.cgi?id=19749As binutils doesn't allow macros to be redefined, this change usesUNDEFINE_MRS_S and UNDEFINE_MSR_S to define corresponding macrosin-place and workaround gcc and clang limitations on redefining macrosacross different assembler blocks.Specifically, the current state after preprocessing looks like this:asm volatile(".macro mXX_s ... .endm");void f(){
clang bug	 https://github.com/tiangui93/lenovo-k5Pro-Source-code/commit/7a05159d1fcbb03892b148fe31ef55bb54dae8b0	Revert "Revert "ANDROID: clang: update to 11.0.5""This reverts commit 998f5e469d48bda634c7289b76da897e8dcb5e53.Re-upgrades clang to 11.0.5/clang-r399163b.Bug: 171827315Bug: 173479375Bug: 174047799Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Iea4177618cce065c0ec683ec191e378e250975d3
clang bug	 https://github.com/crdroidandroid/android_kernel_xiaomi_msm8996/commit/20656eacfa2a910fa8322a2ff16b1b4c92a8fcad	arm64: vdso: disable LTODue to a bug in clang, vdso fails to build when both LTO_CLANG andCC_OPTIMIZE_FOR_SIZE are enabled:  https://bugs.llvm.org/show_bug.cgi?id=32155Disable LTO for vdso to work around the problem.Bug: 62093296Bug: 67506682Change-Id: I1d0279535fd389db4c829e4556f9ef728f240a34Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
clang bug	 https://github.com/scriptzteam/bitcoin/commit/da67b75c5cd747acd7fd662b0af20e67fd9670be	Merge bitcoin/bitcoin#22903: Enable clang-tidy bugprone-argument-comment and fix violationsfa57fa1a2e764792b873998ddf38db2ac061dcb6 Enable clang-tidy bugprone-argument-comment and fix violations (MarcoFalke)Pull request description:  Named arguments can be dangerous when they are wrong, because they are not enforced by the compiler. Currently there are only minor typos, no actual bugs.  Fix the typos and add the `.clang-tidy` file to make it easier to find them in the future.ACKs for top commit:  practicalswift:    cr ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6  fanquake:    ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6Tree-SHA512: b66f01e0a1e77e56ed8454002176df660cc2cc0947a90785aa33cc5b8003a1f99fd8b2f8f89f2a0bf180ff2c42c031d69e669d127bb557b879c17975275a220b
clang bug	 https://github.com/bitcoin/bitcoin/commit/da67b75c5cd747acd7fd662b0af20e67fd9670be	Merge bitcoin/bitcoin#22903: Enable clang-tidy bugprone-argument-comment and fix violationsfa57fa1a2e764792b873998ddf38db2ac061dcb6 Enable clang-tidy bugprone-argument-comment and fix violations (MarcoFalke)Pull request description:  Named arguments can be dangerous when they are wrong, because they are not enforced by the compiler. Currently there are only minor typos, no actual bugs.  Fix the typos and add the `.clang-tidy` file to make it easier to find them in the future.ACKs for top commit:  practicalswift:    cr ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6  fanquake:    ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6Tree-SHA512: b66f01e0a1e77e56ed8454002176df660cc2cc0947a90785aa33cc5b8003a1f99fd8b2f8f89f2a0bf180ff2c42c031d69e669d127bb557b879c17975275a220b
clang bug	 https://github.com/percona/percona-server/commit/e760d97b089dde8615c46d24aa2032d11a29c4af	Bug #33264498 /permissive- and Implicit conversion of integral constant expressions to null poThe clang on windows build is broken. The underlying problem is themissing implementation of "/permissive-" in clang.See the corresponding bug filed for LLVM:https://bugs.llvm.org/show_bug.cgi?id=51582The workaround is to remove 'constexpr' from the definition ofPSI_NOT_INSTRUMENTED.Also: change cmake code, removing compiler options that arevalid for Visual Studio only.Change-Id: I83f6b6605b14722d7d58f0076afee7a96c3bd68d(cherry picked from commit 69b05cf669b7d8b8f7c86a06c6a05a1174cf2470)
clang bug	 https://github.com/josibake/champcoin/commit/da67b75c5cd747acd7fd662b0af20e67fd9670be	Merge bitcoin/bitcoin#22903: Enable clang-tidy bugprone-argument-comment and fix violationsfa57fa1a2e764792b873998ddf38db2ac061dcb6 Enable clang-tidy bugprone-argument-comment and fix violations (MarcoFalke)Pull request description:  Named arguments can be dangerous when they are wrong, because they are not enforced by the compiler. Currently there are only minor typos, no actual bugs.  Fix the typos and add the `.clang-tidy` file to make it easier to find them in the future.ACKs for top commit:  practicalswift:    cr ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6  fanquake:    ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6Tree-SHA512: b66f01e0a1e77e56ed8454002176df660cc2cc0947a90785aa33cc5b8003a1f99fd8b2f8f89f2a0bf180ff2c42c031d69e669d127bb557b879c17975275a220b
clang bug	 https://github.com/KangOS-Device/kernel_asus_sdm660/commit/72cc55e91da462dbc0ac90d066e4d84ec4b44cc9	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>(cherry picked from commit b7ee59ba3390b5c5766abed375bc51b0fd66a2f3)Signed-off-by: Dan Aloni <daloni@magicleap.com>Signed-off-by: Divyanshu-Modi <divyan.m05@gmail.com>
clang bug	 https://github.com/scp-fs2open/fs2open.github.com/commit/12be7576f715fe2f8c6ea972ebeb503f36bed6d9	Animation Overhaul: Phase 2 (#3609)* Add Generic Rotation Segment* SEXPd rotations work* Fully replace old animation system* Add sound segment* Fixes* Trigger Hangarbay doors for lone player without AI* Address Warnings* Fix Docking ANimations + some bugs* Fix sound issue + docking bug* fix bugs, add multi handling* Change direction into enum class* Address feedback* Futher clean aicode* Address feedback* Add Multi packet constexprs* Fix multi constexprs* Clarify AIS_DOCK comments* Address multi issues* Clang somehow detects issues where there are none...
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/5d9084e8a0fd7771785fab4540cc3e0446478908	Bug 1689058 - Rename clang-cl toolchains to clang. r=firefox-build-system-reviewers,dmajorBug 1553230 made configure automatically get toolchain artifacts in somecases. The artifacts for clang-cl builds are clang.tar.zst, and extract toclang/. Configure derives the task name from that knowledge, and failsto find clang-cl tasks because of that.For consistency, these tasks should be called clang. They are clangbuilds anyways, and like any other clang builds, they also containclang-cl.Differential Revision: https://phabricator.services.mozilla.com/D103150
clang bug	 https://github.com/mozilla/releases-comm-central/commit/609faf6e3f57f41c265c1243b273006bb9036620	Bug 1677338 - followup - apply clang-format. rs=clang-format
clang bug	 https://github.com/mozilla/releases-comm-central/commit/3daf04861c2be16b2d420f888506904d5b161155	Bug 1611567 - followup - apply clang-format. rs=clang-format
clang bug	 https://github.com/AliceO2Group/QualityControl/commit/37f38e3efb733311acdf8c279415e672d91939c0	[MFT-9] MFT Digit QC Task update (#650)* Updating the digit file reader to read multiple TFs.* Clang format.* Bug correction in TH declarations.* Clang* Bug correction in TH declarations for clusters.* Removing dummy metadata.* Change checker message size* correct digit class* Clang
clang bug	 https://github.com/arrowos-tulip/android_kernel_xiaomi_sdm660/commit/2f97ebd741b576166b0d50903109e2d730942fec	scripts/Makefile.clang: default to LLVM_IAS=1LLVM_IAS=1 controls enabling clang's integrated assembler via-integrated-as. This was an explicit opt in until we could enableassembler support in Clang for more architecures. Now we have supportand CI coverage of LLVM_IAS=1 for all architecures except a few morebugs affecting s390 and powerpc.This commit flips the default from opt in via LLVM_IAS=1 to opt out viaLLVM_IAS=0.  CI systems or developers that were previously doing buildswith CC=clang or LLVM=1 without explicitly setting LLVM_IAS must nowexplicitly opt out via LLVM_IAS=0, otherwise they will be implicitlyopted-in.This finally shortens the command line invocation when cross compilingwith LLVM to simply:$ make ARCH=arm64 LLVM=1Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>Signed-off-by: Divyanshu-Modi <divyan.m05@gmail.com>
clang bug	 https://github.com/Ubpa/UTemplate/commit/0f41e3490c68d70817c540d4a37e58f5c9baf2bd	fix bugs for clang
clang bug	 https://github.com/Takeshi-Nakamoto/dadsjewel/commit/da67b75c5cd747acd7fd662b0af20e67fd9670be	Merge bitcoin/bitcoin#22903: Enable clang-tidy bugprone-argument-comment and fix violationsfa57fa1a2e764792b873998ddf38db2ac061dcb6 Enable clang-tidy bugprone-argument-comment and fix violations (MarcoFalke)Pull request description:  Named arguments can be dangerous when they are wrong, because they are not enforced by the compiler. Currently there are only minor typos, no actual bugs.  Fix the typos and add the `.clang-tidy` file to make it easier to find them in the future.ACKs for top commit:  practicalswift:    cr ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6  fanquake:    ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6Tree-SHA512: b66f01e0a1e77e56ed8454002176df660cc2cc0947a90785aa33cc5b8003a1f99fd8b2f8f89f2a0bf180ff2c42c031d69e669d127bb557b879c17975275a220b
clang bug	 https://github.com/PaddlePaddle/Paddle/commit/92da50556def9f66c94a25fb10549afaccd3229b	Add xpu2 compiler (#37254)* Add XPU compiler for paddle, test=develop* clean code* clean useless code* clean useless code* clean useless code* test* add include path* use clang compiler* xpu2.cmake* XPU2 compiler passed* update* update after pten* combination the WITH_XPU and WITH_XPU2* update the fuse operation in WITH_XPU and WITH_XPU2* update* update* update* fix the merge error* update* update the code* update the code* add run_kp_kernel flag* update* update* fix prepared type_ bug* clean and update the code* reset the kernel_primitives* update* clean the code* delete useless comment* fix the bug in WITH_XPU* update* update* modify the abi* delete some useless code* Parameter automation in xpu compilation* Parameter automation in xpu compilation* delete kps in cmake* delete useless comment* clean the code* clean the code
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/a5cd8949a1d80f67918bce70bf2a3099fdc998e8	Bug 1707096 - fix `deprecated-copy` detected by clang-trunk. r=sfink,jandemDifferential Revision: https://phabricator.services.mozilla.com/D114087
clang bug	 https://github.com/OdSazib/kernel_xiaomi_sdm660/commit/7a05159d1fcbb03892b148fe31ef55bb54dae8b0	Revert "Revert "ANDROID: clang: update to 11.0.5""This reverts commit 998f5e469d48bda634c7289b76da897e8dcb5e53.Re-upgrades clang to 11.0.5/clang-r399163b.Bug: 171827315Bug: 173479375Bug: 174047799Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Iea4177618cce065c0ec683ec191e378e250975d3
clang bug	 https://github.com/google/perfetto/commit/a047f22e5da8f475c8c3d1d3815df6ef30a128da	tracing: Add another workaround for a Clang/LLVM bug am: 62900eb9ba am: fee7ff5425 am: 800772c663 am: 50447ac562Original change: https://android-review.googlesource.com/c/platform/external/perfetto/+/1808738Change-Id: Ib575f2206e97566be6b15fd5880ba7ce5ab9d5a2
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/eab549fd1960a598ac3306f6e3bec2cee85430a3	Bug 1519636 - Initial reformat of C/C++ code with clang-format version 12.0.0. r=sylvestreclang-format version 12.0.0 (taskcluster-KEgO7qdgQ8uaewA6NkRnRA)Differential Revision: https://phabricator.services.mozilla.com/D114211
clang bug	 https://github.com/utziacre/android_kernel_xiaomi_jason/commit/b1b627cd283975be554f5dd7bcf201dc70150fd6	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcde
clang bug	 https://github.com/arrowos-tulip/android_kernel_xiaomi_sdm660/commit/7a05159d1fcbb03892b148fe31ef55bb54dae8b0	Revert "Revert "ANDROID: clang: update to 11.0.5""This reverts commit 998f5e469d48bda634c7289b76da897e8dcb5e53.Re-upgrades clang to 11.0.5/clang-r399163b.Bug: 171827315Bug: 173479375Bug: 174047799Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Iea4177618cce065c0ec683ec191e378e250975d3
clang bug	 https://github.com/t-head-aosp/platform-development/commit/e804a70bbf28fa5ce11b94aaa85100f99bde5826	Revert "[scripts/symbol] Switch to clang-r416183d"Revert "Switch to clang-r416183d"Revert submission 1737013-switch-to-clang-r416183dBug: http://b/191276541Bug: http://b/189328402Reason for revert: Breaks renderscript_mac buildReverted Changes:I25142ddaa:[scripts/symbol] Switch to clang-r416183dIf11e59638:Switch to clang-r416183dChange-Id: I7961a8d2ed933f39308b80e39833fbcb1acc77e2
clang bug	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/7aab5f5df89f540f467fe8e1662fca9766aa38e9	[PATCH 60/64] fortify: Work around Clang inlining bugs
clang bug	 https://github.com/josibake/champcoin/commit/606e30627742ad86dcdc273f5947943e6f3213da	Merge bitcoin/bitcoin#22981: doc: Fix incorrect C++ named argsfac49470ca36ff944a613f4358386bf8e0967427 doc: Fix incorrect C++ named args (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  Fix that by correcting them and adjust the format, so that clang-tidy can check it.ACKs for top commit:  fanquake:    ACK fac49470ca36ff944a613f4358386bf8e0967427 - `run-clang-tidy` works for me now.Tree-SHA512: 2694e17a1586394baf30bbc479a913e4bad361221e8470b8739caf30aacea736befc73820f3fe56f6207d9f5d969323278d43a647f58c3497e8e44cad79f8934
clang bug	 https://github.com/domob1812/namecoin-core/commit/606e30627742ad86dcdc273f5947943e6f3213da	Merge bitcoin/bitcoin#22981: doc: Fix incorrect C++ named argsfac49470ca36ff944a613f4358386bf8e0967427 doc: Fix incorrect C++ named args (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  Fix that by correcting them and adjust the format, so that clang-tidy can check it.ACKs for top commit:  fanquake:    ACK fac49470ca36ff944a613f4358386bf8e0967427 - `run-clang-tidy` works for me now.Tree-SHA512: 2694e17a1586394baf30bbc479a913e4bad361221e8470b8739caf30aacea736befc73820f3fe56f6207d9f5d969323278d43a647f58c3497e8e44cad79f8934
clang bug	 https://github.com/rohankumardubey/scyllaDB/commit/eff392073c96280cb6b583e22ef2233c0631b9b1	memtable: fix gcc function argument evaluation order induced use after moveclang evaluates function arguments from left to right, while gcc does soin reverse. Therefore, this code can be correct on clang and incorrecton gcc:```f(x.sth(), std::move(x))```This patch fixes one such instance of this bug, in memtable.cc.Fixes #9605.Closes #9606
clang bug	 https://github.com/n-kulberg/stereo/commit/f82d9834d120e26f4d624580e9819f6143cb769c	Fixed bug in gcc:abs() in MSVS and clang has floating point realizations. In gcc it's just integral
clang bug	 https://github.com/rohankumardubey/grpc/commit/46afdf998976aaa97b8a7e32e1a4ebd02f6e87cc	Add test and mitigation for clang 11 compiler bug (#27073)* Add test and mitigation for clang 11 compiler bug* document* document* Automated change: Fix sanity testsCo-authored-by: ctiller <ctiller@users.noreply.github.com>
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/0d93eda754ffc8f23f5aebb59be1fdbf23084a94	Bug 1738401 - Remove -Wshadow-uncaptured-local warning flag. r=firefox-build-system-reviewers,andiI enabled -Wshadow-uncaptured-local warnings in bug 1718408 because the flag didn't report any -Wshadow-uncaptured-local warnings. Unfortunately, clang didn't report any warnings due to clang bug https://bugs.llvm.org/show_bug.cgi?id=52325: clang -Wshadow-uncaptured-local (and some other -Wshadow*) flags doesn't actually enable these warnings; they're only enabled by the meta flags -Wshadow and -Wshadow-all.I see now that there are over 500 -Wshadow-uncaptured-local warnings, too many to realistically fix them all, so we should remove -Wshadow-uncaptured-local.The -Wshadow-field-in-constructor-modified flag is also affected by the clang bug, but I'd like to keep setting the -Wshadow-field-in-constructor-modified flag in case the clang bug is ever fixed. There are no -Wshadow-field-in-constructor-modified warnings in mozilla-central; I fixed the last one in bug 1738400.Differential Revision: https://phabricator.services.mozilla.com/D132290
clang bug	 https://github.com/mozilla/gecko-dev/commit/6f20efa2a0140ded06b2723664ea9e366d63588a	Bug 1722576 - Fix clang-tidy build errorDifferential Revision: https://phabricator.services.mozilla.com/D126921
clang bug	 https://github.com/kahenteikou/flast-gecko-merc/commit/0a15f5d2692a800d7eb785aff52083b1c80c44eb	Bug 1722576 - Fix clang-tidy build errorDifferential Revision: https://phabricator.services.mozilla.com/D126921
clang bug	 https://github.com/LibertyGlobal/flutter-tvos-skia/commit/bdc0bad2e216eab790842912ad184191c2426ac1	[graphite] Implement inverse fillsRenderer::StencilAndFill() chooses between two instances based on filltype (more to come when we add stencil pass). The inverse fill usesdifferent stencil settings and different geometry (hence why it must bea distinct renderer, since stencil is part of the pipeline).Also updates the command buffer asserts and types to support float3attributes and has the fill bounds render step pre-transform vertices.This matches the intended plan of device-space control points toavoid matrix transform uniforms when no other coords are needed.Makes DepthStencilSettings constexpr so they can be declared constants.Cq-Include-Trybots: luci.skia.skia.primary:Test-Mac11-Clang-MacMini9.1-GPU-AppleM1-arm64-Release-All-Graphite,Test-Mac11-Clang-MacMini9.1-GPU-AppleM1-arm64-Debug-All-ASAN_Graphite,Build-Mac-Clang-arm64-Release-iOS_Graphite,Build-Mac-Clang-arm64-Release-Graphite,Build-Mac-Clang-arm64-Debug-iOS_Graphite,Build-Mac-Clang-arm64-Debug-Graphite_NoGpu,Build-Mac-Clang-arm64-Debug-Graphite,Build-Mac-Clang-arm64-Debug-ASAN_GraphiteBug: skia:12703Change-Id: I5be4151f533e4cc5c560baf96c59193162b48dabReviewed-on: https://skia-review.googlesource.com/c/skia/+/484559Reviewed-by: Greg Daniel <egdaniel@google.com>Commit-Queue: Michael Ludwig <michaelludwig@google.com>
clang bug	 https://github.com/tewk/MINGW-packages/commit/bb822c43ffcce3cb861d4e61b6662de322606267	coin: limit GCC bug workaround to MINGW32clang doesn't know about that flag.
clang bug	 https://github.com/BYZYB/android_kernel_xiaomi_chiron/commit/45d7b77864afabb1c6d5bd4430ecc242a5b24cff	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
clang bug	 https://github.com/delphix/linux-kernel-azure/commit/5cb5e75fc065e85ac2e8ad96558c5149d96c37c3	powerpc/cell: Fix clang -Wimplicit-fallthrough warningBugLink: https://bugs.launchpad.net/bugs/1960566commit e89257e28e844f5d1d39081bb901d9f1183a7705 upstream.Clang warns:arch/powerpc/platforms/cell/pervasive.c:81:2: error: unannotated fall-through between switch labels        case SRR1_WAKEEE:        ^arch/powerpc/platforms/cell/pervasive.c:81:2: note: insert 'break;' to avoid fall-through        case SRR1_WAKEEE:        ^        break;1 error generated.Clang is more pedantic than GCC, which does not warn when failingthrough to a case that is just break or return. Clang's version is morein line with the kernel's own stance in deprecated.rst. Add athe missingbreak to silence the warning.Fixes: 6e83985b0f6e ("powerpc/cbe: Do not process external or decremeter interrupts from sreset")Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>Signed-off-by: Anders Roxell <anders.roxell@linaro.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://lore.kernel.org/r/20211207110228.698956-1-anders.roxell@linaro.orgSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>Signed-off-by: Kamal Mostafa <kamal@canonical.com>Signed-off-by: Stefan Bader <stefan.bader@canonical.com>
clang bug	 https://github.com/mozilla/gecko-dev/commit/b18b2b21a01434736d4865ebc5e09b48e26f7aef	Bug 1690973 - Build the clang android cross toolchain as a repack of clang + compiler-rt. r=firefox-build-system-reviewers,andiDifferential Revision: https://phabricator.services.mozilla.com/D127933
clang bug	 https://github.com/kahenteikou/flast-gecko-merc/commit/2885062b3760365ecb9fa4c948f4e40a5e5b8a92	Bug 1690973 - Build the clang android cross toolchain as a repack of clang + compiler-rt. r=firefox-build-system-reviewers,andiDifferential Revision: https://phabricator.services.mozilla.com/D127933
clang bug	 https://github.com/FreshROMs/android_kernel_samsung_exynos9610_mint/commit/45f27005aa1d1ed0cffaa4f0019de51f8bdb063e	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Forenche <prahul2003@gmail.com>Signed-off-by: John Vincent <git@tensevntysevn.cf>
clang bug	 https://github.com/Prashant1873/kernel_xiaomi_SDM660_4.19/commit/84369fccbcabc45196d3f69af43b9106484db813	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c6704Signed-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>
clang bug	 https://github.com/mozilla/gecko-dev/commit/a90ac645876ea697b61e1697524e168ee59b290a	Bug 1743708 - Fix clang-plugin tests to pass with clang-trunk. r=andiThis upstream change[1] changed the error messages when arrays areinvolved, so we adjust the expected-errors/expected-notes to account forthat.1. https://github.com/llvm/llvm-project/commit/aee49255074fd4ef38d97e6e70cbfbf2f9fd0fa7Differential Revision: https://phabricator.services.mozilla.com/D132533
clang bug	 https://github.com/vijaymalav564/kernel_realme_sdm660/commit/35013bfcb0c341e41f611afb15dc81db64e59d61	.drone.yml: Switch to `ubuntu:jammy-20211029`??Vortex Clang 14.0.0 needs glibc 2.34 as a dependency and since it'snow only available at ubuntu jammy distro, let's switch??Fixes docker bug with gpg, gpgv or gpgv2 not recognised while aptupdate is doneSigned-off-by: Kunmun <kunmun.devroms@gmail.com>Signed-off-by: vijaymalav564 <jaymalav10@gmail.com>
clang bug	 https://github.com/google/pigweed/commit/01ff6159611ca4f5876681a1805590be9980cd1a	pw_bloat: Mark counter with [[maybe_unused]]This avoids a warning when compiling with the -Wunused-but-set-variableflag (added to -Wall in gcc 4.6, and coming to clang withhttps://reviews.llvm.org/D100581).Bug: b/218748512Change-Id: I44cf396cad78fce4261ec9a8e397d22e4af9973fReviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/83860Reviewed-by: Erik Gilling <konkers@google.com>Commit-Queue: Ted Pudlik <tpudlik@google.com>Reviewed-by: Wyatt Hepler <hepler@google.com>
clang bug	 https://github.com/nanomq/NanoNNG/commit/e792d31b4a3b04658108e59edeab78495ac6b5a8	Fix incorrect elides of deprecated code.(Note that this includes some incorrect formatting due to an apparentbug in clang-format 13.  Hopefully they'll fix it later, but for nowI'm preserving the bad whitespace.)
clang bug	 https://github.com/mozilla/gecko-dev/commit/434ed284454a2a5bf941c4bd6fddbc445a3dec13	Bug 1736502 - Work around clang trunk changes that break our clang-trunk build. r=andiShort of solving this by fully embracing the monorepo build and removingthe projects/ workarounds (which will also require a compat more witholder clang versions we still build with the same script), we can solvethe bustage with a small hack.Differential Revision: https://phabricator.services.mozilla.com/D131458
clang bug	 https://github.com/danascape/android_device_xiaomi_ginkgo/commit/fb70e28ce9ece83933ff7f1ca6fee38b654db728	g4w4: Replace clang-format with symlink.Automatic consistency.Bug: 122835115Test: manualChange-Id: I6583f9f7923a822aa11f1839fbf375c1063a89c6Signed-off-by: danascape <danascape@gmail.com>
clang bug	 https://github.com/TKChattoraj/bitcoin/commit/da67b75c5cd747acd7fd662b0af20e67fd9670be	Merge bitcoin/bitcoin#22903: Enable clang-tidy bugprone-argument-comment and fix violationsfa57fa1a2e764792b873998ddf38db2ac061dcb6 Enable clang-tidy bugprone-argument-comment and fix violations (MarcoFalke)Pull request description:  Named arguments can be dangerous when they are wrong, because they are not enforced by the compiler. Currently there are only minor typos, no actual bugs.  Fix the typos and add the `.clang-tidy` file to make it easier to find them in the future.ACKs for top commit:  practicalswift:    cr ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6  fanquake:    ACK fa57fa1a2e764792b873998ddf38db2ac061dcb6Tree-SHA512: b66f01e0a1e77e56ed8454002176df660cc2cc0947a90785aa33cc5b8003a1f99fd8b2f8f89f2a0bf180ff2c42c031d69e669d127bb557b879c17975275a220b
clang bug	 https://github.com/GZR-Kernels/Optimus_Drunk_Alioth/commit/7a05159d1fcbb03892b148fe31ef55bb54dae8b0	Revert "Revert "ANDROID: clang: update to 11.0.5""This reverts commit 998f5e469d48bda634c7289b76da897e8dcb5e53.Re-upgrades clang to 11.0.5/clang-r399163b.Bug: 171827315Bug: 173479375Bug: 174047799Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Iea4177618cce065c0ec683ec191e378e250975d3
clang bug	 https://github.com/vsrinivas/fuchsia/commit/ab5b83c729883edeed6a84ad845e1fa1e5b11912	[clang] Document ACQUIRED_{BEFORE|AFTER} unimplThe ACQUIRED_{BEFORE|AFTER} thread annotation macros are not implementedin clang. Document this fact in the zircon compiler header so thatFuchsia users of these macros do not rely on them to catch lockacquisiton order bugs.Change-Id: Ic2f62a9f4af118034b31b6d22e3c23abdc4ae3beReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/604286Reviewed-by: David Turner <digit@google.com>Reviewed-by: Petr Hosek <phosek@google.com>Reviewed-by: Travis Geiselbrecht <travisg@google.com>API-Review: Bruno Dal Bo <brunodalbo@google.com>Commit-Queue: Amanda Tait <atait@google.com>Fuchsia-Auto-Submit: Amanda Tait <atait@google.com>
clang bug	 https://github.com/mozilla/gecko-dev/commit/0d93eda754ffc8f23f5aebb59be1fdbf23084a94	Bug 1738401 - Remove -Wshadow-uncaptured-local warning flag. r=firefox-build-system-reviewers,andiI enabled -Wshadow-uncaptured-local warnings in bug 1718408 because the flag didn't report any -Wshadow-uncaptured-local warnings. Unfortunately, clang didn't report any warnings due to clang bug https://bugs.llvm.org/show_bug.cgi?id=52325: clang -Wshadow-uncaptured-local (and some other -Wshadow*) flags doesn't actually enable these warnings; they're only enabled by the meta flags -Wshadow and -Wshadow-all.I see now that there are over 500 -Wshadow-uncaptured-local warnings, too many to realistically fix them all, so we should remove -Wshadow-uncaptured-local.The -Wshadow-field-in-constructor-modified flag is also affected by the clang bug, but I'd like to keep setting the -Wshadow-field-in-constructor-modified flag in case the clang bug is ever fixed. There are no -Wshadow-field-in-constructor-modified warnings in mozilla-central; I fixed the last one in bug 1738400.Differential Revision: https://phabricator.services.mozilla.com/D132290
clang bug	 https://github.com/ZunayedDihan/build_soong_s/commit/2558ce3890b8c9d7dd2aea1a608aaf5d8d3299fe	[scripts] Add script to print clang prebuilts versionBug: http://b/187231324This script parses soong/cc/config/global.go to return clang prebuiltsversion.  (It may get the version from a json config file in thefuture.)Currently it's used in development/scripts/symbol.py and is therecommended way to get clang prebuilts version number in the future.Test: get_clang_version_test.pyChange-Id: Id92a74fd523a5270999bb4d6454525bf2f2f0c04
clang bug	 https://github.com/GER13117/2DSurvival/commit/cfbb76ad8e7b5ea5efcaf5baa332cf267dbb53ed	clang tidies, bug fixes
clang bug	 https://github.com/Spark-OS/frameworks_base/commit/a5daa1718799aeaffd6139e389051857fcb8de4d	SoundPool: Fix clang-tidyTest: touch *.cpp,  mma, verify no clang-tidy warningsTest: SoundPoolAacTest, SoundPoolHapticTest,Test: SoundPoolMidiTest, SoundPoolOggTestBug: 182414042Change-Id: I77af4f0999c46931d6993d917443df1fa8425353
clang bug	 https://github.com/maeseee/Raspberry-AirController/commit/49a272b04cddf0066f5c88e36cc2294dcfd40f25	Fix performance bug found in clang tidy
clang bug	 https://github.com/AOSP-12/build_soong/commit/655a7d50f44b1e1d66d0fe4ef7e5ad0d1ed6919a	[rust] Update clang version used for bindgenBug: http://b/185528062Test: presubmitChange-Id: I0060643b0dec998d1d4f8da2c504c79223995f98
clang bug	 https://github.com/mi-msm8937/android_kernel_xiaomi_msm8937/commit/4b03b11d63def9d8dbf0b2b731beb9dd0c4a5572	FROMLIST: Makefile: lld: tell clang to use lldThis is needed because clang doesn't select which linker to use based on$LD but rather -fuse-ld=lld. This is problematic especially forcc-ldoption, which checks for linker flag support via invoking thecompiler, rather than the linker.(am from https://lkml.org/lkml/2019/2/11/1947)Link: https://github.com/ClangBuiltLinux/linux/issues/342Suggested-by: Nathan Chancellor <natechancellor@gmail.com>Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>Tested-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Bug: 63740206Change-Id: I3edf2f0f6c0bac842bef22194bd48a993fc0e3c0Signed-off-by: Yousef Algadri <yusufgadrie@gmail.com>Signed-off-by: Raphiel Rollerscaperers <rapherion@raphielgang.org>Signed-off-by: Twisted <36546624+TwistedPrime@users.noreply.github.com>Signed-off-by: MadeOfGreat <ravenklawasd@gmail.com>
clang bug	 https://github.com/CandyDevices/kernel_xiaomi_sm6250/commit/b9a256289fdc8e4a851e4a64ee03a5bcb0f460d0	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
clang bug	 https://github.com/aggresss/libwebrtc/commit/e252a12070e5b225cc8e85e1c556df43e79660f3	Fix use-after-move in RTCErrorOrFix a use-after-move issue in RTCErrorOr, as found by clang-tidy:  api/rtc_error.h:247:  'error' used after it was movedBug: chromium:1122844Change-Id: I9e826023618067ba37c2567b5e194c46db1dbd23Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/241200Auto-Submit: Maksim Ivanov <emaxx@chromium.org>Reviewed-by: Taylor Brandstetter <deadbeef@webrtc.org>Commit-Queue: Taylor Brandstetter <deadbeef@webrtc.org>Cr-Commit-Position: refs/heads/main@{#35535}
clang bug	 https://github.com/ibaoger/webrtc/commit/e252a12070e5b225cc8e85e1c556df43e79660f3	Fix use-after-move in RTCErrorOrFix a use-after-move issue in RTCErrorOr, as found by clang-tidy:  api/rtc_error.h:247:  'error' used after it was movedBug: chromium:1122844Change-Id: I9e826023618067ba37c2567b5e194c46db1dbd23Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/241200Auto-Submit: Maksim Ivanov <emaxx@chromium.org>Reviewed-by: Taylor Brandstetter <deadbeef@webrtc.org>Commit-Queue: Taylor Brandstetter <deadbeef@webrtc.org>Cr-Commit-Position: refs/heads/main@{#35535}
clang bug	 https://github.com/WebKit/WebKit/commit/f1e8bead4169d55e63b070eee62fe8e578bbaae7	clang-format: Change SpaceAfterTemplateKeyword to falsehttps://bugs.webkit.org/show_bug.cgi?id=234655Reviewed by Don Olmstead.Bug 183302 added the initial .clang-format file which wereincluding SpaceAfterTemplateKeyword:true. However, even though itis undocumented, typical WebKit code is using a style having nospace ater the `template` keyword.* .clang-format:Canonical link: https://commits.webkit.org/245710@maingit-svn-id: https://svn.webkit.org/repository/webkit/trunk@287581 268f45cc-cd09-0410-ab3c-d52691b4dbfc
clang bug	 https://github.com/GioKas93/orgasmic_frameworks_base/commit/a5daa1718799aeaffd6139e389051857fcb8de4d	SoundPool: Fix clang-tidyTest: touch *.cpp,  mma, verify no clang-tidy warningsTest: SoundPoolAacTest, SoundPoolHapticTest,Test: SoundPoolMidiTest, SoundPoolOggTestBug: 182414042Change-Id: I77af4f0999c46931d6993d917443df1fa8425353
clang bug	 https://github.com/TimenDillema/BlenderSculptTesting/commit/743b9c5e1d9e9d23b8f51fd6778db8292de204ae	CMake: fix build issue with gcc+clang-tidyPrecompiled headers are in a compiler specific format,when using clang-tidy it tries to read the GCC PCH fileand fails at that.Disable PCH's for now when WITH_CLANG_TIDY is enabled sincea clean work-around doesn't seem readily available.relevant LLVM/CMake bugs:https://bugs.llvm.org/show_bug.cgi?id=41579https://gitlab.kitware.com/cmake/cmake/-/issues/22081Differential Revision: https://developer.blender.org/D13814Reviewed by: sergey, Blendify
clang bug	 https://github.com/aosp-slayer/build_soong/commit/655a7d50f44b1e1d66d0fe4ef7e5ad0d1ed6919a	[rust] Update clang version used for bindgenBug: http://b/185528062Test: presubmitChange-Id: I0060643b0dec998d1d4f8da2c504c79223995f98
clang bug	 https://github.com/AxeWip/build_soong/commit/655a7d50f44b1e1d66d0fe4ef7e5ad0d1ed6919a	[rust] Update clang version used for bindgenBug: http://b/185528062Test: presubmitChange-Id: I0060643b0dec998d1d4f8da2c504c79223995f98
clang bug	 https://github.com/vsrinivas/fuchsia/commit/5b956cf1e74b8bbcd24c923ef730a5d630dfe45f	[cflags] Fix -Wextra-semi issuesFix macros with extra semicolons.These don't have a Clang fixit because they trigger onmacro expansions of macro expansions.Bug: 56257Change-Id: I1394f87f3a42f995622f0ccaddbf7ce7018ae37dReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/603363Reviewed-by: Tamir Duberstein <tamird@google.com>Commit-Queue: Shai Barack <shayba@google.com>Fuchsia-Auto-Submit: Shai Barack <shayba@google.com>
clang bug	 https://github.com/cadi2015/my_monkey_parse/commit/ede1dba16117382ab88cd676708fb7c7a99fec02	Use clang-r407598bBug: 178106097Test: OUT_DIR=out prebuilts/clang-tools/build-prebuilts.shChange-Id: I23f7df29b4cddf21c5d51bfb06020ed2b72ffcc4
clang bug	 https://github.com/CAF-ProtonAOSP/android_frameworks_base/commit/a5daa1718799aeaffd6139e389051857fcb8de4d	SoundPool: Fix clang-tidyTest: touch *.cpp,  mma, verify no clang-tidy warningsTest: SoundPoolAacTest, SoundPoolHapticTest,Test: SoundPoolMidiTest, SoundPoolOggTestBug: 182414042Change-Id: I77af4f0999c46931d6993d917443df1fa8425353
clang bug	 https://github.com/CandyDevices/kernel_xiaomi_sm6250/commit/726a4a204ec58e055f3bd7f1ac9920845364281b	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>
clang bug	 https://github.com/AOSP-12/build_soong/commit/8a71786b52a4f52db98e56e1b557523f05011df5	Switch to clang r416183b 12.0.5.Bug: http://b/182416735Test: TreehuggerChange-Id: Ibc26561baaec925c2c05ae710de24aaaab18bef5
clang bug	 https://github.com/ascii33/platform2/commit/1d27ace9d9b124c913bc72cda71a54b09eac5f4e	hps: Disable reserved-id-macro warning for older clang compatSet the -Wno-reserved-id-macro warning flag, which is an older synonymfor -Wno-reserved-macro-identifier. Seehttps://clang.llvm.org/docs/DiagnosticsReference.html#wreserved-id-macroBUG=b:203407400TEST=emerge hpsd hps-toolChange-Id: Ia2728e9b7cb9afae65f3acd866dbc960d9bbee67Reviewed-on: https://chromium-review.googlesource.com/c/chromiumos/platform2/+/3245120Auto-Submit: Sami Ky?stil? <skyostil@chromium.org>Commit-Queue: Evan Benn <evanbenn@chromium.org>Reviewed-by: Evan Benn <evanbenn@chromium.org>Tested-by: Evan Benn <evanbenn@chromium.org>
clang bug	 https://github.com/WaterfoxCo/Waterfox-Classic/commit/a880acc9fc153ed16550dfe35a908c2e5ef18f92	Bug 1508927 - Enable clang's -Wbitfield-enum-conversion warnings. r=glandiumhttps://clang.llvm.org/docs/DiagnosticsReference.html#wbitfield-enum-conversionAlso update the comment linking to clang and gcc's warning documentation.
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/a6e466b9433ee66914dc75c57ddbb6b9434b5031	Bug 1731175 - Build clang-mingw off clang-12 rather than from scratch. r=firefox-build-system-reviewers,andiThe build-clang step in the clang-mingw toolchains just replicates whatwe already do for clang, except with no patched applied, which couldarguably seen as an issue. Instead of rebuilding what we essentiallyalready have as a result of the clang-12 toolchain, we use the clang-12toolchain directly instead.Differential Revision: https://phabricator.services.mozilla.com/D125912
clang bug	 https://github.com/ISSUIUC/TARS-Software/commit/a02fbc2e218c5e3b34c7fa924464c649213ed5bc	Rewritten Sensors (#44)* lowg files* New LowGSensor Files* updated lowgsensor* add highgsensor* added a highgsenor file* Barometer Sensor rewritten* GPS Sensor rewritten* Bug fix for struct defintion* Added New Line at EOF* Clang Formatting* ChRt not included* public/private fixCo-authored-by: Nicholas Phillips <nwp2@illinois.edu>
clang bug	 https://github.com/hiper25-OpenSource/kernel_oneplus_sm8250/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/998e5e7304691019183370f0ac6c1753efadd211	Bug 1735369 - Minor formatting clean-ups.MANUAL PUSH: clang-format fix CLOSED TREE DONTBUILD
clang bug	 https://github.com/Marvel-land/MK-4.9-WIP/commit/7e9cdac74b4f9bf314ae172ff1f3e2f06dcc9fa6	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I10557fb29b4a5d4139d690661c22ab5be3fedaafSigned-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Diab Neiroukh <lazerl0rd@thezest.dev>
clang bug	 https://github.com/thepsycopathlive/p/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/arachsys/packages/commit/94fd41d81da62d78795339828d380fa4e76b5936	Work around aarch64 clang bug in pocketcrypt recipe
clang bug	 https://github.com/xswz8015/skia/commit/d7771857e9e24b3b8e67e25215d62ec78ff344c3	Roll ANGLE from 5bd4596187e3 to cfc4db34643f (2 revisions)https://chromium.googlesource.com/angle/angle.git/+log/5bd4596187e3..cfc4db34643f2022-01-04 kpiddington@apple.com Metal: Provoking vertex support for Metal DrawArrays2022-01-04 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 04d22dcbc0f6 to 1a9dad30c65b (190 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC ethannicholas@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: ethannicholas@google.comChange-Id: I7ae17e993fbec6a7e65932192d5101650112f98fReviewed-on: https://skia-review.googlesource.com/c/skia/+/491317Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/120496a230fc142d4bd04f330c9b9eafec153e16	Bug 1519636 - Reformat recent changes to the Google coding style. r=sylvestreUpdated with clang-format version 13.0.0 (taskcluster-dn0nWlPhT22vaQNfMnFkSg)Differential Revision: https://phabricator.services.mozilla.com/D135325
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/f4ea362111c6924eca11385c7e1d925eb4973a8a	Bug 1519636 - Reformat recent changes to the Google coding style. r=sylvestreUpdated with clang-format version 13.0.0 (taskcluster-dn0nWlPhT22vaQNfMnFkSg)Differential Revision: https://phabricator.services.mozilla.com/D135325
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/09d19b352e00bdfb93b3018a9701367280514d65	Bug 1736459 - Switch the spidermonkey fuzzing build to clang 13.It was waiting for rust 1.56. Consequently remove clang 12, since it'snot used anymore.Differential Revision: https://phabricator.services.mozilla.com/D129322
clang bug	 https://github.com/xswz8015/skia/commit/6bebf036a5027da0faefbb8d822ebfc7b8f6d3c9	Roll ANGLE from aad7ddb28c0e to 5bd4596187e3 (1 revision)https://chromium.googlesource.com/angle/angle.git/+log/aad7ddb28c0e..5bd4596187e32022-01-03 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 70ce2f66c417 to 04d22dcbc0f6 (183 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC ethannicholas@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: ethannicholas@google.comChange-Id: Ib3364e7be20735043c9e7822f62013e1751a6682Reviewed-on: https://skia-review.googlesource.com/c/skia/+/490658Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/pkeir/cest/commit/f6140bba660503384f704e7d80f9eaf7a8edbaa9	Fixed some bugs due to clang-format justly reordering the lists of includes in cest_tests.hpp. So, added some missing includes here and there. Also noticed that the numeric tests were mistakenly testing dequeue (again). Also added missing abs overloads.
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/41d3d5a176a80bfc1dce28178516c24ec2806721	Bug 1741568 - Fix all clang-tidy warnings in dom/midi r=padenotDepends on D131222Differential Revision: https://phabricator.services.mozilla.com/D131328
clang bug	 https://github.com/xswz8015/skia/commit/0e597a5a4ced48fbf93879cc25c1a53f2e955a41	Roll ANGLE from 9aca4285f84c to aad7ddb28c0e (4 revisions)https://chromium.googlesource.com/angle/angle.git/+log/9aca4285f84c..aad7ddb28c0e2022-01-02 ynovikov@chromium.org Skip VulkanPerformanceCounterTest.InvalidateDrawDisable2022-01-02 lexa.knyazev@gmail.com Add macOS support to update_chrome_angle.py2022-01-01 syoussefi@chromium.org Re-skip MSRTT tests on Linux/AMD/Vulkan2021-12-31 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from c764378a1f24 to 70ce2f66c417 (145 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC ethannicholas@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: ethannicholas@google.comChange-Id: I55511e3cd8bf3fc2afb4e52f0569a1f4fa13adf1Reviewed-on: https://skia-review.googlesource.com/c/skia/+/490518Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/e198bb861f1226363d81ac473d92be280931ac3a	Bug 1745384 - Temporarily fix crash during clang mingw cross compile builds. r=gfx-reviewers,lsalzmanIt appears that dom/canvas/nsICanvasRenderingContextInternal.cpp must bepart of a greater unified build file. Adding new files has pushed itinto its own unified file causing clang to crash when cross compilingusing mingw. For now, let's just put the new file a previous patch addedinto SOURCES instead of UNIFIED_SOURCES to avoid breaking this delicatebalance.A follow up bug will need to be created to investigate on the clangside.Differential Revision: https://phabricator.services.mozilla.com/D133487
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/c39ff2b0731e0d04f2e68ee360fd599e5ab722bd	Bug 1745384 - Temporarily fix crash during clang mingw cross compile builds. r=gfx-reviewers,lsalzmanIt appears that dom/canvas/nsICanvasRenderingContextInternal.cpp must bepart of a greater unified build file. Adding new files has pushed itinto its own unified file causing clang to crash when cross compilingusing mingw. For now, let's just put the new file a previous patch addedinto SOURCES instead of UNIFIED_SOURCES to avoid breaking this delicatebalance.A follow up bug will need to be created to investigate on the clangside.Differential Revision: https://phabricator.services.mozilla.com/D133487
clang bug	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/6588fb0e23b30e25606ca229ac2d32092af970dc	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/Tomoms/android_kernel_essential_msm8998/commit/f5ae054cb50aeb3c9c663444bfff97a6605f4c25	ANDROID: kbuild: allow lld to be used with CONFIG_LTO_CLANGBug: 63740206Bug: 117299373Change-Id: Ic9c8ca03fd082a8404905718f5312a3f497efa5aSigned-off-by: Sami Tolvanen <samitolvanen@google.com>
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/8c04017a04ba70a75979bd6f1315a6c3a2afeab8	Bug 1750632: `./mach lint` should bootstrap `clang-format` r=ahalTie into `code_analysis`'s `get_clang_tools()` functionality tointelligently bootstrap clang if it either doesn't exist or isout-of-date.This required exposing `command_context` to the linting logic, as it'sneeded to call `artifact_toolchain(...)`.Note that this means that the standalone `runcli.py` file won't be ableto support bootstrapping `clang-format`, or other linters that lean on`command_context` in the future.Finally, `substs.get("HOST_BIN_SUFFIX")` was replaced with awindows-specific `binary += ".exe"`, because not all contexts wherethe tests are run will have access to populated `substs` data.Note that this worked before without the extension because it wasonly used for starting a process, in which context Windows automaticallytries all `PATHEXT` options. Since we're now doing an `isfile()` check(to enable more intelligent failure cases when `clang-format` doesn'texist), we need the path to be fully correct.Differential Revision: https://phabricator.services.mozilla.com/D137335
clang bug	 https://github.com/xswz8015/skia/commit/84632c9616cc23d8b18d80d83731c60f1f32dc0f	Roll ANGLE from 1608a9567b66 to f65e7c3ca739 (12 revisions)https://chromium.googlesource.com/angle/angle.git/+log/1608a9567b66..f65e7c3ca7392022-02-05 m.maiya@samsung.com Vulkan: Take base level into account in image views2022-02-05 lexa.knyazev@gmail.com Metal: Fix ANGLEUniformBlock alignment2022-02-04 antonio.caggiano@collabora.com Vulkan: Fix present region rectangles2022-02-04 syoussefi@chromium.org Vulkan: Enable framebuffer fetch on SwiftShader2022-02-04 sergeyu@google.com Allow glCopyTexImage2D from BGRX and RGBX to GL_LUMINANCE2022-02-04 penghuang@chromium.org Add more info in BlitFramebuffer error message2022-02-04 j.vigil@samsung.com Fix bug in protected content validation2022-02-04 penghuang@chromium.org Support gl internal format for creating EGLImage from VkImage2022-02-04 ynovikov@chromium.org Fix GLES Display creation on ChromeOS when Vulkan is enabled2022-02-04 jmadill@chromium.org Vulkan: Binding available buffer range to descriptor.2022-02-04 angle-autoroll@skia-public.iam.gserviceaccount.com Roll SwiftShader from 6014f10de554 to 2b76a13c38ae (3 revisions)2022-02-04 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 8894f7c632dd to 55ed02951fa2 (509 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC herb@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: herb@google.comTest: Test: MipmapTestES31.UpdateBaseLevel/*Change-Id: Ie656c80edd3d1d70b68f18afe0ae522d163002aaReviewed-on: https://skia-review.googlesource.com/c/skia/+/504998Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/Chowdhury-DSP/BYOD/commit/f3d7cac4a4051734d87b53618ea17c44677a2e2b	Re-work processor editor menus and general refactoring (#105)* Fix minor bug in port highlighting logic* Move processor settings menu to new button* Refactor ProcessorEditor toavoid parent accesses* Refactor createProcmenu methods in ProcessorStore* Implement Duplicate option* Apply clang-formatCo-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
clang bug	 https://github.com/RadiantDevices/kernel_xiaomi_lavender/commit/8a51fbd20441a4cea6db03f7c55ee260d9cf2f65	FROMLIST: BACKPORT: kbuild: fix dynamic ftrace with clang LTOWith CONFIG_LTO_CLANG enabled, LLVM IR won't be compiled into objectfiles until modpost_link. This change postpones calls to recordmcountuntil after this step.In order to exclude ftrace_process_locs from inspection, we add a newcode section .text..ftrace, which we tell recordmcount to ignore, anda __norecordmcount attribute for moving functions to this section.Bug: 62093296Bug: 67506682Change-Id: Iba2c053968206acf533fadab1eb34a743b5088ee(am from https://patchwork.kernel.org/patch/10060327/)Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: ImSpiDy <spidy2713@gmail.com>Signed-off-by: ImPrashantt <prashant33968@gmail.com>
clang bug	 https://github.com/tierra-colada/cppguts/commit/a948f54b8980205aa8a88c3403faf6f8172f0a20	Fixed bug with error messagesDiagnostics from `clang` is shown: unknown symbols are displayed
clang bug	 https://github.com/xswz8015/skia/commit/dcf2710c896975e85270a204d0eef315db3933da	Roll ANGLE from 6f1c39b52b4f to a400e76d02df (3 revisions)https://chromium.googlesource.com/angle/angle.git/+log/6f1c39b52b4f..a400e76d02df2021-12-30 syoussefi@chromium.org Vulkan: Don't expose MSRTT without VK_KHR_depth_stencil_resolve2021-12-30 ynovikov@chromium.org Skip angle_end2end_tests failing on Linux AMD RX 5500 XT2021-12-29 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from d09758fa672c to e45e6e1a55ae (153 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC johnstiles@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: johnstiles@google.comChange-Id: I6a51e0c2bf98b41eea458143a799603dc1d7f2a8Reviewed-on: https://skia-review.googlesource.com/c/skia/+/490138Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/xswz8015/skia/commit/1e3d307ba7a95883f5ae680feeaac26db8a0257e	Roll ANGLE from 06edae72ba69 to e5045587752d (9 revisions)https://chromium.googlesource.com/angle/angle.git/+log/06edae72ba69..e5045587752d2022-02-15 yuxinhu@google.com Debug Overlay Demo2022-02-14 cclao@google.com Vulkan: Switch XFB counter buffer to suballocation2022-02-14 cclao@google.com Vulkan: Switch stencilBlitResolveNoShaderExport to suballocation2022-02-14 andrew-naumov@yandex-team.ru Unicode support for system_utils on Windows2022-02-14 cnorthrop@google.com Tests: Add MARVEL Strike Force trace2022-02-14 syoussefi@chromium.org Vulkan: Enable overlay by default with debug layers2022-02-14 m.maiya@samsung.com Vulkan: Enable subgroup feature in GenerateMipmap.comp2022-02-14 angle-autoroll@skia-public.iam.gserviceaccount.com Roll VK-GL-CTS from 071bfca11aa9 to 2d1377ec02b5 (11 revisions)2022-02-14 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from c0b2804cbd93 to c9825531290b (658 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC fmalita@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: fmalita@google.comTest: Test: angle_perftests --gtest_filter="*marvel_strike_force*"Change-Id: Iae7e0fda613fd79403ea3f578d69af914527d26aReviewed-on: https://skia-review.googlesource.com/c/skia/+/508979Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/3885215795e468ea1a0bf672b25bc5c656f2b7b7	Bug 1747532 - Default to lld for local mac builds. r=firefox-build-system-reviewers,andiWhen using clang >= 13.0Differential Revision: https://phabricator.services.mozilla.com/D134862
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/5bf15edfdbe37eaf6a92d008b331ada062a138cb	Bug 1747532 - Add clang version mappings for more versions of Xcode. r=firefox-build-system-reviewers,andiDifferential Revision: https://phabricator.services.mozilla.com/D134861
clang bug	 https://github.com/dart-lang/sdk/commit/b09a7e2a7b992edf301ed6d3f98c2caa68bf7301	Update clang and gn to match FlutterBug: b/220113771Change-Id: I88ee8232dc2b170266f7425077e23abbf9d6b886Reviewed-on: https://dart-review.googlesource.com/c/sdk/+/233383Reviewed-by: Alexander Thomas <athom@google.com>Commit-Queue: William Hesse <whesse@google.com>
clang bug	 https://github.com/hpc-io/pdc/commit/fe611d51ad1c10b9d753ec051209cdb1c04e491b	Sync develop (#52)* Update bdcats.c* Update vpicio.c* vpicio batch* Committing clang-format changes* Update pdc_client_server_common.c* Update pdc_client_server_common.c* Enhancing overlapping degree for transfer request* Committing clang-format changes* Update pdc_client_server_common.c* Update pdc_client_server_common.c* Committing clang-format changes* Update pdc_client_server_common.c* Committing clang-format changes* Update vpicio_batch.c* Update pdc_client_server_common.c* Committing clang-format changes* Update vpicio_batch.c* Committing clang-format changes* Update vpicio_batch.c* Committing clang-format changes* Update vpicio_batch.c* Update vpicio_batch.c* Committing clang-format changes* Update vpicio_batch.c* Update vpicio_batch.c* Update vpicio_batch.c* Fixed server close problem* Committing clang-format changes* Update run_checkpoint_restart_test.sh* Update close_server.c* Resolve a deadlock* Committing clang-format changes* Update vpicio_batch.c* Committing clang-format changes* Update pdc_client_server_common.c* Committing clang-format changes* Update run_checkpoint_restart_test.sh* Update vpicio_batch.c* Update vpicio_batch.c* Committing clang-format changes* Use correct flag for timing* minor fixes* Update pdc_region_cache.c* Committing clang-format changes* Update Makefile* close time with timer* Committing clang-format changes* Update close_server.c* Update close_server.c* Update vpicio_batch.c* Update vpicio_batch.c* Update vpicio_batch.c* Add timer for cont and obj create* Committing clang-format changes* Print date and total time for individual timer in timing report* Committing clang-format changes* bacats with batch implementation* Committing clang-format changes* Update README.md* Update Makefile* Update bdcats_batch.c* Update bdcats_batch.c* Update bdcats_batch.c* Update bdcats_batch.c* Aggregated APIs* Remove compiler warnings* Committing clang-format changes* Update pdc_region_cache.c* Update pdc_region_cache.c* Enlarging memory buf* Committing clang-format changes* Update region_transfer_all_3D.c* Committing clang-format changes* add semicolon* Committing clang-format changes* Update README.md* Checkpointing for new tests. Fixed a bug associated for reading large regions.* Committing clang-format changes* Fix an issue when multiple servers run on the same node, use PDC_NCLIENT_PER_SERVER to specify the number of clients per serverCo-authored-by: Qiao Kang <qiaokang2015@u.northwestern.edu>Co-authored-by: github-actions <github-actions[bot]@users.noreply.github.com>Co-authored-by: Qiao Kang <QKang@lbl.gov>
clang bug	 https://github.com/mdadams/sde/commit/c40cbaa027fceaf1f477a00d424003d1a60a042e	sde_install_clang script:- Fixed a bug in the method used to determine the commit when installing  based on a Git branch/tag.- Added several new command-line options (e.g., --enable-assertions,  --enable-rtti, and --build-type).- Revised the usage information.
clang bug	 https://github.com/RadiantDevices/kernel_xiaomi_lavender/commit/a7d4a3ac9095ec9445ab1c2cbb4086d6cb4c5731	FROMLIST: scripts/mod: disable LTO for empty.cWith CONFIG_LTO_CLANG, clang generates LLVM IR instead of ELF objectfiles. As empty.o is used for probing target properties, disable LTOfor it to produce an object file instead.Bug: 62093296Bug: 67506682Change-Id: I0c7ac7ee0134465cac4a8c3a9c7e8b6347076a2b(am from https://patchwork.kernel.org/patch/10060317/)Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: ImSpiDy <spidy2713@gmail.com>Signed-off-by: ImPrashantt <prashant33968@gmail.com>
clang bug	 https://github.com/chromium/chromium/commit/94f8550bc9299fb92f33940f29108a385ee98c21	Desktop PWAs: Declare query methods constQuery methods like WebAppProvider::is_registry_ready()are now const methods.https://releases.llvm.org/10.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability-make-member-function-const.htmlBug: 1301149Change-Id: I084abec4dd255e236c39c8089813383c8d758735Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3493437Auto-Submit: Eric Willigers <ericwilligers@chromium.org>Reviewed-by: Alan Cutter <alancutter@chromium.org>Commit-Queue: Alan Cutter <alancutter@chromium.org>Cr-Commit-Position: refs/heads/main@{#975605}
clang bug	 https://github.com/AliceO2Group/QualityControl/commit/862dd54e0b6c596c495c0edad42cb019ac239d48	Fixed division by 0 for occupancy plots (#942)* ClusterTask: solved bugs, new histo, added checks; TrackTask: added checks* Fixed cluster check of L5 and L6, fixed itsTrack.json and itsEPN.json* Clang format changes* Clang format changes v2* Fixed division by 0 in occupancy plots* Clang update* Clang update v2Co-authored-by: JianLIUhep <jian.liu@cern.ch>
clang bug	 https://github.com/LeCmnGend/android_build_make/commit/38f3c28ebda8eeacfc7f85052f2b19135f87b0cf	Add logic to ensure the ART APEXes are built from source in coveragebuilds.This CL is a nop since the default is still true, but it gives us a wayto toggle it without affecting coverage builds.Test: env NATIVE_COVERAGE=true build/soong/soong_ui.bash \        --dumpvar-mode SOONG_CONFIG_art_module_source_build      env CLANG_COVERAGE=true build/soong/soong_ui.bash \        --dumpvar-mode SOONG_CONFIG_art_module_source_build      env NATIVE_COVERAGE=true CLANG_COVERAGE=true \        build/soong/soong_ui.bash \        --dumpvar-mode SOONG_CONFIG_art_module_source_build  check that all these print "true" when the default in the "else"  clause is "false".Bug: 172480615Change-Id: I648ed911773c59a5b2a117dbf3ddcb2ef338830d
clang bug	 https://github.com/GeGuNa/pdns/commit/36c5a9e7129d68a7c7334437965c2db127e10428	Work around a compiler bug seen on OpenBSD/amd64 using clang-13 and make the code a tiny bit more pretty.Fixes #11113.
clang bug	 https://github.com/choll/xtr/commit/7bca77421897ff8045b33c0162f5f59a602de2dc	Fix sink assignment bugs and clang-tidy issues
clang bug	 https://github.com/Joku1806/progpraTRIA/commit/f4b0f7cf2ec11dc3c2001918eded0dd311175e0c	clang-tidy für statische Analyse benutzen, um m?gliche Bugs schneller zu finden.
clang bug	 https://github.com/chromium/chromium/commit/829a351395e1ec9b6d3704d893b5b68ef15add43	Revert "Split mac clang-format sha1 per architecture"This reverts commit e2e53118d94fc4fe9cd8408a03b4e877d807c229.Reason for revert: caused compilation failure https://ci.chromium.org/ui/p/chromium/builders/ci/mac-arm64-rel/21112/overviewOriginal change's description:> Split mac clang-format sha1 per architecture>> In preparation for using clang-format binaries built in clang rolls> which will result in per-arch clang-format executables, use different> sha1 files per architecture.>> This updates the main chromium DEPS to use these, but many other> subprojects' DEPS also need to be updated, which will happen in separate> changes.>> Bug: 1286289> Change-Id: If2ad03e30a84e3737f5e971332df0224f739264d> Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3529420> Reviewed-by: Nico Weber <thakis@chromium.org>> Commit-Queue: Arthur Eubanks <aeubanks@google.com>> Cr-Commit-Position: refs/heads/main@{#981824}Bug: 1286289Change-Id: Ifa1adf129e23ed4f55d4d53d8d0efe7d061b570bNo-Presubmit: trueNo-Tree-Checks: trueNo-Try: trueReviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3533054Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>Reviewed-by: Guillaume Jenkins <gujen@google.com>Owners-Override: Phillis Tang <phillis@chromium.org>Commit-Queue: Phillis Tang <phillis@chromium.org>Cr-Commit-Position: refs/heads/main@{#982276}
clang bug	 https://github.com/beomki-yeo/traccc_hackathon/commit/533e09d0c37dcf0ae3f5c4baa05b1ae2da829065	Merge pull request #8 from beomki-yeo/hackathon/clang_format_bug_fixclang format bug fix
clang bug	 https://github.com/bgk1993/dart-sdk/commit/b09a7e2a7b992edf301ed6d3f98c2caa68bf7301	Update clang and gn to match FlutterBug: b/220113771Change-Id: I88ee8232dc2b170266f7425077e23abbf9d6b886Reviewed-on: https://dart-review.googlesource.com/c/sdk/+/233383Reviewed-by: Alexander Thomas <athom@google.com>Commit-Queue: William Hesse <whesse@google.com>
clang bug	 https://github.com/iKeramat/msm-4.4/commit/30edd7a846462894b30e526f590b5ce9bdb9a99b	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I10557fb29b4a5d4139d690661c22ab5be3fedaafSigned-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/d026785d0192140b34165b30c4c299c9134f2f24	Bug 1741495 - Follow-up: clang-format fixes.MANUAL PUSH: trivial whitespace-only patch DONTBUILD
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/7373e2d918f3a61362f000b464a532cff5ba01ef	Bug 1744890 - Remove unused clang toolchains. r=firefox-build-system-reviewers,andiDifferential Revision: https://phabricator.services.mozilla.com/D133180
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/3a0d37231d77252cb39fe8b38f18fcafa7bc62ad	Bug 1744182 - Disable clang support for curl. r=andiDifferential Revision: https://phabricator.services.mozilla.com/D133011
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/c10d0fa5e250ff0560992b62b546056905fc91d5	Bug 1755415 - Ship most compiler-rts alongside clang toolchains on all platforms. r=firefox-build-system-reviewers,mhentgesThis improves out-of-the-box support for cross-compiles on tier-1 buildplatforms, including for asan. This also reduces the number of different*-cross toolchains we need for CI builds.The linux clang is now also a repack, like the others, and the insertionof the wasm compiler-rt is moved to the repack, which also allows toremove that part of the build-clang.py script.Differential Revision: https://phabricator.services.mozilla.com/D138749
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/1902c827874d2cf40a16765cb3b8eb739057b78d	Bug 1747532 - Default to lld for mac builds. r=firefox-build-system-reviewers,andiWhen using clang >= 13.0Differential Revision: https://phabricator.services.mozilla.com/D134862
clang bug	 https://github.com/dgreid/linux/commit/4be240b18aa67b1144af546bea2d7cad1b75c19b	Merge tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull FORTIFY_SOURCE updates from Kees Cook: "This series consists of two halves:   - strict compile-time buffer size checking under FORTIFY_SOURCE for     the memcpy()-family of functions (for extensive details and     rationale, see the first commit)   - enabling FORTIFY_SOURCE for Clang, which has had many overlapping     bugs that we've finally worked past"* tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  fortify: Add Clang support  fortify: Make sure strlen() may still be used as a constant expression  fortify: Use __diagnose_as() for better diagnostic coverage  fortify: Make pointer arguments const  Compiler Attributes: Add __diagnose_as for Clang  Compiler Attributes: Add __overloadable for Clang  Compiler Attributes: Add __pass_object_size for Clang  fortify: Replace open-coded __gnu_inline attribute  fortify: Update compile-time tests for Clang 14  fortify: Detect struct member overflows in memset() at compile-time  fortify: Detect struct member overflows in memmove() at compile-time  fortify: Detect struct member overflows in memcpy() at compile-time
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/cd4ff2c4e536b1d300fc1513ecc614e7a507d785	Bug 1755415 - Ship most compiler-rts alongside clang toolchains on all platforms. r=firefox-build-system-reviewers,mhentgesThis improves out-of-the-box support for cross-compiles on tier-1 buildplatforms, including for asan. This also reduces the number of different*-cross toolchains we need for CI builds.The linux clang is now also a repack, like the others, and the insertionof the wasm compiler-rt is moved to the repack, which also allows toremove that part of the build-clang.py script.Differential Revision: https://phabricator.services.mozilla.com/D138749
clang bug	 https://github.com/pembem22/blender/commit/743b9c5e1d9e9d23b8f51fd6778db8292de204ae	CMake: fix build issue with gcc+clang-tidyPrecompiled headers are in a compiler specific format,when using clang-tidy it tries to read the GCC PCH fileand fails at that.Disable PCH's for now when WITH_CLANG_TIDY is enabled sincea clean work-around doesn't seem readily available.relevant LLVM/CMake bugs:https://bugs.llvm.org/show_bug.cgi?id=41579https://gitlab.kitware.com/cmake/cmake/-/issues/22081Differential Revision: https://developer.blender.org/D13814Reviewed by: sergey, Blendify
clang bug	 https://github.com/RadiantDevices/kernel_xiaomi_lavender/commit/d554fdb40901d582882b596b15e4e5bb867bfbb3	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4Signed-off-by: Yasir-Siddiqui <www.mohammad.yasir.s@gmail.com>Signed-off-by: sohamxda7 <sensoham135@gmail.com>Signed-off-by: Prashant-1695 <prashant33968@gmail.com>Signed-off-by: ImPrashantt <prashant33968@gmail.com>
clang bug	 https://github.com/mmind/linux-riscv/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/openSUSE/kernel/commit/b8321ed4a40c02054f930ca59d3570caa27bc86c	Merge tag 'kbuild-v5.18-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuildPull Kbuild updates from Masahiro Yamada: - Add new environment variables, USERCFLAGS and USERLDFLAGS to allow   additional flags to be passed to user-space programs. - Fix missing fflush() bugs in Kconfig and fixdep - Fix a minor bug in the comment format of the .config file - Make kallsyms ignore llvm's local labels, .L* - Fix UAPI compile-test for cross-compiling with Clang - Extend the LLVM= syntax to support LLVM=<suffix> form for using a   particular version of LLVm, and LLVM=<prefix> form for using custom   LLVM in a particular directory path. - Clean up Makefiles* tag 'kbuild-v5.18-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuild:  kbuild: Make $(LLVM) more flexible  kbuild: add --target to correctly cross-compile UAPI headers with Clang  fixdep: use fflush() and ferror() to ensure successful write to files  arch: syscalls: simplify uapi/kapi directory creation  usr/include: replace extra-y with always-y  certs: simplify empty certs creation in certs/Makefile  certs: include certs/signing_key.x509 unconditionally  kallsyms: ignore all local labels prefixed by '.L'  kconfig: fix missing '# end of' for empty menu  kconfig: add fflush() before ferror() check  kbuild: replace $(if A,A,B) with $(or A,B)  kbuild: Add environment variables for userprogs flags  kbuild: unify cmd_copy and cmd_shipped
clang bug	 https://github.com/acassen/keepalived/commit/77a960e0ae61a5c2d0dcb3353d06659ee09f0575	lib: Fix bug identified by clangSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>
clang bug	 https://github.com/acassen/keepalived/commit/787c275e9e293c7d51e359be9a6ec944ab70e051	vrrp: Fix bug identified by clangSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>
clang bug	 https://github.com/saganatt/O2Physics-correlations/commit/8534099d5b0ed6fd44a8be622f4f30b7b23dd6bb	BC selection task and alias accounting added (#5757)* BC selection task and alias accounting added* clang-format fixes* bcsel namespace removed. alias labels added. +bug fixes* clang-format fixes
clang bug	 https://github.com/RandyMcMillan/mempool-tab/commit/7908772244b90884249da90e05f0044cc7d555dd	Merge bitcoin/bitcoin#23703: scripted-diff: Use named args in RPC docsfa9aaf8694c63200ad01fd5659aba4f409b2c3b9 scripted-diff: Use named args in RPC docs (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  To allow them being checked by `clang-tidy`, use a format it can understand.ACKs for top commit:  fanquake:    ACK fa9aaf8694c63200ad01fd5659aba4f409b2c3b9 - checked `clang-tidy` and it's fine here, (but throwing errors in other files. i.e `wallet/test/wallet_tests.cpp`).Tree-SHA512: e09dae8ee999a5c4819e6f848c12139593ca0e915e645c8fabeb97c379188fb9104d286c02c71f590abc64cdec125f78026735f83e016111976baa49d588a9bc
clang bug	 https://github.com/JackieZN/SIMD_x86/commit/857ee89654f45632e785e671fd3356169b4cd3a8	*fix bug: Compiler warnings (Clang).
clang bug	 https://github.com/php/php-src/commit/fe9abf52fa86fbc3ce2c189cf3f2d1b23e7d4c05	Merge branch 'PHP-8.1'* PHP-8.1:  Fix bug #75941: Fix compile failure on Solaris with clang
clang bug	 https://github.com/Toromino/chromiumos-platform2/commit/02a6570b3f0894fb37fd572c92c20b6418583f82	libbrillo: clang-format on MurmurHashBUG=b:213438417TEST=FEATURES=test emerge-$BOARD libbrilloChange-Id: I6cd2c197b1f8c082938bbd56d3ca02b346f63c1eReviewed-on: https://chromium-review.googlesource.com/c/chromiumos/platform2/+/3388898Reviewed-by: Eric Caruso <ejcaruso@chromium.org>Tested-by: John L Chen <zuan@chromium.org>Commit-Queue: John L Chen <zuan@chromium.org>
clang bug	 https://github.com/chromium/chromium/commit/daa2bc6e2d23a1d263314d51df6ec6e80fcbc9a1	Web Applications: Small clang-tidy fixesUse string find that accepts a single character, instead of passing asingle-character string to the string find that accepts a string.Use  = default  instead of  {}  when defining default constructors.Bug: 1301149Change-Id: I5b8dc57ebe3724b38559b5e183b1ecc7eb2064e8Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3488760Reviewed-by: Glen Robertson <glenrob@chromium.org>Reviewed-by: Jiewei Qian <qjw@chromium.org>Commit-Queue: Jiewei Qian <qjw@chromium.org>Reviewed-by: Bugs Nash <bugsnash@google.com>Cr-Commit-Position: refs/heads/main@{#975608}
clang bug	 https://github.com/chromium/chromium/commit/056bf7dfce4237a083f35b1765007f15a547368c	[rust] Enable ASAN builds of Rust executables.Prior to this change, builds would fail with  enable_rust = true  is_asan = trueThey would fail due to a lack of 'operator new' and similar symbols.Such symbols are provided by the sanitizer runtime, and we were askingrustc to use clang for linking rather than clang++, so such symbolswere not provided.With this change, ASAN builds are successful, though untested.Bug: 1247399Change-Id: I869840db2b957e0261faf9a4414ad91f0ab8cd6dReviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3350825Reviewed-by: Nico Weber <thakis@chromium.org>Commit-Queue: Adrian Taylor <adetaylor@chromium.org>Cr-Commit-Position: refs/heads/main@{#961771}
clang bug	 https://github.com/percona/percona-xtradb-cluster/commit/4c4d97d9f918334c39580785bb375fc3232012d3	Bug#33307573 unused variables warning on windowsIssue=====clang on windows reports unused variables.Change======- ifdef variables properly.RB: 26947
clang bug	 https://github.com/termux/termux-packages/commit/67babc6702ce74e7565141447f774f39e0fa5757	emacs: remove setjmp workaround@xtkoba pointed out that this was due to a clang bug, which should befixed in the libllvm that is shipped with ndk-r23:https://github.com/termux/termux-packages/pull/7473#issuecomment-913555494
clang bug	 https://github.com/coreboot/chrome-ec/commit/a995e5207db7020bbad2352007894e8196d65bfa	util: Increase buffer size to account for terminating NULWhen building with clang it warns:util/ecst.c:464:7: error: 'sscanf' may overflow; destination buffer inargument 3 has size 20, but the corresponding specifier may require size21 [-Werror,-Wfortify-source]
clang bug	 https://github.com/untir-l/hitomezashi/commit/1bc2a436583b0e898decf13e695a1908a894a38c	Change argument parsing to use optparse, fix bugs in it, misc. changes- Change argument parsing library from xgetopt to optparse (pretty close to adrop-in replacement).- Fix bugs in the argument parsing. There were several.- Remove an extraneous printf added for debugging purposes.- Add more bounds checks for numeric arguments to avoid passing garbage to thelibrary code and hitting assertions when the input is bad.- Change the clang-format invocation in the Makefile to have --verbose.- Change -Wpedantic to --pedantic-errors in CFLAGS, add -Wno-unused-functionso it doesn't complain about the ones from optparse (such are the perils ofsingle-header libraries).
clang bug	 https://github.com/sarthakroy2002/kernel_realme_RMX2020/commit/4c7d5d0b6b4b97a9859d719097b126b0225688b2	ANDROID: kbuild: allow lld to be used with CONFIG_LTO_CLANGBug: 63740206Bug: 117299373Change-Id: Ic9c8ca03fd082a8404905718f5312a3f497efa5aSigned-off-by: Sami Tolvanen <samitolvanen@google.com>
clang bug	 https://github.com/herrnst/dddvb-linux-kernel/commit/b8321ed4a40c02054f930ca59d3570caa27bc86c	Merge tag 'kbuild-v5.18-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuildPull Kbuild updates from Masahiro Yamada: - Add new environment variables, USERCFLAGS and USERLDFLAGS to allow   additional flags to be passed to user-space programs. - Fix missing fflush() bugs in Kconfig and fixdep - Fix a minor bug in the comment format of the .config file - Make kallsyms ignore llvm's local labels, .L* - Fix UAPI compile-test for cross-compiling with Clang - Extend the LLVM= syntax to support LLVM=<suffix> form for using a   particular version of LLVm, and LLVM=<prefix> form for using custom   LLVM in a particular directory path. - Clean up Makefiles* tag 'kbuild-v5.18-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuild:  kbuild: Make $(LLVM) more flexible  kbuild: add --target to correctly cross-compile UAPI headers with Clang  fixdep: use fflush() and ferror() to ensure successful write to files  arch: syscalls: simplify uapi/kapi directory creation  usr/include: replace extra-y with always-y  certs: simplify empty certs creation in certs/Makefile  certs: include certs/signing_key.x509 unconditionally  kallsyms: ignore all local labels prefixed by '.L'  kconfig: fix missing '# end of' for empty menu  kconfig: add fflush() before ferror() check  kbuild: replace $(if A,A,B) with $(or A,B)  kbuild: Add environment variables for userprogs flags  kbuild: unify cmd_copy and cmd_shipped
clang bug	 https://github.com/mmind/linux-riscv/commit/b8321ed4a40c02054f930ca59d3570caa27bc86c	Merge tag 'kbuild-v5.18-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuildPull Kbuild updates from Masahiro Yamada: - Add new environment variables, USERCFLAGS and USERLDFLAGS to allow   additional flags to be passed to user-space programs. - Fix missing fflush() bugs in Kconfig and fixdep - Fix a minor bug in the comment format of the .config file - Make kallsyms ignore llvm's local labels, .L* - Fix UAPI compile-test for cross-compiling with Clang - Extend the LLVM= syntax to support LLVM=<suffix> form for using a   particular version of LLVm, and LLVM=<prefix> form for using custom   LLVM in a particular directory path. - Clean up Makefiles* tag 'kbuild-v5.18-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuild:  kbuild: Make $(LLVM) more flexible  kbuild: add --target to correctly cross-compile UAPI headers with Clang  fixdep: use fflush() and ferror() to ensure successful write to files  arch: syscalls: simplify uapi/kapi directory creation  usr/include: replace extra-y with always-y  certs: simplify empty certs creation in certs/Makefile  certs: include certs/signing_key.x509 unconditionally  kallsyms: ignore all local labels prefixed by '.L'  kconfig: fix missing '# end of' for empty menu  kconfig: add fflush() before ferror() check  kbuild: replace $(if A,A,B) with $(or A,B)  kbuild: Add environment variables for userprogs flags  kbuild: unify cmd_copy and cmd_shipped
clang bug	 https://github.com/hentai-garbage/device_xiaomi_ginkgo/commit/fb70e28ce9ece83933ff7f1ca6fee38b654db728	g4w4: Replace clang-format with symlink.Automatic consistency.Bug: 122835115Test: manualChange-Id: I6583f9f7923a822aa11f1839fbf375c1063a89c6Signed-off-by: danascape <danascape@gmail.com>
clang bug	 https://github.com/hentai-garbage/device_xiaomi_ginkgo/commit/d365c9df994204159e8e760c14d1b3b11a978bce	g4w4: Add .clang-formatBug: 74004835Change-Id: I9b9980148d2226b163b2b95adc922aed3d499e8eSigned-off-by: Thierry Strudel <tstrudel@google.com>Signed-off-by: danascape <danascape@gmail.com>
clang bug	 https://github.com/f1nal3/Juniorgram/commit/7dfa58829d6e3467180474b2a77bfa27eb1b1e8a	data validation & fixing clang format & fix bug with 2 fields db connections (#294)* Client CLI validation* delete superfluous dependencies* fix clang format
clang bug	 https://github.com/ZunayedDihan/build_soong_s/commit/95dfbce28b564260995fbbdf65390935fc51e78a	Pass TIDY_TIMEOUT to clang-tidy* Tested with a clang-tidy wrapper that dumps TIDY_TIMEOUT.Test: make WITH_TIDY=1 TIDY_TIMEOUT=42Bug: 199451930Change-Id: I86580225bad7487da786db2ba62c09bd99d70c67
clang bug	 https://github.com/googleprodkernel/linux-platforms/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/nine7nine/linux-cachy-nspa/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/jackyboi2737/coincoin/commit/020c2b7609d037fe4d1bb321419d8d455716d6fb	Merge bitcoin/bitcoin#22923: test: Switch multiprocess to clang i686 buildfa309ee61c09726a8780acaea94502712f817921 bench: Fix 32-bit compilation failure in addrman bench (MarcoFalke)fae0295a799499268caca9c385ac4d7061543980 ci: Switch multiprocess to i686 build (MarcoFalke)Pull request description:  Building for i686 with clang helps to catch bugs early for:  * The OSS-Fuzz i686 clang libFuzzer build  * The arm 32-bit native clang build  Fixes  #22889ACKs for top commit:  hebasto:    ACK fa309ee61c09726a8780acaea94502712f817921Tree-SHA512: 581820d319aae2fcd4dd44979ee3d4164a575f0438476890aa2a7447f1392a5da26766cd6ab954530499b54f66eec2417bdeefdd7efb19bc27dd679cd2b9d0ce
clang bug	 https://github.com/Panchajanya1999/linux-mainline/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/HardenedBSD/ports/commit/9a10eff03e919e71578cdb66d588b756a0cd1bb6	misc/rump: fix or suppress clang 13 warningsFix a null pointer subtraction bug reported by clang 13, and suppressthe new clang 13 -Wunused-but-set-variable warning, as it triggers quiteoften in the NetBSD src tree.PR:
clang bug	 https://github.com/ibaoger/webrtc/commit/db622c359b868db74befb4ab84cceac58687250f	Revert "Delete unused class GlobalMutex"This reverts commit 5831afb8328cbecdbdbee882280ef907a09d9f31.Reason for revert: The code is still in use: https://ci.chromium.org/ui/p/webrtc/builders/ci/Win32%20Builder%20(Clang)/10243/overview. It wasn't detected for some reasons.Original change's description:> Delete unused class GlobalMutex>> Bug: webrtc:13869> Change-Id: Id3655bdd24630b78e83b606291605a37129fd4bc> Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/258131> Reviewed-by: Mirko Bonadei <mbonadei@webrtc.org>> Commit-Queue: Niels Moller <nisse@webrtc.org>> Cr-Commit-Position: refs/heads/main@{#36478}Bug: webrtc:13869Change-Id: Id44dd4f8ec31ac9e05fc0ee75b55916e627fd7bfNo-Presubmit: trueNo-Tree-Checks: trueNo-Try: trueReviewed-on: https://webrtc-review.googlesource.com/c/src/+/258135Bot-Commit: rubber-stamper@appspot.gserviceaccount.com <rubber-stamper@appspot.gserviceaccount.com>Owners-Override: Artem Titov <titovartem@webrtc.org>Commit-Queue: Artem Titov <titovartem@webrtc.org>Cr-Commit-Position: refs/heads/main@{#36480}
clang bug	 https://github.com/ZeBraHack0/mygrpc/commit/f0a062879538f59ac363910c1d4100cb015ff152	centralize handling of channel's default authority (#27544)* centralize handling of channel's default authority* clang-format* fix backup poller bug
clang bug	 https://github.com/leviticus-top/solana/commit/4287bf6b8bd87ba2f4f57d1f1a0db49e27bee008	Bump bpf-tools to v1.18 (#20991)- added newlib standard C library to clang toolchain- fixed BPF backend bug that accidentally deleted code, issue #20538
clang bug	 https://github.com/herrnst/dddvb-linux-kernel/commit/4be240b18aa67b1144af546bea2d7cad1b75c19b	Merge tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull FORTIFY_SOURCE updates from Kees Cook: "This series consists of two halves:   - strict compile-time buffer size checking under FORTIFY_SOURCE for     the memcpy()-family of functions (for extensive details and     rationale, see the first commit)   - enabling FORTIFY_SOURCE for Clang, which has had many overlapping     bugs that we've finally worked past"* tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  fortify: Add Clang support  fortify: Make sure strlen() may still be used as a constant expression  fortify: Use __diagnose_as() for better diagnostic coverage  fortify: Make pointer arguments const  Compiler Attributes: Add __diagnose_as for Clang  Compiler Attributes: Add __overloadable for Clang  Compiler Attributes: Add __pass_object_size for Clang  fortify: Replace open-coded __gnu_inline attribute  fortify: Update compile-time tests for Clang 14  fortify: Detect struct member overflows in memset() at compile-time  fortify: Detect struct member overflows in memmove() at compile-time  fortify: Detect struct member overflows in memcpy() at compile-time
clang bug	 https://github.com/mmind/linux-riscv/commit/4be240b18aa67b1144af546bea2d7cad1b75c19b	Merge tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull FORTIFY_SOURCE updates from Kees Cook: "This series consists of two halves:   - strict compile-time buffer size checking under FORTIFY_SOURCE for     the memcpy()-family of functions (for extensive details and     rationale, see the first commit)   - enabling FORTIFY_SOURCE for Clang, which has had many overlapping     bugs that we've finally worked past"* tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  fortify: Add Clang support  fortify: Make sure strlen() may still be used as a constant expression  fortify: Use __diagnose_as() for better diagnostic coverage  fortify: Make pointer arguments const  Compiler Attributes: Add __diagnose_as for Clang  Compiler Attributes: Add __overloadable for Clang  Compiler Attributes: Add __pass_object_size for Clang  fortify: Replace open-coded __gnu_inline attribute  fortify: Update compile-time tests for Clang 14  fortify: Detect struct member overflows in memset() at compile-time  fortify: Detect struct member overflows in memmove() at compile-time  fortify: Detect struct member overflows in memcpy() at compile-time
clang bug	 https://github.com/zephyrproject-rtos/chre/commit/c6c7fb04bc640665087ceaa1c8729144fa23afba	Update clang to clang-r433403.Bug: 197230471Change-Id: I907e6df25e7177dee5f90d87eccaddb17b6ea470Test: Presubmit
clang bug	 https://github.com/msalyzyn/libcxx/commit/bdf5fe7af5f9b2f0427e6aa91763f6ab4b7e2791	Export libc++ headers for musl sysrootExport the libc++ headers for inclusion in the musl sysroot so thatthe clang runtimes can link against them.Bug: 215802826Test: musl llvm buildChange-Id: Ia661da7ad7158e09b3e956ab93159e3e42855424
clang bug	 https://github.com/grpc/grpc/commit/227d65367c9030db3fc8957eeabc5238d831395e	rls: fix various bugs in adaptive throttling code (#28477)* rls: fix adaptive throttling window size* clang-format* fix adaptive throttling logic and fix FailedRlsRequestWithoutDefaultTarget test
clang bug	 https://github.com/JarlPenguin/platform_frameworks_av/commit/8db21069326575ae82c9a94f99780393d07b5a2f	Fix -Wbitwise-instead-of-logicalBug: http://b/215753485This warning is introduced in clang-r445002.  In code where the bitwiseoperation was used to avoid short-ciruit evaluation, make that explicitby introducing temporary variables.Test: build with clang-r445002.Change-Id: Ia7ccf1d48922d926313f691888d26c3e314c1056
clang bug	 https://github.com/f1nal3/Juniorgram/commit/78b0870ef5d26ab295c8e278792a4f4a8d2787b4	fix bug #424 (#442)* fix bag* some fix, clang format
clang bug	 https://github.com/chromium/chromium/commit/042e060af6b7cb66ac7bca6d3964a72bb18c522a	Clarify how to run the Clang static analyzer checksThe existing Clang static analyzer docs mention Clangflags to use, but it wasn't immediately clear to mehow to actually use those to analyze Chromium code.This CL adds a paragraph talking about how to executethe analyzer checks using clang-tidy.Bug: NoneChange-Id: Icef2072f5dd55db96adbbdf72d12329fbde1e767Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3417921Reviewed-by: Nico Weber <thakis@chromium.org>Commit-Queue: Andrew Williams <awillia@chromium.org>Cr-Commit-Position: refs/heads/main@{#964010}
clang bug	 https://github.com/facebook/hhvm/commit/8696eafd3e4f37817b7cc94aba3476327c21fdc8	Try to fix an internal test errorSummary: Sometimes the internal CI fails because we cannot catch `std::range_error&` thrown from `folly::to`. Maybe it's just a clang bug. This diff instead avoids catching the `std::range_error&`, hopefully fixing the test.Reviewed By: janoDifferential Revision: D35438317fbshipit-source-id: 542e5fd111edb562a0b597a3d4ab1bd9c6a4955a
clang bug	 https://github.com/microsoft/snmalloc/commit/848a7b1499e357d1eab784082f3a201b5ff64dd8	Check things in release builds with check-client.Clang 15 doesn't build the release builds with CHECK_CLIENT enabledbecause they are using `SNMALLOC_ASSERT` and so the values that we'recollecting to check are never actually checked.  This is probably a bug- if we're turning on the checks, I imagine it's because we want them.
clang bug	 https://github.com/tarun14110/browser_secure_webauthn/commit/cc9ca1f7f31a86360c908f6efb8f2e62467d2541	Bug 1730078 - Build clang-tidy with clang. r=firefox-build-system-reviewers,andiThere are complications with building a 1-stage clang with gcc, so justuse clang. Eventually, the clang-tidy toolchains will be removed infavor of providing clang-tidy from the clang toolchain itself anyways.Differential Revision: https://phabricator.services.mozilla.com/D125158
clang bug	 https://github.com/zhengpenghou/android_rust/commit/a5cccd036c7253920287f35dfb712e6180bfbe4a	Update clang to clang-r433403Test: presubmitBug: 197230471Change-Id: I62be0dc5bb819abe6a71a881ab2d8229df024cef
clang bug	 https://github.com/lf-lang/reactor-cpp/commit/aef18b98047039fc7875daa8fceda370bff17a17	Cpp-Core guidelines and Modernization (#6)* formatted big chunks of the code base* cleaning git history* resolved conflicts* lib/environemnt.hh: added function back* inlude/reactor-cpp/asser.cc: debug backtrace* include/reactor-cpp/assert.hh: fixed bug* lib/port.cc: changed phase from construction to assembly* testing Input/Output move-constructor without noexcept* resolved conflicts created by merge* squas commit many test commits* removed function Reactor::get_physical_time()* removed function Reactor::get_physical_time()* nix ci* nix ci* adding script for automatically running all the tests* fixed recommendations* fixed recommendations* edited contributing* trying to fix operator resolval* reverted time.cc and time.hh to master* all-test should now run* fixed up some old comments* clang-formatted* added workflow for clang-format* fixing clang-format ci* fix typo* added list-tests and expanded explaination of the nix tooling* references contributing.md in readme.mdCo-authored-by: Christian Menard <Christian.Menard@tu-dresden.de>
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/58a287fd84ec08dcc39d2cf2c50ec6f96b06c4ee	Bug 1747350 - Package aarch64 and x86_64 compiler-rt with mac clang. r=firefox-build-system-reviewers,andiDifferential Revision: https://phabricator.services.mozilla.com/D135758
clang bug	 https://github.com/pgrAm/JSD-OS/commit/89210304e5fa5e95db2cebc1bd827487b5095633	refactor filesytem stuff & clang bug workaround
clang bug	 https://github.com/ROCmSoftwarePlatform/composable_kernel/commit/34c661e71cc8cf4753843a58786c8f6211ec5e22	Batched gemm and reduction (#156)* adding batched_gemm_and_reduction* batched_gemm_reduce works with bactch_count=1* fix a bug in grid_size; batched_gemm_reduce works for batch_count > 1* adding profiler for batched_gemm_fp16* fixed a bug in declaration of d1 and d0; both example and profiler work* clang-format* cleanup* batched_gemm_reduce: add test* minor change* fixed some typo in function names
clang bug	 https://github.com/rbagd/libeigen-eigen-mirror/commit/5c642950a5d0232ebdfa6b460b4515e6e2b8828d	Bug Fix: correct the bug that won't define EIGEN_HAS_FP16_Cif the compiler isn't clang
clang bug	 https://github.com/threedslider/Vanilla/commit/743b9c5e1d9e9d23b8f51fd6778db8292de204ae	CMake: fix build issue with gcc+clang-tidyPrecompiled headers are in a compiler specific format,when using clang-tidy it tries to read the GCC PCH fileand fails at that.Disable PCH's for now when WITH_CLANG_TIDY is enabled sincea clean work-around doesn't seem readily available.relevant LLVM/CMake bugs:https://bugs.llvm.org/show_bug.cgi?id=41579https://gitlab.kitware.com/cmake/cmake/-/issues/22081Differential Revision: https://developer.blender.org/D13814Reviewed by: sergey, Blendify
clang bug	 https://github.com/Kyuofox/android-mainline/commit/61bb376162203d19e589f50e2631e8a292e64c07	ANDROID: clang: update to 14.0.0Bug: 202986547Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Ica702486da9ba9b99d9ed31199447be1bad9b960
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/c0ade9e73bd5a7ffd78e36521b9637a3a20478c5	Bug 1748056 - Build libc++ in Windows clang for real. r=firefox-build-system-reviewers,andiDifferential Revision: https://phabricator.services.mozilla.com/D137256
clang bug	 https://github.com/openbmc/bmcweb/commit/d63c72ea488b808f5574e61585334a3ffb90c258	Enable clang-tidy checks we already passclang-13 brought some additional checks we can turn on that we alreadypass, so enable them.  List of checks can be found in the diff, andincludes the suspicious includes check, which we previously had todisable due to a clang bug.Tested: Code compiles, clang-tidy passesSigned-off-by: Ed Tanous <edtanous@google.com>Change-Id: I1a4d1da0a8e775cdeb6b898bc1cdb0f3f7b6f06a
clang bug	 https://github.com/PixelOS-Devices/kernel_oneplus_sm8150/commit/a31992066c08b8710252d4c0d75a417389a0b76e	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Carlos Jimenez (JavaShin-X) <javashin1986@gmail.com>Signed-off-by: Cyber Knight <cyberknight755@gmail.com>
clang bug	 https://github.com/mszoek/airyx/commit/2f6a842484675bb8fe9fafd40d90c06f13e02403	Disable -Wreturn-type on GCC.GCC is more pedantic than clang about warning when a function doesn'thandle undefined enum values (see GCC bug 87950).  Clang's warninggives a more pragmatic coverage and should find any real bugs, sodisable the warning for GCC rather than adding __unreachableannotations to appease GCC.Reviewed by:
clang bug	 https://github.com/falkdavid/blender-branches/commit/743b9c5e1d9e9d23b8f51fd6778db8292de204ae	CMake: fix build issue with gcc+clang-tidyPrecompiled headers are in a compiler specific format,when using clang-tidy it tries to read the GCC PCH fileand fails at that.Disable PCH's for now when WITH_CLANG_TIDY is enabled sincea clean work-around doesn't seem readily available.relevant LLVM/CMake bugs:https://bugs.llvm.org/show_bug.cgi?id=41579https://gitlab.kitware.com/cmake/cmake/-/issues/22081Differential Revision: https://developer.blender.org/D13814Reviewed by: sergey, Blendify
clang bug	 https://github.com/Abhishek001konni/kernel_xiaomi_sm6250/commit/12c24224a626f20193e690bde4dacb3e8ada1835	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: RoHaN <reaPeR10x10x@gmail.com>
clang bug	 https://github.com/awaken-plus/android_frameworks_native/commit/7541083a8853850c1fdea225550287604d70249e	[cleanup] Fix a clang-tidy warningMove constructors should be noexcept where possibleBug: 153704006Test: builds & bootsChange-Id: I9de0b09a6b1e29cb9c2e21cdf05b96983fa6091c
clang bug	 https://github.com/iKeramat/msm-4.4/commit/c234f96402ecab31c4e59cb94802844be08d8821	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
clang bug	 https://github.com/Maxzor/blender/commit/743b9c5e1d9e9d23b8f51fd6778db8292de204ae	CMake: fix build issue with gcc+clang-tidyPrecompiled headers are in a compiler specific format,when using clang-tidy it tries to read the GCC PCH fileand fails at that.Disable PCH's for now when WITH_CLANG_TIDY is enabled sincea clean work-around doesn't seem readily available.relevant LLVM/CMake bugs:https://bugs.llvm.org/show_bug.cgi?id=41579https://gitlab.kitware.com/cmake/cmake/-/issues/22081Differential Revision: https://developer.blender.org/D13814Reviewed by: sergey, Blendify
clang bug	 https://github.com/Gabuter-OS/frameworks_av/commit/89bb533269562ef5bd042fff5b4a74bb7b28f54b	Fix -Wbitwise-instead-of-logicalBug: http://b/215753485This warning is introduced in clang-r445002.  In code where the bitwiseoperation was used to avoid short-ciruit evaluation, make that explicitby introducing temporary variables.Test: build with clang-r445002.Change-Id: Ia7ccf1d48922d926313f691888d26c3e314c1056Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang bug	 https://github.com/Abhishek001konni/kernel_xiaomi_sm6250/commit/521e525c06f7786c7825f51e69af9fddd0d9cc26	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: RoHaN <reaPeR10x10x@gmail.com>
clang bug	 https://github.com/mathcounts4/Project-Euler-CPP/commit/51e278fba21bf72af96cd093cb4ab3349bf4ef78	Avoid clang bug with extern bool instead of debug printing, add pkgtest. Add triple-equals for Mod results of ProjectEuler problems
clang bug	 https://github.com/kernel-patches/bpf/commit/262448f3d18959d175b10e28a3b65f41d1d7313f	x86/Kconfig: Only enable CONFIG_CC_HAS_IBT for clang >= 14.0.0Commit 156ff4a544ae ("x86/ibt: Base IBT bits") added a check for a crashwith 'clang -fcf-protection=branch -mfentry -pg', which intended toexclude Clang versions older than 14.0.0 from selectingCONFIG_X86_KERNEL_IBT.clang-11 does not have the issue that the check is testing for, soCONFIG_X86_KERNEL_IBT is selectable. Unfortunately, there is a differentcrash in clang-11 that was fixed in clang-12. To make matters worse,that crash does not appear to be entirely deterministic, as the sameinput to the compiler will sometimes crash and other times not, whichmakes dynamically checking for the crash like the '-pg' one unreliable.To make everything work properly for all common versions of clang, use ahard version check of 14.0.0, as that will be the first release upstreamthat has both bugs properly fixed.Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Link: https://lore.kernel.org/r/20220318230747.3900772-2-nathan@kernel.org
clang bug	 https://github.com/grpc/grpc/commit/23c4541392b806aeae00324eeeea5b578d946305	xds_cluster_resolver: fix bug that caused us to incorrectly reuse priority child names (#29174)* xds_cluster_resolver: fix bug that caused us to incorrectly reuse priority child names* add debug logging* assign child policy names within each discovery mechanism, not across all mechanisms* clang-format* add tests* don't need EDS service name or LOGICAL_DNS hostname in child name* remove unnecessary code
clang bug	 https://github.com/SungJJinKang/JINMATH/commit/4010ed1f4d29865b0fc72d5bde7ef8607f857187	fix bug when build in clang
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/3885f30dfb06207726958a21fc372f47265780cb	Bug 1758781 - Build llvm-symbolizer separately. r=firefox-build-system-reviewers,mhentgesThe llvm-symbolizer tasks currently extract a llvm-symbolizer from clangtasks. Changes in clang 14 make the hack that we have in place to keepllvm-symbolizer statically linked to libllvm while clang uses a dynamiclibllvm not work anymore, so it's time to bite the bullet and buildllvm-symbolizer separately.We share most of the build setup with the compiler-rt build.Differential Revision: https://phabricator.services.mozilla.com/D140711
clang bug	 https://github.com/nginx/njs/commit/6aa570e37b74e315da9ec167d0631e9fbe46e16a	Removing MSAN unpoison workarounds for clang-9 and below.MSAN unpoison workaround was introduced in 13dbdff9b76f (0.3.9) for afalse-positive bug in clang-9 and below.Also, after 80d95b2881f6 (0.4.1) the bug is not triggered anymore.
clang bug	 https://github.com/zephyrproject-rtos/chre/commit/2a8983b49ef7725bc81fb995d82b01a564bb63e7	Upgrade to clang-r437112.Bug: 201432564Test: makeChange-Id: I3a50da5083beab919c7590b7bbeb6dfc856aeebf
clang bug	 https://github.com/projects-nexus/android_kernel_xiaomi_lavender-LTO/commit/bd77a08ab0a5c610fde73049d63cfdcbf5a90667	FROMLIST: efi/libstub: disable LTOWith CONFIG_LTO_CLANG, we produce LLVM IR instead of object files. Since LTOis not really needed here and the Makefile assumes we produce an object file,disable LTO for libstub.Bug: 62093296Bug: 67506682Change-Id: Ieaa3d7e2c694655788f480f4351bf7c4d3fce090(am from https://patchwork.kernel.org/patch/10060309/)Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: ImSpiDy <spidy2713@gmail.com>Signed-off-by: ImPrashantt <prashant33968@gmail.com>
clang bug	 https://github.com/anvirt/Emu-QEMU/commit/1cab2489c229a255bf2c693273f4647569f8d9ea	Update emulator build to use clang-r437112bBug: 201432564Test: python3 android/build/python/cmake.pyChange-Id: Icc9efa348e9fd1749a2763ef8c0add0deee1566b
clang bug	 https://github.com/youling257/android-mainline/commit/262448f3d18959d175b10e28a3b65f41d1d7313f	x86/Kconfig: Only enable CONFIG_CC_HAS_IBT for clang >= 14.0.0Commit 156ff4a544ae ("x86/ibt: Base IBT bits") added a check for a crashwith 'clang -fcf-protection=branch -mfentry -pg', which intended toexclude Clang versions older than 14.0.0 from selectingCONFIG_X86_KERNEL_IBT.clang-11 does not have the issue that the check is testing for, soCONFIG_X86_KERNEL_IBT is selectable. Unfortunately, there is a differentcrash in clang-11 that was fixed in clang-12. To make matters worse,that crash does not appear to be entirely deterministic, as the sameinput to the compiler will sometimes crash and other times not, whichmakes dynamically checking for the crash like the '-pg' one unreliable.To make everything work properly for all common versions of clang, use ahard version check of 14.0.0, as that will be the first release upstreamthat has both bugs properly fixed.Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Link: https://lore.kernel.org/r/20220318230747.3900772-2-nathan@kernel.org
clang bug	 https://github.com/jeffmerkey/linux/commit/262448f3d18959d175b10e28a3b65f41d1d7313f	x86/Kconfig: Only enable CONFIG_CC_HAS_IBT for clang >= 14.0.0Commit 156ff4a544ae ("x86/ibt: Base IBT bits") added a check for a crashwith 'clang -fcf-protection=branch -mfentry -pg', which intended toexclude Clang versions older than 14.0.0 from selectingCONFIG_X86_KERNEL_IBT.clang-11 does not have the issue that the check is testing for, soCONFIG_X86_KERNEL_IBT is selectable. Unfortunately, there is a differentcrash in clang-11 that was fixed in clang-12. To make matters worse,that crash does not appear to be entirely deterministic, as the sameinput to the compiler will sometimes crash and other times not, whichmakes dynamically checking for the crash like the '-pg' one unreliable.To make everything work properly for all common versions of clang, use ahard version check of 14.0.0, as that will be the first release upstreamthat has both bugs properly fixed.Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Link: https://lore.kernel.org/r/20220318230747.3900772-2-nathan@kernel.org
clang bug	 https://github.com/Catfriend1/syncthing-android-fdroid/commit/d651bf1976dbe55b5e0e77c0d5fcf6c17a470508	Fix NDK r23 bug with incomplete path and arguments when calling "clang"
clang bug	 https://github.com/kernel-patches/bpf/commit/b83a908498d68fafca931e1276e145b339cac5fb	compiler_attributes.h: move __compiletime_{error|warning}Clang 14 will add support for __attribute__((__error__(""))) and__attribute__((__warning__(""))). To make use of these in__compiletime_error and __compiletime_warning (as used by BUILD_BUG andfriends) for newer clang and detect/fallback for older versions ofclang, move these to compiler_attributes.h and guard them with__has_attribute preprocessor guards.Link: https://reviews.llvm.org/D106030Link: https://bugs.llvm.org/show_bug.cgi?id=16428Link: https://github.com/ClangBuiltLinux/linux/issues/1173Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Kees Cook <keescook@chromium.org>[Reworded, landed in Clang 14]Signed-off-by: Miguel Ojeda <ojeda@kernel.org>
clang bug	 https://github.com/ChaptSpace/android_hardware_qcom_display/commit/a9b122d9dd5759201c22a39c6219bc1a2acb4a7c	hwc_session: move a breakAs written, this loop only runs once, which makes clang's new warningunhappy:hardware/qcom/sm8150/display/sdm/libs/hwc2/hwc_session.cpp:934:51:error: loop will run at most once (loop increment never executed)[-Werror,-Wunreachable-code-loop-increment]Chatting with qcom, this appears to be a bug, and the best fix is tomove the `break` into the `if`.Same fix as aosp/Icb64eed5b894b9188f5265094587dd802207ba66.Bug: 150166387Test: TreeHuggerChange-Id: Id28a784b819f0451610f9489fd2717da21b8d4a8
clang bug	 https://github.com/Prajwal-Koirala/fuchsia/commit/3999f3e57ba8ec44b8fe3d6f89d920565bae2681	[bt] Annotate true, false, nullptr in function callsUse the clang-tidy "argument comment" syntax to annotate function callsthat use a bool literal or nullptr, except for single-argument functions.Bug: 2279, 62803Test: Comments only changeChange-Id: I44f797b997d0e23a91c832beec929fb8762e2d40Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/445875Fuchsia-Auto-Submit: Xo Wang <xow@google.com>Reviewed-by: Ben Lawson <benlawson@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang bug	 https://github.com/egege/webrtc-src/commit/160b37b70f7d38f2f8ce7fb156f1859e50f9953b	Don't include clang package's libstdc++.so in sanitizer buildsLLVM binaries no longer need libstdc++.so as of https://crrev.com/c/3513603.Change-Id: I00c18e3d24167a8edda1b0a25a9ef00c0c2bde52Bug: chromium:1286289Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/255641Reviewed-by: Mirko Bonadei <mbonadei@webrtc.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Mirko Bonadei <mbonadei@webrtc.org>Cr-Commit-Position: refs/heads/main@{#36212}
clang bug	 https://github.com/xswz8015/skia/commit/cb2cbbaba1ace6e1d73c1955c057bb298fe01f6e	Roll ANGLE from 602b957b8836 to 701d51b101c8 (6 revisions)https://chromium.googlesource.com/angle/angle.git/+log/602b957b8836..701d51b101c82022-01-27 cclao@google.com Vulkan: Add SmallBufferPool for small allocations2022-01-27 robertphillips@google.com Expand error message on BindTexture validation failure2022-01-27 timvp@google.com Tests: Add PUBG Mobile launch trace2022-01-27 cclao@google.com Vulkan: Use queue for mGarbageQueue2022-01-27 jmadill@chromium.org Vulkan: Remove ProgramExecutableVk back-pointers.2022-01-27 patrto@microsoft.com Change Windows display initialization from ANSI to wide versionIf this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC robertphillips@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: robertphillips@google.comTest: Test: TracePerfTest.Run/*pubg_mobile_launchChange-Id: I0aefd3b1019c6ed1b4e29b42ffe34a73ff819274Reviewed-on: https://skia-review.googlesource.com/c/skia/+/501459Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/vladlogyin/linux-tb-j616f/commit/b83a908498d68fafca931e1276e145b339cac5fb	compiler_attributes.h: move __compiletime_{error|warning}Clang 14 will add support for __attribute__((__error__(""))) and__attribute__((__warning__(""))). To make use of these in__compiletime_error and __compiletime_warning (as used by BUILD_BUG andfriends) for newer clang and detect/fallback for older versions ofclang, move these to compiler_attributes.h and guard them with__has_attribute preprocessor guards.Link: https://reviews.llvm.org/D106030Link: https://bugs.llvm.org/show_bug.cgi?id=16428Link: https://github.com/ClangBuiltLinux/linux/issues/1173Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Kees Cook <keescook@chromium.org>[Reworded, landed in Clang 14]Signed-off-by: Miguel Ojeda <ojeda@kernel.org>
clang bug	 https://github.com/woodsts/linux-stable/commit/b83a908498d68fafca931e1276e145b339cac5fb	compiler_attributes.h: move __compiletime_{error|warning}Clang 14 will add support for __attribute__((__error__(""))) and__attribute__((__warning__(""))). To make use of these in__compiletime_error and __compiletime_warning (as used by BUILD_BUG andfriends) for newer clang and detect/fallback for older versions ofclang, move these to compiler_attributes.h and guard them with__has_attribute preprocessor guards.Link: https://reviews.llvm.org/D106030Link: https://bugs.llvm.org/show_bug.cgi?id=16428Link: https://github.com/ClangBuiltLinux/linux/issues/1173Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Kees Cook <keescook@chromium.org>[Reworded, landed in Clang 14]Signed-off-by: Miguel Ojeda <ojeda@kernel.org>
clang bug	 https://github.com/hebasto/bitcoin-qtw/commit/cfcef7cc42f74b6021d738a5fd8b99cab0ac84de	Merge bitcoin/bitcoin#22981: doc: Fix incorrect C++ named args10bd396f2c08615aea91a0054b854fd75aaf2548 doc: Fix incorrect C++ named args (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  Fix that by correcting them and adjust the format, so that clang-tidy can check it.ACKs for top commit:  fanquake:    ACK 10bd396f2c08615aea91a0054b854fd75aaf2548 - `run-clang-tidy` works for me now.Tree-SHA512: 2694e17a1586394baf30bbc479a913e4bad361221e8470b8739caf30aacea736befc73820f3fe56f6207d9f5d969323278d43a647f58c3497e8e44cad79f8934
clang bug	 https://github.com/HycentChima/gui/commit/205877e55f7a5cab1f64f98d5305520744be06d2	Merge bitcoin/bitcoin#23546: scripted-diff: Use clang-tidy syntax for C++ named arguments (tests only)fa00447442f22a24e5ca5fc538d0bf7bef575544 scripted-diff: Use clang-tidy syntax for C++ named arguments (MarcoFalke)fae13c39896898aef2281433af143c22d8b3a3b4 doc: Use clang-tidy comments in crypto_tests (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  To allow them being checked by `clang-tidy`, use a format it can understand.ACKs for top commit:  shaavan:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  rajarshimaitra:    ACK https://github.com/bitcoin/bitcoin/pull/23546/commits/fa00447442f22a24e5ca5fc538d0bf7bef575544  jonatack:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  fanquake:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544Tree-SHA512: 4d23a8363da81dfea21a4cd8516ab5e0dc70119e4d503f3f240f38573218b2c2e84083b97e956c62942d78b2f17490f8b3b2e8077d257644fda1d901e2b80507
clang bug	 https://github.com/admintai/php-src/commit/fe9abf52fa86fbc3ce2c189cf3f2d1b23e7d4c05	Merge branch 'PHP-8.1'* PHP-8.1:  Fix bug #75941: Fix compile failure on Solaris with clang
clang bug	 https://github.com/xswz8015/skia/commit/2c2e4313adca2fb9ed85df0218c738cf52bf57d7	Roll ANGLE from 39f66a9c1821 to 2ad5f350c555 (5 revisions)https://chromium.googlesource.com/angle/angle.git/+log/39f66a9c1821..2ad5f350c5552022-01-27 syoussefi@chromium.org Vulkan: Fix texture array level redefinition2022-01-26 johncunningham@apple.com Metal: Fix undefined behavior of depth write2022-01-26 b.schade@samsung.com Vulkan: Fix to correctly redefine gl_PerVertex in GS2022-01-26 gbeaty@chromium.org [infra] Use python3 for run_presubmit recipe.2022-01-26 cclao@google.com Vulkan: Use queue instead of vector for mSharedGarbageListIf this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC robertphillips@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: robertphillips@google.comTest: Test: GLSLTest_ES31.PerVertex*Test: Test: KHR-GLES32.core.geometry_shader.api.getProgramiv3Change-Id: I8d46224e153ca4617c81114a10786481969bd61eReviewed-on: https://skia-review.googlesource.com/c/skia/+/500937Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/xswz8015/skia/commit/98d664096d4035fc8936788b100167de68cab8fd	[bazel] Regenerate files and build with c++17See toolchain/clang_toolchain_config.bzl for the c++17 switch.Most of the other changes were automatically generated(with the exception of //third_party).Change-Id: I8c0f4b29b5967da3f48b17eb298a7e92156277acBug: skia:12541Reviewed-on: https://skia-review.googlesource.com/c/skia/+/502407Reviewed-by: John Stiles <johnstiles@google.com>Reviewed-by: Ben Wagner <bungeman@google.com>
clang bug	 https://github.com/Panchajanya1999/linux-mainline/commit/b83a908498d68fafca931e1276e145b339cac5fb	compiler_attributes.h: move __compiletime_{error|warning}Clang 14 will add support for __attribute__((__error__(""))) and__attribute__((__warning__(""))). To make use of these in__compiletime_error and __compiletime_warning (as used by BUILD_BUG andfriends) for newer clang and detect/fallback for older versions ofclang, move these to compiler_attributes.h and guard them with__has_attribute preprocessor guards.Link: https://reviews.llvm.org/D106030Link: https://bugs.llvm.org/show_bug.cgi?id=16428Link: https://github.com/ClangBuiltLinux/linux/issues/1173Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Kees Cook <keescook@chromium.org>[Reworded, landed in Clang 14]Signed-off-by: Miguel Ojeda <ojeda@kernel.org>
clang bug	 https://github.com/simd-everywhere/simde/commit/7d4beba2c71c54a0cd06f7d2cfc7d96c67f8cd1d	gfni: work around clang bug #50932
clang bug	 https://github.com/MarcoFalke/bitcoin-core-with-ci/commit/205877e55f7a5cab1f64f98d5305520744be06d2	Merge bitcoin/bitcoin#23546: scripted-diff: Use clang-tidy syntax for C++ named arguments (tests only)fa00447442f22a24e5ca5fc538d0bf7bef575544 scripted-diff: Use clang-tidy syntax for C++ named arguments (MarcoFalke)fae13c39896898aef2281433af143c22d8b3a3b4 doc: Use clang-tidy comments in crypto_tests (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  To allow them being checked by `clang-tidy`, use a format it can understand.ACKs for top commit:  shaavan:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  rajarshimaitra:    ACK https://github.com/bitcoin/bitcoin/pull/23546/commits/fa00447442f22a24e5ca5fc538d0bf7bef575544  jonatack:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  fanquake:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544Tree-SHA512: 4d23a8363da81dfea21a4cd8516ab5e0dc70119e4d503f3f240f38573218b2c2e84083b97e956c62942d78b2f17490f8b3b2e8077d257644fda1d901e2b80507
clang bug	 https://github.com/ppooopppooo/kernel_xiaomi_msm8998/commit/175dbf91195091518c3db2915863a90dd3bc4557	msm: ais/camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I10557fb29b4a5d4139d690661c22ab5be3fedaafSigned-off-by: Petri Gynther <pgynther@google.com>
clang bug	 https://github.com/nemequ/ci-noise/commit/7d4beba2c71c54a0cd06f7d2cfc7d96c67f8cd1d	gfni: work around clang bug #50932
clang bug	 https://github.com/Prajwal-Koirala/fuchsia/commit/d149b6140a96a035a206ad90241b99ec3eb59ee2	[build] Trim visibility for VLA bounds UBSan checkWe disabled the VLA bounds checking for UBSan globally to make iteasier to roll clang. Now that we rolled, we can limit the number oftargets we disable this UBSan check for then fix each instanceindividually.Bug: 93804Change-Id: I8b7368415680419500a933b5cb70f8995ef2b29dReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/657594Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Leonard Chan <leonardchan@google.com>
clang bug	 https://github.com/xswz8015/skia/commit/541792c84595f291868c8134f8a7f07e67fac8a2	Roll ANGLE from 8fc4d3b1e618 to c5498b957e83 (5 revisions)https://chromium.googlesource.com/angle/angle.git/+log/8fc4d3b1e618..c5498b957e832022-01-25 lubosz.sarnecki@collabora.com FrameCapture: Reset immutable buffers correctly.2022-01-25 lubosz.sarnecki@collabora.com FrameCapture: Add Renderbuffers to mStartingResources.2022-01-25 romanl@google.com Vulkan: Prevent out of bounds read in divisor emulation path.2022-01-25 lubosz.sarnecki@collabora.com FrameCapture: Detect GL_MAP_COHERENT_BIT_EXT correctly.2022-01-25 angle-autoroll@skia-public.iam.gserviceaccount.com Roll vulkan-deps from 238eaa6f9d25 to 4ec99dddf407 (7 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC robertphillips@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: robertphillips@google.comChange-Id: I763c37e866aa5f4c2ecab08c638bb03823fb798cReviewed-on: https://skia-review.googlesource.com/c/skia/+/499658Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/R3BRootGroup/glad-tpc/commit/0bef27653dc82c05951bfb36cca2207ebb779947	Electronics response reviewed. Improved readability of the code. Bugs fix. Clang-format.Electronics response reviewed. Improved readability of the code. Bugs fix.electronics updateElectronics response reviewed. Improved readability of the code. Bugs fix.Clang-formattest
clang bug	 https://github.com/TheAlgorithms/C-Plus-Plus/commit/66687426203d3d689b4e2c2fd5722ba3c98c3f8c	Merge pull request #948 from kvedala/clang-tidy[bug] disable move error + enforce c++11 for clang-tidy
clang bug	 https://github.com/PotatoProject-next/build_make/commit/d5d15c86737f28d9710d4910add969f2198c2087	Rust: Collect gnco files with CLANG_COVERAGE too.Until Rust supports LLVM coverage, Soong treats both NATIVE_COVERAGE andCLANG_COVERAGE as producing GCOV coverage files. On the make-side, weshould be collecting the gcno files into a zip file when CLANG_COVERAGEis defined too.Bug: 170983066Test: Coverage build with CLANG_COVERAGE produces zip file.Change-Id: If6f86280f0d823e86884b64729530cc3548103a1
clang bug	 https://github.com/Scientific-Computing-Lab-NRCN/compar/commit/eacd1c34eea77c9b1886df01720f1a598f622ca4	fixed clang bug (using clange module now)
clang bug	 https://github.com/crdroidandroid/android_build_soong/commit/c7d23478e1348e3c2a58a3a7a2d505da7dafb3ec	Switch to clang r416183 12.0.4.Bug: http://b/181927912Test: go/android-llvm-testing-dashboard tag: test_clang_r416183      go/android-llvm-windows-testing      go/ab/P20855845 sdk_phone_armv7-sdk_mac build on Forrest      Forrest run L21700000838126631 for CtsNNAPITestCasesChange-Id: If677b57616348ae52704494f40c7b1ed470bb5f4
clang bug	 https://github.com/SudoerzAOSPMod/build_soong/commit/c7d23478e1348e3c2a58a3a7a2d505da7dafb3ec	Switch to clang r416183 12.0.4.Bug: http://b/181927912Test: go/android-llvm-testing-dashboard tag: test_clang_r416183      go/android-llvm-windows-testing      go/ab/P20855845 sdk_phone_armv7-sdk_mac build on Forrest      Forrest run L21700000838126631 for CtsNNAPITestCasesChange-Id: If677b57616348ae52704494f40c7b1ed470bb5f4
clang bug	 https://github.com/percona/percona-xtradb-cluster/commit/ae969330b1bd7115521fab89d71fcb891c4dd270	Post-push fix for one of patches for bug#29634540 "DROP DATABASE OF 1 MILLION TABLES RESULTED CRASH OF MYSQLD" [noclose]Fixed errors in clang build.Reviewed-by: Dyre Tjeldvoll <Dyre.Tjeldoll@oracle.com>
clang bug	 https://github.com/xdroid-CAF/xd_build_soong/commit/dcabea581cb855ee9a735781e25c3375862875ff	[cc/coverage] Define a macro during coverage buildsBug: http://b/186576313During a coverage build, pass the __ANDROID_CLANG_COVERAGE__ macro tonative compilations.  This allows tools like dalvikvm and dex2oat, whichwould otherwise call _exit(), to write profiles on coverage builds bycalling exit() instead.Test: `m CLANG_COVERAGE=true NATIVE_COVERAGE_PATHS="art" nothing`          and check compiler flags in out/soong/build.ninja.Change-Id: I18315b89170abdd650e4c6c55577688348c42225(cherry picked from commit 551b06d9e69066baf1b621b20d4b838ac2f28902)
clang bug	 https://github.com/crdroidandroid/android_build_soong/commit/217e09a784689c43236f36100a69ef0cf72ee341	Forbit extra quotes in tidy flag lists* Start with clang-tidy flags;  maybe other flags should be checked too.Bug: 180862582Test: makeChange-Id: I82f86a911733693a14fe56a35e28590b065e3ae7
clang bug	 https://github.com/SudoerzAOSPMod/build_soong/commit/217e09a784689c43236f36100a69ef0cf72ee341	Forbit extra quotes in tidy flag lists* Start with clang-tidy flags;  maybe other flags should be checked too.Bug: 180862582Test: makeChange-Id: I82f86a911733693a14fe56a35e28590b065e3ae7
clang bug	 https://github.com/QMCPACK/qmcpack/commit/82d49351d5a578f8b28a76d2b209a6012e7f08bf	Workaround clang bug.
clang bug	 https://github.com/KDE/cutehmi/commit/dd85c1a86d03b6a45872a9bf3c427483c67701ad	Provide destructor explicitly to workaround clang bug.
clang bug	 https://github.com/LineageOS/android_kernel_fxtec_msm8998/commit/76e52ad842ba0090fd7c1af047801a1b1e142a0e	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4
clang bug	 https://github.com/Remilia-NULL/oneplus_msm8998_kernel/commit/7bf6042dc6ade5f60d54bd78716cd93e28dd154b	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang bug	 https://github.com/ISI-apex/casper-ebuilds/commit/b8ca4f4a53de14ff19dfb521729d3b74fe3253fa	sys-devel/llvm: 11.0.1: MLIR use flagNote: apps must be built with same compiler as LLVM (otherwiselinking errors), and recommended compiler is Clang.LLVM Bug 45680 (cannot find this bug anymore, though).
clang bug	 https://github.com/StollD/linux-fedora/commit/a312b60d6c4f09cebb727ffab68754fbf39dc1f1	kbuild: Remove -Wno-format-invalid-specifier from clang blockTurning on -Wformat does not reveal any instances of this warning acrossseveral different builds so remove this line to keep the number ofdisabled warnings as slim as possible.This has been disabled since commit 61163efae020 ("kbuild: LLVMLinux:Add Kbuild support for building kernel with Clang"), which does notexplain exactly why it was turned off but since it was so long ago interms of both the kernel and LLVM so it is possible that some bug gotfixed along the way.Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
clang bug	 https://github.com/Panchajanya1999/linux-mainline/commit/a312b60d6c4f09cebb727ffab68754fbf39dc1f1	kbuild: Remove -Wno-format-invalid-specifier from clang blockTurning on -Wformat does not reveal any instances of this warning acrossseveral different builds so remove this line to keep the number ofdisabled warnings as slim as possible.This has been disabled since commit 61163efae020 ("kbuild: LLVMLinux:Add Kbuild support for building kernel with Clang"), which does notexplain exactly why it was turned off but since it was so long ago interms of both the kernel and LLVM so it is possible that some bug gotfixed along the way.Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
clang bug	 https://github.com/xdroid-CAF/xd_build_soong/commit/217e09a784689c43236f36100a69ef0cf72ee341	Forbit extra quotes in tidy flag lists* Start with clang-tidy flags;  maybe other flags should be checked too.Bug: 180862582Test: makeChange-Id: I82f86a911733693a14fe56a35e28590b065e3ae7
clang bug	 https://github.com/ArrowOS-Devices/android_kernel_xiaomi_whyred/commit/85ef78dac694658243833c2d1b2c8ae761b83bc0	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
clang bug	 https://github.com/percona/percona-xtradb-cluster/commit/7c2965aa7de7c61ea35f01a3b64526cb8ed94634	Bug#32672636 REMOVE THE WARNINGS ABOUT TCP_PORT_POOL_ MEMBER SHADOW IN ROUTER COMP. TESTSFollow-up patch: Removed remaining TcpPortPool instances to get rid of the clang warnings.Approved by Jan Kneschke <jan.kneschke@oracle.com>
clang bug	 https://github.com/winter-loo/perfetto/commit/857ed736357fcdf72d2caaa226da2c8178af9316	install-build-deps: Use different paths for clang on Win vs LinuxRather than checking out the hermetic toolchain in buildtools/clang,check it out in buildtools/{linux64,win}/clang.This has two advantages:1. It's consistent with other binary paths (ninja, gn, clang_format)2. Allows to share the same folder both from Windows (host) and WSL2,   enabling work on Win+Linux on the same machine. Without this change   each environment would clobber the other.Bug: 174454879Change-Id: I5e580d4cac4cd341ecf373f152b6047872db232e
clang bug	 https://github.com/DirtyUnicorns/android_build_soong/commit/287a13fc7e4a8ad2ef4e96663b09144c348a47bb	Switch from clang-r377782 to clang-r377782bBug: 149509676Test: make checkbuildChange-Id: I30c4cda700522968da443cebd3a67a1c428ba2ef
clang bug	 https://github.com/ROCmSoftwarePlatform/rocBLAS/commit/92fd629c25fe6472ae68e449c87ba60f1fda8d27	Merge pull request #61 from leekillough/clang_staticAdd ROCBLAS_CLANG_STATIC to work around Clang bugs; redeclare rocBLAS template function pointers as static
clang bug	 https://github.com/johnmart19/Redline_kernel_onclite/commit/5d2c13fde2347bf77240862ab5690dbeac27c308	ANDROID: add support for clang Shadow Call Stack (SCS)This change adds generic support for clang's Shadow Call Stack, whichuses a shadow stack to protect return addresses from being overwrittenby an attacker. Details are available here:  https://clang.llvm.org/docs/ShadowCallStack.htmlBug: 112277034Change-Id: Idd553b7c978b0673ab533a68980fb9a654f4510cSigned-off-by: Sami Tolvanen <samitolvanen@google.com>
clang bug	 https://github.com/Cas1997/LocalAliceO2/commit/f4dc57b20e4d979e3e0c71f2c536193113e4af48	Sending binary buffer.The unorderd_map is created in the processor part.bug fixclang...
clang bug	 https://github.com/yaap/frameworks_av/commit/b6926c7974a150ce589e3429cc245a7f7e25812a	preprocessing: Format the code using clang-formatBug: 174366074Test: objdump before and after the patchChange-Id: Idf2368e5f51f45bd5e908e2a142388ef7e5a77d1
clang bug	 https://github.com/moves-rwth/storm/commit/c6fd7423f2db1e33c76f15ab4ff85d669f73900f	Disabling stack checks once again for all clang versions >= 11.0.0 because they somehow interfere with exception handling in the PrismParser. (most likely a clang bug).
clang bug	 https://github.com/chromium/chromium/commit/8350dbe5d8f9186682c4434d9e24bc8665f0c9fd	Move all of chromium.clang's linux tests to bionicBug: 1202756Change-Id: Idf607417bd13f1c7449af1728b6b2baf3f992d0bReviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3499309Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>Commit-Queue: Ben Pastene <bpastene@chromium.org>Reviewed-by: Garrett Beaty <gbeaty@google.com>Cr-Commit-Position: refs/heads/main@{#977699}
clang bug	 https://github.com/xuanniao/webrtc/commit/597e03f2010fb93608354f12f3f16a7c1944e915	Remove set but otherwise unused variableRecent Clang versions have enhanced -Wunused-but-set-variable which nowwarns about this.Bug: chromium:1309955Change-Id: I7a9d2175e6314fe8133cf7a77eb00bd4a22a23c5Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/257300Reviewed-by: Jonas Oreland <jonaso@google.com>Auto-Submit: Hans Wennborg <hans@chromium.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Harald Alvestrand <hta@webrtc.org>Cr-Commit-Position: refs/heads/main@{#36418}
clang bug	 https://github.com/mq-glodroid/gki-kernel/commit/8d0956438eecfafbefb7cd15b7773087549b38d4	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/sourajitk/kernel_asus_sm8350/commit/258c42a8fb317d197e94765187d30188241e9254	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/egege/webrtc-src/commit/597e03f2010fb93608354f12f3f16a7c1944e915	Remove set but otherwise unused variableRecent Clang versions have enhanced -Wunused-but-set-variable which nowwarns about this.Bug: chromium:1309955Change-Id: I7a9d2175e6314fe8133cf7a77eb00bd4a22a23c5Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/257300Reviewed-by: Jonas Oreland <jonaso@google.com>Auto-Submit: Hans Wennborg <hans@chromium.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Harald Alvestrand <hta@webrtc.org>Cr-Commit-Position: refs/heads/main@{#36418}
clang bug	 https://github.com/herrnst/dddvb-linux-kernel/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/mmind/linux-riscv/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/pizzascape/android_kernel_xiaomi_selene/commit/ed29072bc8690b288b610cfffa08588ee470333e	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: UtsavBalar1231 <utsavbalar1231@gmail.com>
clang bug	 https://github.com/dgreid/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/pizzascape/android_kernel_xiaomi_selene/commit/f88bd0e0a583240781fa714dc654d554da850954	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: UtsavBalar1231 <utsavbalar1231@gmail.com>
clang bug	 https://github.com/jpirko/linux_mlxsw/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/bcopeland/wireless-testing/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/dotOS-Devices/kernel_asus_sdm660/commit/1b6f581b9a101c7ca4470b591244499c330f8f62	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c670
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/fca792ecaa31fb1d719a94a460414ce0ebd87464	Bug 1748384 - Properly handle Windows SDK when the host compiler is clang-cl and the target compiler is not. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D135004
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/fd7ee0cb3f3d8c4294fdcc08d03e8ed0ee037b2c	Bug 1748382 - Stop reverting 2a078c307204 on clang trunk. r=firefox-build-system-reviewers,mhentgesThe content of the patch was applied as part of d76279404073.Differential Revision: https://phabricator.services.mozilla.com/D135002
clang bug	 https://github.com/xswz8015/skia/commit/0ada61c87ec32c4278e8c8761da1921b5294a9b0	Roll ANGLE from 0a28c6c61b2f to 6f1c39b52b4f (3 revisions)https://chromium.googlesource.com/angle/angle.git/+log/0a28c6c61b2f..6f1c39b52b4f2021-12-28 lfy@google.com Vulkan: Restore color attachment mask-related blend states2021-12-28 angle-autoroll@skia-public.iam.gserviceaccount.com Roll SwiftShader from 87c78ac5eb86 to 433b1bf9bff2 (2 revisions)2021-12-28 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 0635acc4de22 to d09758fa672c (93 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC johnstiles@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: johnstiles@google.comChange-Id: Ic14b71e61dd075cbec4b503e2fce7310e48972e3Reviewed-on: https://skia-review.googlesource.com/c/skia/+/489758Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/admintai/php-src/commit/26d28c3b429eedd655925f16369ba1f3237143c4	Fix bug #75941: Fix compile failure on Solaris with clangCloses GH-7525.
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/059f34b0dbba488f26c14ddbcd4e769daaf99589	Bug 1745115 - Apply the same patches as clang 13 to clang trunk. r=firefox-build-system-reviewers,andiWe're currently omitting a lot of them. This requires reverting a fewmore patches that were followups for llvmorg-13-init-8182-gc2297544c047.Differential Revision: https://phabricator.services.mozilla.com/D133318
clang bug	 https://github.com/StollD/linux-fedora/commit/b83a908498d68fafca931e1276e145b339cac5fb	compiler_attributes.h: move __compiletime_{error|warning}Clang 14 will add support for __attribute__((__error__(""))) and__attribute__((__warning__(""))). To make use of these in__compiletime_error and __compiletime_warning (as used by BUILD_BUG andfriends) for newer clang and detect/fallback for older versions ofclang, move these to compiler_attributes.h and guard them with__has_attribute preprocessor guards.Link: https://reviews.llvm.org/D106030Link: https://bugs.llvm.org/show_bug.cgi?id=16428Link: https://github.com/ClangBuiltLinux/linux/issues/1173Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Kees Cook <keescook@chromium.org>[Reworded, landed in Clang 14]Signed-off-by: Miguel Ojeda <ojeda@kernel.org>
clang bug	 https://github.com/t-head-aosp/platform-frameworks-av/commit/d5b73240629044e5000354c5c6b8c8401aaa5fba	Add .clang-format to frameworks/avCopy of platform/build/soong/scripts/system-clang-format's contents. Also remove other .clang-formats using the same style.Change-Id: Ia9ea16daaf86741ddb476fda2edeace260933a77Test: N/ABug: 196402418
clang bug	 https://github.com/xswz8015/skia/commit/fd3f23f90f5787fa52326e0c161b8e9d2a10363b	Roll ANGLE from fce481863806 to 0a28c6c61b2f (3 revisions)https://chromium.googlesource.com/angle/angle.git/+log/fce481863806..0a28c6c61b2f2021-12-27 gert.wollny@collabora.com Capture/Replay: Capture some MultiDrawIndirect parameters2021-12-27 gert.wollny@collabora.com Capture/Replay: Gather Program sources directly from call2021-12-27 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 52c4c43d687f to 0635acc4de22 (149 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC johnstiles@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: johnstiles@google.comChange-Id: I43fb7a921c1ee9d456128cc7246b4d30876d917aReviewed-on: https://skia-review.googlesource.com/c/skia/+/489097Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/chimaoshu/MouseDB/commit/5cc1505693f5fc86ba742065abc97b6e28347ae9	1. change compiler to clang2. change status_code3. fix bugs
clang bug	 https://github.com/yogesh040898/xiaomi_kernel_source_sdm660/commit/943d6efa04f6154061b0591eedc5dfc7706c646c	compat: don't undef BUILD_BUG_ON for Clang >=8This has been fixed upstream. To keep this hack working for toolchainsthat don't have it, use CONFIG_CLANG_VERSION, which was added in commit469cb7376c06 ("kconfig: add CC_IS_CLANG and CLANG_VERSION"), introducedin 4.18. I have added the '!defined(CONFIG_CLANG_VERSION)' to keep thehack around for Android. Most custom kernel developers are using AOSP'sClang, which currently does not have the fix and might not for a while(although it is probably on Google's mind given that it has been anissue for ChromeOS on 4.19: https://crbug.com/897215).I have verified this change against my Pixel 2 kernel and 4.20-rc3 withthe latest ToT Clang.Link: https://github.com/ClangBuiltLinux/linux/issues/7Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
clang bug	 https://github.com/crdroidandroid/android_build_soong/commit/db7dda89f3c1cd1267b50e65a6a9385484bcee3e	Switch to clang-r407598 (12.0.1).Also suppress a clang-tidy warning and a ubsan check to pass compilation.Bug: 171348143Test: build.Change-Id: Ie5162c15df172cefd7cff9776e54531fd620bc23
clang bug	 https://github.com/SudoerzAOSPMod/build_soong/commit/db7dda89f3c1cd1267b50e65a6a9385484bcee3e	Switch to clang-r407598 (12.0.1).Also suppress a clang-tidy warning and a ubsan check to pass compilation.Bug: 171348143Test: build.Change-Id: Ie5162c15df172cefd7cff9776e54531fd620bc23
clang bug	 https://github.com/sailfishos-mirror/gzip/commit/80769f1ea3518cf7c328c5c52dcd7723d6fdfeda	bug#43583: Fix building DFLTCC with clangclang does not support .machinemode, so put it under an #ifdef.
clang bug	 https://github.com/Farizmaul/Android_kernel_xiaomi_aliothinn/commit/df7c201e4f78a54afe669e9d4fe4db9e0a473a12	ANDROID: clang: update to 12.0.3Bug: 180726982Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Ibafe2f9bb93f9214de017a0b742e9b9e29aa9b06
clang bug	 https://github.com/codepandit/icu4c64/commit/6841d30d8558d9deb6081a97a27958481e24a452	pachi: remove clang bug workaround
clang bug	 https://github.com/codepandit/icu4c64/commit/8b1529126597ec1e8ccb077a57a61cbd5751d444	mupdf: remove clang bug workaround
clang bug	 https://github.com/codepandit/icu4c64/commit/af1bdd327c678a3973f1c2fa22027444e7ac4bc6	mpfr: remove clang bug workaround
clang bug	 https://github.com/codepandit/icu4c64/commit/054be2da1440f23bc3388670567b96cb54366340	luajit: remove clang bug workaround
clang bug	 https://github.com/codepandit/icu4c64/commit/1ea234e6878979e6d1c8ec4fc0b7ed797d5a5a0e	gmp: remove clang bug workaround
clang bug	 https://github.com/codepandit/icu4c64/commit/3cab659c1dfe611c351a80292fa8a1ca41bf63ec	bat: remove clang bug workaround
clang bug	 https://github.com/Colt-Enigma/platform_build_soong/commit/5e3d82ebdbc791711f7d67af09f3e53b83ad5188	Switch to clang-r407598b (12.0.2).Bug: 178106097Test: build.Change-Id: I1ce256547fc395a6b440950b4c88f7fe777c86ee
clang bug	 https://github.com/ariaboard-com/rockchip_rk3568_kernel/commit/df7c201e4f78a54afe669e9d4fe4db9e0a473a12	ANDROID: clang: update to 12.0.3Bug: 180726982Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Ibafe2f9bb93f9214de017a0b742e9b9e29aa9b06
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/39960420a12dd8c7a70202b9286d9b8075c3517b	Bug 1686114 - Lint fix on build-clang.py. a=lint-fix
clang bug	 https://github.com/SukeeratSG/kernel_xiaomi_sm8150/commit/c5eb4b6a50c408f7319661bc269d372848c89a96	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Panchajanya1999 <panchajanya@azure-dev.live>
clang bug	 https://github.com/CraftRom/Chidori-Kernel_onclite/commit/4a415eac0bdaff0c26dd01732780e9201978c74c	FROMLIST: Makefile: lld: tell clang to use lldThis is needed because clang doesn't select which linker to use based on$LD but rather -fuse-ld=lld. This is problematic especially forcc-ldoption, which checks for linker flag support via invoking thecompiler, rather than the linker.(am from https://lkml.org/lkml/2019/2/11/1947)Link: https://github.com/ClangBuiltLinux/linux/issues/342Suggested-by: Nathan Chancellor <natechancellor@gmail.com>Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>Tested-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Bug: 63740206Change-Id: I3edf2f0f6c0bac842bef22194bd48a993fc0e3c0Signed-off-by: Yousef Algadri <yusufgadrie@gmail.com>Signed-off-by: Raphiel Rollerscaperers <rapherion@raphielgang.org>Signed-off-by: Twisted <36546624+TwistedPrime@users.noreply.github.com>Signed-off-by: MadeOfGreat <ravenklawasd@gmail.com>
clang bug	 https://github.com/wkjarosz/hdrview/commit/ff17cd0016cef8923a1518524bcc4cc3a07a12a7	Develop (#42)* adding new image and duplicate image functionality (closes: #19)* drawing eyedropper previews + other eyedropper improvements* fixed a memory bug* increasing size of some icons* refactoring some code* snake casing* clang formatting the code
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/14a4c9030231684eeb4e7bd305efabb20c2feddc	Bug 1668304 - Bump mingw-clang builds to clang 11 r=tjr,dmajorDifferential Revision: https://phabricator.services.mozilla.com/D94676
clang bug	 https://github.com/termux/termux-packages/commit/4d4c0a0a698f3b1d5eac97eacaeb11839aae0668	Do not use `__builtin_setjmp`It has been revealed that Clang's `__builtin_setjmp` / `__builtin_longjmp` implementation can be buggy (https://bugs.llvm.org/show_bug.cgi?id=51729). We should instead use `_setjmp` / `_longjmp` provided by Bionic libc.
clang bug	 https://github.com/SukeeratSG/kernel_xiaomi_sm8150/commit/3a9ad97373a3c75b62c108eb917f68657d13e4db	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Panchajanya1999 <panchajanya@azure-dev.live>
clang bug	 https://github.com/posp-custom/build_soong/commit/5e3d82ebdbc791711f7d67af09f3e53b83ad5188	Switch to clang-r407598b (12.0.2).Bug: 178106097Test: build.Change-Id: I1ce256547fc395a6b440950b4c88f7fe777c86ee
clang bug	 https://github.com/12-fork/platform_frameworks_av/commit/92bd526f622762cfa8b80b1ee3ae7e41db2312ec	audio: use F_DUPFD_CLOEXEC to dup the MMAP bufferDuplicate the MMAP shared memory buffer FD using F_DUPFD_CLOEXEC.This was done to prevent clang-tidy errors.These bugs were listed for historical reference.Bug:  64311216Bug: 134381208This CL might fix this bug.Bug: 148097400Test: atest AAudioTestsChange-Id: I5e78109d03dc76ebaf9f82eafee3d39e5f763968
clang bug	 https://github.com/Colt-Enigma/platform_frameworks_av/commit/92bd526f622762cfa8b80b1ee3ae7e41db2312ec	audio: use F_DUPFD_CLOEXEC to dup the MMAP bufferDuplicate the MMAP shared memory buffer FD using F_DUPFD_CLOEXEC.This was done to prevent clang-tidy errors.These bugs were listed for historical reference.Bug:  64311216Bug: 134381208This CL might fix this bug.Bug: 148097400Test: atest AAudioTestsChange-Id: I5e78109d03dc76ebaf9f82eafee3d39e5f763968
clang bug	 https://github.com/aex-tmp/platform_bionic/commit/247892e0dc1802eb5c5e59c74256fd7b60f7ad19	Do not run clang-tidy with fortify tests.* When clang-tidy is called, its checks  gave different diagnostic messages.Bug: 178534530Test: mm with WITH_TIDY=1Change-Id: I5eec8239d5531f88caefca3c4032f9764deb9e09
clang bug	 https://github.com/aex-tmp/platform_bionic/commit/1169bf9cf30622a88c511fb26064be5115ccb1c2	Fix versioner for clang update.Bug: 171348143Test: build versioner.Change-Id: I7432bdba6b021fcfa22207a186978e0ca336c4cb
clang bug	 https://github.com/windbell-project/android_kernel_xiaomi_msm8953/commit/e0e106b33eb302d6195d3f16367c06b57dacd116	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Albert I <kras@raphielgang.org>
clang bug	 https://github.com/vsrinivas/fuchsia/commit/cce81546a387ef2b7791172adbd5a1e5bf888b63	[rbe][rust] Reduce set of clang dir uploads.We only need:  * the clang++ linker driver  * the lld linker  * libc++  * run-time librariesBug: 86292Change-Id: Ic243b8cee43776e58b5d99901bd41b371e73173cReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/593291Reviewed-by: Jay Zhuang <jayzhuang@google.com>Commit-Queue: David Fang <fangism@google.com>
clang bug	 https://github.com/tarun14110/browser_secure_webauthn/commit/fd6f963069c393c244a89880d362b9fa3c285e03	Bug 1729610 - Remove taskcluster/scripts/misc/source-test-clang-setup-macos64.sh. r=firefox-build-system-reviewers,mhentges DONTBUILDIt isn't used anymore after bug 1725171.Differential Revision: https://phabricator.services.mozilla.com/D124874
clang bug	 https://github.com/mozilla/gecko-dev/commit/856ee10cbae7426e69adbfe375265c7c1d3e1b58	Bug 1719226 - Fix clang bustage r=bustage-fix. CLOSED TREE
clang bug	 https://github.com/xswz8015/webrtc/commit/7abf45fe2c72067956a2f44a4b43106cad52c5e9	LSC: Apply clang-tidy's modernize-use-bool-literalsThe check finds implicit conversions of integer literals to bools:  bool b1 = 1;  bool b2 = static_cast<bool>(1);and transforms them to:  bool b1 = true;  bool b2 = true;Bug: chromium:1290142Change-Id: I6819a0bd2ca84ecadae08ed9389c17d2652589f4Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/248166Auto-Submit: Anton Bikineev <bikineev@chromium.org>Reviewed-by: Magnus Flodman <mflodman@webrtc.org>Commit-Queue: Anton Bikineev <bikineev@chromium.org>Cr-Commit-Position: refs/heads/main@{#35778}
clang bug	 https://github.com/windbell-project/android_kernel_xiaomi_msm8953/commit/5e60905247f168a9a668539d09194c4018046aa4	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcde
clang bug	 https://github.com/riscv-android-src/platform-build-soong/commit/e87329c4c5a089b6b6281337684d2c9b9187785b	Switch to clang r428724 13.0.1.Bug: http://b/190099451Test: build and boot devicesChange-Id: I94ab1f2dc194ffcec5681708b558af26ced30aae
clang bug	 https://github.com/mozilla/gecko-dev/commit/1faa3d40cf36ee96c104f2cd50181439de6e64d3	Bug 1519636 - Reformat recent changes to the Google coding style. r=firefox-build-system-reviewers,mhentges,sylvestreReformat with clang-format version 12.0.1 (taskcluster-FYV2l5wGTseBAhiqf8cxfQ)Differential Revision: https://phabricator.services.mozilla.com/D131114
clang bug	 https://github.com/aosp-riscv/toolchain_android_rust/commit/e0d7a13f0cfebe5557e7cef50b177e84d2bc2631	Update clang to clang-r428724.Also add -L option to search for libc++.so. Because clangno long searches <bin_dir>/../lib64 by default after patch775a294820caefdce4e60603eaac0a071dd72765"[Driver] Gnu.cpp: remove unneeded -L detection for libc++".Bug: 190099451Test: build.pyChange-Id: I0cb00557350b5dbd64e18ec32021d80821a8965c
clang bug	 https://github.com/AMReX-Combustion/PeleMP/commit/aae693cfe44949906a4ee943f9349340d65e2074	Fixed bugs in flash boiling model, ran clang formatting
clang bug	 https://github.com/albertgoncalves/cproto/commit/4da2b124ab1f03faa1d6d33d838cea23404e77d1	clang found a nasty bug!
clang bug	 https://github.com/triSYCL/sycl/commit/e124062bf3874e1ce7ddad407b35e95ec3d3ac13	Fix bad doxygen result for class clang::ento::CallEvent and its derived classesSummary: Fix bug https://bugs.llvm.org/show_bug.cgi?id=44753. Thispatch is a workaround of a Doxygen bug, so that it can correctlygenerate documents for class clang::ento::CallEvent and its derivedclasses.Differential Revision: https://reviews.llvm.org/D82356
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/d179837cf29c7d535b59dca7e5ea9ebcb0a2ca77	Bug 1747533 - Update clang pass manager flags handling. r=firefox-build-system-reviewers,andi- Avoid the flag selection silently not enabling the new pass manager  when --enable-new-pass-manager is passed explicitly.- Avoid adding the -fexperimental-new-pass-manager to clang >= 13, which  has it enabled by default. Likewise for the linker flags.- Remove the force-enable of the new pass manager with clang < 12 on  automation, since we're using version 13 anyways.- Account for the fact that both lld and ld64 can pass the  -import-hot-multiplier flag to the LTO plugin on mac builds, which  effectively will set it for the first time on mac, and might improve  performance.Differential Revision: https://phabricator.services.mozilla.com/D134860
clang bug	 https://github.com/vsrinivas/fuchsia/commit/0d0e24480004d4adf34b8f382b9a36b88b347ae5	[clang] Fix std::uniform_int_distribution undefined behavior.https://reviews.llvm.org/D114920 added a static_assert thatuniform_int_distribution<T> isn't used with integral types smaller thanshort. This was already undefined behavior, but at HEAD libc++ it's acompile error. This change uses 16-bit types instead and downcasts to8-bit types.Bug: 94599Change-Id: I623e60ea76aa0492f2082e605992e68133be7d6dReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/653856Reviewed-by: Mark Schott <schottm@google.com>Commit-Queue: Daniel Thornburgh <dthorn@google.com>
clang bug	 https://github.com/vsrinivas/fuchsia/commit/466cb45ffc82b4d28afcf152612bde058437c17d	[clang] Fix std::uniform_int_distribution undefined behavior.https://reviews.llvm.org/D114920 added a static_assert thatuniform_int_distribution<T> isn't used with integral types smaller thanshort. This was already undefined behavior, but at HEAD libc++ it's acompile error. This change uses 16-bit types instead and downcasts to8-bit types.Bug: 94599Change-Id: I92924cd4865ed40424b665082f8969d6c8f16d6eReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/653858Reviewed-by: Ian McKellar <ianloic@google.com>Commit-Queue: Daniel Thornburgh <dthorn@google.com>
clang bug	 https://github.com/riscv-android-src/toolchain-android_rust/commit/e0d7a13f0cfebe5557e7cef50b177e84d2bc2631	Update clang to clang-r428724.Also add -L option to search for libc++.so. Because clangno long searches <bin_dir>/../lib64 by default after patch775a294820caefdce4e60603eaac0a071dd72765"[Driver] Gnu.cpp: remove unneeded -L detection for libc++".Bug: 190099451Test: build.pyChange-Id: I0cb00557350b5dbd64e18ec32021d80821a8965c
clang bug	 https://github.com/delphix/linux-kernel-azure/commit/f6ce2026189b0826983c41c4d836b6cdefd75e7a	net: ethernet: mtk_eth_soc: fix error checking in mtk_mac_config()BugLink: https://bugs.launchpad.net/bugs/1960566commit 214b3369ab9b0a6f28d6c970220c209417edbc65 upstream.Clang static analysis reports this problemmtk_eth_soc.c:394:7: warning: Branch condition evaluates  to a garbage value                if (err)                    ^~~err is not initialized and only conditionally set.So intitialize err.Fixes: 7e538372694b ("net: ethernet: mediatek: Re-add support SGMII")Signed-off-by: Tom Rix <trix@redhat.com>Signed-off-by: David S. Miller <davem@davemloft.net>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>Signed-off-by: Kamal Mostafa <kamal@canonical.com>Signed-off-by: Stefan Bader <stefan.bader@canonical.com>
clang bug	 https://github.com/fsociety-tribute/barbet/commit/0e48bdae05b5a6b1b813ae942de0bc0e1e4159d0	UPSTREAM: crypto: blake2b - Fix clang optimization for ARMv7-MWhen building for ARMv7-M, clang-9 or higher tries to unroll some loops,which ends up confusing the register allocator to the point of generatingrather bad code and using more than the warning limit for stack frames:warning: stack frame size of 1200 bytes in function 'blake2b_compress' [-Wframe-larger-than=]Forcing it to not unroll the final loop avoids this problem.Fixes: 91d689337fe8 ("crypto: blake2b - add blake2b generic implementation")Signed-off-by: Arnd Bergmann <arnd@arndb.de>Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>(cherry picked from commit 0c0408e86dbe8f44d4b27bf42130e8ac905361d6)Bug: 178411248Change-Id: I71ee6df844bdbace9f06342a61322c7494533564Signed-off-by: Eric Biggers <ebiggers@google.com>
clang bug	 https://github.com/linuxppc/linux-ci/commit/401af75c4975759d45c3627a7588351b4ab3e2a8	Merge branch 'Fixes for bad PTR_TO_BTF_ID offset'Kumar Kartikeya Dwivedi says:====================This set fixes a bug related to bad var_off being permitted for kfunc call incase of PTR_TO_BTF_ID, consolidates offset checks for all register types allowedas helper or kfunc arguments into a common shared helper, and introduces acouple of other checks to harden the kfunc release logic and prevent futurebugs. Some selftests are also included that fail in absence of these fixes,serving as demonstration of the issues being fixed.Changelog:----------v3 -> v4:v3: https://lore.kernel.org/bpf/20220304000508.2904128-1-memxor@gmail.com * Update commit message for __diag patch to say clang instead of LLVM (Nathan) * Address nits for check_func_arg_reg_off (Martin) * Add comment for fixed_off_ok case, remove is_kfunc check (Martin)v2 -> v3:v2: https://lore.kernel.org/bpf/20220303045029.2645297-1-memxor@gmail.com * Add my SoB to __diag for clang patch (Nathan)v1 -> v2:v1: https://lore.kernel.org/bpf/20220301065745.1634848-1-memxor@gmail.com * Put reg->off check for release kfunc inside check_func_arg_reg_off,   make the check a bit more readable * Squash verifier selftests errstr update into patch 3 for bisect (Alexei) * Include fix from Nathan for clang warning about missing prototypes * Add unified __diag_ingore_all that works for both GCC/LLVM (Alexei)Older discussion:Link: https://lore.kernel.org/bpf/20220219113744.1852259-1-memxor@gmail.comKumar Kartikeya Dwivedi (7):  bpf: Add check_func_arg_reg_off function  bpf: Fix PTR_TO_BTF_ID var_off check  bpf: Disallow negative offset in check_ptr_off_reg  bpf: Harden register offset checks for release helpers and kfuncs  compiler_types.h: Add unified __diag_ignore_all for GCC/LLVM  bpf: Replace __diag_ignore with unified __diag_ignore_all  selftests/bpf: Add tests for kfunc register offset checks====================Acked-by: Martin KaFai Lau <kafai@fb.com>Signed-off-by: Alexei Starovoitov <ast@kernel.org>
clang bug	 https://github.com/Oneflow-Inc/oneflow/commit/494e671aa12df4da27d10d9728f2b54dde701d05	add clang tidy target (#5957)* add clang tidy target* fix a bug* refine* refine* reformatCo-authored-by: oneflow-ci-bot <69100618+oneflow-ci-bot@users.noreply.github.com>
clang bug	 https://github.com/vsrinivas/fuchsia/commit/9a37749d136d0a42689aad655361658dac9f4be2	[clang] Fix std::uniform_int_distribution undefined behavior.https://reviews.llvm.org/D114920 added a static_assert thatuniform_int_distribution<T> isn't used with integral types smaller thanshort. This was already undefined behavior, but at HEAD libc++ it's acompile error. This change uses 16-bit types instead and downcasts to8-bit types.Bug: 94599Change-Id: I897e5880a7dd79ee6f7a9f3e868833db7dc8cdc2Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/653860Reviewed-by: John Grossman <johngro@google.com>Commit-Queue: Daniel Thornburgh <dthorn@google.com>
clang bug	 https://github.com/vsrinivas/fuchsia/commit/479764ec86f551ccf0749a644c76ee4289860561	[clang] Fix std::uniform_int_distribution undefined behavior.https://reviews.llvm.org/D114920 added a static_assert thatuniform_int_distribution<T> isn't used with integral types smaller thanshort. This was already undefined behavior, but at HEAD libc++ it's acompile error. This change uses 16-bit types instead and downcasts to8-bit types.Bug: 94599Change-Id: I90cd7d6a441f92617df05f2a1fe152c4f4ee55b4Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/653857Reviewed-by: Gianfranco Valentino <gevalentino@google.com>Commit-Queue: Daniel Thornburgh <dthorn@google.com>
clang bug	 https://github.com/vsrinivas/fuchsia/commit/376710427349603721550fead5e5cb03ba0abd28	[clang] Fix std::uniform_int_distribution undefined behavior.https://reviews.llvm.org/D114920 added a static_assert thatuniform_int_distribution<T> isn't used with integral types smaller thanshort. This was already undefined behavior, but at HEAD libc++ it's acompile error. This change uses 16-bit types instead and downcasts to8-bit types.Bug: 94599Change-Id: I77e0cd08e2924797cea1a14605be5113f7eaea20Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/653859Reviewed-by: Yilong Li <liyl@google.com>Commit-Queue: Daniel Thornburgh <dthorn@google.com>
clang bug	 https://github.com/vsrinivas/fuchsia/commit/0aab23ffd7c0c0bec02dcbee0f990682edf48b08	[clang] Fix std::uniform_int_distribution undefined behavior.https://reviews.llvm.org/D114920 added a static_assert thatuniform_int_distribution<T> isn't used with integral types smaller thanshort.  This was already undefined behavior, but at HEAD libc++ it's acompile error.  This change uses 16-bit types instead and downcasts to8-bit types.Bug: 94599Change-Id: I901afe9887a5a00c0e52d3b8af2e5720b2138555Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/653854Reviewed-by: Bruno Dal Bo <brunodalbo@google.com>Commit-Queue: Daniel Thornburgh <dthorn@google.com>
clang bug	 https://github.com/vsrinivas/fuchsia/commit/e1c0c88c8e9ecd0f0952408fc51c0e672ec2f22e	[clang] Fix std::uniform_int_distribution undefined behavior.https://reviews.llvm.org/D114920 added a static_assert thatuniform_int_distribution<T> isn't used with integral types smaller thanshort. This was already undefined behavior, but at HEAD libc++ it's acompile error. This change uses 16-bit types instead and downcasts to8-bit types.Bug: 94599Change-Id: I99b5d20127088cdbbb52b0f6fdc9321359281b0bReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/653855Reviewed-by: Bruno Dal Bo <brunodalbo@google.com>Reviewed-by: Suraj Malhotra <surajmalhotra@google.com>Commit-Queue: Daniel Thornburgh <dthorn@google.com>
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/cfaeef1efd26f5692e4e18eb8fe12595d93471ef	Bug 1730078 - Build clang stage 1 with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125162
clang bug	 https://github.com/FascodeNet/Flast_gecko_2/commit/cfaeef1efd26f5692e4e18eb8fe12595d93471ef	Bug 1730078 - Build clang stage 1 with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125162
clang bug	 https://github.com/legtemp/android_hardware_legion_interfaces/commit/04688cf72e1430ea4f9195bd4b9680c248553c59	interfaces: camera: fix two potential null pointer usesCaught by the static analyzer:hardware/interfaces/camera/device/1.0/default/CameraDevice.cpp:401:9:warning: Called C++ object pointer is null[clang-analyzer-core.CallAndMessage]Bug: NoneTest: TreeHuggerChange-Id: Ia6d0a2ab4b4d04cfc171629c7dbf60ead181625dSigned-off-by: rajkale99 <kaleraj.rk@gmail.com>
clang bug	 https://github.com/ahmadkybora/php-src/commit/26d28c3b429eedd655925f16369ba1f3237143c4	Fix bug #75941: Fix compile failure on Solaris with clangCloses GH-7525.
clang bug	 https://github.com/kmvishwanath/aosp_system_bt/commit/4d74fd63dfa394f40c7152dfd3b60a1f391d9f4d	csis: Clang-format fixesBug: 150670922Tag: #featureSponsor: jpawlowski@Test: compileChange-Id: I29f5faa140c987b7f78c6ff18bda1d47998c96a7
clang bug	 https://github.com/vijaymalav564/kernel_realme_sdm660/commit/dec5c9b3563f9a725a1c35c52726b55432237ba9	ANDROID: kbuild: allow lld to be used with CONFIG_LTO_CLANGBug: 63740206Bug: 117299373Change-Id: Ic9c8ca03fd082a8404905718f5312a3f497efa5aSigned-off-by: Sami Tolvanen <samitolvanen@google.com>
clang bug	 https://github.com/kpua/bitcoin/commit/205877e55f7a5cab1f64f98d5305520744be06d2	Merge bitcoin/bitcoin#23546: scripted-diff: Use clang-tidy syntax for C++ named arguments (tests only)fa00447442f22a24e5ca5fc538d0bf7bef575544 scripted-diff: Use clang-tidy syntax for C++ named arguments (MarcoFalke)fae13c39896898aef2281433af143c22d8b3a3b4 doc: Use clang-tidy comments in crypto_tests (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  To allow them being checked by `clang-tidy`, use a format it can understand.ACKs for top commit:  shaavan:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  rajarshimaitra:    ACK https://github.com/bitcoin/bitcoin/pull/23546/commits/fa00447442f22a24e5ca5fc538d0bf7bef575544  jonatack:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  fanquake:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544Tree-SHA512: 4d23a8363da81dfea21a4cd8516ab5e0dc70119e4d503f3f240f38573218b2c2e84083b97e956c62942d78b2f17490f8b3b2e8077d257644fda1d901e2b80507
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/0ad8e57ac373e3d88bb208a0d71a3b05ffc3cdfc	Bug 1744863 - Remove uses of CLANG_CL where it was opposed to MSVC. r=firefox-build-system-reviewers,nalexanderAs MSVC is not supported anymore, checking for clang-cl vs. MSVC is notuseful.Differential Revision: https://phabricator.services.mozilla.com/D133157
clang bug	 https://github.com/pix106/kernel_xiaomi_sdm660_aeon-4.19/commit/e47d3f132e8fd93d4d825d9c99c8ec57581107b4	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c6704Signed-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>Signed-off-by: clarencelol <clarencekuiek@icloud.com>
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/99f2a96c745386b309fa56d5102e7a788c2c76ba	Bug 1755415 - Encode the target in the compiler-rt artifact/directory. r=firefox-build-system-reviewers,mhentgesThis simplifies the setup for cross clang repacks.Also use `ninja install` to get all the relevant things in the artifact.Differential Revision: https://phabricator.services.mozilla.com/D138745
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/a90ac645876ea697b61e1697524e168ee59b290a	Bug 1743708 - Fix clang-plugin tests to pass with clang-trunk. r=andiThis upstream change[1] changed the error messages when arrays areinvolved, so we adjust the expected-errors/expected-notes to account forthat.1. https://github.com/llvm/llvm-project/commit/aee49255074fd4ef38d97e6e70cbfbf2f9fd0fa7Differential Revision: https://phabricator.services.mozilla.com/D132533
clang bug	 https://github.com/lock3/cppx/commit/e124062bf3874e1ce7ddad407b35e95ec3d3ac13	Fix bad doxygen result for class clang::ento::CallEvent and its derived classesSummary: Fix bug https://bugs.llvm.org/show_bug.cgi?id=44753. Thispatch is a workaround of a Doxygen bug, so that it can correctlygenerate documents for class clang::ento::CallEvent and its derivedclasses.Differential Revision: https://reviews.llvm.org/D82356
clang bug	 https://github.com/bolucat/Fuchsia/commit/d149b6140a96a035a206ad90241b99ec3eb59ee2	[build] Trim visibility for VLA bounds UBSan checkWe disabled the VLA bounds checking for UBSan globally to make iteasier to roll clang. Now that we rolled, we can limit the number oftargets we disable this UBSan check for then fix each instanceindividually.Bug: 93804Change-Id: I8b7368415680419500a933b5cb70f8995ef2b29dReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/657594Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Leonard Chan <leonardchan@google.com>
clang bug	 https://github.com/DozNaka/KawaKernel-A217X/commit/d33409b9ac711f448069d3bdaa5edf7c9115a6e5	powerpc/barrier: Avoid collision with clang's __lwsync macrocommit 015d98149b326e0f1f02e44413112ca8b4330543 upstream.A change in clang 13 results in the __lwsync macro being defined as__builtin_ppc_lwsync, which emits 'lwsync' or 'msync' depending on whatthe target supports. This breaks the build because of -Werror inarch/powerpc, along with thousands of warnings: In file included from arch/powerpc/kernel/pmc.c:12: In file included from include/linux/bug.h:5: In file included from arch/powerpc/include/asm/bug.h:109: In file included from include/asm-generic/bug.h:20: In file included from include/linux/kernel.h:12: In file included from include/linux/bitops.h:32: In file included from arch/powerpc/include/asm/bitops.h:62: arch/powerpc/include/asm/barrier.h:49:9: error: '__lwsync' macro redefined [-Werror,-Wmacro-redefined] #define __lwsync()      __asm__ __volatile__ (stringify_in_c(LWSYNC) : : :"memory")        ^ <built-in>:308:9: note: previous definition is here #define __lwsync __builtin_ppc_lwsync        ^ 1 error generated.Undefine this macro so that the runtime patching introduced bycommit 2d1b2027626d ("powerpc: Fixup lwsync at runtime") continues towork properly with clang and the build no longer breaks.Cc: stable@vger.kernel.orgSigned-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://github.com/ClangBuiltLinux/linux/issues/1386Link: https://github.com/llvm/llvm-project/commit/62b5df7fe2b3fda1772befeda15598fbef96a614Link: https://lore.kernel.org/r/20210528182752.1852002-1-nathan@kernel.orgSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
clang bug	 https://github.com/andyholst/linux-stable-fork/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/aaf5a314c5790325fcbff1d2ebe624dc2fe2bf9d	Bug 1755415 - Encode the target in the compiler-rt artifact/directory. r=firefox-build-system-reviewers,mhentgesThis simplifies the setup for cross clang repacks.Also use `ninja install` to get all the relevant things in the artifact.Differential Revision: https://phabricator.services.mozilla.com/D138745
clang bug	 https://github.com/upmanager/react-native-firebase-fetch/commit/e99f8df87f530d6f153a7fc657c411bb70b8a1f7	build(deps): minor/patch version bumpsclang-format wanted to do slight reformattings on FIRMessagingDelegate,otherwise this has no affect anything other than to ingest bug fixes
clang bug	 https://github.com/xaya/xaya/commit/205877e55f7a5cab1f64f98d5305520744be06d2	Merge bitcoin/bitcoin#23546: scripted-diff: Use clang-tidy syntax for C++ named arguments (tests only)fa00447442f22a24e5ca5fc538d0bf7bef575544 scripted-diff: Use clang-tidy syntax for C++ named arguments (MarcoFalke)fae13c39896898aef2281433af143c22d8b3a3b4 doc: Use clang-tidy comments in crypto_tests (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  To allow them being checked by `clang-tidy`, use a format it can understand.ACKs for top commit:  shaavan:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  rajarshimaitra:    ACK https://github.com/bitcoin/bitcoin/pull/23546/commits/fa00447442f22a24e5ca5fc538d0bf7bef575544  jonatack:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  fanquake:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544Tree-SHA512: 4d23a8363da81dfea21a4cd8516ab5e0dc70119e4d503f3f240f38573218b2c2e84083b97e956c62942d78b2f17490f8b3b2e8077d257644fda1d901e2b80507
clang bug	 https://github.com/bgk1993/dart-sdk/commit/435ebeb5a717dfeeba26b3307c220ace2f62d860	Fix MSVC build- refactor designated initializers as they are c++20- unwrap #if/#endif in macro arguments- remove taking pointer on purely intrinsic function (setjmp_)- use DART_WARN_UNUSED_RESULT which is msvc/clang friendly- provide StringRAII copying constructorBug: https://github.com/dart-lang/sdk/issues/48544TEST=ci,msvc buildChange-Id: I1049589c96dc0cdf49e1d31d320b6804bf6e4558Reviewed-on: https://dart-review.googlesource.com/c/sdk/+/237929Reviewed-by: Ryan Macnak <rmacnak@google.com>Commit-Queue: Alexander Aprelev <aam@google.com>
clang bug	 https://github.com/Kyuofox/android-mainline/commit/5e93939f6d8a74efeb0db65be31c9ebbf7920647	ANDROID: Clang LTO: Only set -fvisibility=hidden for x86Otherwise this upsets ABI monitoring as symbols are hidden and as suchdo not get considered for ABI analysis.Bug: 182194803Bug: 203411090Fixes: dc5723b02e52 ("kbuild: add support for Clang LTO")Signed-off-by: Giuliano Procida <gprocida@google.com>Signed-off-by: Matthias Maennich <maennich@google.com>Change-Id: If6011ad739ecccd23a92cfa2f9fd43084f9a0b4f
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/434ed284454a2a5bf941c4bd6fddbc445a3dec13	Bug 1736502 - Work around clang trunk changes that break our clang-trunk build. r=andiShort of solving this by fully embracing the monorepo build and removingthe projects/ workarounds (which will also require a compat more witholder clang versions we still build with the same script), we can solvethe bustage with a small hack.Differential Revision: https://phabricator.services.mozilla.com/D131458
clang bug	 https://github.com/pro-bitcoin/pro-bitcoin/commit/205877e55f7a5cab1f64f98d5305520744be06d2	Merge bitcoin/bitcoin#23546: scripted-diff: Use clang-tidy syntax for C++ named arguments (tests only)fa00447442f22a24e5ca5fc538d0bf7bef575544 scripted-diff: Use clang-tidy syntax for C++ named arguments (MarcoFalke)fae13c39896898aef2281433af143c22d8b3a3b4 doc: Use clang-tidy comments in crypto_tests (MarcoFalke)Pull request description:  Incorrect named args are source of bugs, like #22979.  To allow them being checked by `clang-tidy`, use a format it can understand.ACKs for top commit:  shaavan:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  rajarshimaitra:    ACK https://github.com/bitcoin/bitcoin/pull/23546/commits/fa00447442f22a24e5ca5fc538d0bf7bef575544  jonatack:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544  fanquake:    ACK fa00447442f22a24e5ca5fc538d0bf7bef575544Tree-SHA512: 4d23a8363da81dfea21a4cd8516ab5e0dc70119e4d503f3f240f38573218b2c2e84083b97e956c62942d78b2f17490f8b3b2e8077d257644fda1d901e2b80507
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/1b1a72c742ebf655c66448762846fe0a7e30cb79	Bug 1735251 - Apply clang-format to nsXMLContentSerializer.cpp. r=jwattDifferential Revision: https://phabricator.services.mozilla.com/D128152
clang bug	 https://github.com/starfive-tech/linux/commit/281d0c962752fb40866dd8d4cade68656f34bd1f	fortify: Add Clang supportEnable FORTIFY_SOURCE support for Clang:Use the new __pass_object_size and __overloadable attributes so thatClang will have appropriate visibility into argument sizes such that__builtin_object_size(p, 1) will behave correctly. Additional detailsavailable here:    https://github.com/llvm/llvm-project/issues/53516    https://github.com/ClangBuiltLinux/linux/issues/1401A bug with __builtin_constant_p() of globally defined variables wasfixed in Clang 13 (and backported to 12.0.1), so FORTIFY support mustdepend on that version or later. Additional details here:    https://bugs.llvm.org/show_bug.cgi?id=41459    commit a52f8a59aef4 ("fortify: Explicitly disable Clang support")A bug with Clang's -mregparm=3 and -m32 makes some builtins unusable,so removing -ffreestanding (to gain the needed libcall optimizationswith Clang) cannot be done. Without the libcall optimizations, Clangcannot provide appropriate FORTIFY coverage, so it must be disabledfor CONFIG_X86_32. Additional details here;    https://github.com/llvm/llvm-project/issues/53645Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: George Burgess IV <gbiv@google.com>Cc: llvm@lists.linux.devSigned-off-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lore.kernel.org/r/20220208225350.1331628-9-keescook@chromium.org
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/cb50a5444f06f52cb93fd393974f48e5186ca7ad	Bug 1747756 - Move Windows system libraries from LIBS to moz.build. r=firefox-build-system-reviewers,mhentgesWhile mingw builds don't require user32 and advapi32 explicitly, it doesn'thurt for them to be there (and they're required for clang-cl build).Likewise, while clang-builds don't require uuid and userenv explicitlybecause they're pulled in via #pragmas in the source code, mingw doesn'tsupport those #pragmas and needs them explicitly, which doesn't hurt theclang-cl builds.Differential Revision: https://phabricator.services.mozilla.com/D134737
clang bug	 https://github.com/chromium/chromium/commit/1183b14db8bd08d731ff3433c436887de00be3aa	Fix typo in non-clang GSL_OWNER macroGCC build fails because GSL_OWNER is not defined (GSL_OWNER_ wasthe one actually declared).Bug: 819294Change-Id: I1c3d17cb1c08b9bc0e8a888452da9868c308ddb5Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3472080Reviewed-by: Daniel Cheng <dcheng@chromium.org>Commit-Queue: Daniel Cheng <dcheng@chromium.org>Cr-Commit-Position: refs/heads/main@{#972974}
clang bug	 https://github.com/linux-mailinglist-archives/dri-devel.lists.freedesktop.org.0/commit/501ab92a35ff3ae9b6eb2d854adb74f43bdf34fe	[PATCH v2 63/63] fortify: Work around Clang inlining bugs
clang bug	 https://github.com/gentoouser832/gentoo/commit/3ef8aa57a12924e455b8c9026f5fd9736f1f0914	profiles/base: unmask USE=clang for >=dev-util/perf-5.15Bug: https://bugs.gentoo.org/735752Signed-off-by: Guilherme Amadio <amadio@gentoo.org>
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/b18b2b21a01434736d4865ebc5e09b48e26f7aef	Bug 1690973 - Build the clang android cross toolchain as a repack of clang + compiler-rt. r=firefox-build-system-reviewers,andiDifferential Revision: https://phabricator.services.mozilla.com/D127933
clang bug	 https://github.com/Tarsnap/tarsnap-gui/commit/ae4e48eb04515d1953704e5ceef5de87f08b40ea	Fix agreement between func declaration and definitionI added this bug in    2020-04-06 DirInfoTask: use a single function for size and count    37db563d4781e81b43330104e6ad0ec2506811b3In a development version, I tried to have a `const QDir dir`.  Thatdidn't work, but I forgot to remove the `const` from the declarationbefore committing the change.Reported by:
clang bug	 https://github.com/torvalds/linux/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/9ae66d04b2c84991c90fe23700a19a39e3367331	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/omar-polo/telescope/commit/2ef8fcaedd93b1a56d0940ddd58a43a6d6c321f0	set_scroll_position: always set current_lineThere's a small chance we may end up finding the topline but not thecurrent line if a page content is abruptedly changed.While here also drop `curfound = 1': it's a dead assignment since itreturns in that conditions.Bug found while reading the output of clang' scan-build, but not thanksto clang.  scan-build complained about the `curfound' variable, and byre-reading the code I spotted the missing case.
clang bug	 https://github.com/sffc/fuchsia-clone/commit/40fa7d009703659f2b77677c92d97ab5fb51010c	[build] Switch back to the Clang 13.0 ABIWe're seeing test failures in wlan-hw-sim-test package tests. Force theClang 13.0 ABI until we address these failures.Bug: 92521Change-Id: I1d0b2214a14061eac07e40a9aa9076ebebf0b1c2Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/641562Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Petr Hosek <phosek@google.com>Fuchsia-Auto-Submit: Petr Hosek <phosek@google.com>
clang bug	 https://github.com/Risti699/Karamel/commit/081de2970ff1608149567f87d7d363041d8282a9	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: TheSync <repo-sync@outlook.com>Signed-off-by: risti699 <wahhap10@gmail.com>
clang bug	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/0aadf97f855947f9ba79b54c857e783e1187e10c	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/a79aa66bb3628eb3509fb91276fb6ff0e86f2d7e	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/15f93418bc34e9bea8c8e893eb07945d6491e612	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/kernel-patches/bpf-rc/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/youling257/android-mainline/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/jeffmerkey/linux/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/LibertyGlobal/flutter-tvos-skia/commit/1a53e29173b60bbf1ad6933c5493b4cec4ff4d35	Roll ANGLE from b9f2d9cc1455 to 001221f0efe2 (2 revisions)https://chromium.googlesource.com/angle/angle.git/+log/b9f2d9cc1455..001221f0efe22021-12-18 kbr@chromium.org Metal: upstream fix from WebKit for texture leak.2021-12-17 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 3f6c88f5581a to 14ca75d254a5 (401 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC djsollen@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: djsollen@google.comChange-Id: I3cf107757f96065d599c07244fd34bdd7c430ea7Reviewed-on: https://skia-review.googlesource.com/c/skia/+/486578Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/boostorg/filesystem/commit/43f213fbd8d98f821a97b3079c191ab06081c781	Removed unified initializers for global initializer objects.This was supposed to be a workaround for clang bug that required aninitializer for global constant objects without a user-defined constructor,but the initializer classes do have user-defined constructors, so thisworkaround should not be needed. Removing it simplifies code a bit.
clang bug	 https://github.com/Hasiergo/Lenovo_TB-X606F_kernel/commit/6d464a80f7c17d6bd0283bbe5fcd2f12e924729d	powerpc/boot: Ensure _zimage_start is a weak symbol[ Upstream commit ee9d21b3b3583712029a0db65a4b7c081d08d3b3 ]When building with clang crt0's _zimage_start is not marked weak, whichbreaks the build when linking the kernel image: $ objdump -t arch/powerpc/boot/crt0.o |grep _zimage_start$ 0000000000000058 g       .text  0000000000000000 _zimage_start ld: arch/powerpc/boot/wrapper.a(crt0.o): in function '_zimage_start': (.text+0x58): multiple definition of '_zimage_start'; arch/powerpc/boot/pseries-head.o:(.text+0x0): first defined hereClang requires the .weak directive to appear after the symbol isdeclared. The binutils manual says: This directive sets the weak attribute on the comma separated list of symbol names. If the symbols do not already exist, they will be created.So it appears this is different with clang. The only reference I couldsee for this was an OpenBSD mailing list post[1].Changing it to be after the declaration fixes building with Clang, andstill works with GCC. $ objdump -t arch/powerpc/boot/crt0.o |grep _zimage_start$ 0000000000000058  w      .text
clang bug	 https://github.com/JarlPenguin/platform_build_soong/commit/062e934a9e01e26bb927a058cb9b9e4e205fd324	No clang-analyzer-* checks by default for generated filesTest: make with WITH_TIDY=1 CLANG_ANALYZER_CHECKS=1Bug: 198098397Change-Id: I386be0b4ee0fcc1785b2eeb8d1eb26ced68246d7
clang bug	 https://github.com/roytam1/palemoon27/commit/e0691cab03ebc663980fb48d44838096e34767ae	import changes from `dev' branch of rmottola/Arctic-Fox:- bug 1189692 - add telem for quic advertisements r=hurley (67ee0adad5)- Bug 1167809 - Add skip size check flag to cache for use with ServiceWorkers. r=mayhemer (adb2bd10ed)- Bug 1172697 - URLs containing  in the query or hash should not be handled as packaged app resources r=mcmanus (2f1f079ec3)- missing unimportant bits of Bug 1166133 (08ae4d5eaa)- Bug 1153869 - altsvc assert scheme is http or https r=hurley (fa8eb33a0f)- Bug 1153924 - do not use altsvc with proxy r=hurley (4ebcef7ee5)- Bug 1170837 - Add static GetPackageURI method to PackagedAppService r=honzab (3aa5ed3ba4)- Bug 1170837 - Provide way to update packaged apps r=honzab (bba59384e3)- Bug 1172885 - nsHttpChannel::BeginConnect must call AsyncAbort in the case of an error. r=valentin (fb1950c107)- Bug 1187159 - Pass principal and flags from the requesting channel to the packaged app channel r=honzab (e2eee864ed)- Bug 1181137 - Copy all headers from base channel to subresources in the packaged app. r=honzab (481f62182b)- Bug 1165263 - Part 3: Update mozprofile to support new moz_hosts schema, r=ahal (fab842eb19)- Bug 1091274 - Move leak log functions out of automationutils and into mozbase. r=jgriffin (58ed655e98)- bug 1139922 - Fix loading mozinfo in runreftest.py. r=dbaron (23c57102ed)- restore some missing bits (1027a2f538)- Bug 1084614 - Clean up orphan servers before starting mochitests or reftests; r=kmoir (2e77777b26)- Bug 1145364 - Use more portable ps command line for orphan cleanup; r=kmoir (c4f5964e79)- Bug 1181521 - Reformat runreftest.py according to PEP8 rules, r=Ms2ger,jmaher (48d74f5782)- re-apply 817007 (03c3a3e65c)- Bug 1165263 - Part 4: Update reftest runners to support new moz_hosts schema, r=dbaron (3635819ff3)- Bug 1182487 - Add test for opening the channel with nsIRequest::INHIBIT_CACHING flag set. r=michal (4de157a608)- Bug 1190502 - RESOLVE_DISABLE_IPV4 returns A records r=mcmanus (0fbbe65166)- Bug 1172701 - Make GetSubresourceURI normalize the path for packaged resources r=mcmanus (aa8baa740d)- Bug 1144806, Fix test_temporary_storage to not depend on database sizes. r=bent. (653584241a)- Bug 1153896 - dont setup altsvc for same host/port as origin r=hurley (7294b622d7)- Bug 1170066 - Fix -Wunreachable-code-return clang warning in netwerk/protocol/http/. r=mcmanus (b0775af93d)
clang bug	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/e9c798321a847ec01c9004f82d3d0989bdba6bd8	[PATCH v2 0/2] selftests: KVM: Address some bugs caught by clang
clang bug	 https://github.com/WangXu212606761/-/commit/46afdf998976aaa97b8a7e32e1a4ebd02f6e87cc	Add test and mitigation for clang 11 compiler bug (#27073)* Add test and mitigation for clang 11 compiler bug* document* document* Automated change: Fix sanity testsCo-authored-by: ctiller <ctiller@users.noreply.github.com>
clang bug	 https://github.com/vijaymalav564/kernel_realme_sdm660/commit/411c427d221ff96fd2c75291a84e8114444e1907	FROMLIST: BACKPORT: arm64: select ARCH_SUPPORTS_LTO_CLANGAllow CONFIG_LTO_CLANG to be enabled for the architecture.Bug: 62093296Bug: 67506682Change-Id: Id8e06b49877c4de2f15b51fc432d601b83b2c68f(am from https://patchwork.kernel.org/patch/10060333/)Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
clang bug	 https://github.com/vijaymalav564/kernel_realme_sdm660/commit/b6d4795165be9e587cbba5800bd0b2da9240cef8	FROMLIST: scripts/mod: disable LTO for empty.cWith CONFIG_LTO_CLANG, clang generates LLVM IR instead of ELF objectfiles. As empty.o is used for probing target properties, disable LTOfor it to produce an object file instead.Bug: 62093296Bug: 67506682Change-Id: I0c7ac7ee0134465cac4a8c3a9c7e8b6347076a2b(am from https://patchwork.kernel.org/patch/10060317/)Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
clang bug	 https://github.com/ibaoger/webrtc/commit/160b37b70f7d38f2f8ce7fb156f1859e50f9953b	Don't include clang package's libstdc++.so in sanitizer buildsLLVM binaries no longer need libstdc++.so as of https://crrev.com/c/3513603.Change-Id: I00c18e3d24167a8edda1b0a25a9ef00c0c2bde52Bug: chromium:1286289Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/255641Reviewed-by: Mirko Bonadei <mbonadei@webrtc.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Mirko Bonadei <mbonadei@webrtc.org>Cr-Commit-Position: refs/heads/main@{#36212}
clang bug	 https://github.com/aggresss/libwebrtc/commit/160b37b70f7d38f2f8ce7fb156f1859e50f9953b	Don't include clang package's libstdc++.so in sanitizer buildsLLVM binaries no longer need libstdc++.so as of https://crrev.com/c/3513603.Change-Id: I00c18e3d24167a8edda1b0a25a9ef00c0c2bde52Bug: chromium:1286289Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/255641Reviewed-by: Mirko Bonadei <mbonadei@webrtc.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Mirko Bonadei <mbonadei@webrtc.org>Cr-Commit-Position: refs/heads/main@{#36212}
clang bug	 https://github.com/mozilla/gecko-dev/commit/059f34b0dbba488f26c14ddbcd4e769daaf99589	Bug 1745115 - Apply the same patches as clang 13 to clang trunk. r=firefox-build-system-reviewers,andiWe're currently omitting a lot of them. This requires reverting a fewmore patches that were followups for llvmorg-13-init-8182-gc2297544c047.Differential Revision: https://phabricator.services.mozilla.com/D133318
clang bug	 https://github.com/php/php-src/commit/26d28c3b429eedd655925f16369ba1f3237143c4	Fix bug #75941: Fix compile failure on Solaris with clangCloses GH-7525.
clang bug	 https://github.com/vsrinivas/fuchsia/commit/d149b6140a96a035a206ad90241b99ec3eb59ee2	[build] Trim visibility for VLA bounds UBSan checkWe disabled the VLA bounds checking for UBSan globally to make iteasier to roll clang. Now that we rolled, we can limit the number oftargets we disable this UBSan check for then fix each instanceindividually.Bug: 93804Change-Id: I8b7368415680419500a933b5cb70f8995ef2b29dReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/657594Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Leonard Chan <leonardchan@google.com>
clang bug	 https://github.com/prati0100/linux-0day/commit/281d0c962752fb40866dd8d4cade68656f34bd1f	fortify: Add Clang supportEnable FORTIFY_SOURCE support for Clang:Use the new __pass_object_size and __overloadable attributes so thatClang will have appropriate visibility into argument sizes such that__builtin_object_size(p, 1) will behave correctly. Additional detailsavailable here:    https://github.com/llvm/llvm-project/issues/53516    https://github.com/ClangBuiltLinux/linux/issues/1401A bug with __builtin_constant_p() of globally defined variables wasfixed in Clang 13 (and backported to 12.0.1), so FORTIFY support mustdepend on that version or later. Additional details here:    https://bugs.llvm.org/show_bug.cgi?id=41459    commit a52f8a59aef4 ("fortify: Explicitly disable Clang support")A bug with Clang's -mregparm=3 and -m32 makes some builtins unusable,so removing -ffreestanding (to gain the needed libcall optimizationswith Clang) cannot be done. Without the libcall optimizations, Clangcannot provide appropriate FORTIFY coverage, so it must be disabledfor CONFIG_X86_32. Additional details here;    https://github.com/llvm/llvm-project/issues/53645Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: George Burgess IV <gbiv@google.com>Cc: llvm@lists.linux.devSigned-off-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lore.kernel.org/r/20220208225350.1331628-9-keescook@chromium.org
clang bug	 https://github.com/andyholst/linux-stable-fork/commit/281d0c962752fb40866dd8d4cade68656f34bd1f	fortify: Add Clang supportEnable FORTIFY_SOURCE support for Clang:Use the new __pass_object_size and __overloadable attributes so thatClang will have appropriate visibility into argument sizes such that__builtin_object_size(p, 1) will behave correctly. Additional detailsavailable here:    https://github.com/llvm/llvm-project/issues/53516    https://github.com/ClangBuiltLinux/linux/issues/1401A bug with __builtin_constant_p() of globally defined variables wasfixed in Clang 13 (and backported to 12.0.1), so FORTIFY support mustdepend on that version or later. Additional details here:    https://bugs.llvm.org/show_bug.cgi?id=41459    commit a52f8a59aef4 ("fortify: Explicitly disable Clang support")A bug with Clang's -mregparm=3 and -m32 makes some builtins unusable,so removing -ffreestanding (to gain the needed libcall optimizationswith Clang) cannot be done. Without the libcall optimizations, Clangcannot provide appropriate FORTIFY coverage, so it must be disabledfor CONFIG_X86_32. Additional details here;    https://github.com/llvm/llvm-project/issues/53645Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: George Burgess IV <gbiv@google.com>Cc: llvm@lists.linux.devSigned-off-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lore.kernel.org/r/20220208225350.1331628-9-keescook@chromium.org
clang bug	 https://github.com/simd-everywhere/simde-no-tests/commit/82e93303c0a84cbd3c29e56f4f6d470fb630ed60	gfni: work around clang bug #50932
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/3b96b9af5991b2e3dac1ac467af4ec956774bb40	Bug 1738300 - Apply clang upstream patch fixing miscompilation. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D130428
clang bug	 https://github.com/FascodeNet/Flast_gecko_2/commit/aaacb53186d8412c54c0d84923051aa217b94d2c	Bug 1738300 - Apply clang upstream patch fixing miscompilation. r=firefox-build-system-reviewers,mhentges a=pascalcDifferential Revision: https://phabricator.services.mozilla.com/D130428
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/bbce1490f92c1b9744963c0e8d831ada42b154ca	Bug 1719491 - revert clang-format of tools/profiler/public/GeckoTraceEvent.h. r=ngBug 1714577 meant to exclude tools/profiler/public/GeckoTraceEvent.h fromclang-format, but the trailing comment in .clang-format-ignored broke that.Bug 1519636 then formatted the file.This fixes the exclusion in .clang-format-ignore and backs out theclang-format on tools/profiler/public/GeckoTraceEvent.h.Differential Revision: https://phabricator.services.mozilla.com/D119297
clang bug	 https://github.com/FascodeNet/Flast_gecko_2/commit/bbce1490f92c1b9744963c0e8d831ada42b154ca	Bug 1719491 - revert clang-format of tools/profiler/public/GeckoTraceEvent.h. r=ngBug 1714577 meant to exclude tools/profiler/public/GeckoTraceEvent.h fromclang-format, but the trailing comment in .clang-format-ignored broke that.Bug 1519636 then formatted the file.This fixes the exclusion in .clang-format-ignore and backs out theclang-format on tools/profiler/public/GeckoTraceEvent.h.Differential Revision: https://phabricator.services.mozilla.com/D119297
clang bug	 https://github.com/mozilla/gecko-dev/commit/a2e85fcc9fe31418c4cda9c4b2c778b8121f4e9b	Bug 1742472 - fix the clang implementation of has_cpuid_bits for the levels in the 0x80000000 range, r=jrmuizel.Differential Revision: https://phabricator.services.mozilla.com/D131946
clang bug	 https://github.com/mozilla/gecko-dev/commit/0ad8e57ac373e3d88bb208a0d71a3b05ffc3cdfc	Bug 1744863 - Remove uses of CLANG_CL where it was opposed to MSVC. r=firefox-build-system-reviewers,nalexanderAs MSVC is not supported anymore, checking for clang-cl vs. MSVC is notuseful.Differential Revision: https://phabricator.services.mozilla.com/D133157
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/92de67f82d236f399ff43d851ed8ef4230a67c42	Bug 1739543 - Remove unused clang toolchain configs. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D130424
clang bug	 https://github.com/anvirt/Emu-QEMU/commit/b3800a9367602c344542a95629fc1f2ad78e5c15	Update emulator build to use clang-r433403bBug: http://b/197230471Bug: http://b/202099787Test: python3 android/build/python/cmake.pyChange-Id: I202c765e7c67ce7b7bb973b93b5bea4981c668c4
clang bug	 https://github.com/ReallySnow/kernel_google_bluecross/commit/5ef59ae001bc3df5d8ac6776f08a4496c8778b35	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4
clang bug	 https://github.com/anvirt/Emu-QEMU/commit/42d834823a784190835fa5b68bab2ae20f226ea8	Update clang to clang-r428724.Also fix a test error caused by infinite side-effect free loop.Bug: 190099451Test: android/build/python/cmake.pyChange-Id: I57fa4957d354fe3f6eafed7a222141d7fe7ee85c
clang bug	 https://github.com/SUSE/kernel/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/4658b78927b171afd3de38a62a6c1b9b22f23c71	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/709609b96bc5d82b3f78ffa9d52fe2379f51a2a3	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/6bee290b5412a1150e28686c3338edb051ba5ec2	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/linux-mailinglist-archives/kvm.vger.kernel.org.0/commit/ca86f4be35665203c011b7bfd0fb18023b52d780	Re: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14
clang bug	 https://github.com/delphix/linux-kernel-azure/commit/6e74c25b14ce5423a3768229d89bb6f6d26598e7	fortify: Explicitly disable Clang supportBugLink: https://bugs.launchpad.net/bugs/1954828commit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/09d19b352e00bdfb93b3018a9701367280514d65	Bug 1736459 - Switch the spidermonkey fuzzing build to clang 13.It was waiting for rust 1.56. Consequently remove clang 12, since it'snot used anymore.Differential Revision: https://phabricator.services.mozilla.com/D129322
clang bug	 https://github.com/FascodeNet/Flast_gecko_2/commit/09d19b352e00bdfb93b3018a9701367280514d65	Bug 1736459 - Switch the spidermonkey fuzzing build to clang 13.It was waiting for rust 1.56. Consequently remove clang 12, since it'snot used anymore.Differential Revision: https://phabricator.services.mozilla.com/D129322
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/41d3d5a176a80bfc1dce28178516c24ec2806721	Bug 1741568 - Fix all clang-tidy warnings in dom/midi r=padenotDepends on D131222Differential Revision: https://phabricator.services.mozilla.com/D131328
clang bug	 https://github.com/herobuxx/lunatic_wsl2/commit/eaafc590053b314d4907017044ba2e739893c17c	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/Cisco-Talos/clamav/commit/15eef50656c479d4176766cecdad5014b5c290ac	Code cleanup: Refactor to clean up formatting issuesRefactored the clamscan code that determines 'what to scan' in orderto clean up some very messy logic and also to get around a difference inhow vscode and clang-format handle formatting #ifdef blocks in themiddle of an else/if.In addition to refactoring, there is a slight behavior improvement. Withthis change, doing `clamscan blah -` will now scan `blah` and then alsoscan `stdin`.  You can even do `clamscan - blah` to now scan `stdin` andthen scan `blah`. Before, The `-` had to be the only "filename" argumentin order to scan from stdin.In addition, added a bunch of extra empty lines or changing multi-linefunction calls to single-line function calls in order to get around abug in clang-format with these two options do not playing nice together:- AlignConsecutiveAssignments: true- AlignAfterOpenBracket: trueAlignAfterOpenBracket is not taking account the spaces inserted byAlignConsecutiveAssignments, so you end up with stuff like this:```c    bleeblah = 1;    blah     = function(arg1,                    arg2,                    arg3);                //  ^--- these args 4-left from where they should be.```VSCode, meanwhile, somehow fixes this whitespace issue so code that iscorrectly formatted by VSCode doesn't have this bug, meaning that:1. The clang-format check in GH Actions fails.2. We'd all have to stop using format-on-save in VSCode and accept the  bug if we wanted those GH Actions tests to pass.Adding an empty line before variable assignments from multi-linefunction calls evades the buggy behavior.This commit should resolve the clang-format github action test failures,for now.
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/a2e85fcc9fe31418c4cda9c4b2c778b8121f4e9b	Bug 1742472 - fix the clang implementation of has_cpuid_bits for the levels in the 0x80000000 range, r=jrmuizel.Differential Revision: https://phabricator.services.mozilla.com/D131946
clang bug	 https://github.com/Imshubh69/soong/commit/7540a78a35bd7b27f02ddc16ba72bf688178de60	Generate tidy-* rules unless tidy is disabled* make tidy-soong_subset, or make tidy-<any_directory>,  should trigger the same clang-tidy compilations  with or without global WITH_TIDY=1.* Normal make should not trigger clang-tidy compilations  unless global WITH_TIDY=1 or a module has set tidy:true.Bug: 213918926Test: NINJA_ARGS="-n" make tidy-soong_subsetTest: NINJA_ARGS="-n" make <some-library>Change-Id: Iafffd3894abe137c9584c2c01830898422f9a677
clang bug	 https://github.com/delphix/linux-kernel-oracle/commit/6e74c25b14ce5423a3768229d89bb6f6d26598e7	fortify: Explicitly disable Clang supportBugLink: https://bugs.launchpad.net/bugs/1954828commit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/e198bb861f1226363d81ac473d92be280931ac3a	Bug 1745384 - Temporarily fix crash during clang mingw cross compile builds. r=gfx-reviewers,lsalzmanIt appears that dom/canvas/nsICanvasRenderingContextInternal.cpp must bepart of a greater unified build file. Adding new files has pushed itinto its own unified file causing clang to crash when cross compilingusing mingw. For now, let's just put the new file a previous patch addedinto SOURCES instead of UNIFIED_SOURCES to avoid breaking this delicatebalance.A follow up bug will need to be created to investigate on the clangside.Differential Revision: https://phabricator.services.mozilla.com/D133487
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/c39ff2b0731e0d04f2e68ee360fd599e5ab722bd	Bug 1745384 - Temporarily fix crash during clang mingw cross compile builds. r=gfx-reviewers,lsalzmanIt appears that dom/canvas/nsICanvasRenderingContextInternal.cpp must bepart of a greater unified build file. Adding new files has pushed itinto its own unified file causing clang to crash when cross compilingusing mingw. For now, let's just put the new file a previous patch addedinto SOURCES instead of UNIFIED_SOURCES to avoid breaking this delicatebalance.A follow up bug will need to be created to investigate on the clangside.Differential Revision: https://phabricator.services.mozilla.com/D133487
clang bug	 https://github.com/Neternels/nethunter-sdm660/commit/3b66afdee31a88d09a814a534c332116338eb331	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c670
clang bug	 https://github.com/Xiaomi-MSM8996-4-4/android_kernel_xiaomi_gemini/commit/b13f7a7cfabff95cfa0ef706de531a6db96dd2bb	block: bfq: Remove pointless BUG_ONClang warnings this always evaulates to !trueSigned-off-by: xNombre <kartapolska@gmail.com>Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
clang bug	 https://github.com/MixagonUI/build_soong/commit/b7b0ae12beea5de586cf2d2117cc5797eae8e98e	Switch to clang-r433403b (13.0.3)Bug: http://b/202099787Test: mChange-Id: Id923948c56b0308842c94846edd6528fd26dbf72
clang bug	 https://github.com/linuxppc/linux-ci/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/tq-systems/linux-em/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/starfive-tech/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/truenas/linux/commit/eaafc590053b314d4907017044ba2e739893c17c	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/frank-w/BPI-R2-4.14/commit/eaafc590053b314d4907017044ba2e739893c17c	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/goldelico/letux-kernel/commit/258c42a8fb317d197e94765187d30188241e9254	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/Xtended-Devices/kernel_oneplus_sm8350/commit/258c42a8fb317d197e94765187d30188241e9254	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/Kyuofox/android-mainline/commit/c08dffad8ed9f36f2b23c2e45fb492d365fee09f	ANDROID: allmodconfig: disable WERROR-Werror still fails on some arm and arm64 code due to clang issues(works on gcc!), so disable it when building allmodconfig builds fornow.Hopefully the clang developers will work on this...Bug: 199872592Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>Change-Id: I6ccc856773c40e3c0f541a1316b20e9ae3de4380
clang bug	 https://github.com/jesec/linux/commit/eaafc590053b314d4907017044ba2e739893c17c	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/memorizer-dev/memrz-linux5/commit/8d0956438eecfafbefb7cd15b7773087549b38d4	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/keyboardio/Kaleidoscope/commit/c28910a04d258591b02e4d54375fe3e0694bf4a5	Add `.iwyu_ignore` fileThis file contains a list of files (shell globbing) that will be ignored by theIWYU wrapper script, since we have a number of such files in Kaleidoscope thateither can't be parsed properly (because we're using clang and the virtualhardware device) or will be mangled (either because of IWYU bugs orpeculiarities in the Kaleidoscope code).Signed-off-by: Michael Richters <gedankenexperimenter@gmail.com>
clang bug	 https://github.com/openSUSE/kernel/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/vsrinivas/fuchsia/commit/40fa7d009703659f2b77677c92d97ab5fb51010c	[build] Switch back to the Clang 13.0 ABIWe're seeing test failures in wlan-hw-sim-test package tests. Force theClang 13.0 ABI until we address these failures.Bug: 92521Change-Id: I1d0b2214a14061eac07e40a9aa9076ebebf0b1c2Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/641562Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Petr Hosek <phosek@google.com>Fuchsia-Auto-Submit: Petr Hosek <phosek@google.com>
clang bug	 https://github.com/GrapheneOS/kernel_common_5.10/commit/eaafc590053b314d4907017044ba2e739893c17c	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/neverware/kernel/commit/258c42a8fb317d197e94765187d30188241e9254	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/brickport-devs/android_kernel_oneplus_sm8350/commit/258c42a8fb317d197e94765187d30188241e9254	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/Kyuofox/android_kernel_xiaomi_sdm845/commit/dd76a01d4d137c672ebc04bd3e700dc1f3b52172	FROMLIST: Makefile: lld: tell clang to use lldThis is needed because clang doesn't select which linker to use based on$LD but rather -fuse-ld=lld. This is problematic especially forcc-ldoption, which checks for linker flag support via invoking thecompiler, rather than the linker.(am from https://lkml.org/lkml/2019/2/11/1947)Link: https://github.com/ClangBuiltLinux/linux/issues/342Suggested-by: Nathan Chancellor <natechancellor@gmail.com>Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>Tested-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Bug: 63740206Change-Id: I3edf2f0f6c0bac842bef22194bd48a993fc0e3c0Signed-off-by: Yousef Algadri <yusufgadrie@gmail.com>Signed-off-by: Raphiel Rollerscaperers <rapherion@raphielgang.org>Signed-off-by: Chenyang Zhong <zhongcy95@gmail.com>Signed-off-by: KyuoFoxHuyu <88403766@qq.com>
clang bug	 https://github.com/woodsts/linux-stable/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/chromium/chromium/commit/a0d6a4391dcc806a6c6836e2f4a2f57849988b8b	Break apart scoped fd creation and dupmerging these into one line causes clang to emit movaps instructionsinstead of mov instructions on x86, among other strange changes to thegenerated binaries, which in general led to random fd ownershipviolation crashesBug: 1287325Change-Id: I478e77599cbc63c9f42dc3917a541c9bca82740bReviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3575537Reviewed-by: Michael Spang <spang@chromium.org>Commit-Queue: Ted (Chromium) Meyer <tmathmeyer@chromium.org>Cr-Commit-Position: refs/heads/main@{#990278}
clang bug	 https://github.com/ODEX-TOS/linux/commit/8d0956438eecfafbefb7cd15b7773087549b38d4	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/embed-3d/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/DozNaka/KawaKernel-A217X/commit/0d02ce17fe9b1cae28db4d0696b6006807ed4acb	drm/i915: Ensure intel_engine_init_execlist() builds with Clangcommit 410ed5731a6566498a3aa904420aa2e49ba0ba90 upstream.Clang build with UBSAN enabled leads to the following build error:drivers/gpu/drm/i915/intel_engine_cs.o: In function `intel_engine_init_execlist':drivers/gpu/drm/i915/intel_engine_cs.c:411: undefined reference to `__compiletime_assert_411'Again, for this to work the code would first need to be inlined and thenconstant folded, which doesn't work for Clang because semantic analysishappens before optimization/inlining.Use GEM_BUG_ON() instead of BUILD_BUG_ON().v2: Use is_power_of_2() from log2.h (Chris)References: http://mid.mail-archive.com/20181015203410.155997-1-swboyd@chromium.orgReported-by: Stephen Boyd <swboyd@chromium.org>Cc: Stephen Boyd <swboyd@chromium.org>Cc: Chris Wilson <chris@chris-wilson.co.uk>Tested-by: Nathan Chancellor <natechancellor@gmail.com>Tested-by: Stephen Boyd <swboyd@chromium.org>Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Jani Nikula <jani.nikula@intel.com>Link: https://patchwork.freedesktop.org/patch/msgid/20181016122938.18757-2-jani.nikula@intel.comSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
clang bug	 https://github.com/LorenzoBianconi/bpf-next/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/WireGuard/wireguard-linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/LeCmnGend/android_build_make/commit/ff4ee61e7045b7f343c7c6f378c6b41b501f4e50	Copy generated $(PRODUCT_OUT)/module-info.json file to dist when SOONG_COLLECT_JAVA_DEPS flag is set.Test: build/soong/soong_ui.bash --make-mode SKIP_ABI_CHECKS=true SOONG_COLLECT_JAVA_DEPS=true TARGET_PRODUCT=aosp_cf_x86_phone TARGET_BUILD_VARIANT=userdebug droid dist DIST_DIR=/usr/local/google/home/yifengzeng/temp EMMA_INSTRUMENT=true EMMA_INSTRUMENT_FRAMEWORK=true CLANG_COVERAGE=true NATIVE_COVERAGE_PATHS="*" NATIVE_COVERAGE_EXCLUDE_PATHS="art bionic/libc device"Bug: 168755196Change-Id: I2b54d7cd1aaef1068ed5dfe35bfc4a8525b2e968
clang bug	 https://github.com/lujianhua/xiaomi_elish_stable_kernel/commit/8d0956438eecfafbefb7cd15b7773087549b38d4	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/damonitor/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/bolucat/Fuchsia/commit/ba6c52cb679e3efe18cf684304309c4a760c119b	[fint] Add static spec field to run ninja with extra args.This will be enabled on clang_toolchain builders to catch all errorsfrom upstream changes by running ninja with -k0.Bug: 96396Change-Id: Ia8541488d6666b5d51383cd667307beda1e3b658Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/663982Reviewed-by: Petr Hosek <phosek@google.com>Reviewed-by: Oliver Newman <olivernewman@google.com>Commit-Queue: Ina Huh <ihuh@google.com>
clang bug	 https://github.com/link0ff/emacs-mirror/commit/ad82bbdf08bb2d65c048299ce3740dd151ac733c	Fix test lisp/cedet/semantic/bovine/gcc-tests on macOS (Bug#52431)* test/lisp/cedet/semantic/bovine/gcc-tests.el(semantic-gcc-test-output-parser-this-machine): Also detect Appleclang on macOS Monterey.(cherry picked from commit 6e52becfbe2a33c025b8c4838b3c8f06ba5a6fb8)
clang bug	 https://github.com/peterzuger/linux/commit/d3b351f65bf42ccda1f686de3ccb21ea1a0c4f5a	selftests/bpf: Fix a clang compilation error for send_signal.cBuilding selftests/bpf with latest clang compiler (clang15 builtfrom source), I hit the following compilation error:  /.../prog_tests/send_signal.c:43:16: error: variable 'j' set but not used [-Werror,-Wunused-but-set-variable]                  volatile int j = 0;                               ^  1 error generated.The problem also exists with clang13 and clang14. clang12 is okay.In send_signal.c, we have the following code ...  volatile int j = 0;  [...]  for (int i = 0; i < 100000000 && !sigusr1_received; i++)    j /= i + 1;... to burn CPU cycles so bpf_send_signal() helper can be testedin NMI mode.Slightly changing 'j /= i + 1' to 'j /= i + j + 1' or 'j++' canfix the problem. Further investigation indicated this should bea clang bug ([1]). The upstream fix will be proposed later. But itis a good idea to workaround the issue to unblock people who buildkernel/selftests with clang.  [1] https://discourse.llvm.org/t/strange-clang-unused-but-set-variable-error-with-volatile-variables/60841Signed-off-by: Yonghong Song <yhs@fb.com>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Link: https://lore.kernel.org/bpf/20220311003721.2177170-1-yhs@fb.com
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/977e26e47b93f2ab62381b1fe20df6d109ca96cd	Bug 1739679 - clang-tidy: use range-loop in finishParseTaskCommon. r=tcampbellDifferential Revision: https://phabricator.services.mozilla.com/D130873
clang bug	 https://github.com/codinlog/platform-build/commit/4e3d6334dac7ef5432de0ef0018841f20746ba1a	Package llvm-cov in llvm-profdata.zip (take 2)Bug: http://b/214396112It is needed for code coverage smoke test.  Retain the`llvm-profdata.zip` name since it is used in Tradefed.This fixes aosp/2017370 which incorrectly packaged llvm-profdata twice.Test: `CLANG_COVERAGE=true m dist` and inspect llvm-profdata.zipChange-Id: Ic1cbebff3f6fbea04a6c58c6d57557d0ffde14ae
clang bug	 https://github.com/Gateworks/linux-venice/commit/8d0956438eecfafbefb7cd15b7773087549b38d4	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/Chrscool8/Homebrew-Details/commit/611fd22557da02a637596689831f38cd60517eda	Merge pull request #2957 from Hallot/bug/fix-some-clang-warningsFix some extra ";" clang warnings
clang bug	 https://github.com/xdroid-devices/xd_kernel_xiaomi_lavender/commit/79e5ba0461a89e89585d3048df394a32b30123b6	ANDROID: kbuild: allow lld to be used with CONFIG_LTO_CLANGBug: 63740206Bug: 117299373Change-Id: Ic9c8ca03fd082a8404905718f5312a3f497efa5aSigned-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: ImSpiDy <spidy2713@gmail.com>Signed-off-by: ImPrashantt <prashant33968@gmail.com>
clang bug	 https://github.com/AliceO2Group/QualityControl/commit/00e7da5491f095911c60320475f9316079a01a8f	Update in QCChecks + new histogram in QCTrackTask (#959)* ClusterTask: solved bugs, new histo, added checks; TrackTask: added checks* Fixed cluster check of L5 and L6, fixed itsTrack.json and itsEPN.json* Clang format changes* Clang format changes v2* Correct checker for Cluster task, first attempt of vertcices in QC* removed comments* Added vertex object from recoworkflow, further bug fixes* corrected vertex checker problems + TTree with ClusterBitmap* Check: changed TPAveText to TLatex, Tasks: removed stats from the histograms* Fixed conflicts in .json files* Fixed problem with EPN merging (kIsAverage bit for mean and average over ROFs histograms)* Clang changes* Clang changes v2Co-authored-by: JianLIUhep <jian.liu@cern.ch>
clang bug	 https://github.com/nlohmann/json/commit/611fd22557da02a637596689831f38cd60517eda	Merge pull request #2957 from Hallot/bug/fix-some-clang-warningsFix some extra ";" clang warnings
clang bug	 https://github.com/lllgts/android_kernel_lge_msm8998/commit/cef6a4829892783af46e385f871bc62d985c4598	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4
clang bug	 https://github.com/atframework/cmake-toolset/commit/402b9a16e9d4a8118f25521ab574b6f9460d4096	Try patch v1.42.0 for BUGs of gcc & clangSigned-off-by: owent <admin@owent.net>
clang bug	 https://github.com/Edgaru089/helos1/commit/21b7388f84c2253b37d8a4febb65735fc283fbd7	makefile: clang-format runThis bug of placing * in the middle of nowhere is finally fixed. Hooray!
clang bug	 https://github.com/SAP/project-foxhound/commit/30631a4a9b1221380d8a9fa24546bb736b6a3a1d	Bug 1519636 - Reformat recent changes to the Google coding style. r=sylvestreUpdated with clang-format version 13.0.0 (taskcluster-dIIauZE0TkuXy6_23BQhcw)# ignore-this-changesetDifferential Revision: https://phabricator.services.mozilla.com/D137147
clang bug	 https://github.com/xswz8015/skia/commit/55f6115f8064439fe6c06a1d49c558c079b866df	Remove mentions of -Wweak-template-vtablesthe Clang warning is being removed, see bug.Bug: chromium:1264351, chromium:1294786Change-Id: I206f1c891f722cd906fd357176c9f68778e0861fReviewed-on: https://skia-review.googlesource.com/c/skia/+/464616Reviewed-by: Brian Osman <brianosman@google.com>Commit-Queue: Brian Osman <brianosman@google.com>
clang bug	 https://github.com/seL4/musllibc/commit/21e35d82a01dd0edf43ed328217c559446cd0697	suppress unwanted warnings when configuring with clangcoding style warnings enabled by default in clang have long been asource of spurious questions/bug-reports. since clang provides a -wthat behaves differently from gcc's, and that lets us enable anywarnings we may actually want after turning them all off to start witha clean slate, use it at configure time if clang is detected.
clang bug	 https://github.com/xswz8015/skia/commit/9909ff7c5e1fdcfd9ab950e921f36a8fb17308ec	Roll ANGLE from 36132a265702 to 74f327021439 (7 revisions)https://chromium.googlesource.com/angle/angle.git/+log/36132a265702..74f3270214392022-03-08 gman@chromium.org Metal: Fix for mulitsampled buffers losing their contents2022-03-07 jmadill@chromium.org Fix base level changes not updating FBO completeness check.2022-03-07 antonio.caggiano@collabora.com EGL: Validate and implement dmabuf extensions2022-03-07 angle-autoroll@skia-public.iam.gserviceaccount.com Roll vulkan-deps from e572921329ff to ac2a0b67e505 (9 revisions)2022-03-07 angle-autoroll@skia-public.iam.gserviceaccount.com Roll SwiftShader from 561264b73b36 to fc40ddd2a901 (3 revisions)2022-03-07 gman@chromium.org Metal: Fix WebGL CTS fbomultisample tests failing in Metal2022-03-07 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 46c84f1b0c3f to 62518720406c (527 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC brianosman@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: brianosman@google.comChange-Id: I81d56661e277e4103cb5c5504157ee3407eeac0fReviewed-on: https://skia-review.googlesource.com/c/skia/+/517596Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/stormbreaker-project/linux-wsl2/commit/eaafc590053b314d4907017044ba2e739893c17c	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/Prajwal-Koirala/fuchsia/commit/40ee732b9af6b24f7fcabbba3155a359f9ff7c73	[build][sanitizers] Temporarily disable VLA Bounds checkingAs of clang b2715660ed0f821619f51158fb92cd8bddd105d8, UBSan checksfor instances of non-positive VLA sizes. This is blocking the clangroll. We can temporarily disable this check now, then come back andfix these instances afterwards.Bug: 93804Change-Id: I16c689705fd31e37b0366ff41b0cb88adcfec7b4Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/646321Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Leonard Chan <leonardchan@google.com>
clang bug	 https://github.com/SAP/project-foxhound/commit/3631977b63284585f584f2cf47162185afc56083	Bug 1730078 - Build clang-tidy with clang. r=firefox-build-system-reviewers,andiThere are complications with building a 1-stage clang with gcc, so justuse clang. Eventually, the clang-tidy toolchains will be removed infavor of providing clang-tidy from the clang toolchain itself anyways.Differential Revision: https://phabricator.services.mozilla.com/D125158
clang bug	 https://github.com/iKeramat/msm-4.4/commit/d4cb3cda582a643ae4321634b940408b1e581aae	FROMLIST: scripts/mod: disable LTO for empty.cWith CONFIG_LTO_CLANG, clang generates LLVM IR instead of ELF objectfiles. As empty.o is used for probing target properties, disable LTOfor it to produce an object file instead.Bug: 62093296Bug: 67506682Change-Id: I0c7ac7ee0134465cac4a8c3a9c7e8b6347076a2b(am from https://patchwork.kernel.org/patch/10060317/)Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
clang bug	 https://github.com/KJ7LNW/xnec2c/commit/cd24d01047775221a5c01c6296b2a14ed1bc62b8	Disable -Woverlength-strings warnings.Disable warnings for overlength-strings, nothing we can do about thatfor big GTK resources.  Maybe some compilers can't handle the length,but gcc and clang take it fine.See this bug reference:
clang bug	 https://github.com/rr-/Tomb1Main/commit/4aec137a6a5391f3dfbc490d781d873aba0881ce	misc: bypass clang warningClang emits pointless warnings:src/specific/ati.h:460:18: warning: function with no prototype cannot use the stdcall calling convention [-Wmissing-prototype-for-cc]Turns out it's a bug in clang:https://lists.llvm.org/pipermail/llvm-bugs/2016-May/047139.htmlIt can be worked around by adding dummy void parameter to the arglist.
clang bug	 https://github.com/xswz8015/skia/commit/b92009529584dd96f96b4938bc4d7f3ef2ae9574	[graphite] Use RAII helper structs to configure append modes in DrawWriterMove to RAII structs wrapping DrawWriter to control the append mode.This allows each struct to define any extra template parameters/buffersneeded for the appended data, and expose only the appending API thatmakes sense.In follow up CLs, the RAII structs make it easy to support reservingand returning vertex data, and add new appending modes.Cq-Include-Trybots: luci.skia.skia.primary:Test-Mac11-Clang-MacMini9.1-GPU-AppleM1-arm64-Release-All-Graphite,Test-Mac11-Clang-MacMini9.1-GPU-AppleM1-arm64-Debug-All-ASAN_Graphite,Build-Mac-Clang-arm64-Release-iOS_Graphite,Build-Mac-Clang-arm64-Release-Graphite,Build-Mac-Clang-arm64-Debug-iOS_Graphite,Build-Mac-Clang-arm64-Debug-Graphite_NoGpu,Build-Mac-Clang-arm64-Debug-Graphite,Build-Mac-Clang-arm64-Debug-ASAN_GraphiteBug: skia:12703Change-Id: I5ef1bfdf3b4fa175bcfb25cc61fd0c46a62d46c4Reviewed-on: https://skia-review.googlesource.com/c/skia/+/498016Reviewed-by: Robert Phillips <robertphillips@google.com>Commit-Queue: Michael Ludwig <michaelludwig@google.com>
clang bug	 https://github.com/xswz8015/skia/commit/fc2eef845a5a1422fdbc8758e1bb0aaf27008bdd	[graphite] Add operator== to BindBufferInfoDrawWriter was using == to compare buffer bindings, but that hadn'tactually been added yet.Cq-Include-Trybots: luci.skia.skia.primary:Test-Mac11-Clang-MacMini9.1-GPU-AppleM1-arm64-Release-All-Graphite,Test-Mac11-Clang-MacMini9.1-GPU-AppleM1-arm64-Debug-All-ASAN_Graphite,Build-Mac-Clang-arm64-Release-iOS_Graphite,Build-Mac-Clang-arm64-Debug-iOS_Graphite,Build-Mac-Clang-arm64-Debug-Graphite_NoGpu,Build-Mac-Clang-arm64-Debug-Graphite,Build-Mac-Clang-arm64-Debug-ASAN_Graphite,Build-Mac-Clang-arm64-Release-GraphiteBug: skia:12466Change-Id: I769cd3cb9f58f9ffc1558da9f24b2b6000c27388Reviewed-on: https://skia-review.googlesource.com/c/skia/+/478262Reviewed-by: Greg Daniel <egdaniel@google.com>Reviewed-by: Robert Phillips <robertphillips@google.com>Commit-Queue: Greg Daniel <egdaniel@google.com>Commit-Queue: Robert Phillips <robertphillips@google.com>Commit-Queue: Michael Ludwig <michaelludwig@google.com>Auto-Submit: Michael Ludwig <michaelludwig@google.com>
clang bug	 https://github.com/xswz8015/skia/commit/adcf51cb52eaedbef4cd5117a7cb4bb2e1eae108	[graphite] Record commands in DrawPassCq-Include-Trybots: luci.skia.skia.primary:Test-Mac11-Clang-MacMini9.1-GPU-AppleM1-arm64-Release-All-Graphite,Test-Mac11-Clang-MacMini9.1-GPU-AppleM1-arm64-Debug-All-ASAN_Graphite,Build-Mac-Clang-arm64-Release-iOS_Graphite,Build-Mac-Clang-arm64-Release-Graphite,Build-Mac-Clang-arm64-Debug-iOS_Graphite,Build-Mac-Clang-arm64-Debug-Graphite_NoGpu,Build-Mac-Clang-arm64-Debug-Graphite,Build-Mac-Clang-arm64-Debug-ASAN_GraphiteBug: skia:12466Change-Id: If1d4c29a434a1ad3445ceadb98bd7f3b8abb5ee4Reviewed-on: https://skia-review.googlesource.com/c/skia/+/475639Commit-Queue: Michael Ludwig <michaelludwig@google.com>Reviewed-by: Greg Daniel <egdaniel@google.com>Reviewed-by: Jim Van Verth <jvanverth@google.com>Reviewed-by: Robert Phillips <robertphillips@google.com>
clang bug	 https://github.com/vijaymalav564/kernel_realme_sdm660/commit/1df8f1d2cf0fdf733a0f1b2840b125238e12a8c5	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
clang bug	 https://github.com/AcmeUI/android_hardware_qcom_display/commit/44f7cccf4ed73e0f037c9000fea6ef1893832ce0	hwc_session: move a breakAs written, this loop only runs once, which makes clang's new warningunhappy:hardware/qcom-caf/sm8250/display/composer/hwc_session.cpp:828:51: error: loop will run at most once (loop increment never executed) [-Werror,-Wunreachable-code-loop-increment]  for (size_t i = 0; i < pending_refresh_.size(); i++) {                                                  ^~~Chatting with qcom, this appears to be a bug, and the best fix is tomove the `break` into the `if`.Bug: 150166387Test: TreeHuggerChange-Id: Icb64eed5b894b9188f5265094587dd802207ba66
clang bug	 https://github.com/chromium/chromium/commit/7fe3899d2d7b5389c4cc53f43f1173573a759f55	Update some clang scripts for python3This CL addresses a number of issues in run_tool.py and apply_edits.py.Bug: NoneChange-Id: Icab235e70a7d3d9fc170fb8d8c69f258d1c676fbReviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3572683Reviewed-by: Daniel Cheng <dcheng@chromium.org>Commit-Queue: Ian Vollick <vollick@chromium.org>Cr-Commit-Position: refs/heads/main@{#989518}
clang bug	 https://github.com/gnoliyil/aemu/commit/1cab2489c229a255bf2c693273f4647569f8d9ea	Update emulator build to use clang-r437112bBug: 201432564Test: python3 android/build/python/cmake.pyChange-Id: Icc9efa348e9fd1749a2763ef8c0add0deee1566b
clang bug	 https://github.com/PixysOS-Beta/build_soong/commit/bfbc762779b885eb6e6fb688c53694de17df8056	Use tidyExternalVendor for external/googletest* Do not run expensive clang-analyzer-* checks with googletest/*,  which should be checked upstream.Test: make WITH_TIDY=1 CLANG_ANALYZER_CHECKS=1Bug: 198098397Change-Id: Ic801ffa802b42d4d55ae89553073c926f9eaa351Signed-off-by: Jason Edson <jaysonedson@gmail.com>
clang bug	 https://github.com/SAP/project-foxhound/commit/7db4048bdb5ee9f5126eee6e40c2765ee46adbce	Bug 1751839 - Don't use clang-toolchain to derive llvm-symbolizer a=fixCLOSED TREEWe do want to use the llvm-symbolizer from the full clang build, whichhas broader binary compatibility and is better guaranteed to match thecompiler used for builds that require llvm-symbolizer.Differential Revision: https://phabricator.services.mozilla.com/D136971
clang bug	 https://github.com/SAP/project-foxhound/commit/0160eb2a5978d9361cfee83f23db34f88dfdd4c0	Bug 1747773 - Build NSS with clang's integrated assembler on x86_64. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D134742
clang bug	 https://github.com/googleprodkernel/linux-mm/commit/281d0c962752fb40866dd8d4cade68656f34bd1f	fortify: Add Clang supportEnable FORTIFY_SOURCE support for Clang:Use the new __pass_object_size and __overloadable attributes so thatClang will have appropriate visibility into argument sizes such that__builtin_object_size(p, 1) will behave correctly. Additional detailsavailable here:    https://github.com/llvm/llvm-project/issues/53516    https://github.com/ClangBuiltLinux/linux/issues/1401A bug with __builtin_constant_p() of globally defined variables wasfixed in Clang 13 (and backported to 12.0.1), so FORTIFY support mustdepend on that version or later. Additional details here:    https://bugs.llvm.org/show_bug.cgi?id=41459    commit a52f8a59aef4 ("fortify: Explicitly disable Clang support")A bug with Clang's -mregparm=3 and -m32 makes some builtins unusable,so removing -ffreestanding (to gain the needed libcall optimizationswith Clang) cannot be done. Without the libcall optimizations, Clangcannot provide appropriate FORTIFY coverage, so it must be disabledfor CONFIG_X86_32. Additional details here;    https://github.com/llvm/llvm-project/issues/53645Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: George Burgess IV <gbiv@google.com>Cc: llvm@lists.linux.devSigned-off-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lore.kernel.org/r/20220208225350.1331628-9-keescook@chromium.org
clang bug	 https://github.com/jpirko/linux_mlxsw/commit/281d0c962752fb40866dd8d4cade68656f34bd1f	fortify: Add Clang supportEnable FORTIFY_SOURCE support for Clang:Use the new __pass_object_size and __overloadable attributes so thatClang will have appropriate visibility into argument sizes such that__builtin_object_size(p, 1) will behave correctly. Additional detailsavailable here:    https://github.com/llvm/llvm-project/issues/53516    https://github.com/ClangBuiltLinux/linux/issues/1401A bug with __builtin_constant_p() of globally defined variables wasfixed in Clang 13 (and backported to 12.0.1), so FORTIFY support mustdepend on that version or later. Additional details here:    https://bugs.llvm.org/show_bug.cgi?id=41459    commit a52f8a59aef4 ("fortify: Explicitly disable Clang support")A bug with Clang's -mregparm=3 and -m32 makes some builtins unusable,so removing -ffreestanding (to gain the needed libcall optimizationswith Clang) cannot be done. Without the libcall optimizations, Clangcannot provide appropriate FORTIFY coverage, so it must be disabledfor CONFIG_X86_32. Additional details here;    https://github.com/llvm/llvm-project/issues/53645Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: George Burgess IV <gbiv@google.com>Cc: llvm@lists.linux.devSigned-off-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lore.kernel.org/r/20220208225350.1331628-9-keescook@chromium.org
clang bug	 https://github.com/lllgts/android_kernel_lge_msm8998/commit/9d14c622c36e59249e4188083c40f9b2a27e53bb	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: sohamxda7 <sensoham135@gmail.com>Signed-off-by: Prashant-1695 <prashant33968@gmail.com>Signed-off-by: ImPrashantt <prashant33968@gmail.com>
clang bug	 https://github.com/SophistSolutions/Stroika/commit/0d06a1aec6df6175844b3c259c49061f0957ba1e	recent if constexpr bug workaround was not needed for clang++-7
clang bug	 https://github.com/chromium/chromium/commit/002c3e668403b48c4f2d59b4297f935c2d294214	Import llvm-ml to chromium's clang packageR=hans@chromium.org, thakis@chromium.orgBug: 762167Change-Id: Id1e3c6ab74a52560af1d607e68aaf81be9628c2eReviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3569044Reviewed-by: Nico Weber <thakis@chromium.org>Commit-Queue: Nico Weber <thakis@chromium.org>Cr-Commit-Position: refs/heads/main@{#988955}
clang bug	 https://github.com/SophistSolutions/Stroika/commit/00c701861d89aefb4447ff59099604a555912e29	lose obsolete bug workarounds for https://stroika.atlassian.net/browse/STK-601 - re-enabling most ubsan usage on clang/and macos/xcode
clang bug	 https://github.com/joergroedel/linux-iommu/commit/4be240b18aa67b1144af546bea2d7cad1b75c19b	Merge tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull FORTIFY_SOURCE updates from Kees Cook: "This series consists of two halves:   - strict compile-time buffer size checking under FORTIFY_SOURCE for     the memcpy()-family of functions (for extensive details and     rationale, see the first commit)   - enabling FORTIFY_SOURCE for Clang, which has had many overlapping     bugs that we've finally worked past"* tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  fortify: Add Clang support  fortify: Make sure strlen() may still be used as a constant expression  fortify: Use __diagnose_as() for better diagnostic coverage  fortify: Make pointer arguments const  Compiler Attributes: Add __diagnose_as for Clang  Compiler Attributes: Add __overloadable for Clang  Compiler Attributes: Add __pass_object_size for Clang  fortify: Replace open-coded __gnu_inline attribute  fortify: Update compile-time tests for Clang 14  fortify: Detect struct member overflows in memset() at compile-time  fortify: Detect struct member overflows in memmove() at compile-time  fortify: Detect struct member overflows in memcpy() at compile-time
clang bug	 https://github.com/JarlPenguin/platform_frameworks_native/commit/79dcab511b825cf43144cf038f99028cdb4eeb2f	Minor cleanups.typoclang-format on presubmitBug: 201090222Test: presubmitChange-Id: I438f2eab1bdd469971d06b8da4d28111430abe10
clang bug	 https://github.com/dgreid/minijail/commit/7ae41c2a1cbcb44113c53a78ef15a054edc8b6d8	Run clang format on libminijail-private.h and libminijail.cBug: NoneTest: clang-formatChange-Id: I58f5688b8e846b259ec5451a33df36ef9a69b632
clang bug	 https://github.com/kvm-riscv/linux/commit/4be240b18aa67b1144af546bea2d7cad1b75c19b	Merge tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull FORTIFY_SOURCE updates from Kees Cook: "This series consists of two halves:   - strict compile-time buffer size checking under FORTIFY_SOURCE for     the memcpy()-family of functions (for extensive details and     rationale, see the first commit)   - enabling FORTIFY_SOURCE for Clang, which has had many overlapping     bugs that we've finally worked past"* tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  fortify: Add Clang support  fortify: Make sure strlen() may still be used as a constant expression  fortify: Use __diagnose_as() for better diagnostic coverage  fortify: Make pointer arguments const  Compiler Attributes: Add __diagnose_as for Clang  Compiler Attributes: Add __overloadable for Clang  Compiler Attributes: Add __pass_object_size for Clang  fortify: Replace open-coded __gnu_inline attribute  fortify: Update compile-time tests for Clang 14  fortify: Detect struct member overflows in memset() at compile-time  fortify: Detect struct member overflows in memmove() at compile-time  fortify: Detect struct member overflows in memcpy() at compile-time
clang bug	 https://github.com/miraclestars/android_kernel_samsung_sm8250/commit/f6c5e742635704fc836d9bc6f44c2746203e3594	UPSTREAM: arm64: vdso32: Don't use KBUILD_CPPFLAGS unconditionallyKBUILD_CPPFLAGS is defined differently depending on whether the maincompiler is clang or not. This means that it is not possible to buildthe compat vDSO with GCC if the rest of the kernel is built with clang.Define VDSO_CPPFLAGS directly to break this dependency and allow a clangkernel to build a compat vDSO with GCC:  $ make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \    CROSS_COMPILE_COMPAT=arm-linux-gnueabihf- CC=clang \    COMPATCC=arm-linux-gnueabihf-gccAcked-by: Catalin Marinas <catalin.marinas@arm.com>Signed-off-by: Will Deacon <will@kernel.org>(cherry picked from commit c71e88c437962c1ec43d4d23a0ebf4c9cf9bee0d)Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 154668398Change-Id: I43e54c145831fde92e6883004e9addcb6cbe3ef7
clang bug	 https://github.com/Zopolis4/gcj/commit/ec12ddd1e7f7d6b48a593df865e7846039e7d62e	libstdc++: Adjust friend declarations to work with ClangI think this code is valid but it fails with Clang, possibly due tohttps://llvm.org/PR38882Qualifying the names makes it work for all compilers.libstdc++-v3/ChangeLog:
clang bug	 https://github.com/zhaoliangcn/gnulib/commit/d125d4f6d1a5d9845824aaf1d1c9dc69699bf2f1	Port __has_attribute to Apple’s Clang renumberingProblem reported by Kirill A. Korinsky in:https://lists.gnu.org/r/bug-gnulib/2022-02/msg00034.html* config/srclist.txt: Comment out sys/cdefs.h for now.* lib/cdefs.h (__glibc_has_attribute):* m4/gnulib-common.m4 (gl_COMMON_BODY):Port to Apple’s renumbering of Clang versions.
clang bug	 https://github.com/bcopeland/wireless-testing/commit/281d0c962752fb40866dd8d4cade68656f34bd1f	fortify: Add Clang supportEnable FORTIFY_SOURCE support for Clang:Use the new __pass_object_size and __overloadable attributes so thatClang will have appropriate visibility into argument sizes such that__builtin_object_size(p, 1) will behave correctly. Additional detailsavailable here:    https://github.com/llvm/llvm-project/issues/53516    https://github.com/ClangBuiltLinux/linux/issues/1401A bug with __builtin_constant_p() of globally defined variables wasfixed in Clang 13 (and backported to 12.0.1), so FORTIFY support mustdepend on that version or later. Additional details here:    https://bugs.llvm.org/show_bug.cgi?id=41459    commit a52f8a59aef4 ("fortify: Explicitly disable Clang support")A bug with Clang's -mregparm=3 and -m32 makes some builtins unusable,so removing -ffreestanding (to gain the needed libcall optimizationswith Clang) cannot be done. Without the libcall optimizations, Clangcannot provide appropriate FORTIFY coverage, so it must be disabledfor CONFIG_X86_32. Additional details here;    https://github.com/llvm/llvm-project/issues/53645Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: George Burgess IV <gbiv@google.com>Cc: llvm@lists.linux.devSigned-off-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lore.kernel.org/r/20220208225350.1331628-9-keescook@chromium.org
clang bug	 https://github.com/MontaVista-OpenSourceTechnology/linux-live-app-coredump/commit/262448f3d18959d175b10e28a3b65f41d1d7313f	x86/Kconfig: Only enable CONFIG_CC_HAS_IBT for clang >= 14.0.0Commit 156ff4a544ae ("x86/ibt: Base IBT bits") added a check for a crashwith 'clang -fcf-protection=branch -mfentry -pg', which intended toexclude Clang versions older than 14.0.0 from selectingCONFIG_X86_KERNEL_IBT.clang-11 does not have the issue that the check is testing for, soCONFIG_X86_KERNEL_IBT is selectable. Unfortunately, there is a differentcrash in clang-11 that was fixed in clang-12. To make matters worse,that crash does not appear to be entirely deterministic, as the sameinput to the compiler will sometimes crash and other times not, whichmakes dynamically checking for the crash like the '-pg' one unreliable.To make everything work properly for all common versions of clang, use ahard version check of 14.0.0, as that will be the first release upstreamthat has both bugs properly fixed.Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Link: https://lore.kernel.org/r/20220318230747.3900772-2-nathan@kernel.org
clang bug	 https://github.com/tq-systems/linux-em/commit/281d0c962752fb40866dd8d4cade68656f34bd1f	fortify: Add Clang supportEnable FORTIFY_SOURCE support for Clang:Use the new __pass_object_size and __overloadable attributes so thatClang will have appropriate visibility into argument sizes such that__builtin_object_size(p, 1) will behave correctly. Additional detailsavailable here:    https://github.com/llvm/llvm-project/issues/53516    https://github.com/ClangBuiltLinux/linux/issues/1401A bug with __builtin_constant_p() of globally defined variables wasfixed in Clang 13 (and backported to 12.0.1), so FORTIFY support mustdepend on that version or later. Additional details here:    https://bugs.llvm.org/show_bug.cgi?id=41459    commit a52f8a59aef4 ("fortify: Explicitly disable Clang support")A bug with Clang's -mregparm=3 and -m32 makes some builtins unusable,so removing -ffreestanding (to gain the needed libcall optimizationswith Clang) cannot be done. Without the libcall optimizations, Clangcannot provide appropriate FORTIFY coverage, so it must be disabledfor CONFIG_X86_32. Additional details here;    https://github.com/llvm/llvm-project/issues/53645Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: George Burgess IV <gbiv@google.com>Cc: llvm@lists.linux.devSigned-off-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lore.kernel.org/r/20220208225350.1331628-9-keescook@chromium.org
clang bug	 https://github.com/gentoo/gentoo/commit/51ebf202e63cda0fd4a19f7b0cb8e209370aae29	app-text/libmspub: add comment re eautoreconf (stale libtool breaking Clang)Bug: https://bugs.gentoo.org/832764Signed-off-by: Sam James <sam@gentoo.org>
clang bug	 https://github.com/Zirias/zfbsd/commit/2f6a842484675bb8fe9fafd40d90c06f13e02403	Disable -Wreturn-type on GCC.GCC is more pedantic than clang about warning when a function doesn'thandle undefined enum values (see GCC bug 87950).  Clang's warninggives a more pragmatic coverage and should find any real bugs, sodisable the warning for GCC rather than adding __unreachableannotations to appease GCC.Reviewed by:
clang bug	 https://github.com/kirin970-dev/android_kernel_huawei_kirin970/commit/6c05862e6acabd782b695dad8ad3dace5ea76ce8	ANDROID: Kbuild, LLVMLinux: allow overriding clang target tripleAndroid has an unusual setup where the kernel needs to target[arch]-linux-gnu to avoid Android userspace-specific flags andoptimizations, but AOSP doesn't ship a matching binutils.Add a new variable CLANG_TRIPLE which can override the "-target" tripleused to compile the kernel, while using a different CROSS_COMPILE topick the binutils/gcc installation.  For Android you'd do somethinglike:  export CLANG_TRIPLE=aarch64-linux-gnu-  export CROSS_COMPILE=aarch64-linux-android-If you don't need something like this, leave CLANG_TRIPLE unset and itwill default to CROSS_COMPILE.Change-Id: I85d63599c6ab8ed458071cdf9197d85b1f7f150bSigned-off-by: Greg Hackmann <ghackmann@google.com>[astrachan: Added a script to check for incorrectly falling back to the            default when CLANG_TRIPLE is unset]Bug: 118442619Signed-off-by: Alistair Strachan <astrachan@google.com>[nc: Fixed conflicts with the latest Clang commits]Link: https://android.googlesource.com/kernel/common/+/c04915fd693950067cc9dfc6f4046b80d80107e1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
clang bug	 https://github.com/Project-Xtended/frameworks_native/commit/b81c7751fc4c0cc1999887def5fe1cb1aacaeae4	Minor cleanups.typoclang-format on presubmitBug: 201090222Test: presubmitChange-Id: I438f2eab1bdd469971d06b8da4d28111430abe10
clang bug	 https://github.com/gentoo-mirror/gentoo/commit/51ebf202e63cda0fd4a19f7b0cb8e209370aae29	app-text/libmspub: add comment re eautoreconf (stale libtool breaking Clang)Bug: https://bugs.gentoo.org/832764Signed-off-by: Sam James <sam@gentoo.org>
clang bug	 https://github.com/johnmcfarlane/wss/commit/2c5aa50f77d96b8c36b42c181514b25f2f0b99aa	Add GCC/Clang flags for trapping bugs- in standard library implementations- as recommended in  https://github.com/johnmcfarlane/papers/blob/main/cpp/contractual-disappointment.md#appendix-a---toolchain-specific-recommendations
clang bug	 https://github.com/strake/ghc/commit/c273c5f40d15b24f636327b4bdfcd980173e264b	ghc-prim: Reduce scope of Clang sync_fetch_and_nand workaroundAs described in https://bugs.llvm.org/show_bug.cgi?id=8842, Clangremoved the __sync_fetch_and_nand builtins due to inconsistency in GCC'sbehavior in 2010.  However, GCC has since clarified the behavior oftheir builtins and consequently Clang re-added them in 2014.Consequently this workaround should no longer be necessary.Test Plan: Validate building with ClangSubscribers: rwbarton, thomie, carterDifferential Revision: https://phabricator.haskell.org/D4480
clang bug	 https://github.com/Panchajanya1999/linux-mainline/commit/dee2b702bcf067d7b6b62c18bdd060ff0810a800	kconfig: Add support for -Wimplicit-fallthroughAdd Kconfig support for -Wimplicit-fallthrough for both GCC and Clang.The compiler option is under configuration CC_IMPLICIT_FALLTHROUGH,which is enabled by default.Special thanks to Nathan Chancellor who fixed the Clang bug[1][2]. Thisbugfix only appears in Clang 14.0.0, so older versions still containthe bug and -Wimplicit-fallthrough won't be enabled for them, for now.This concludes a long journey and now we are finally getting ridof the unintentional fallthrough bug-class in the kernel, entirely. :)Link: https://github.com/llvm/llvm-project/commit/9ed4a94d6451046a51ef393cd62f00710820a7e8 [1]Link: https://bugs.llvm.org/show_bug.cgi?id=51094 [2]Link: https://github.com/KSPP/linux/issues/115Link: https://github.com/ClangBuiltLinux/linux/issues/236Co-developed-by: Kees Cook <keescook@chromium.org>Signed-off-by: Kees Cook <keescook@chromium.org>Co-developed-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Tested-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
clang bug	 https://github.com/elytraOS/frameworks_native/commit/af69906f529fe4657be22ae8a5c5e1bdf94b53dd	Minor cleanups.typoclang-format on presubmitBug: 201090222Test: presubmitChange-Id: I438f2eab1bdd469971d06b8da4d28111430abe10
clang bug	 https://github.com/Xiaomi-MSM8996-4-4/android_kernel_xiaomi_gemini/commit/c234f96402ecab31c4e59cb94802844be08d8821	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
clang bug	 https://github.com/TheAssemblyArmada/GamespySDK/commit/1fc02983183ff921ce6d7f83c0d8a1f513035d8f	Initial commit.*Version 2.06 of the SDK.*All components build successfully.*Links as static or dynamic lib.*Formatted with clang-format.*Compiler warnings silenced or bugs fixed for standard warnings.
clang bug	 https://github.com/danascape/kernel_oneplus_sm6350/commit/708d68d949cf2ba8055cf1d0197ee62adeafad69	lib/string.c: implement stpcpyLLVM implemented a recent "libcall optimization" that lowers calls to`sprintf(dest, "%s", str)` where the return value is used to`stpcpy(dest, str) - dest`. This generally avoids the machinery involvedin parsing format strings.  `stpcpy` is just like `strcpy` except itreturns the pointer to the new tail of `dest`.  This optimization wasintroduced into clang-12.Implement this so that we don't observe linkage failures due to missingsymbol definitions for `stpcpy`.Similar to last year's fire drill with:commit 5f074f3e192f ("lib/string.c: implement a basic bcmp")The kernel is somewhere between a "freestanding" environment (no full libc)and "hosted" environment (many symbols from libc exist with the sametype, function signature, and semantics).As H. Peter Anvin notes, there's not really a great way to inform thecompiler that you're targeting a freestanding environment but would liketo opt-in to some libcall optimizations (see pr/47280 below), rather thanopt-out.Arvind notes, -fno-builtin-* behaves slightly differently between GCCand Clang, and Clang is missing many __builtin_* definitions, which Iconsider a bug in Clang and am working on fixing.Masahiro summarizes the subtle distinction between compilers justly:  To prevent transformation from foo() into bar(), there are two ways in  Clang to do that; -fno-builtin-foo, and -fno-builtin-bar.  There is  only one in GCC; -fno-buitin-foo.(Any difference in that behavior in Clang is likely a bug from a missing__builtin_* definition.)Masahiro also notes:  We want to disable optimization from foo() to bar(),  but we may still benefit from the optimization from  foo() into something else. If GCC implements the same transform, we  would run into a problem because it is not -fno-builtin-bar, but  -fno-builtin-foo that disables that optimization.  In this regard, -fno-builtin-foo would be more future-proof than  -fno-built-bar, but -fno-builtin-foo is still potentially overkill. We  may want to prevent calls from foo() being optimized into calls to  bar(), but we still may want other optimization on calls to foo().It seems that compilers today don't quite provide the fine grain controlover which libcall optimizations pseudo-freestanding environments wouldprefer.Finally, Kees notes that this interface is unsafe, so we should notencourage its use.  As such, I've removed the declaration from anyheader, but it still needs to be exported to avoid linkage errors inmodules.Cc: stable@vger.kernel.orgLink: https://bugs.llvm.org/show_bug.cgi?id=47162Link: https://bugs.llvm.org/show_bug.cgi?id=47280Link: https://github.com/ClangBuiltLinux/linux/issues/1126Link: https://man7.org/linux/man-pages/man3/stpcpy.3.htmlLink: https://pubs.opengroup.org/onlinepubs/9699919799/functions/stpcpy.htmlLink: https://reviews.llvm.org/D85963Suggested-by: Andy Lavr <andy.lavr@gmail.com>Suggested-by: Arvind Sankar <nivedita@alum.mit.edu>Suggested-by: Joe Perches <joe@perches.com>Suggested-by: Masahiro Yamada <masahiroy@kernel.org>Suggested-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>Reported-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Danny Lin <danny@kdrag0n.dev>Signed-off-by: danascape <danascape@gmail.com>
clang bug	 https://github.com/navsystem/gentoo-portage/commit/51ebf202e63cda0fd4a19f7b0cb8e209370aae29	app-text/libmspub: add comment re eautoreconf (stale libtool breaking Clang)Bug: https://bugs.gentoo.org/832764Signed-off-by: Sam James <sam@gentoo.org>
clang bug	 https://github.com/InterNetNews/inn/commit/80951541b7d3b24a985b8b64d905af2c9b0999f8	Reformat C code with clang-format 14-rc1It fixes a reported formatting bug to clang-format for a wrongreformatting of lines with a variable named "private" (previouslyconsidered as an accessor).Also, the opening { is now on the initial line of enum and typedefdefinitions.  And vertical alignment has been fixed.
clang bug	 https://github.com/xiaoleGun/kernel_huawei_kirin970/commit/a7cdcf25d52c0e88bb19f0dfef80acdb57c655fc	media: go7007: avoid clang frame overflow warning with KASAN[ Upstream commit ed713a4a1367aca5c0f2f329579465db00c17995 ]clang-8 warns about one function here when KASAN is enabled, evenwithout the 'asan-stack' option:drivers/media/usb/go7007/go7007-fw.c:1551:5: warning: stack frame size of 2656 bytes in functionI have reported this issue in the llvm bugzilla, but to makeit work with the clang-8 release, a small annotation is stillneeded.Link: noeSigned-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>[hverkuil-cisco@xs4all.nl: fix checkpatch warning]Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
clang bug	 https://github.com/4-19-SDM-Asus/kernel_asus_sdm660-4.19/commit/872c4f667c790f4ab79ae23ceefeeb2144c7f460	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c670
clang bug	 https://github.com/chromium/chromium/commit/c9056c5ec31577eedf408e59a989c01db075e652	Desktop PWAs: remove redundant includesDetected using clang-tidy readability-duplicate-includeBug: 1301149Change-Id: Ie24576ae66c3e6a431e522c0369193b2c13fa11aReviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3499494Auto-Submit: Eric Willigers <ericwilligers@chromium.org>Reviewed-by: Alexander Bolodurin <alexbn@chromium.org>Commit-Queue: Alexander Bolodurin <alexbn@chromium.org>Cr-Commit-Position: refs/heads/main@{#976979}
clang bug	 https://github.com/Ergus/Emacs/commit/ad82bbdf08bb2d65c048299ce3740dd151ac733c	Fix test lisp/cedet/semantic/bovine/gcc-tests on macOS (Bug#52431)* test/lisp/cedet/semantic/bovine/gcc-tests.el(semantic-gcc-test-output-parser-this-machine): Also detect Appleclang on macOS Monterey.(cherry picked from commit 6e52becfbe2a33c025b8c4838b3c8f06ba5a6fb8)
clang bug	 https://github.com/chromium/chromium/commit/071b9fd5291fb4e27c4b907655c0b7ab03a01919	Desktop PWAs: Remove redundant get()Detected using clang-tidy readability-redundant-smartptr-getBug: 1301149Change-Id: I054955d6dd5ec81d857f4065bbcf5dbf62311f86Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3499495Auto-Submit: Eric Willigers <ericwilligers@chromium.org>Reviewed-by: Glen Robertson <glenrob@chromium.org>Commit-Queue: Glen Robertson <glenrob@chromium.org>Cr-Commit-Position: refs/heads/main@{#976865}
clang bug	 https://github.com/chromium/chromium/commit/5de19054d4aa57e8fd6ec7b7caf9f1e09085190a	Desktop PWAs: remove redundant 'using'Detected using clang-tidy misc-unused-using-declsBug: 1301149Change-Id: I06fab0e93c66320b1a1c24cd141765b9ebc0e47dReviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3499497Auto-Submit: Eric Willigers <ericwilligers@chromium.org>Reviewed-by: Jiewei Qian <qjw@chromium.org>Commit-Queue: Jiewei Qian <qjw@chromium.org>Cr-Commit-Position: refs/heads/main@{#976861}
clang bug	 https://github.com/compudj/librseq/commit/dd76f2d6cc73c8b4c33ac1a662886b2bc2b6ba0c	Fix: work-around asm goto compiler bugsgcc and clang each have their own compiler bugs with respect to asmgoto. Implement a work-around for compiler versions known to have thosebugs.Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>Change-Id: Ic745eb61163e90f668fb03707f3013e8981fb5fe
clang bug	 https://github.com/projectacrn/acrn-kernel/commit/eaafc590053b314d4907017044ba2e739893c17c	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/natalie-lang/natalie/commit/185a056a6fe361e74403c3addf8671a3c1139826	Fix bug compiling on ClangClang caught this missing 'override' but GCC did not. Cool!
clang bug	 https://github.com/SAP/project-foxhound/commit/998e5e7304691019183370f0ac6c1753efadd211	Bug 1735369 - Minor formatting clean-ups.MANUAL PUSH: clang-format fix CLOSED TREE DONTBUILD
clang bug	 https://github.com/chromium/chromium/commit/85d97ea762adea3e406100588ff90391963b3816	Desktop PWAs: Function declarations avoid const in by-value argumentsFor a function parameter passed by value, const has no effect on thecaller, thus is not recommended in function declarations.https://google.github.io/styleguide/cppguide.html#Use_of_consthttps://abseil.io/tips/109https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.htmlBug: 1301149Change-Id: Ib09c2ece0df199fbd5812ce91b7152032d9c4b60Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3493216Auto-Submit: Eric Willigers <ericwilligers@chromium.org>Reviewed-by: Christopher Lam <calamity@chromium.org>Commit-Queue: Christopher Lam <calamity@chromium.org>Cr-Commit-Position: refs/heads/main@{#975664}
clang bug	 https://github.com/SAP/project-foxhound/commit/a6e466b9433ee66914dc75c57ddbb6b9434b5031	Bug 1731175 - Build clang-mingw off clang-12 rather than from scratch. r=firefox-build-system-reviewers,andiThe build-clang step in the clang-mingw toolchains just replicates whatwe already do for clang, except with no patched applied, which couldarguably seen as an issue. Instead of rebuilding what we essentiallyalready have as a result of the clang-12 toolchain, we use the clang-12toolchain directly instead.Differential Revision: https://phabricator.services.mozilla.com/D125912
clang bug	 https://github.com/SAP/project-foxhound/commit/e198bb861f1226363d81ac473d92be280931ac3a	Bug 1745384 - Temporarily fix crash during clang mingw cross compile builds. r=gfx-reviewers,lsalzmanIt appears that dom/canvas/nsICanvasRenderingContextInternal.cpp must bepart of a greater unified build file. Adding new files has pushed itinto its own unified file causing clang to crash when cross compilingusing mingw. For now, let's just put the new file a previous patch addedinto SOURCES instead of UNIFIED_SOURCES to avoid breaking this delicatebalance.A follow up bug will need to be created to investigate on the clangside.Differential Revision: https://phabricator.services.mozilla.com/D133487
clang bug	 https://github.com/SAP/project-foxhound/commit/c39ff2b0731e0d04f2e68ee360fd599e5ab722bd	Bug 1745384 - Temporarily fix crash during clang mingw cross compile builds. r=gfx-reviewers,lsalzmanIt appears that dom/canvas/nsICanvasRenderingContextInternal.cpp must bepart of a greater unified build file. Adding new files has pushed itinto its own unified file causing clang to crash when cross compilingusing mingw. For now, let's just put the new file a previous patch addedinto SOURCES instead of UNIFIED_SOURCES to avoid breaking this delicatebalance.A follow up bug will need to be created to investigate on the clangside.Differential Revision: https://phabricator.services.mozilla.com/D133487
clang bug	 https://github.com/Hasiergo/Lenovo_TB-X606F_kernel/commit/9c7acd5e22e7d42454757691d63d97281a2c3320	media: go7007: avoid clang frame overflow warning with KASAN[ Upstream commit ed713a4a1367aca5c0f2f329579465db00c17995 ]clang-8 warns about one function here when KASAN is enabled, evenwithout the 'asan-stack' option:drivers/media/usb/go7007/go7007-fw.c:1551:5: warning: stack frame size of 2656 bytes in functionI have reported this issue in the llvm bugzilla, but to makeit work with the clang-8 release, a small annotation is stillneeded.Link: https://bugs.llvm.org/show_bug.cgi?id=38809Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>[hverkuil-cisco@xs4all.nl: fix checkpatch warning]Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
clang bug	 https://github.com/hadadarjt/android_kernel_xiaomi_onc/commit/00de81976ddde914a889091f9ac218af6fd06627	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: Albert I <kras@raphielgang.org>Signed-off-by: Hadad <hadad@linuxmail.org>
clang bug	 https://github.com/johnmcfarlane/cnl/commit/2a5d32b3a03e8b817f05084df8f5808375c03698	Reintroduce Clang-Tidy naming rules- previously broken in C++20 (https://bugs.llvm.org/show_bug.cgi?id=46752)- works in Clang-Tidy 12
clang bug	 https://github.com/embed-3d/linux/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
clang bug	 https://github.com/SAP/project-foxhound/commit/41d3d5a176a80bfc1dce28178516c24ec2806721	Bug 1741568 - Fix all clang-tidy warnings in dom/midi r=padenotDepends on D131222Differential Revision: https://phabricator.services.mozilla.com/D131328
clang bug	 https://github.com/SAP/project-foxhound/commit/09d19b352e00bdfb93b3018a9701367280514d65	Bug 1736459 - Switch the spidermonkey fuzzing build to clang 13.It was waiting for rust 1.56. Consequently remove clang 12, since it'snot used anymore.Differential Revision: https://phabricator.services.mozilla.com/D129322
clang bug	 https://github.com/gregtatum/gecko/commit/cc9ca1f7f31a86360c908f6efb8f2e62467d2541	Bug 1730078 - Build clang-tidy with clang. r=firefox-build-system-reviewers,andiThere are complications with building a 1-stage clang with gcc, so justuse clang. Eventually, the clang-tidy toolchains will be removed infavor of providing clang-tidy from the clang toolchain itself anyways.Differential Revision: https://phabricator.services.mozilla.com/D125158
clang bug	 https://github.com/arglebargle-arch/xanmod-rog-PKGBUILD/commit/e956059106b356518d6168d302bac8d2133fb74d	fix bug where separate prepare/build runs don't use clang properly
clang bug	 https://github.com/Bareflank/bsl/commit/1d7fbc9f68eb4c4ed5dd0b290957cb3966d65adb	Merge pull request #77 from rianquinn/masterSmall bug fixes for CMake and Clang Tidy
clang bug	 https://github.com/iusmac/kernel_rova/commit/4fd7d2477cb96282e7137bc3e09eca02f41e8d69	BACKPORT, ANDROID: kbuild: allow lld to be used with CONFIG_LTO_CLANGBug: 63740206Bug: 117299373Change-Id: Ic9c8ca03fd082a8404905718f5312a3f497efa5aSigned-off-by: Sami Tolvanen <samitolvanen@google.com>(cherry-picked from commit 668703e6479fe0c9881a092daf792995a238cb7d)Signed-off-by: Albert I <kras@raphielgang.org>
clang bug	 https://github.com/tier4/AutowareArchitectureProposal.iv/commit/abb0b31b66f03d776b011b7fe9854f9047549619	convert VehicleReport to Twist msgs (#657)* add vehicle velocity converter package* clang format* add README* add heading_rate value* remove twist msg* clang format* set covariance value* fixed bug
clang bug	 https://github.com/CalyxOS/kernel_google_redbull/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/Spark-Devices/android_kernel_lenovo_sm8150/commit/80dd1d26ff0cba5ef1023d14289b888074febfd6	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>
clang bug	 https://github.com/Risti699/Karamel/commit/7d02986c5ba7b589e69bad5970e044ee8f8e0d34	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c6704Signed-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: risti699 <wahhap10@gmail.com>
clang bug	 https://github.com/conan-io/conan-center-index/commit/4bb63b2297c34f37260b881512f93e34d51e73e5	(#8417) ctpg: add recipe* ctpg: add recipe* remove charconv in test_package* supports only gcc* avoid copyright lawyers attackCo-authored-by: Anonymous Maarten <madebr@users.noreply.github.com>* update 1.3.4 with clang support* add 1.3.4 definition* support clang >= 9* insert end line* fix CMakeLists bug* support only clang >= 12* increate constexpr depth in MSVC* bump up 1.3.5* add constexpr:steps* disable Visual Studio supportCo-authored-by: Anonymous Maarten <madebr@users.noreply.github.com>
clang bug	 https://github.com/Kendras056/caf_kernel_asus_sdm660/commit/a558547488d2f98c22cc62d033596f3519907422	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Akhil Narang <akhilnarang.1999@gmail.com>Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>Signed-off-by: Kendras056 <kendras056@gmail.com>
clang bug	 https://github.com/hiper25-OpenSource/android_kernel_oneplus_sm8250/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/PixelExperience-Devices/kernel_xiaomi_sm8250/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/9178dc6cddb3e4a8b8ade49fc02b0f7c3c259cdb	Bug 1747009 - Apply upstream clang patch to fix crash on mingw32 builds. CLOSED TREEDifferential Revision: https://phabricator.services.mozilla.com/D134480
clang bug	 https://github.com/SAP/project-foxhound/commit/8c2cea7d7404839db0aad4188a0ac0cfff2c6eea	Bug 1745115 - Default number of stages to build clang to 2. r=firefox-build-system-reviewers,andi- stage 1 is building clang with whatever compiler is available- stage 2 is building clang with the clang built during stage 1- stage 3 is building clang with the clang built during stage 2. It'sonly useful when it's actively compared against stage 2, or whenthere's a stage 4.- stage 4 is building clang with the clang built during stage 3, with theprofile generated during stage 3, when stage 2 produced a clang withinstrumentation enabled.We're not actively comparing the output of stage 2 and 3 when not doingPGO, so it's not useful to do 3-stage builds.Differential Revision: https://phabricator.services.mozilla.com/D133314
clang bug	 https://github.com/Felix-Rm/iac/commit/dadadb40e6dd3a1cd25e46d612be75ea62447ea5	Remove/fix code-smells and error/bug prone lines of codeThe majority of issues found with clang-tidy have been fixed in this commit.Hopefully this makes the code more easily readable and less buggy.
clang bug	 https://github.com/OAID/Tengine/commit/6973addc1dc28f0dd370c3f99c666406623c5011	add .clang-tidy, fix found bugs (#1175)* ad .clang-tidy, fix found 'bugs'Signed-off-by: daquexian <daquexian566@gmail.com>* apply code-format changesCo-authored-by: daquexian <daquexian@users.noreply.github.com>
clang bug	 https://github.com/GZR-Kernels/Optimus_Drunk_Alioth/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/gregtatum/gecko/commit/ab5fb80c8264db51443f829e07cce0029e88bf24	Bug 1519636 - First reformat with clang-format 13.0.0. r=firefox-build-system-reviewers,sylvestre,mhentgesUpdated with clang-format version 13.0.0 (taskcluster-OgjH5lasS5K_fvefdRcJVg)Depends on D131114Differential Revision: https://phabricator.services.mozilla.com/D129119
clang bug	 https://github.com/project-chip/connectedhomeip/commit/3a1a5b020fc528cb664cd9d3f04b34b777e6d2f8	[OTA Requestor] Implement the CancelImageUpdate() OTARequestor API (#13778)* Implement the CancelImageUpdate() OTARequestor API* Restyled by clang-format* Add CancelImageUpdate() to OTARequestorInterface* Add the override modifier* Add UpdateCancelled() API to OTARequestorDriver* Restyled by clang-format* Fix a bug in SetBlock() where varied block size will kill the downloadIssue: https://github.com/project-chip/connectedhomeip/issues/13393Co-authored-by: Restyled.io <commits@restyled.io>
clang bug	 https://github.com/jack603047588/meigen/commit/5c642950a5d0232ebdfa6b460b4515e6e2b8828d	Bug Fix: correct the bug that won't define EIGEN_HAS_FP16_Cif the compiler isn't clang
clang bug	 https://github.com/gentoo-mirror/gentoo/commit/7507da323f5f09b0d6f60e4f7293e456c09f1ec6	app-forensics/afl: Disable clang-fast mode.This is currently broken with latest clang/llvm versions and anupstream bug remained unanswered. We may re-enable thisonce it's fixed upstream. This should resolve all clang-relatedbugs.Also fix doc installation (bug #720194).Signed-off-by: Hanno B?ck <hanno@gentoo.org>Closes: https://bugs.gentoo.org/720194Closes: https://bugs.gentoo.org/695488Closes: https://bugs.gentoo.org/708524Closes: https://bugs.gentoo.org/821973Closes: https://bugs.gentoo.org/827107Closes: https://bugs.gentoo.org/828689Package-Manager: Portage-3.0.30, Repoman-3.0.3
clang bug	 https://github.com/hexagon-geo-surv/eigen/commit/5c642950a5d0232ebdfa6b460b4515e6e2b8828d	Bug Fix: correct the bug that won't define EIGEN_HAS_FP16_Cif the compiler isn't clang
clang bug	 https://github.com/RadiantDevices/kernel_xiaomi_vayu/commit/5e8dd9231a9e3a1a8e93849dd9844c55b763d6cc	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Panchajanya1999 <panchajanya@azure-dev.live>
clang bug	 https://github.com/bolucat/Fuchsia/commit/40ee732b9af6b24f7fcabbba3155a359f9ff7c73	[build][sanitizers] Temporarily disable VLA Bounds checkingAs of clang b2715660ed0f821619f51158fb92cd8bddd105d8, UBSan checksfor instances of non-positive VLA sizes. This is blocking the clangroll. We can temporarily disable this check now, then come back andfix these instances afterwards.Bug: 93804Change-Id: I16c689705fd31e37b0366ff41b0cb88adcfec7b4Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/646321Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Leonard Chan <leonardchan@google.com>
clang bug	 https://github.com/gentoo/gentoo/commit/7507da323f5f09b0d6f60e4f7293e456c09f1ec6	app-forensics/afl: Disable clang-fast mode.This is currently broken with latest clang/llvm versions and anupstream bug remained unanswered. We may re-enable thisonce it's fixed upstream. This should resolve all clang-relatedbugs.Also fix doc installation (bug #720194).Signed-off-by: Hanno B?ck <hanno@gentoo.org>Closes: https://bugs.gentoo.org/720194Closes: https://bugs.gentoo.org/695488Closes: https://bugs.gentoo.org/708524Closes: https://bugs.gentoo.org/821973Closes: https://bugs.gentoo.org/827107Closes: https://bugs.gentoo.org/828689Package-Manager: Portage-3.0.30, Repoman-3.0.3
clang bug	 https://github.com/tarun14110/browser_secure_webauthn/commit/2984272cf0455a1709a27a2a479d08fa2102b5d8	Bug 1731720 - Upgrade toolchains using clang 11 to clang 12. r=firefox-build-system-reviewers,andiAnd remove the now unused clang 11 toolchains.Differential Revision: https://phabricator.services.mozilla.com/D126176
clang bug	 https://github.com/scipy/scipy/commit/6d701fc82bcb3b2f2db3b47b30a9d3fe1901cdf4	Merge pull request #15531 from isuruf/pep440BUG: fix importing `scipy.lib._pep440`This fixes the issue on Windows where Pythran didn't work because `clang-cl.exe`was no longer found.
clang bug	 https://github.com/RadiantDevices/kernel_xiaomi_vayu/commit/6e2a38f16b3a39d1839eb5a13c7af3284735b3ef	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Panchajanya1999 <panchajanya@azure-dev.live>
clang bug	 https://github.com/google/pigweed/commit/e4b69454e77352b12440ee45a4acd955d0bfd9db	Reland "pw_protobuf_compiler: Adds Nanopb to Bazel build"This reverts commit 0e718cbd4b6716ad3a7ca979076aac00e08919b0.Reason for revert: After investigation we've determined that this CL is not at fault, and the failures we observed were due to a combination of https://bugs.chromium.org/p/pigweed/issues/detail?id=623 and bugs in a pending CL.Original change's description:> Revert "pw_protobuf_compiler: Adds Nanopb to Bazel build">> This reverts commit 059e10ae69cfb22ef53731dee2ef374d341beab0.>> Reason for revert: Breaks the bazel build (https://ci.chromium.org/p/pigweed/builders/try/pigweed-linux-bazel-build-host-clang)>> Original change's description:> > pw_protobuf_compiler: Adds Nanopb to Bazel build> >> > This change adds support for Protobuf code generation in the Bazel build> > using the Nanopb plugin. As a side affect this also fixes a number of> > packages, however requires some renaming to prevent clashes.> >> > Fixed: 507> > Bug: 317> > Change-Id: Ie4a25a9cc7a7b550b4ef73e67f71308e48bdbc4c> > Reviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/78020> > Reviewed-by: Ted Pudlik <tpudlik@google.com>> > Commit-Queue: Ted Pudlik <tpudlik@google.com>>> TBR=frolv@google.com,pigweed-scoped@luci-project-accounts.iam.gserviceaccount.com,tpudlik@google.com,nathaniel.brough@gmail.com>> Change-Id: I92ba10efa39d131a07607b0f17d201bdb9a5c87e> No-Presubmit: true> No-Tree-Checks: true> No-Try: true> Bug: 317> Reviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/83081> Pigweed-Auto-Submit: Ted Pudlik <tpudlik@google.com>> Reviewed-by: Keir Mierle <keir@google.com>> Commit-Queue: Auto-Submit <auto-submit@pigweed.google.com.iam.gserviceaccount.com># Not skipping CQ checks because this is a reland.Bug: 317Change-Id: Ie425bfb9c612e602de9f627997c69a17bc360697Reviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/83082Reviewed-by: Keir Mierle <keir@google.com>Commit-Queue: Ted Pudlik <tpudlik@google.com>
clang bug	 https://github.com/pepussy-12/build_soong/commit/eba6f1c1179b8c465e3c5f17f20b9cf74b7f2aa6	Use tidyExternalVendor for external/googletest* Do not run expensive clang-analyzer-* checks with googletest/*,  which should be checked upstream.Test: make WITH_TIDY=1 CLANG_ANALYZER_CHECKS=1Bug: 198098397Change-Id: Ic801ffa802b42d4d55ae89553073c926f9eaa351Signed-off-by: Jason Edson <jaysonedson@gmail.com>
clang bug	 https://github.com/mvaisakh/kmanifest/commit/590fccdf98f203e9ea93a244b14801241968293c	Add clang-tools to the manifest.cxx_extractor is needed for enabling kythe.Bug: 201801372Change-Id: Ib5ff5c0dd076bc3b50286eb2df3af311173b36d4
clang bug	 https://github.com/SunflowerAries/Eigen/commit/5c642950a5d0232ebdfa6b460b4515e6e2b8828d	Bug Fix: correct the bug that won't define EIGEN_HAS_FP16_Cif the compiler isn't clang
clang bug	 https://github.com/ProjectElixir-Devices/kernel_samsung_exynos9810/commit/9fde030f28d33e3e26d99045a344a4ffef4563f0	ANDROID: Move from clang r328903 to r346389b.Bug: 120439617Bug: 120503084Change-Id: I21bb183cac03753d1ba719a69305e2199c3f3227Signed-off-by: Alistair Strachan <astrachan@google.com>
clang bug	 https://github.com/kraj/uclibc-ng/commit/592574ae535c35de500f6c3e8d8400d0bb0d985a	Fix bug in ARM memset implementationThe ARM implementation of memset has a bug when the fill-value is negative or outside the[0, 255] range. To reproduce:    char array[256];    memset(array, -5, 256);This is supposed to fill the array with int8 values -5, -5, -5, ... . On ARM, this doesnot work because the implementation assumes the high bytes of the fill-value argument arealready zero. However in this test case they are filled with 1-bits. The aarch64 and x86_64implementations do not have this problem: they first convert the fill-value to an unsignedbyte following the specification of memset.With GCC one can use  `memset(ptr, (-5 & 0xFF), size)` as a workaround, but for clangusers that does not work: clang optimizes the `& 0xFF` away because it assumes thatmemset will do it.Signed-off-by: Tom Bannink <tombannink@gmail.com>Acked-by: Peter Korsgaard <peter@korsgaard.com>
clang bug	 https://github.com/PixysOS/hardware_pixys_interfaces/commit/61fc52dbbe9322b7f86a1054f98ba3766e0b9437	interfaces: camera: fix two potential null pointer usesCaught by the static analyzer:hardware/interfaces/camera/device/1.0/default/CameraDevice.cpp:401:9:warning: Called C++ object pointer is null[clang-analyzer-core.CallAndMessage]Bug: NoneTest: TreeHuggerChange-Id: Ia6d0a2ab4b4d04cfc171629c7dbf60ead181625d
clang bug	 https://github.com/ionutnechita/linux-sunlight/commit/61bb376162203d19e589f50e2631e8a292e64c07	ANDROID: clang: update to 14.0.0Bug: 202986547Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Change-Id: Ica702486da9ba9b99d9ed31199447be1bad9b960
clang bug	 https://github.com/hpc-io/pdc/commit/a417eb2e3078c46689b9be251db37a7d68d7dcc8	Develop (#50)* Update bdcats.c* Update vpicio.c* vpicio batch* Committing clang-format changes* Update pdc_client_server_common.c* Update pdc_client_server_common.c* Enhancing overlapping degree for transfer request* Committing clang-format changes* Update pdc_client_server_common.c* Update pdc_client_server_common.c* Committing clang-format changes* Update pdc_client_server_common.c* Committing clang-format changes* Update vpicio_batch.c* Update pdc_client_server_common.c* Committing clang-format changes* Update vpicio_batch.c* Committing clang-format changes* Update vpicio_batch.c* Committing clang-format changes* Update vpicio_batch.c* Update vpicio_batch.c* Committing clang-format changes* Update vpicio_batch.c* Update vpicio_batch.c* Update vpicio_batch.c* Fixed server close problem* Committing clang-format changes* Update run_checkpoint_restart_test.sh* Update close_server.c* Resolve a deadlock* Committing clang-format changes* Update vpicio_batch.c* Committing clang-format changes* Update pdc_client_server_common.c* Committing clang-format changes* Update run_checkpoint_restart_test.sh* Update vpicio_batch.c* Update vpicio_batch.c* Committing clang-format changes* Use correct flag for timing* minor fixes* Update pdc_region_cache.c* Committing clang-format changes* Update Makefile* close time with timer* Committing clang-format changes* Update close_server.c* Update close_server.c* Update vpicio_batch.c* Update vpicio_batch.c* Update vpicio_batch.c* Add timer for cont and obj create* Committing clang-format changes* Print date and total time for individual timer in timing report* Committing clang-format changes* bacats with batch implementation* Committing clang-format changes* Update README.md* Update Makefile* Update bdcats_batch.c* Update bdcats_batch.c* Update bdcats_batch.c* Update bdcats_batch.c* Aggregated APIs* Remove compiler warnings* Committing clang-format changes* Update pdc_region_cache.c* Update pdc_region_cache.c* Enlarging memory buf* Committing clang-format changes* Update region_transfer_all_3D.c* Committing clang-format changes* add semicolon* Committing clang-format changes* Update README.md* Checkpointing for new tests. Fixed a bug associated for reading large regions.* Committing clang-format changesCo-authored-by: github-actions <github-actions[bot]@users.noreply.github.com>Co-authored-by: Houjun Tang <htang4@lbl.gov>
clang bug	 https://github.com/eigen-mirror/eigen/commit/5c642950a5d0232ebdfa6b460b4515e6e2b8828d	Bug Fix: correct the bug that won't define EIGEN_HAS_FP16_Cif the compiler isn't clang
clang bug	 https://github.com/correaa/b-multi/commit/9800585ed7cf322322ccb6f08e28b76fe7ef9d22	remove ambiguity on allocator_type typedef related to workaround clang bughttps://bugs.llvm.org/show_bug.cgi?id=48177
clang bug	 https://github.com/lopster143/kernel_xiaomi_sm6250/commit/c8ec3565bb89291af9c8d77119152b0aa3858979	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>
clang bug	 https://github.com/herrnst/dddvb-linux-kernel/commit/b027471adaf955efde6153d67f391fe1604b7292	Revert "ubsan, kcsan: Don't combine sanitizer with kcov on clang"This reverts commit ea91a1d45d19469001a4955583187b0d75915759.Since df05c0e9496c ("Documentation: Raise the minimum supported versionof LLVM to 11.0.0") the minimum Clang version is now 11.0, which fixedthe UBSAN/KCSAN vs. KCOV incompatibilities.Link: https://bugs.llvm.org/show_bug.cgi?id=45831Link: https://lkml.kernel.org/r/YaodyZzu0MTCJcvO@elver.google.comLink: https://lkml.kernel.org/r/20220128105631.509772-1-elver@google.comSigned-off-by: Marco Elver <elver@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Kees Cook <keescook@chromium.org>Cc: Alexander Potapenko <glider@google.com>Cc: Dmitry Vyukov <dvyukov@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Andrew Morton <akpm@linux-foundation.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/0d12e234b27ed162f050f980371ac1dc51b37ace	Bug 1731582 - Move to clang-13 r=firefox-build-system-reviewers,mhentges,decoderJoin work with glandium.Differential Revision: https://phabricator.services.mozilla.com/D126208
clang bug	 https://github.com/FascodeNet/Flast_gecko_2/commit/0d12e234b27ed162f050f980371ac1dc51b37ace	Bug 1731582 - Move to clang-13 r=firefox-build-system-reviewers,mhentges,decoderJoin work with glandium.Differential Revision: https://phabricator.services.mozilla.com/D126208
clang bug	 https://github.com/greearb/linux-ct-5.16/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/Medusa-Team/linux-medusa/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/ionutnechita/linux-sunlight/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/jpirko/linux_mlxsw/commit/41022eff9c2d21e658c7a6fcd31005bf514d28b7	MIPS: crypto: Fix CRC32 codeCommit 67512a8cf5a7 ("MIPS: Avoid macro redefinitions") changed how theMIPS register macros were defined, in order to allow the code to compileunder LLVM/Clang.The MIPS CRC32 code however wasn't updated accordingly, causing a buildbug when using a MIPS32r6 toolchain without CRC support.Update the CRC32 code to use the macros correctly, to fix the buildfailures.Fixes: 67512a8cf5a7 ("MIPS: Avoid macro redefinitions")Cc: <stable@vger.kernel.org>Signed-off-by: Paul Cercueil <paul@crapouillou.net>Reported-by: kernel test robot <lkp@intel.com>Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
clang bug	 https://github.com/bcopeland/wireless-testing/commit/41022eff9c2d21e658c7a6fcd31005bf514d28b7	MIPS: crypto: Fix CRC32 codeCommit 67512a8cf5a7 ("MIPS: Avoid macro redefinitions") changed how theMIPS register macros were defined, in order to allow the code to compileunder LLVM/Clang.The MIPS CRC32 code however wasn't updated accordingly, causing a buildbug when using a MIPS32r6 toolchain without CRC support.Update the CRC32 code to use the macros correctly, to fix the buildfailures.Fixes: 67512a8cf5a7 ("MIPS: Avoid macro redefinitions")Cc: <stable@vger.kernel.org>Signed-off-by: Paul Cercueil <paul@crapouillou.net>Reported-by: kernel test robot <lkp@intel.com>Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
clang bug	 https://github.com/amir73il/linux/commit/b8321ed4a40c02054f930ca59d3570caa27bc86c	Merge tag 'kbuild-v5.18-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuildPull Kbuild updates from Masahiro Yamada: - Add new environment variables, USERCFLAGS and USERLDFLAGS to allow   additional flags to be passed to user-space programs. - Fix missing fflush() bugs in Kconfig and fixdep - Fix a minor bug in the comment format of the .config file - Make kallsyms ignore llvm's local labels, .L* - Fix UAPI compile-test for cross-compiling with Clang - Extend the LLVM= syntax to support LLVM=<suffix> form for using a   particular version of LLVm, and LLVM=<prefix> form for using custom   LLVM in a particular directory path. - Clean up Makefiles* tag 'kbuild-v5.18-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/masahiroy/linux-kbuild:  kbuild: Make $(LLVM) more flexible  kbuild: add --target to correctly cross-compile UAPI headers with Clang  fixdep: use fflush() and ferror() to ensure successful write to files  arch: syscalls: simplify uapi/kapi directory creation  usr/include: replace extra-y with always-y  certs: simplify empty certs creation in certs/Makefile  certs: include certs/signing_key.x509 unconditionally  kallsyms: ignore all local labels prefixed by '.L'  kconfig: fix missing '# end of' for empty menu  kconfig: add fflush() before ferror() check  kbuild: replace $(if A,A,B) with $(or A,B)  kbuild: Add environment variables for userprogs flags  kbuild: unify cmd_copy and cmd_shipped
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/151c81623a086ab401fcef05dcf983afd96c05e2	Bug 1731582 - Move to clang-13 r=firefox-build-system-reviewers,mhentges,decoderJoin work with glandium.Differential Revision: https://phabricator.services.mozilla.com/D126208
clang bug	 https://github.com/FascodeNet/Flast_gecko_2/commit/151c81623a086ab401fcef05dcf983afd96c05e2	Bug 1731582 - Move to clang-13 r=firefox-build-system-reviewers,mhentges,decoderJoin work with glandium.Differential Revision: https://phabricator.services.mozilla.com/D126208
clang bug	 https://github.com/rgnwall/FreeBSD-ports/commit/9a10eff03e919e71578cdb66d588b756a0cd1bb6	misc/rump: fix or suppress clang 13 warningsFix a null pointer subtraction bug reported by clang 13, and suppressthe new clang 13 -Wunused-but-set-variable warning, as it triggers quiteoften in the NetBSD src tree.PR:
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/da72439c0211dbf78637cfe410bd86d4b97bd39a	Bug 1731582 - Move to clang-13 r=firefox-build-system-reviewers,mhentgesJoin work with glandium.Differential Revision: https://phabricator.services.mozilla.com/D126208
clang bug	 https://github.com/FascodeNet/Flast_gecko_2/commit/da72439c0211dbf78637cfe410bd86d4b97bd39a	Bug 1731582 - Move to clang-13 r=firefox-build-system-reviewers,mhentgesJoin work with glandium.Differential Revision: https://phabricator.services.mozilla.com/D126208
clang bug	 https://github.com/peterzuger/linux/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/bhavesh20-mb/bhavesh_solana/commit/4287bf6b8bd87ba2f4f57d1f1a0db49e27bee008	Bump bpf-tools to v1.18 (#20991)- added newlib standard C library to clang toolchain- fixed BPF backend bug that accidentally deleted code, issue #20538
clang bug	 https://github.com/ArrowOS-Devices/android_kernel_xiaomi_surya/commit/edd4bcc17422d56618b49de748c440f7fad15643	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
clang bug	 https://github.com/ArrowOS-Devices/android_kernel_xiaomi_surya/commit/ef84e63e9173000643e9a1027e77b2ca003d082a	FROMLIST: arm64: vdso32: Use full path to Clang instead of relying on PATHCurrently, in order to build the compat VDSO with Clang, this formathas to be used:  PATH=${BIN_FOLDER}:${PATH} make CC=clangPrior to the addition of this file, this format would also beacceptable:  make CC=${BIN_FOLDER}/clangThis is because the vdso32 Makefile uses cc-name instead of CC. Afterthis path, CC will still evaluate to clang for the first case asexpected but now the second case will use the specified Clang, ratherthan the host's copy, which may not be compatible as shown below./usr/bin/as: unrecognized option '-mfloat-abi=soft'clang-6.0: error: assembler command failed with exit code 1Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>(cherry picked from https://patchwork.kernel.org/patch/10419665)Bug: 80184372Change-Id: If90a5a4edbc2b5883b4c78161081ebeafbebdcdeSigned-off-by: khusika <khusikadhamar@gmail.com>
clang bug	 https://github.com/ODEX-TOS/linux/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/PKRoma/linux/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/jpbrucker/linux/commit/a52f8a59aef46b59753e583bf4b28fccb069ce64	fortify: Explicitly disable Clang supportClang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/aosp-mirror/kernel_common/commit/258c42a8fb317d197e94765187d30188241e9254	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/GPUCode/android_kernel_nokia_sdm660/commit/661b66148f9ee46596e776a48e3cfb4efe772ee4	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4
clang bug	 https://github.com/roytam1/palemoon27/commit/8e0043d5bce318fe83b81be92aca9d8472415489	import changes from `dev' branch of rmottola/Arctic-Fox:- Bug 1149416 - Don't make free-nonheap-object warning an error on a CLOSED TREE . r=glandium (e968f5f2ac)- Bug 1145781 - Fix hazard on a CLOSED TREE. (c6a424b4e9)- Bug 1187982 - Fix building clang-plugin with clang 3.5; r=mystor (0e1ba88dfd)- spacing (38d98645d8)- Run clang-format on clang-plugin.cpp, no bug (cce9551ab2)- Bug 1156802 - Part 1: Add an analysis which prohibits explicit move constructors, r=ehsan (1ba4769e7b)- Bug 1178806. IndexedDB autoincrement overflow should be throwing ConstraintError per spec. r=bent (1820974774)- Bug 1149815 - Guard against using deleted IDBObjectStore and IDBIndex objects, r=janv. (c63293e770)- Bug 1149815 - Don't assume that index creation always succeeds, r=janv. (e123630c3d)- Bug 1149815 - Properly handle IDBDatabase.close() called during a versionchange transaction, r=janv. (e1a00a34e7)- Bug 1149815 - Fix IndexedDB tests to expect InvalidStateError rather than TransactionInactiveError when touching a deleted IDBObjectStore or IDBIndex object, r=janv. (2fde727baa)- Bug 1168166 - Ignore failed IndexedDB optimization if disk is too full, r=janv. (0bd7dd94db)- Bug 1168606 - Part 1: Extract Cursor response data population into shared function. r=bent (b42b353eec)- Bug 1168606 - Part 2: Convert DelayedDeleteRunnable into reusable DelayedActionRunnable class. r=bent (db6a8969a9)- Bug 1170746 - Getting mutable files over a cursor crashes the browser; r=bent (70225fd031)- Bug 1168606 - Part 3: Allow multiple ObjectStoreCursorResponses in a CursorResponse. r=khuey (744c1798d4)- Bug 1179025 - Protect against using cursors on a deleted objectStore/index, r=janv. (c82d018719)- Bug 1168606 - Part 4: Allow current key to be provided with PBackgroundIDBCursor::Continue. r=khuey (a7faf38498)- Bug 1168606 - Part 5: Send two records with every ObjectStoreCursorResponse. r=khuey (50a8955f62)- Bug 1156802 - Part 2: Remove all explicit move constructors, r=ehsan (07144b7b8f)- Bug 1201309 - Make MOZ_INHERIT_TYPE_ANNOTATIONS_FROM_TEMPLATE_ARGS work with MOZ_NON_MEMMOVABLE. r=ehsan f=mystor (6cd540cd1b)- partial of Bug 1076787 - Add expectation data for running web-platform-tests on debug builds (848508f9dd)- Bug 1149815 - Enable wpt tests that now pass, r=janv. (757331780f)- Bug 1201190 - Part 1: Add an analysis to prevent a type from being allocated in a temporary, r=ehsan (f67cfef0ce)- spaces (1f29d5c9bb)
clang bug	 https://github.com/SAP/project-foxhound/commit/612a0ec5591f51e4acaa50e36998f099e23401a4	Bug 1742469 - Part 8: Resolve clang-analyzer-core.CallAndMessage warning r=smaugDifferential Revision: https://phabricator.services.mozilla.com/D131936
clang bug	 https://github.com/Kendras056/kernel_asus_sdm636/commit/df9dcc484353548c7533b1d8f71c37886e80159b	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Akhil Narang <akhilnarang.1999@gmail.com>Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>Signed-off-by: Kendras056 <kendras056@gmail.com>
clang bug	 https://github.com/jjgriego/weft/commit/f6e7596671bc40c66de1dfc424ec943135213e51	shelving module stuffclang + gcc both have too many bugs and missing features it seems, so, leavingthis here for a brighter day
clang bug	 https://github.com/Atom-X-Devs/android_kernel_xiaomi_sdm660/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/vsrinivas/fuchsia/commit/dca4bfb62688e2e06e493582d8844fb22177e04c	[build] Remove now default linker flagsThe Clang compiler driver now defaults to use some of theseflags so we don't need to manually specify them anymore.Bug: 53078Change-Id: Iae08b9ad36440bef0a20e8cb4dea05b1897abf51Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/669858Fuchsia-Auto-Submit: Alex Brachet <abrachet@google.com>Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
clang bug	 https://github.com/poskyc/kernel_xiaomi_sm8250/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/mmind/linux-riscv/commit/b027471adaf955efde6153d67f391fe1604b7292	Revert "ubsan, kcsan: Don't combine sanitizer with kcov on clang"This reverts commit ea91a1d45d19469001a4955583187b0d75915759.Since df05c0e9496c ("Documentation: Raise the minimum supported versionof LLVM to 11.0.0") the minimum Clang version is now 11.0, which fixedthe UBSAN/KCSAN vs. KCOV incompatibilities.Link: https://bugs.llvm.org/show_bug.cgi?id=45831Link: https://lkml.kernel.org/r/YaodyZzu0MTCJcvO@elver.google.comLink: https://lkml.kernel.org/r/20220128105631.509772-1-elver@google.comSigned-off-by: Marco Elver <elver@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Kees Cook <keescook@chromium.org>Cc: Alexander Potapenko <glider@google.com>Cc: Dmitry Vyukov <dvyukov@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Andrew Morton <akpm@linux-foundation.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
clang bug	 https://github.com/abess-team/abess/commit/f5d03d53e3b1f13f74639a00d51404bafaa50edc	fix building bug on clang
clang bug	 https://github.com/NusantaraROM-Devices/kernel_xiaomi_lmi/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/tarun14110/browser_secure_webauthn/commit/f6c4a9db3b24ca5199f0d04ab8c8a031e23bb4af	Bug 1731175 - Build clang-mingw off clang-12 rather than from scratch. r=firefox-build-system-reviewers,andiThe build-clang step in the clang-mingw toolchains just replicates whatwe already do for clang, except with no patched applied, which couldarguably seen as an issue. Instead of rebuilding what we essentiallyalready have as a result of the clang-12 toolchain, we use the clang-12toolchain directly instead.Differential Revision: https://phabricator.services.mozilla.com/D125912
clang bug	 https://github.com/xswz8015/skia/commit/6bb185bf5496ab1c5f967968b6b7b6773913ccd6	Roll ANGLE from 6cb08a2203e3 to b72718d23720 (11 revisions)https://chromium.googlesource.com/angle/angle.git/+log/6cb08a2203e3..b72718d237202022-03-03 cclao@google.com Vulkan: Fix the data race for mUse from two threads2022-03-03 abdolrashidi@google.com Add angle_white_box_tests to SwANGLE tests2022-03-03 tsniatowski@vewd.com Don't create a string out of a nullptr2022-03-03 hailinzhang@google.com add host cached bit for staging buffer2022-03-03 jmadill@chromium.org Vulkan: Fix issue with redefining a layered attachment.2022-03-03 cnorthrop@google.com Capture/Replay: Fix capture on Linux2022-03-03 timvp@google.com WATCHLISTS: Remove timvp@ from 'vulkan'2022-03-03 romanl@google.com Fix glClearColor calls to use GLColor32F constants.2022-03-03 m.maiya@samsung.com Vulkan: Reserve memory in move-constructor of ResourceUseList2022-03-03 angle-autoroll@skia-public.iam.gserviceaccount.com Roll SwiftShader from 383901609736 to 7089ef18891d (10 revisions)2022-03-03 angle-autoroll@skia-public.iam.gserviceaccount.com Roll vulkan-deps from 7f867484330b to a30aef1d7967 (4 revisions)If this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC kjlubick@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: kjlubick@google.comTest: Test: MEC of an existing trace on LinuxChange-Id: I2738e0acb00ffc3171fe2d116ecd9d27cfe457b7Reviewed-on: https://skia-review.googlesource.com/c/skia/+/515700Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/9178dc6cddb3e4a8b8ade49fc02b0f7c3c259cdb	Bug 1747009 - Apply upstream clang patch to fix crash on mingw32 builds. CLOSED TREEDifferential Revision: https://phabricator.services.mozilla.com/D134480
clang bug	 https://github.com/gotenksIN/kernel_xiaomi_sm8250/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/emscripten-core/emscripten/commit/24d63c22214ec319dae65a703ea221514e51d1e9	Remove stripping of individual command line arguments in emcc.py. (#16115)This was originally introduced 10 years ago to work around a bug thatoccurred on windows vista (See4ab1c8acec8efbdb73a4363581abf7d4f4c0aa53).  Its not clear if the bug wasin cmake or in windows itself, or in the version of python.Windows Vista has been unsupported for a very long time now so I thinkeven attempted to verify this bug still exists would be very tricky.What is more, the underlying tools such as clang don't support thisbehavior so any user who suffered from this bug likely wouldn't beable ot use clang outside of emscripten.  For example:```clang ' --version'clang: error: no such file or directory: ' --version'; did you mean '--version'?clang: error: no input files```I don't know of any tools that don't work like that above, so I don'tsee why we should be any different.The motivation for removing this now is that it came up in discussionwhen working on code nearby (#16087) and it seems to pointless at bestand is also a compatibility issue (since it prevents the use offilenames that start or end in space).
clang bug	 https://github.com/projects-nexus/android_kernel_lavender-4.19/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/atmark-techno/linux-5.10-at/commit/eaafc590053b314d4907017044ba2e739893c17c	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/sailfishos-mirror/nss/commit/99c69dc3ca363ce9ff909531f8581252189905d0	Bug 1738028: avoid a clang 13 unused variable warning in opt build. r=bbeurdoucheDifferential Revision: https://phabricator.services.mozilla.com/D130309--HG--extra : moz-landing-system : lando
clang bug	 https://github.com/JackieZN/SIMD_x86/commit/797a2847ad889cb1a270d71f6933afdfedd7fd83	*fix bug: Compiler error in file SimdInit.h (CLang, Windows).
clang bug	 https://github.com/ElectroPerf/android_kernel_asus_sdm660-LTO/commit/069b6261896e1be481167b485c3f3d8dd0e148e9	FROMLIST: kbuild: add support for clang LTOThis change adds the configuration option CONFIG_LTO_CLANG, andbuild system support for clang's Link Time Optimization (LTO). Inpreparation for LTO support for other compilers, potentially commonparts of the changes are gated behind CONFIG_LTO instead.With -flto, instead of object files, clang produces LLVM bitcode,which is compiled into a native object at link time, allowing thefinal binary to be optimized globally. For more details, see:  https://llvm.org/docs/LinkTimeOptimization.htmlWhile the kernel normally uses GNU ld for linking, LLVM supports LTOonly with lld or GNU gold linkers. This patch set assumes gold willbe used with the LLVMgold plug-in to perform the LTO link step. Dueto potential incompatibilities with GNU ld, this change also addsLDFINAL_vmlinux for using a different linker for the vmlinux_linkstep, and defaults to using GNU ld.Assuming LLVMgold.so is in LD_LIBRARY_PATH and CONFIG_LTO_CLANG hasbeen selected, an LTO kernel can be built simply by running makeCC=clang. LTO requires clang >= 5.0 and gold from binutils >= 2.27.Bug: 62093296Bug: 67506682Change-Id: Ibcd9fc7ec501b4f30b43b4877897615645f8655f(am from https://patchwork.kernel.org/patch/10060329/)Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Divyanshu-Modi <divyan.m05@gmail.com>Signed-off-by: Kunmun <kunmun.devroms@gmail.com>
clang bug	 https://github.com/supsm/MCPPPP-test/commit/bd63a6a277c8f71d058d6d037f40edcab302d216	fix clang warnings, fix tiny gui bug
clang bug	 https://github.com/xswz8015/skia/commit/404c7e1b39108ae8a8fe33fdd8e65ada1c427a45	Roll ANGLE from 51967b4fcf92 to 6cb08a2203e3 (6 revisions)https://chromium.googlesource.com/angle/angle.git/+log/51967b4fcf92..6cb08a2203e32022-03-03 ynovikov@chromium.org Revert "Increase end2end timeout and sharding on Pixel 6"2022-03-02 m.maiya@samsung.com Fix unaligned reads on armeabi-v7a2022-03-02 angle-autoroll@skia-public.iam.gserviceaccount.com Roll vulkan-deps from 6f0521f42451 to 7f867484330b (2 revisions)2022-03-02 angle-autoroll@skia-public.iam.gserviceaccount.com Roll SwiftShader from 6e9eafd34639 to 383901609736 (1 revision)2022-03-02 angle-autoroll@skia-public.iam.gserviceaccount.com Roll Chromium from 4f52dd6c4de1 to e2a60c1d35cf (443 revisions)2022-03-02 cnorthrop@google.com Vulkan: Disable shader validation cache on AndroidIf this roll has caused a breakage, revert this CL and stop the rollerusing the controls here:https://autoroll.skia.org/r/angle-skia-autorollPlease CC kjlubick@google.com on the revert to ensure that a humanis aware of the problem.To file a bug in ANGLE: https://bugs.chromium.org/p/angleproject/issues/entryTo file a bug in Skia: https://bugs.chromium.org/p/skia/issues/entryTo report a problem with the AutoRoller itself, please file a bug:https://bugs.chromium.org/p/skia/issues/entry?template=Autoroller+BugDocumentation for the AutoRoller is here:https://skia.googlesource.com/buildbot/+doc/main/autoroll/README.mdCq-Include-Trybots: skia/skia.primary:Build-Debian10-Clang-x86_64-Release-ANGLE;skia/skia.primary:Test-Win10-Clang-AlphaR2-GPU-RadeonR9M470X-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-Golo-GPU-QuadroP400-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC5i7RYH-GPU-IntelIris6100-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC6i5SYK-GPU-IntelIris540-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUC8i5BEK-GPU-IntelIris655-x86_64-Debug-All-ANGLE;skia/skia.primary:Test-Win10-Clang-NUCD34010WYKH-GPU-IntelHD4400-x86_64-Debug-All-ANGLETbr: kjlubick@google.comTest: Test: VertexAttributeTestES3.DrawWithUnalignedData*Test: Test: angle_end2end_tests --gtest_filter="*GLSLTest*Fragment*ES3_Vulkan"Change-Id: Ia79e75b29517a0a138f2cb4da7c568e2dfebb644Reviewed-on: https://skia-review.googlesource.com/c/skia/+/515217Commit-Queue: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>Bot-Commit: skia-autoroll <skia-autoroll@skia-public.iam.gserviceaccount.com>
clang bug	 https://github.com/scorp007/kernel_alioth/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/cafproton-sm8250/kernel_oneplus_sm8250/commit/9000f2a528c0b58deea62a911454323090a67492	fortify: Explicitly disable Clang supportcommit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.Clang has never correctly compiled the FORTIFY_SOURCE defenses due toa couple bugs:
clang bug	 https://github.com/JarlPenguin/platform_build_soong/commit/5b721536461306cdc580d38794fbd23ba941fdd8	No NDK libraries in clang-tidy pathDepsBug: 208310402Test: WITH_TIDY=1 make tidy-soongChange-Id: I530fc23a1f6215b8c7f8f2bfcb235d6f58c2a702
clang bug	 https://github.com/stevelorenz/build-vnf/commit/e606c8acbcf6f1b029b6de2c541f56ae770205bd	Fix bugs reported by clang-tidySigned-off-by: Zuo Xiang <xianglinks@gmail.com>
clang bug	 https://github.com/Canary-Buildbot/android_kernel_xiaomi_lavender/commit/21d16955e0cd21aa7db2a1c810f79a57610e1c6b	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: sohamxda7 <sensoham135@gmail.com>Signed-off-by: Prashant-1695 <prashant33968@gmail.com>Signed-off-by: ImPrashantt <prashant33968@gmail.com>
clang bug	 https://github.com/Amphaal/AudioTube/commit/d826854dde5c057efc76595a27c750c8467a552d	remove hack around clang bug with mingw
clang bug	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.3/commit/bb6a21efd888f5902cbd82ddb1213078f87a3b0f	Re: [LKP] Re: [x86/mm/64] f154f29085: BUG:kernel_reboot-without-warning_in_boot_stage - clang KCOV?
clang bug	 https://github.com/ionutnechita/linux-sunlight/commit/15cc1a6f991db139c980d3b3193b6b74752cb53a	ANDROID: kleaf: drop toolchain_version = CLANG_VERSIONThis is the default now.Test: THBug: 212640658Change-Id: I3fc1d7149f4e180ff1919339beb6432adf73dab3Signed-off-by: Yifan Hong <elsk@google.com>
clang bug	 https://github.com/riscv-android-src/toolchain-android_rust/commit/a5cccd036c7253920287f35dfb712e6180bfbe4a	Update clang to clang-r433403Test: presubmitBug: 197230471Change-Id: I62be0dc5bb819abe6a71a881ab2d8229df024cef
clang bug	 https://github.com/FireBurn/linux/commit/4be240b18aa67b1144af546bea2d7cad1b75c19b	Merge tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull FORTIFY_SOURCE updates from Kees Cook: "This series consists of two halves:   - strict compile-time buffer size checking under FORTIFY_SOURCE for     the memcpy()-family of functions (for extensive details and     rationale, see the first commit)   - enabling FORTIFY_SOURCE for Clang, which has had many overlapping     bugs that we've finally worked past"* tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  fortify: Add Clang support  fortify: Make sure strlen() may still be used as a constant expression  fortify: Use __diagnose_as() for better diagnostic coverage  fortify: Make pointer arguments const  Compiler Attributes: Add __diagnose_as for Clang  Compiler Attributes: Add __overloadable for Clang  Compiler Attributes: Add __pass_object_size for Clang  fortify: Replace open-coded __gnu_inline attribute  fortify: Update compile-time tests for Clang 14  fortify: Detect struct member overflows in memset() at compile-time  fortify: Detect struct member overflows in memmove() at compile-time  fortify: Detect struct member overflows in memcpy() at compile-time
clang bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/0160eb2a5978d9361cfee83f23db34f88dfdd4c0	Bug 1747773 - Build NSS with clang's integrated assembler on x86_64. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D134742
clang bug	 https://github.com/linuxppc/linux-ci/commit/b027471adaf955efde6153d67f391fe1604b7292	Revert "ubsan, kcsan: Don't combine sanitizer with kcov on clang"This reverts commit ea91a1d45d19469001a4955583187b0d75915759.Since df05c0e9496c ("Documentation: Raise the minimum supported versionof LLVM to 11.0.0") the minimum Clang version is now 11.0, which fixedthe UBSAN/KCSAN vs. KCOV incompatibilities.Link: https://bugs.llvm.org/show_bug.cgi?id=45831Link: https://lkml.kernel.org/r/YaodyZzu0MTCJcvO@elver.google.comLink: https://lkml.kernel.org/r/20220128105631.509772-1-elver@google.comSigned-off-by: Marco Elver <elver@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Kees Cook <keescook@chromium.org>Cc: Alexander Potapenko <glider@google.com>Cc: Dmitry Vyukov <dvyukov@google.com>Cc: Nathan Chancellor <nathan@kernel.org>Cc: Nick Desaulniers <ndesaulniers@google.com>Cc: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Andrew Morton <akpm@linux-foundation.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
clang bug	 https://github.com/D-os/system_core/commit/75c8e142e231dae507c99a5c39447b085db0c01e	Fix missing commaThis is discovered by Clang's -Wstring-concatenation diagnostic.Test: presubmitBug: 175068488Change-Id: Ied97b32e6707236621387bb06993d52a662d9d83
clang bug	 https://github.com/vbuslov/linux/commit/4be240b18aa67b1144af546bea2d7cad1b75c19b	Merge tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull FORTIFY_SOURCE updates from Kees Cook: "This series consists of two halves:   - strict compile-time buffer size checking under FORTIFY_SOURCE for     the memcpy()-family of functions (for extensive details and     rationale, see the first commit)   - enabling FORTIFY_SOURCE for Clang, which has had many overlapping     bugs that we've finally worked past"* tag 'memcpy-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  fortify: Add Clang support  fortify: Make sure strlen() may still be used as a constant expression  fortify: Use __diagnose_as() for better diagnostic coverage  fortify: Make pointer arguments const  Compiler Attributes: Add __diagnose_as for Clang  Compiler Attributes: Add __overloadable for Clang  Compiler Attributes: Add __pass_object_size for Clang  fortify: Replace open-coded __gnu_inline attribute  fortify: Update compile-time tests for Clang 14  fortify: Detect struct member overflows in memset() at compile-time  fortify: Detect struct member overflows in memmove() at compile-time  fortify: Detect struct member overflows in memcpy() at compile-time
clang bug	 https://github.com/mozilla/gecko-dev/commit/ce0c6b20bb81640618665f39f46d4a7d581f73c5	Bug 1624786 - Replace "clang-format off" with semicolon workaround for clang-format bug 1629756. r=spohlThis semicolon workaround is tidier than the `// clang-format off/on` comments and avoids turning off all clang-format checks. The comment also links to clang-format bug 1629756 so future code readers can learn why this extra semicolon exists. And if we find a way to fix this in clang-format, then we can search for this bug number to find and remove these extra semicolons and comments.Differential Revision: https://phabricator.services.mozilla.com/D71504
clang bug	 https://github.com/mysql/mysql-server/commit/d0c5fa2db2b2c35d7d1bacc615de34350bfb49b1	Bug#31315708 doc-comment warnings from clangProblem=======building with clang on windows and using -Wdocumentationreports new warnings.Change======- fixed doc-commentsRB: 24404
clang bug	 https://github.com/ColtOS-Devices/android_kernel_oneplus_msm8998/commit/e76d097496d5a8cc98cc5afb412514360f70860c	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang bug	 https://github.com/SuperiorOS-Devices/kernel_xiaomi_tulip/commit/c6cd49d806a1e4ed00414797b6a74915026cb94a	msm: camera_v2: remove gcc invocations.Remove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproperAndroid GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I10557fb29b4a5d4139d690661c22ab5be3fedaafSigned-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Divyanshu-Modi <divyan.m05@gmail.com>
clang bug	 https://github.com/d4rk-lucif3r/LuciferKernel/commit/442f805d12f8a7194cc035e47cc5a3917103242a	ANDROID: add support for clang Shadow Call Stack (SCS)This change adds generic support for clang's Shadow Call Stack, whichuses a shadow stack to protect return addresses from being overwrittenby an attacker. Details are available here:  https://clang.llvm.org/docs/ShadowCallStack.htmlBug: 112277034Change-Id: Idd553b7c978b0673ab533a68980fb9a654f4510cSigned-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: prorooter007 <shreyashwasnik112@gmail.com>Signed-off-by: d4rk-lucif3r <lucifer78908@gmail.com>Signed-off-by: d4rk-lucif3r <lucifer78908@gmail.com>
clang bug	 https://github.com/d4rk-lucif3r/LuciferKernel/commit/8e748e86b6af97cd41147a310ed9284d4256649e	ANDROID: add support for clang Shadow Call Stack (SCS)This change adds generic support for clang's Shadow Call Stack, whichuses a shadow stack to protect return addresses from being overwrittenby an attacker. Details are available here:  https://clang.llvm.org/docs/ShadowCallStack.htmlBug: 112277034Change-Id: Idd553b7c978b0673ab533a68980fb9a654f4510cSigned-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: prorooter007 <shreyashwasnik112@gmail.com>Signed-off-by: d4rk-lucif3r <lucifer78908@gmail.com>
clang bug	 https://github.com/SocratesWong/CS-6120-LLVM-Project/commit/21c165de2a1bcca9dceb452f637d9e8959fba113	[CMake] Pass bugreport URL to standalone clang buildBUG_REPORT_URL is currently used both in LLVM and in Clang but declaredonly in the latter.  This means that it's missing in standalone clangbuilds and the driver ends up outputting:  PLEASE submit a bug report to  and include [...](note the missing URL)To fix this, include LLVM_PACKAGE_BUGREPORT in LLVMConfig.cmake(similarly to how we pass PACKAGE_VERSION) and use it to fillBUG_REPORT_URL when building clang standalone.Differential Revision: https://reviews.llvm.org/D84987
clang bug	 https://github.com/systemd/package-notes/commit/c226e073be877b950dd0dae2357962115452d645	rpm: disable notes when clang toolchain is used on armPer https://bugzilla.redhat.com/show_bug.cgi?id=2043178#c27.(cherry picked from commit d26d18e6f420cacba669ae1cf6ac911187c47dc4)
clang bug	 https://github.com/AOSP-Krypton/hardware_interfaces/commit/87e83068784b65ab851e4ff65a1099de4e777c9e	Relocate ExecutionBurst* classes to NN util codeThe only changes when copying these files were .clang-format differencesand correcting a typo in a comment.Bug: 177267324Test: mmaChange-Id: I96cc2402642e1e3076ac7e78e06163c1d3d41701
clang bug	 https://github.com/dillonhuff/clockwork/commit/cd25199b6b4c0d05655c09fbfa1f5e6d8a616e5b	Fixed stack smashing bug on clang
clang bug	 https://github.com/qtplatz/qtplatz/commit/ae27a78b9a235bd4ee756f94ca21be2cb2c6464e	minior bug for compiling on mac clang
clang bug	 https://github.com/mozilla/gecko-dev/commit/209051d323a6b06cdcfafe5b00a84dc4451c0956	Bug 1666525 - Update to clang 11.0.0 rc3 r=firefox-build-system-reviewers,rstewartclang 11.0.0 rc3 has been tagged today and will likely be the final build.Differential Revision: https://phabricator.services.mozilla.com/D91039
clang bug	 https://github.com/xdroid-CAF/xd_build_soong/commit/ad50ce83497c7d25a5167ea6bdef1f0290b99f58	[strip.sh] Move remaining GNU binutils usage to llvm binutilsWith clang r377782, llvm binutils implements all the necessaryfuntionaility for strip.sh. We can finally get rid of all the fallbackGNU binutils usage.Test: mBug: 141010852Bug: 135627985Change-Id: I110f6028dab7f599decf59a5cb1b927b35e11857
clang bug	 https://github.com/AnggaSP/android_kernel_xiaomi_msm8998/commit/e11ed9fc5ad9dd87d427198709a0ab5682c80336	FROMLIST: BACKPORT: arm64: select ARCH_SUPPORTS_LTO_CLANGAllow CONFIG_LTO_CLANG to be enabled for the architecture.Bug: 62093296Bug: 67506682Change-Id: Id8e06b49877c4de2f15b51fc432d601b83b2c68f(am from https://patchwork.kernel.org/patch/10060333/)Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Angga Satya Putra <anggasp@hotmail.com>
clang bug	 https://github.com/omnirom/android_frameworks_base/commit/788703574368a83eaecd689883a1e9bed32fb21d	Fix clang-analyzer-core.uninitialized.Branch warningsBug: 154760495Test: make with WITH_TIDY=1 and DEFAULT_GLOBAL_TIDY_CHECKS=clang-analyzer-core.uninitialized.BranchChange-Id: I569749166177c25e63b32fb468dccd13797acc05
clang bug	 https://github.com/halogenOS/android_kernel_oneplus_msm8998/commit/8f5b3219a3c468a0ae0f6b1cddc4b26511922184	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
clang bug	 https://github.com/HardenedBSD/ports/commit/adbaad235b4cfaa6571f3c1fb0bce2b23d50c400	net/ifdepd: fix clang 13 warnings and non-static inline functionsBuilding net/ifdepd with clang and lld 13 results in a few warnings, anda link error:cc  -O2 -pipe  -fstack-protector-strong -fno-strict-aliasing  -Wall -Wnested-externs -Wpointer-arith -Winline -Wcast-qual -Wredundant-decls -c ifdepd.c -o ifdepd.oifdepd.c:420:4: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]          free(d_ints);          ^ifdepd.c:418:2: note: previous statement is here        if (D)        ^ifdepd.c:434:4: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]          free(s_ints);          ^ifdepd.c:432:2: note: previous statement is here        if (S)        ^2 warnings generated.cc -O2 -pipe  -fstack-protector-strong -fno-strict-aliasing  -Wall -Wnested-externs -Wpointer-arith -Winline -Wcast-qual -Wredundant-decls -o ifdepd ifdepd.old: error: undefined symbol: cleanup>>> referenced by ifdepd.c>>>               ifdepd.o:(main)>>> referenced by ifdepd.c>>>               ifdepd.o:(main)>>> referenced by ifdepd.c>>>               ifdepd.o:(main)>>> referenced 1 more timescc: error: linker command failed with exit code 1 (use -v to see invocation)*** Error code 1The warnings about misleading indentation are indicating an actual bug,which can be fixed by adding a few braces. The link error is becauseifdepd uses an inline function without either a static or an externspecifier. Fix this by adding a static specifier.Approved by:
clang bug	 https://github.com/romi06/rgb/commit/f26aec701f4bcf512be250e819e8c0b076aada93	Suppress clang tidy warning, because of a known bug in clang tidy: https://bugs.llvm.org/show_bug.cgi?id=41311
clang bug	 https://github.com/strake/ghc/commit/642dc5ee134250aaf7ab3c5c2b4ceb532625608d	Work around lack of __sync_fetch_and_nand in clangclang chose to not implement this function. Seehttp://llvm.org/bugs/show_bug.cgi?id=8842
clang bug	 https://github.com/GnosisROM/build_soong/commit/690c8b8b5e62c47b545bc7c37262287bb02e7189	Switch from clang-r377782b to clang-r377782c.Bug: 149849077Test: N/AChange-Id: Id8b5dd13e87d1acd8dab1431fa6859721553c49c(cherry picked from commit 3125c990edc113b8dcc694fd436c2fffaf1abcdd)
clang bug	 https://github.com/peterzuger/.emacs.d/commit/0232226c03ff8627fa4b13b02445489acd5df70b	removed flycheck-clang analyzerflycheck-clang-analyzer cannot handle c++ files without extension.TODO: file bug report with flycheck-clang-analyzer.
clang bug	 https://github.com/xdroid-CAF/xd_build_soong/commit/081ca41e54e7172a08a1556d5352fba59934def8	Revert "soong: SDCLANG: Switch from TARGET_PRODUCT to TARGET_BOARD_PLATFORM"This reverts commit 20233ef2ff0b0161d072ff3554e7bcd261f52b1b.QSSI build fails with this changes as it is picking up the clang definition from msmile based on TARGET_BOARD_PLATFORM.Bug: 188236288Change-Id: I63937536c7cd515487fa0e2473150f63ea2a075b
clang bug	 https://github.com/mozilla/releases-comm-central/commit/eaf46d3153f6067cb944431e8fe999580e496e25	Bug 1612247 - Incidental tweaks from clang-format. r=mkmelin
gcc bug	 https://github.com/glscopeclient/scopehal/commit/8672f04120dec3e735ec1e411a187d225347a7f2	#295: turn off AVX2/512 on Windows/GCC until https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412 is resolved
gcc bug	 https://github.com/ldalek/buildroot/commit/88f79aead8fa750bc0e93ef8798751a4b463e9d9	toolchain: update gcc bug 99410Gcc bug 99410 reappeared in gcc 10.x while building belle-sip, but it'sfixed on gcc 11.x, so let's update bug conditions.Fixes:http://autobuild.buildroot.net/results/846597f3573d3b0d52e80627a9577d14b9348547/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/ldalek/buildroot/commit/de1a3737879eef4a9dd283269a896e50a1badabf	package/poppler: fix build failure due to gcc bug 68485The bullet package exhibits gcc bug 68485 when built for the Microblazearchitecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_68485=y like wealready do for BR2_TOOLCHAIN_HAS_GCC_BUG_85180=y.Fixes:http://autobuild.buildroot.net/results/96e77ddba5042ba4dacb16b328fc298a4f00f49a/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/monkeynova/advent-of-code/commit/0ec21b051d92c4d38a8b554dcb4774136701198e	AOC working on raspberry pi 'hubris'One bug around gcc (on size_t being unsigned and overflow), allbenchmarks run and a fix for run_all_benchmarks.sh
gcc bug	 https://github.com/apache/apr/commit/d5f3f3ff27ee85ffc0db9966ca9478684959c40b	* Improve detection of _Thread_localGCC < 4.9 reports __STDC_VERSION__ >= 201112 but does not implement_Thread_local. Take care of this in the condition.See: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=203066git-svn-id: https://svn.apache.org/repos/asf/apr/apr/trunk@1898779 13f79535-47bb-0310-9956-ffa450edef68
gcc bug	 https://github.com/tc3t/dfglib/commit/91751e82471d8654fc15704c0753c952d042192e	[buildfix] cont::TrivialPair: adjustment to fix building on older GCC.-Probably affects GCC's before version 7 (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56480)
gcc bug	 https://github.com/TheRealMichaelWang/superforth/commit/9d6d362a5c49199b1b88e39d8ba2e7888bbdcc79	Fixed a gcc bug
gcc bug	 https://github.com/RTEMS/sourceware-mirror-binutils-gdb/commit/f766f79a1f40a0b91fee711b83e204789398c6b6	[gdb/testsuite] Add xfail for PR gcc/101643With gcc 8.5.0 I run into:...(gdb) print bad^M$2 = (0 => 0 <repeats 25 times>)^M(gdb) FAIL: gdb.ada/big_packed_array.exp: scenario=minimal: print bad...while with gcc 9.3.1 we have instead:...(gdb) print bad^M$2 = (false <repeats 196 times>)^M(gdb) PASS: gdb.ada/big_packed_array.exp: scenario=minimal: print bad...This is caused by gcc PR, which I've filed athttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=101643 "[debug, ada] packed arraynot described as packed".Fix by marking this as XFAIL.Tested on x86_64-linux.gdb/ChangeLog:2021-07-27  Tom de Vries  <tdevries@suse.de>
gcc bug	 https://github.com/ammarfaizi2/linux-block/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
gcc bug	 https://github.com/woodsts/buildroot/commit/fe4e06d3176b01834fda92d25ae7ece65f3550e0	toolchain: improve conditions for gcc bug 99140Gcc bug 99140 has been fixed on gcc 8.x but reappeared on gcc 9.x whileit's been fixed on gcc 10.x+. So let's updateBR2_TOOLCHAIN_HAS_GCC_BUG_99140 accordingly.Fixes:http://autobuild.buildroot.net/results/c55/c55f50a8d657695f0d5492c32efa666254cd7f99/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/rohankumardubey/scyllaDB/commit/eff392073c96280cb6b583e22ef2233c0631b9b1	memtable: fix gcc function argument evaluation order induced use after moveclang evaluates function arguments from left to right, while gcc does soin reverse. Therefore, this code can be correct on clang and incorrecton gcc:```f(x.sth(), std::move(x))```This patch fixes one such instance of this bug, in memtable.cc.Fixes #9605.Closes #9606
gcc bug	 https://github.com/kofuk/WebKit/commit/4a5d063529ebb91728bb3e20677ed1a1e275668e	[JSC] Work around apparent miscompilation on ARM/GCC >=8.4https://bugs.webkit.org/show_bug.cgi?id=227125Reviewed by Filip Pizlo.This seems to be a GCC miscompilation, revealed byx.  Introduce aworkaround for the GCC versions that seem to be affected.* jit/RegisterSet.h:Canonical link: https://commits.webkit.org/238917@maingit-svn-id: https://svn.webkit.org/repository/webkit/trunk@278991 268f45cc-cd09-0410-ab3c-d52691b4dbfc
gcc bug	 https://github.com/percona/percona-xtradb-cluster/commit/53f6325ab2a10049158b2a3ec581d109aa18c316	Bug #32886268 UPGRADE FROM GCC 7 TO GCC 10 ON SLES 12Bug #32886439 MOVE TO NON STANDARD GCC 9 ON OPENSUSE15 AND SLES 15Current MySQL 8.0 uses a custom GCC 7 on SLES 12 platform.To prepare for upgrade of C++ language standard switch to customGCC 10 on Suse 12, gcc 9 on Suse 15.Change-Id: I658473b5024bb0efb908b2d86e236c9aa163f9a0
gcc bug	 https://github.com/geoschem/gcpy/commit/d2acd5af6e642ee4fc00e53c0dc3a6919bd52af1	Fix typo bug in 1-yr full chemistry benchmark GCHP vs GCC plotting
gcc bug	 https://github.com/M680x0/M680x0-mono-repo/commit/6cd232056c3cdaf5e9eb85ede8e42d0db97f0f71	[MLIR][NFC] Inline lambda to workaround gcc 9.1,9.2 buggcc 9.1/9.2 has a bug (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90538)which leads to an incorrect error when expanding parameter packs multipletimes in a lambda. Inlining this lambda to work around this issue.Reviewed By: rriddle, CarolineConcattoDifferential Revision: https://reviews.llvm.org/D81828
gcc bug	 https://github.com/ldalek/buildroot/commit/3529e8c21c939d73cc0090cb41c17b02db5b1013	board/andes: fix build failure with host gcc >= 10Add patch to fix linux bug:```  HOSTLD  scripts/dtc/dtc/usr/bin/ld: scripts/dtc/dtc-parser.tab.o:(.bss+0x10): multiple definition of `yylloc'; scripts/dtc/dtc-lexer.lex.o:(.bss+0x0): first defined herecollect2: error: ld returned 1 exit status```Fixes:https://gitlab.com/buildroot.org/buildroot/-/jobs/2021478164Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/Tomoms/android_kernel_sony_msm8960t/commit/f74d38ffaa43a0981de7aa1b2d3e0142b4d0f025	[PATCH] ARM: fix put_user() for gcc-8Building kernels before linux-4.7 with gcc-8 results in many build failureswhen gcc triggers a check that was meant to catch broken compilers:/tmp/ccCGMQmS.s:648: Error: .err encounteredAccording to the discussion in the gcc bugzilla, a local "registerasm()" variable is still supposed to be the correct way to force aninline assembly to use a particular register, but marking it 'const'lets the compiler do optimizations that break that, i.e the compiler isfree to treat the variable as either 'const' or 'register' in that case.Upstream commit 9f73bd8bb445 ("ARM: uaccess: remove put_user() codeduplication") fixed this problem in linux-4.8 as part of a larger change,but seems a little too big to be backported to 4.4.Let's take the simplest fix and change only the one broken line in thesame way as newer kernels.Suggested-by: Bernd Edlinger <bernd.edlinger@hotmail.de>Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85745Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86673Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/roberteg16/Quark/commit/3d89fb4d13bc3af1c3643a310b90fce51a649119	[RISCV] Support machine constraint "S"Similar to D46745, "S" represents an absolute symbolic operand, whichcan be used to specify the access models, e.g.  extern int var;  void *addr_via_asm() {    void *ret;    asm("lui %0, %%hi(%1)\naddi %0,%0,%%lo(%1)" : "=r"(ret) : "S"(&var));    return ret;  }'S' is documented in trunk GCC: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101275Reviewed By: luismarquesDifferential Revision: https://reviews.llvm.org/D105254
gcc bug	 https://github.com/NixOS/nix/commit/fc2d31c423377cea2355e7f7a4ce75e64a7f3620	Add `(StoreConfig*)` casts to work around a GCC bugWork around https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80431 that wasalready there in the code but was accidentally removed in the lastcommits
gcc bug	 https://github.com/herumi/misc/commit/34e6c33ae197f5ce026ddcfca15e241702771e9b	add test of gcc bug
gcc bug	 https://github.com/mdavidsaver/epicscorelibs/commit/78d2f20fa8cbc6a357c6340f890f8d3f84e0be84	Com: Adjust epicsAtomic conditionals for GCCcf. https://bugs.launchpad.net/epics-base/+bug/1932118
gcc bug	 https://github.com/cygwin/cygport/commit/9ac6f40c06fbe0358edab8338ca47acc3b76c8ac	Add -Werror=return-type to CXXFLAGS/OBJCXXFLAGS.Ignoring -Wreturn-type for C++ programs may lead to crashes.G++ >= 8.0 assumes that control never reaches the end of anon-void function.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96181
gcc bug	 https://github.com/clearlinux-pkgs/gjs/commit/2b4f7693bcd6039615c1157cb8e40c9ec59ce777	gjs: Autospec creation for update from version 1.70.0 to version 1.70.1Evan Miller (1):      arg: Replace gsize with size_tEvan Welsh (1):      Handle optional out parameters in callbacksPhilip Chimento (2):      build: Post-release version bump      release: Prepare for 1.70.1Sergei Trofimovich (1):      gjs/jsapi-util.cpp: fix build on gcc-12Simon McVittie (2):      installed-tests: Install matchers.js      build: Link with libatomic if necessaryVersion 1.70.1--------------- Build and crash fixes backported from the development branch.- Closed bugs and merge requests:  * Handle optional out parameters in callbacks [#439, !681, Evan Welsh]  * Link fails on Debian armel|mipsel|powerpc: needs more -latomic [#442, !686,    Simon McVittie]  * gjs/jsapi-util.cpp: fix build on gcc-12 [!697, Sergei Trofimovich]
gcc bug	 https://github.com/bolucat/Fuchsia/commit/edc470e090c43e9dffb91a2b50d6b59c8cabcbbe	[devshell] Update fx roll-compiler default manifestThe following have moved from fuchsia/prebuilts to fuchsia/toolchain:clangbinutils-gdbgccgogomareclientrustrust_bindgensysroot/linuxgnninjabreakpadcmakeyapfvpythonpython3buildidtoolllvmjqBug: 90841Change-Id: I36650bfd9327b177e95f71b00e1a5ad5d2d3cf63Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/625214Reviewed-by: Roland McGrath <mcgrathr@google.com>Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Anthony Fandrianto <atyfto@google.com>
gcc bug	 https://github.com/ammarfaizi2/linux-block/commit/ad7489d5262d2aa775b5e5a1782793925fa90065	mm: uninline copy_overflow()While building a small config with CONFIG_CC_OPTIMISE_FOR_SIZE, I endedup with more than 50 times the following function in vmlinux because GCCdoesn't honor the 'inline' keyword:
gcc bug	 https://github.com/blawar/ooot/commit/7728f75d2a8b99b480f56690d49b4c2d9edf9299	fix rodata order inconsistency bug in mkldscript (required for GCC support) (#932)* fix rodata order inconsistency bug in mkldscript (required for GCC support)* Update tools/mkldscript.cCo-authored-by: Dragorn421 <Dragorn421@users.noreply.github.com>Co-authored-by: Dragorn421 <Dragorn421@users.noreply.github.com>
gcc bug	 https://github.com/Silverlan/prosper/commit/0b861f515b41384be14132e70cd0701e70eead70	Add workaround for gcc compiler bug - https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88165
gcc bug	 https://github.com/Panchajanya1999/linux-mainline/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
gcc bug	 https://github.com/tsduck/tsduck/commit/b2530ca67815154038d6b93f23c19fbf69747603	Workaround for old GCC 4/8 bug
gcc bug	 https://github.com/percona/percona-xtradb-cluster/commit/7f2f126df3609d5e81934e9bd01caa05f4f0bf1c	Bug #32803241 ADD -WEXTRA-SEMI TO GCC >= 8 BUILDWe have used -Wextra-semi for clang builds for several years.Add it to gcc builds as well (for versions >= 8.0).Change-Id: If2931cfad818afea0d286fa078c22e56c0448c25(cherry picked from commit c03e9b7cb39037a80eb0ee0819b26f2147ea953b)
gcc bug	 https://github.com/ammarfaizi2/linux-block/commit/e1d7eed180b6355cedfbbd5c69ef7e0f145a5510	Merge tag 'qcom-arm64-fixes-for-5.17' of git://git.kernel.org/pub/scm/linux/kernel/git/qcom/linux into arm/fixesQualcomm ARM64 DeviceTree fixes for 5.17This starts off by fixing an issue introduced in a bug fix in theglobal clock controller, where the symbol clocks for UFS wouldend up picking the wrong parent clock which breaks UFS.It then makes sure that the reference clock for the USB blocks areenabled, even with booting without clk_ignore_unused.It corrects the apps SMMU interrupts defintion by adding a missinginterrupt in the list.Lastly it disables the Qualcomm crypto hardware (for now) on the LenovoYoga C630, to prevent the cryptomanager tests during boot from crashingthe device.* tag 'qcom-arm64-fixes-for-5.17' of git://git.kernel.org/pub/scm/linux/kernel/git/qcom/linux:  arm64: dts: qcom: c630: disable crypto due to serror  arm64: dts: qcom: sm8450: fix apps_smmu interrupts  arm64: dts: qcom: sm8450: enable GCC_USB3_0_CLKREF_EN for usb  arm64: dts: qcom: sm8350: Correct UFS symbol clocksLink: https://lore.kernel.org/r/20220301033526.1801295-1-bjorn.andersson@linaro.orgSigned-off-by: Arnd Bergmann <arnd@arndb.de>
gcc bug	 https://github.com/libsdl-org/SDL/commit/5045d299a6a73219d0e70abb74d6a17186a4db0f	enable AddressSanitizer only for GCC 5 onwards (bug #5533)
gcc bug	 https://github.com/owlCoder/pjisp-Z-K/commit/cb78c5312012349baa6e7348d61b8aaa84825d2f	gcc: Fix weird buggcc: swap variables location and fix bug!?
gcc bug	 https://github.com/openeuler-mirror/kernel/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
gcc bug	 https://github.com/AokChain/AokChain/commit/38288bbb2cb7e00be8a0616779ac894d33c8b6a4	GCC bug fix
gcc bug	 https://github.com/percona/percona-xtradb-cluster/commit/e5dd272707c6b89cb0240c9e073b973f6cbcb600	Bug #32876974 ADD HARDENING FLAGS TO STANDALONE BUILDS ON DEB/RPM PLATFORMS.Post-push fix: do not use gcc-specific flags when building with clang.Change-Id: I159cb9c634c3aa356f4ecb84941c4f852aba9d3e
gcc bug	 https://github.com/ClickHouse/ClickHouse/commit/8e5279cf6961ac62f1b2e8dadcf356a21e1f6eda	fix gcc explicit namespace bug
gcc bug	 https://github.com/ODEX-TOS/linux/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
gcc bug	 https://github.com/percona/percona-xtradb-cluster/commit/70de3e27f0f2de887135d703a1d8f1070c6744c5	Bug #32729945 FIX BUILD WARNINGS FROM GCC 11 [noclose]Post-push fix for clang: -Werror,-Wextra-semiChange-Id: I4f21390735cb70359b068d970ae3bf37cc4e46b2
gcc bug	 https://github.com/mpe/linux-fullhistory/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
gcc bug	 https://github.com/percona/percona-xtradb-cluster/commit/1aad79fd9fac7da50c23f02d2286e5ac16e9b7d9	Bug #32644631: PRELIMINARY FIXES FOR WL #14419Post-push fix: Fix a GCC warning.Change-Id: If28a78ec805c4fc246f22ce939dfe5d00408da4d
gcc bug	 https://github.com/maitrungduc1410/webrtc/commit/3987e61086b277e26e999159cff1f4f188dfddbe	GCC: fix template specialization in webrtc::BitstreamReaderGCC complains that explicit specialization in non-namespace scopeis happening for webrtc::BitstreamReader::Read(). However,specializationvfor bool isn't used because std::is_unsigned<bool>::valuereturns true. Add std::is_same for bool check and enable secondspecialization only for bool types.Bug: chromium:819294Change-Id: I1873cd59e2737516bd4012fb952da65d6bf3172bReviewed-on: https://webrtc-review.googlesource.com/c/src/+/231561Reviewed-by: Danil Chapovalov <danilchap@webrtc.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Danil Chapovalov <danilchap@webrtc.org>Cr-Commit-Position: refs/heads/main@{#35007}
gcc bug	 https://github.com/sourceruckus/linux-mdl/commit/d66e3edee7af87fe212df611ab9846b987a5070f	futex: Remove unused variable 'vpid' in futex_proxy_trylock_atomic()The recent bug fix left the variable 'vpid' and an assignment to it around,but the variable is otherwise unused.clang dose not complain even with W=1, but gcc exposed this.Fixes: 4f07ec0d76f2 ("futex: Prevent inconsistent state and exit race")Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
gcc bug	 https://github.com/madisongh/openembedded-core/commit/61947fc024bf18b42547d2ea4cad90184132994d	gcc: revert libstc++-gdb.py installation changesCommit dbb87d in the GCC 11 branch was intended to make the installation ofthis Python module more robust, but for unknown reasons the library_namein libstdc++.la in baremetal builds (for example, Zephyr) is unset, so themodule is just installed as "-gdb.py".This may be a GCC bug, or a bug in our build. Until that is resolved,revert the commit to fix the packaging.Signed-off-by: Ross Burton <ross.burton@arm.com>Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc bug	 https://github.com/percona/percona-xtradb-cluster/commit/ae8cc9b2ea5a0ea2657798e5bd2956bbc6b164ea	Bug#32929012 remove gcc-4.x workaround for std::regexIssue=====The http server plugin depends on posix regex C-functions to workaroundthe missing std::regex support in the libstdc++ of gcc-4.x.As GCC 4.x isn't supported anymore as C++14 is the base requirement tobuild MySQL Router, the corresponding code can be removed and std::regexbe used on all supported compilers.Change======- use std::regex directly- remove posix_re.hRB: 26471
gcc bug	 https://github.com/lemourin/coro-cloudstorage/commit/b9d1f8e341438f6171feaba135b386eea9719b19	src: workaround gcc bugs.
gcc bug	 https://github.com/marshmello61/kernel_realme_RMX2170/commit/7ba68ecde1938bf5557949d5da4bb60e3f350ca9	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Samuel Pascua <pascua.samuel.14@gmail.com>
gcc bug	 https://github.com/Didstopia/SDL/commit/546f2b039981646ddb1730235e8d1592f52c6e39	enable AddressSanitizer only for GCC 5 onwards (bug #5533)
gcc bug	 https://github.com/LorenzoBianconi/bpf-next/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
gcc bug	 https://github.com/StollD/linux-fedora/commit/d66e3edee7af87fe212df611ab9846b987a5070f	futex: Remove unused variable 'vpid' in futex_proxy_trylock_atomic()The recent bug fix left the variable 'vpid' and an assignment to it around,but the variable is otherwise unused.clang dose not complain even with W=1, but gcc exposed this.Fixes: 4f07ec0d76f2 ("futex: Prevent inconsistent state and exit race")Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
gcc bug	 https://github.com/percona/percona-xtradb-cluster/commit/cfbb757a45074f8f2da5b754f8d483c4b8994421	Bug #32830753 WARNINGS WITH GCC 10 AND -DWITH_ASAN=1Fix two -Wstringop-truncation warnings.Use snprintf() rather than strncpy().Change-Id: Ia12405b127403bb48caef71643028f5872575794(cherry picked from commit 15b6b735a0022c43ef3f24e9e57bb7885b35fbda)
gcc bug	 https://github.com/roolebo/gnulib/commit/5a8a1598e1243599feb302f0f75d947553f2918f	careadlinkat: warn better about GCC bug 93644* lib/careadlinkat.c (readlink_stk): When --enable-gcc-warnings isnot in effect, use "#warning" to let builders know more clearlyabout GCC bug 93644, because the bug triggers even if no -W optionis given to GCC.
gcc bug	 https://github.com/alpinelinux/aports/commit/e51b12808681bd3a097df7832e10b786169195ca	main/gcc: move gcc 10 partial inlining feature to -O3 or higher due to bugs
gcc bug	 https://github.com/lemourin/coro-http/commit/0e507e4040d2bcaa7aa1ab7a2efb45e68bb6c5b9	curl_http: workaround gcc bug.
gcc bug	 https://github.com/lemourin/coro-cloudstorage/commit/4aec48472cc532b2daa800c74289e008e3ec8414	Workaround GCC bug.
gcc bug	 https://github.com/linuxppc/linux-ci/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
gcc bug	 https://github.com/easybuilders/easybuild-easyconfigs/commit/b51fda40af9edcc364519cf6dcf2cc5322f9c6c7	Fix miscompilation bug on POWER with GCC
gcc bug	 https://github.com/AtomicXZ/android_kernel_xiaomi_phoenix/commit/ea3ac85cc7221af78e1029d5a67a66f61e6e14fc	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: AtomicXZ <achubadyal4@gmail.com>
gcc bug	 https://github.com/vsf-linux/nano/commit/27c8f13fc9be521f7ce0b92f89dd308eb208b1f1	tweaks: change the type of a variable, to avoid a compiler warningA newer compiler (gcc-10.3) said: browser.c:174:34: warning:  field width specifier '*' expects argument of type 'int'It's fine for 'longest' to be an integer, as a filename in Unix isat most 255 bytes long, which can occupy at most 510 columns (whenthe name consists entirely of control codes), and that fits easilywithin an 'int', which has at least fifteen bits, unsigned.Well... in theory 'tabsize' could be set to an insanely high number,and if a filename contains several tabs, this could cause 'longest'to overflow.  (Why doesn't the compiler warn about that?)  If thatwere to occur, and the filename with the tabs were the last in thelist, then 'longest' would get set to the minimum width: 15.  Thatwould not be correct, but... nothing bad would happen.This addresses https://savannah.gnu.org/bugs/?62014.Reported-by: Mike Frysinger <vapier@gentoo.org>
gcc bug	 https://github.com/xiaoyuechen/einu/commit/750658d43d99fc2399f3d512c5b1d5613df98bf8	Fix gcc given bugs
gcc bug	 https://github.com/xiaoyuechen/einu/commit/a80f360b86099c9b281b6850e3aa3cb27ec92f89	Fix gcc given bugs
gcc bug	 https://github.com/tenzir/vast/commit/8ae969b0dceb09efd4f16614532791917d2f9d79	Merge pull request #1350Remove void_t GCC bug workaround
gcc bug	 https://github.com/jeffmerkey/linux/commit/ecb108e3e3f7c692082b7c6fce41779c3835854a	ARM: 9144/1: forbid ftrace with clang and thumb2_kernelclang fails to build kernels with THUMB2 and FUNCTION_TRACERenabled when there is any inline asm statement containingthe frame pointer register r7:arch/arm/mach-exynos/mcpm-exynos.c:154:2: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]arch/arm/probes/kprobes/actions-thumb.c:449:3: error: inline asm clobber list contains reserved registers: R7 [-Werror,-Winline-asm]Apparently gcc should also have warned about this, and theconfiguration is actually invalid, though there is somedisagreement on the bug trackers about this.Link: https://bugs.llvm.org/show_bug.cgi?id=45826Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94986Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
gcc bug	 https://github.com/alibaba/MNN/commit/3d51e1454d91eb60709942cc219c1b733fd67e52	[PATCH 218/350] Fix bug for gcc compute log slow
gcc bug	 https://github.com/xR3b0rn/dbcppp/commit/3512634c61286f7f9b5f9f526a38642be36a12df	Unified container usage (#53)* Unified container usage* Removed robin-map* Fixed bug only appeard when compiling with gcc* Added missing ;* Removed robin_map
gcc bug	 https://github.com/THUDM/cogdl/commit/23eea664c3d12281103d6310152e4fade650405f	[BugFix] Fix bugs in stpgnn and heterogenous training (#209)* Fix bugs in stpgnn and heterogenous training* Add gcc to .travs.yml* gcc installation* Support subgraph/sample_adj with python* Modify download-url of kg dataset* Ignore han_dblp test* fix bugs in stpgnn and link-p闁? fix typo
gcc bug	 https://github.com/fabiangreffrath/woof/commit/acc966277a154fa9cf9641d62b26f66075313919	emulate 'no fog on spawn west' vanilla bug (#132)* emulate 'no fog on spawn west' vanilla bug* fix gcc build
gcc bug	 https://github.com/apache/arrow/commit/482ac5fa763f48efca8f83560da51fff1084df49	ARROW-10867: [C++] Workaround gcc internal compiler errorSeveral gcc versions (from at least 7.x to 10.x) crash on the current development version of Arrow.Upstream bug report is at https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98282Closes #8923 from pitrou/ARROW-10867-internal-gcc-errorAuthored-by: Antoine Pitrou <antoine@python.org>Signed-off-by: Benjamin Kietzman <bengilgit@gmail.com>
gcc bug	 https://github.com/simd-everywhere/simde/commit/e142a5921823b6aaa76a86036c99724cd6558007	neon/ld{2,3,4}: disable -Wmaybe-uninitialized on all recent GCCAt -O3 (at least), even recent GCC versions will emit this diagnostic,but it's a false positive.  My understanding is that this diagnosticis known to be imperfect, so I don't currently plan on filing a bug.
gcc bug	 https://github.com/CraftRom/Chidori-Kernel_surya/commit/2f18d095474ef519612cd2e7a9917bd596e207f3	BACKPORT: lib: Prepare zstd for preboot environment, improve performanceThese changes are necessary to get the build to work in the prebootenvironment, and to get reasonable performance:- Remove a double definition of the CHECK_F macro when the zstd  library is amalgamated.- Switch ZSTD_copy8() to __builtin_memcpy(), because in the preboot  environment on x86 gcc can't inline `memcpy()` otherwise.- Limit the gcc hack in ZSTD_wildcopy() to the broken gcc version. See  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81388.ZSTD_copy8() and ZSTD_wildcopy() are in the core of the zstd hot loop.So outlining these calls to memcpy(), and having an extra branch are verydetrimental to performance.Signed-off-by: Nick Terrell <terrelln@fb.com>Signed-off-by: Ingo Molnar <mingo@kernel.org>Tested-by: Sedat Dilek <sedat.dilek@gmail.com>Reviewed-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20200730190841.2071656-2-nickrterrell@gmail.com[cyberknight777: backport to 4.14]Signed-off-by: Cyber Knight <cyberknight755@gmail.com>Signed-off-by: Salllz <sal235222727@gmail.com>
gcc bug	 https://github.com/SoptikHa2/gnulib-2020/commit/5a8a1598e1243599feb302f0f75d947553f2918f	careadlinkat: warn better about GCC bug 93644* lib/careadlinkat.c (readlink_stk): When --enable-gcc-warnings isnot in effect, use "#warning" to let builders know more clearlyabout GCC bug 93644, because the bug triggers even if no -W optionis given to GCC.
gcc bug	 https://github.com/swift-nav/libsbp/commit/c056bc3c023f5be124f1f626970cc9e48fcf31fd	add workaround for MinGW GCC bug [INFRA-329] (#897)
gcc bug	 https://github.com/tianocore/edk2/commit/42af706dfba72bf2639ae2101caca10d89701b24	BaseTools: Update brotli submoduleREF: https://bugzilla.tianocore.org/show_bug.cgi?id=3D3417Update the brotli submodule to the latest commit (f4153a0)so that the build isn't broken in GCC 11 compilers.Signed-off-by: Bob Feng <bob.c.feng@intel.com>Cc: Liming Gao <gaoliming@byosoft.com.cn>Cc: Yuwei Chen <yuwei.chen@intel.com>Cc: Pedro Falcato <pedro.falcato@gmail.com>Reviewed-by: Liming Gao <gaoliming@byosoft.com.cn>
gcc bug	 https://github.com/microsoft/mu_basecore/commit/42af706dfba72bf2639ae2101caca10d89701b24	BaseTools: Update brotli submoduleREF: https://bugzilla.tianocore.org/show_bug.cgi?id=3D3417Update the brotli submodule to the latest commit (f4153a0)so that the build isn't broken in GCC 11 compilers.Signed-off-by: Bob Feng <bob.c.feng@intel.com>Cc: Liming Gao <gaoliming@byosoft.com.cn>Cc: Yuwei Chen <yuwei.chen@intel.com>Cc: Pedro Falcato <pedro.falcato@gmail.com>Reviewed-by: Liming Gao <gaoliming@byosoft.com.cn>
gcc bug	 https://github.com/sourceruckus/linux-mdl/commit/ca8f29dc8b1b6d0d64d957c19936d4b3fe53a9b4	ARM: 9156/1: drop cc-option fallbacks for architecture selectioncommit 418ace9992a7647c446ed3186df40cf165b67298 upstream.Naresh and Antonio ran into a build failure with latest Debianarmhf compilers, with lots of output like tmp/ccY3nOAs.s:2215: Error: selected processor does not support `cpsid i' in ARM modeAs it turns out, $(cc-option) fails early here when the FPU is notselected before CPU architecture is selected, as the compileroption check runs before enabling -msoft-float, which causesa problem when testing a target architecture level without an FPU:cc1: error: '-mfloat-abi=hard': selected architecture lacks an FPUPassing e.g. -march=armv6k+fp in place of -march=armv6k would avoid thisissue, but the fallback logic is already broken because all supportedcompilers (gcc-5 and higher) are much more recent than these options,and building with -march=armv5t as a fallback no longer works.The best way forward that I see is to just remove all the checks, whichalso has the nice side-effect of slightly improving the startup time for'make'.The -mtune=marvell-f option was apparently never supported by any mainlinecompiler, and the custom Codesourcery gcc build that did support isnow too old to build kernels, so just use -mtune=xscale unconditionallyfor those.This should be safe to apply on all stable kernels, and will be requiredin order to keep building them with gcc-11 and higher.Link: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=996419Reported-by: Antonio Terceiro <antonio.terceiro@linaro.org>Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>Reported-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>Tested-by: Sebastian Reichel <sebastian.reichel@collabora.com>Tested-by: Klaus Kudielka <klaus.kudielka@gmail.com>Cc: Matthias Klose <doko@debian.org>Cc: stable@vger.kernel.orgSigned-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/jhnc-oss/poky/commit/6eb37d895f8b7916bb89c8b69d3c058a88e74333	mesa: upgrade 21.3.3 -> 21.3.4Changelog:==========Bug fixes---------i965: gen5 exposes EXT_texture_integer incorrectly[radeonsi, regression, bisected]: Rendering issues with Factoriomesa >= 21.x (with llvmpipe) will break the game JVGSPanfrost - RK3399 - FACTORIO - glitches everywhereBaldurs Gate 3 (Patch 6) - ribbon-like artifacts on texturesGame Starsector crashes under certain circumstances with mesa 21.3.+FreeSpace models incorrectly rendered on Polaris cards, causing system freezeIncomplete evaluation of nested DEFINE macros[r300g, bisected] piglit glsl-fs-discard-04 failsPanfrost G52 Firefox terrible glitches on youtube playbackChanges-------pan/bi: Fix load_const of 1-bit booleansgallium/util: Add pixel->blocks box helperlima,panfrost: Correct pixel vs block mismatchesradv: Set optimal copy alignment to 1.microsoft/compiler: Fix dxil_nir_create_bare_samplers()ir3/ra: Fix logic bug in compress_regs_leftir3: Bump type mismatch penalty to 3aco: don't allow SDWA on VOP3P instructionsaco: validate VOP3P opsel correctlytu: fix workaround for depth bounds test without depth testintel/genxml/gen4-5: fix more Raster Operation in BLT to be a uintcrocus: fail resource allocation properly.freedreno/afuc: Disable the disassembler on 32-bit builds.i915g: Turn off FP16 in the vertex shaders.r300: Fix omod failing to increase the number of channels stored.nir_to_tgsi: Fix a bug in TXP detection after backend lowering.pick_status.json: Update to 8a78706643ecad8a1f303cc9358873abc29978b4pick_status.json: Mark 00bea38242d97e7ace1954f1bc7d32cbf0ce3ee0 as denominatedpick_status.json: Mark 2a0253b9b5d21c7571555abe3a1d851468a18740 as denominatedr300: fix handling swizzle in transform_source_conflictsintel/compiler/test: Fix build with GCC 7i965: Disable EXT_texture_integer on Gfx4 and Gfx5Revert "anv: Stop doing too much per-sample shading"anv: don't leave anv_batch fields undefinedanv: limit compiler valid color outputs using NIR variablesintel/dev: fixup chv workaroundetnaviv: initialize vertex attributes on context resetetnaviv: drm: fix size limit in etna_cmd_stream_reallocetnaviv: drm: properly handle reviving BOs via a lookupzink: fix -Warray-bounds warningradv: fix xfb query copy param orderingzink: always unset vertex shader variant key data when changing last vertex stagezink: add extra synchronization for buffer descriptor bindszink: use device-local heap for sparse backing allocationsr300: Remove broken optimization in rc_transform_KILLradeonsi/gfx8: use the proper dcc clear sizevbo/dlist: fix loopback crashvbo/dlist: add vertices to incomplete primitivesradeonsi/gfx10: fix si_texture_get_offset for mipmapped texglapi: should not add alias function to static_data.pyaco: remove pack_half_2x16(a, 0) optimizationintel/fs: OpImageQueryLod does not support arrayed images as an operandv3dv: Hotfix: Rename remaining V3DV_HAS_SURFACE->V3DV_USE_WSI_PLATFORMradv: add drirc radv_disable_htile_layers and enable it for F1 2021iris: unref syncobjs and free r/w dependencies array for slab entriesmesa: free idalloc storage for display listsmesa: free vbo_save_vertex_list store primsglsl/glcpp: make sure to expand new token after concatenationvenus: subtract appended header size in vn_CreatePipelineCacheFix compilation on armv7l with gcc 11.2.0(From OE-Core rev: 3cdb743ec048aa06c10e0da0fb3feb1ca740b6e2)Signed-off-by: Wang Mingyu <wangmy@fujitsu.com>Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc bug	 https://github.com/msys2/MINGW-packages/commit/0b2f1460ea3b72aa6cf4f263ace52f61a3470afe	gcc-git: backport changes from gcc to work around bugs exposed by ASLR
gcc bug	 https://github.com/urcu/userspace-rcu/commit/39c2747c011f2d7563c8fa63e26cd92ca552d15b	Blacklist GCC 4.4.0, 4.4.1 and 4.4.2 on ARMGCC added __sync_synchronize() in 4.4.0 but it was broken on ARM until4.4.3, see the GCC bug report for more details :  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=42263Signed-off-by: Michael Jeanson <mjeanson@efficios.com>Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>Change-Id: I629e3c8b4baaccb34b2311e220f30d0ad8b69a19
gcc bug	 https://github.com/eng-import-dd/facebook-folly/commit/4720e456a04382728baefd40b3be3c32a7905473	GCC compiler bug workaround for timed_wait and detachOnCancelSummary: GCC seems to be generating incorrect code for some mix of co_invoke and start/startInline. This workaround makes coro tests pass.Reviewed By: yfeldblumDifferential Revision: D28174118fbshipit-source-id: b8178d7711ed5619a37c169f8f18dd125bf08f0b
gcc bug	 https://github.com/ARM-software/armnn/commit/e118e0423d6ec95c9894a987db671844f8220117	Bugfix: GCC-11 stringop-overread warning treated as error * Occured in Ubuntu Impish * GCC Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578Signed-off-by: Francis Murtagh <francis.murtagh@arm.com>Change-Id: Ic2b1ae64bb2f1362ec3eb5c2b7a829deee2e9018
gcc bug	 https://github.com/scylladb/scylla/commit/193d1942f22f399742b3fb15193b48e0ca3af2a5	build: silence gcc ABI interoperability warning on armA gcc bug [1] caused objects built by different versions of gccnot to interoperate. Gcc helpfully warns when it encounters code thatcould be affected.Since we build everything with one version, and as that versions is farnewer than the last version generating incorrect code, we can silencethat warning without issue.[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77728Closes #7495
gcc bug	 https://github.com/fmtlib/fmt/commit/3551f5d11876bf7167267df364d000eff47f416c	Workaround a gcc 10 -Warray-bounds bug (#2065)
gcc bug	 https://github.com/fmtlib/fmt/commit/236fea1f008e1b4216d5dd5f3a5e1ab3051b794a	Workaround bugs in gcc 8
gcc bug	 https://github.com/chenkexv/CQuickFramework/commit/099f40ae7156c44c5d3d3c8142198f46ce5a84ec	fix a bug for centos7 gcc 4.8+
gcc bug	 https://github.com/rohankumardubey/scyllaDB/commit/193d1942f22f399742b3fb15193b48e0ca3af2a5	build: silence gcc ABI interoperability warning on armA gcc bug [1] caused objects built by different versions of gccnot to interoperate. Gcc helpfully warns when it encounters code thatcould be affected.Since we build everything with one version, and as that versions is farnewer than the last version generating incorrect code, we can silencethat warning without issue.[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77728Closes #7495
gcc bug	 https://github.com/fmtlib/fmt/commit/e54eb6763995242abbc9de58303a4d68f86b118f	Workaround bugs in gcc 8
gcc bug	 https://github.com/openshift/cluster-node-tuning-operator/commit/24392937d275074c73294d3e02ea71b2f1e16299	Merge pull request #202 from jmencak/4.7-stalld-non-x86_64Bug 1925072: Remove architecture specific gcc flags.
gcc bug	 https://github.com/percona/percona-xtradb-cluster/commit/7b749fdb93872df73399a8066c264e74be3db049	Bug #32472163 RPM SPEC TOOLCHAIN REQUIREMENTS UPDATE TO MATCH BUG#32381003Update RPM specs to match changes done for    Bug #32381003 SWITCH TO GCC 10 ON EL7 AND EL8Change-Id: Id0ef5eb7acd9b07436517748612788346e5c489d
gcc bug	 https://github.com/gpg/libgcrypt/commit/3d095206c30d772d5fc68bf69bfc384e43f766e9	global: fix compile error at pragma GCC diagnostic* src/global.c (_gcry_vcontrol): Move "pragma GCC diagnostics" outsidefunction.--Building with GCC-4.2 (Ubuntu 8.04) failed with error:global.c: In function '_gcry_vcontrol':global.c:714: error: #pragma GCC diagnostic not allowed inside functionsglobal.c:715: error: #pragma GCC diagnostic not allowed inside functionsglobal.c:742: error: #pragma GCC diagnostic not allowed inside functionsGnuPG-bug-id: 5264Signed-off-by: Jussi Kivilinna <jussi.kivilinna@iki.fi>
gcc bug	 https://github.com/roolebo/gnulib/commit/cd7fa0904bb6efb451ecc25907077fcfdf031824	setlocale-null-tests: work around GCC bug 44511* tests/test-setlocale_null-mt-all.c:* tests/test-setlocale_null-mt-one.c:Ignore -Wreturn-type, to work around GCC bug 44511.
gcc bug	 https://github.com/fmtlib/fmt/commit/8de96817ce64ede981476834051b8fb9b8ee10ba	Woraround bugs in gcc 8
gcc bug	 https://github.com/HubiDev/planecontrol/commit/1b486ef4d1464e3dc3f493d07f9b9ea98e644f6c	Added new plane texture, tried to fix gcc bug
gcc bug	 https://github.com/alexiosc/cft/commit/39b292dd1e845dfd2def2627cab6af195e39ac9d	Work around bug in avr-gcc < 6.4
gcc bug	 https://github.com/vries/nvidia-bugs/commit/67463bfcb57882871fe3c6253c9aea0e84445d85	builtin-arith-overflow-15: AddFiled at:- https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97005#c1- https://developer.nvidia.com/nvidia_bug/3527713
gcc bug	 https://github.com/samtools/htscodecs/commit/de87ff529e151e276e0be8dea40eff81a031886d	Change Appveyor imageThe default uses an old gcc, which has problems with AVX512 code.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65782Also adds mingw-w64-x86_64-autotools to install list as autotoolsis no longer included in the mingw-w64-x86_64-toolchain package.
gcc bug	 https://github.com/jbruchon/elks/commit/d29c4217de63ece130ae53931048978370a740f1	[tools] Bump up binutils-ia16 & gcc-ia16 versionsThis should fix some compilation errors that happened whenbuilding binutils-ia16 with host GCC 10, & also fix someinefficiencies & corner case bugs in gcc-ia16.
gcc bug	 https://github.com/LuanHalaiko/kernel_raphael_sm8150/commit/862e652c2b519cc150ff1604c352d5368ba8a816	UPSTREAM: net/wireguard: introduce skb_list_walk_safe for skb segment walkingAs part of the continual effort to remove direct usage of skb->next andskb->prev, this patch adds a helper for iterating through thesingly-linked variant of skb lists, which are used for lists of GSOpacket. The name "skb_list_..." has been chosen to match the existingfunction, "kfree_skb_list, which also operates on these singly-linkedlists, and the "..._walk_safe" part is the same idiom as elsewhere inthe kernel.This patch removes the helper from wireguard and puts it intolinux/skbuff.h, while making it a bit more robust for general usage. Inparticular, parenthesis are added around the macro argument usage, and itnow accounts for trying to iterate through an already-null skb pointer,which will simply run the iteration zero times. This latter enhancementmeans it can be used to replace both do { ... } while and while (...)open-coded idioms.This should take care of these three possible usages, which match allcurrent methods of iterations.skb_list_walk_safe(segs, skb, next) { ... }skb_list_walk_safe(skb, skb, next) { ... }skb_list_walk_safe(segs, skb, segs) { ... }Gcc appears to generate efficient code for each of these.Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: David S. Miller <davem@davemloft.net>(cherry picked from commit dcfea72e79b0aa7a057c8f6024169d86a1bbc84b)Bug: 152722841Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>Change-Id: Ia8fe1237424161e4de23df4515dbb2275e15e180Signed-off-by: Danny Lin <danny@kdrag0n.dev>
gcc bug	 https://github.com/inet-framework/inet/commit/96b05e617a8e3506fc5a7460a14dd04d377b3c2f	Chunk: Fixed GCC compilation error: explicit specialization in non-namespace scope.This is a GCC bug, see here: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85282
gcc bug	 https://github.com/mmp/pbrt-v4/commit/95b4c9b42d0c4d160b99745be55659cf54da34ed	Pass -fkeep-inline-functions to gcc before version 8Attempt to workaround gcc bug.Issue #37.
gcc bug	 https://github.com/TKChattoraj/bitcoin/commit/252d1a70fb452893efe4ab64298139eb08d8ac98	ci: use Debian Bullseye in ARM CIThis works around an issue when trying to use `std::filesystem::remove_all`with the ARM GCC on Buster. Has been split out of #20744.See comments starting here:https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810279549.Also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93201.
gcc bug	 https://github.com/MarcoFalke/bitcoin-core-with-ci/commit/252d1a70fb452893efe4ab64298139eb08d8ac98	ci: use Debian Bullseye in ARM CIThis works around an issue when trying to use `std::filesystem::remove_all`with the ARM GCC on Buster. Has been split out of #20744.See comments starting here:https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810279549.Also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93201.
gcc bug	 https://github.com/threedslider/Vanilla/commit/743b9c5e1d9e9d23b8f51fd6778db8292de204ae	CMake: fix build issue with gcc+clang-tidyPrecompiled headers are in a compiler specific format,when using clang-tidy it tries to read the GCC PCH fileand fails at that.Disable PCH's for now when WITH_CLANG_TIDY is enabled sincea clean work-around doesn't seem readily available.relevant LLVM/CMake bugs:https://bugs.llvm.org/show_bug.cgi?id=41579https://gitlab.kitware.com/cmake/cmake/-/issues/22081Differential Revision: https://developer.blender.org/D13814Reviewed by: sergey, Blendify
gcc bug	 https://github.com/pembem22/blender/commit/743b9c5e1d9e9d23b8f51fd6778db8292de204ae	CMake: fix build issue with gcc+clang-tidyPrecompiled headers are in a compiler specific format,when using clang-tidy it tries to read the GCC PCH fileand fails at that.Disable PCH's for now when WITH_CLANG_TIDY is enabled sincea clean work-around doesn't seem readily available.relevant LLVM/CMake bugs:https://bugs.llvm.org/show_bug.cgi?id=41579https://gitlab.kitware.com/cmake/cmake/-/issues/22081Differential Revision: https://developer.blender.org/D13814Reviewed by: sergey, Blendify
gcc bug	 https://github.com/dune-community/dune-xt/commit/1851505ddf37cb0c2cb27cece3f51a8791e94047	make bugged gcc work with DEBUG_ONLY macro
gcc bug	 https://github.com/kokkos/kokkos/commit/74ae0809dd8aafe669e14e66d6962012a228bfa3	Workaround GCC bug comment out constexpr specifier
gcc bug	 https://github.com/golang/go/commit/96081f854547353caaa77b795974f76b24572493	cmd/compile: remove a false dependency for TZCNTLZCNT/TZCNT on some Intel CPUs suffer from a false dependency onthe destination register.The problem was mentioned in the GCC Ticket: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=62011#c7and fixed with https://gcc.gnu.org/viewcvs?rev=214112&root=gcc&view=revChange-Id: I8109e84f03ac85f221b06d3b913612b58320d151Reviewed-on: https://go-review.googlesource.com/c/go/+/369019Reviewed-by: Keith Randall <khr@golang.org>Trust: Alex Rakoczy <alex@golang.org>Run-TryBot: Alex Rakoczy <alex@golang.org>TryBot-Result: Gopher Robot <gobot@golang.org>
gcc bug	 https://github.com/daihainidewo/go-comment/commit/96081f854547353caaa77b795974f76b24572493	cmd/compile: remove a false dependency for TZCNTLZCNT/TZCNT on some Intel CPUs suffer from a false dependency onthe destination register.The problem was mentioned in the GCC Ticket: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=62011#c7and fixed with https://gcc.gnu.org/viewcvs?rev=214112&root=gcc&view=revChange-Id: I8109e84f03ac85f221b06d3b913612b58320d151Reviewed-on: https://go-review.googlesource.com/c/go/+/369019Reviewed-by: Keith Randall <khr@golang.org>Trust: Alex Rakoczy <alex@golang.org>Run-TryBot: Alex Rakoczy <alex@golang.org>TryBot-Result: Gopher Robot <gobot@golang.org>
gcc bug	 https://github.com/phil-lavin/glibc/commit/2c6cabb3a442f467e78c702cffbd5f003f87f44f	Correct access attribute on memfrob (bug 28475)As noted in bug 28475, the access attribute on memfrob in <string.h>is incorrect: the function both reads and writes the memory pointed toby its argument, so it needs to use __read_write__, not__write_only__.  This incorrect attribute results in a build failurefor accessing uninitialized memory for s390x-linux-gnu-O3 withbuild-many-glibcs.py using GCC mainline.Correct the attribute.  Fixing this shows up that some calls tomemfrob in elf/ tests are reading uninitialized memory; I'm notentirely sure of the purpose of those calls, but guess they are aboutensuring that the stack space is indeed allocated at that point in thefunction, and so it matters that they are calling a function whosesemantics are unknown to the compiler.  Thus, change the first memfrobcall in those tests to use explicit_bzero instead, as suggested byFlorian in<https://sourceware.org/pipermail/libc-alpha/2021-October/132119.html>,to avoid the use of uninitialized memory.Tested for x86_64, and with build-many-glibcs.py (GCC mainline) fors390x-linux-gnu-O3.
gcc bug	 https://github.com/optimad/bitpit/commit/dd53eab45f21e8df4460aa7abb0fbf49d97c0780	containers: move assignment operator and move constructor of ProxyVector should be implemented explicitlyWe need to explicitly implement move assigment operator and modeconstructor to workaround a bug in gcc, see:    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60796    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57728
gcc bug	 https://github.com/aggresss/libwebrtc/commit/3987e61086b277e26e999159cff1f4f188dfddbe	GCC: fix template specialization in webrtc::BitstreamReaderGCC complains that explicit specialization in non-namespace scopeis happening for webrtc::BitstreamReader::Read(). However,specializationvfor bool isn't used because std::is_unsigned<bool>::valuereturns true. Add std::is_same for bool check and enable secondspecialization only for bool types.Bug: chromium:819294Change-Id: I1873cd59e2737516bd4012fb952da65d6bf3172bReviewed-on: https://webrtc-review.googlesource.com/c/src/+/231561Reviewed-by: Danil Chapovalov <danilchap@webrtc.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Danil Chapovalov <danilchap@webrtc.org>Cr-Commit-Position: refs/heads/main@{#35007}
gcc bug	 https://github.com/linuxppc/linux-ci/commit/82880283d7fcd0a1d20964a56d6d1a5cc0df0713	objtool: Fix truncated string warningOn GCC 12, the build fails due to a possible truncated string:    check.c: In function 'validate_call':    check.c:2865:58: error: '%d' directive output may be truncated writing between 1 and 10 bytes into a region of size 9 [-Werror=format-truncation=]     2865 |                 snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);          |                                                          ^~In theory it's a valid bug:    static char pvname[16];    int idx;    ...    idx = (rel->addend / sizeof(void *));    snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);There are only 7 chars for %d while it could take up to 9, so theprinted "pv_ops[%d]" string could get truncated.In reality the bug should never happen, because pv_ops only has ~80entries, so 7 chars for the integer is more than enough.  Still, it'sworth fixing.  Bump the buffer size by 2 bytes to silence the warning.[ jpoimboe: changed size to 19; massaged changelog ]Fixes: db2b0c5d7b6f ("objtool: Support pv_opsindirect calls for noinstr")Reported-by: Adam Borowski <kilobyte@angband.pl>Reported-by: Martin Li閹穉 <mliska@suse.cz>Signed-off-by: Sergei Trofimovich <slyich@gmail.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220120233748.2062559-1-slyich@gmail.com
gcc bug	 https://github.com/ROCmSoftwarePlatform/rocThrust/commit/887b8674d6e3eb74653e4d1e238732b98bb80bbe	Work around execution space warning on GCC 10.Fixes #1269Bug 200636836
gcc bug	 https://github.com/dlwlrma123/kernel_rmx2020/commit/c731bb893276fda11b69a01ae235589e4c451a66	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/Ubpa/UTemplate/commit/01fd2179dd13654d431718821d1115314ecad972	fix bugs on clang&gcc
gcc bug	 https://github.com/mpdetwiler/dango/commit/b334d95749e54e8247459065af05a2f24d6b3c6d	gcc constexpr bug workaround
gcc bug	 https://github.com/mpdetwiler/dango/commit/2e587fe850eacf3325fdeca7f5e17feef7ca2db8	gcc constexpr bug workaround
gcc bug	 https://github.com/xcd0/qmk_firmware/commit/a535d24ecfd465124cdb255e53b5cc301cbda6d9	core: chibios: bootloader: use integer pointers as volatile (#13450)This prevents gcc from incorrectly trying to validate array bounds.```tmk_core/common/chibios/bootloader.c: error: '__builtin_memcpy' offset [0, 21] is out of the bounds [0, 0] [-Werror=array-bounds]  107 |     __builtin_memcpy((void *) VBAT, (const void *)sys_reset_to_loader_magic, sizeof(sys_reset_to_loader_magic));      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~```See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c16Fixes #12925
gcc bug	 https://github.com/sailfishos-mirror/SDL/commit/5045d299a6a73219d0e70abb74d6a17186a4db0f	enable AddressSanitizer only for GCC 5 onwards (bug #5533)
gcc bug	 https://github.com/linuxppc/linux-ci/commit/a257cacc38718c83cee003487e03197f237f5c3f	asm-generic: Define CONFIG_HAVE_FUNCTION_DESCRIPTORSReplace HAVE_DEREFERENCE_FUNCTION_DESCRIPTOR by a config optionnamed CONFIG_HAVE_FUNCTION_DESCRIPTORS and use it instead of'dereference_function_descriptor' macro to know whether anarch has function descriptors.To limit churn in one of the following patches, usean #ifdef/#else construct with empty first partinstead of an #ifndef in asm-generic/sections.hOn powerpc, make sure the config option matches the ABI usedby the compiler with a BUILD_BUG_ON() and add missing _CALL_ELF=2when calling 'sparse' so that sparse sees the same piece ofcode as GCC.And include a helper to check whether an arch has functiondescriptors or not : have_function_descriptors()Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nicholas Piggin <npiggin@gmail.com>Acked-by: Helge Deller <deller@gmx.de>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://lore.kernel.org/r/4a0f11fb0ea74a3197bc44dd7ba25e53a24fd03d.1644928018.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/gaganmalvi/kernel_xiaomi_phoenix/commit/69d2268378bf9790a9f4c40530b8f8971fe1e84a	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: AtomicXZ <achubadyal4@gmail.com>
gcc bug	 https://github.com/chenjim/webrtc-mirror/commit/3987e61086b277e26e999159cff1f4f188dfddbe	GCC: fix template specialization in webrtc::BitstreamReaderGCC complains that explicit specialization in non-namespace scopeis happening for webrtc::BitstreamReader::Read(). However,specializationvfor bool isn't used because std::is_unsigned<bool>::valuereturns true. Add std::is_same for bool check and enable secondspecialization only for bool types.Bug: chromium:819294Change-Id: I1873cd59e2737516bd4012fb952da65d6bf3172bReviewed-on: https://webrtc-review.googlesource.com/c/src/+/231561Reviewed-by: Danil Chapovalov <danilchap@webrtc.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Danil Chapovalov <danilchap@webrtc.org>Cr-Commit-Position: refs/heads/main@{#35007}
gcc bug	 https://github.com/od-contrib/buildroot-rg350-old-kernel/commit/d8e6179807bdfc89608a037e31c0dcc43382bcb0	toolchain: disable gcc bug 60620 if gcc version >= 10.xSince gcc version 10.x bug 60620 doesn't show anymore, so let's make itenabled up to versino 10.x excluded.Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/dickolsson/buildroot/commit/d8e6179807bdfc89608a037e31c0dcc43382bcb0	toolchain: disable gcc bug 60620 if gcc version >= 10.xSince gcc version 10.x bug 60620 doesn't show anymore, so let's make itenabled up to versino 10.x excluded.Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/icecreammatt/qmk_firmware/commit/a535d24ecfd465124cdb255e53b5cc301cbda6d9	core: chibios: bootloader: use integer pointers as volatile (#13450)This prevents gcc from incorrectly trying to validate array bounds.```tmk_core/common/chibios/bootloader.c: error: '__builtin_memcpy' offset [0, 21] is out of the bounds [0, 0] [-Werror=array-bounds]  107 |     __builtin_memcpy((void *) VBAT, (const void *)sys_reset_to_loader_magic, sizeof(sys_reset_to_loader_magic));      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~```See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c16Fixes #12925
gcc bug	 https://github.com/rohankumardubey/scyllaDB/commit/25f8e9c078d6915f9e8c2d47845100c58c83d9aa	cql3: statement_restrictions: adjust call to std::vector deduction guidegcc 11 has a hard time parsing a deduction guide use withbraced initializer. The bug [1] was already fixed in gcc 12,and I've requested a backport, but reduce friction meanwhileby switching to a form that works in gcc 11.[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89062
gcc bug	 https://github.com/kcat/openal-soft/commit/15e05fcef882e3d50104db39d38019165c7995f9	Workaround a GCC 5 constexpr function bug
gcc bug	 https://github.com/lammps/lammps/commit/164d2fb64f9db8fdf66736d6a3951f3e50d969b2	Work around bug in GCC 7
gcc bug	 https://github.com/RevengeOS-Devices/kernel_realme_RMX1971/commit/2a49e83992f499ceed9e3371b9f5eaf162388ed7	crypto: aes-generic - fix aes-generic regression on powerpcMy last bugfix added -Os on the command line, which unfortunately causeda build regression on powerpc in some configurations.I've done some more analysis of the original problem and found slightlydifferent workaround that avoids this regression and also results inbetter performance on gcc-7.0: -fcode-hoisting is an optimization stepthat got added in gcc-7 and that for all gcc-7 versions causes worseperformance.This disables -fcode-hoisting on all compilers that understand the option.For gcc-7.1 and 7.2 I found the same performance as my previous patch(using -Os), in gcc-7.0 it was even better. On gcc-8 I could see nochange in performance from this patch. In theory, code hoisting shouldnot be able make things better for the AES cipher, so leaving itdisabled for gcc-8 only serves to simplify the Makefile change.Reported-by: kbuild test robot <fengguang.wu@intel.com>Link: https://www.mail-archive.com/linux-crypto@vger.kernel.org/msg30418.htmlLink: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83356Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83651Fixes: 148b974deea9 ("crypto: aes-generic - build with -Os on gcc-7+")Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>Signed-off-by: Raphiel Rollerscaperers <raphielscape@outlook.com>Signed-off-by: laststandrighthere <laststandrighthere@gmail.com>Signed-off-by: Lau <laststandrighthere@gmail.com>
gcc bug	 https://github.com/Ancient-Project/android_kernel_xiaomi_whyred-4.19/commit/d0699db4d7e29a0b807ff24628e3502cce0de61c	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Signed-off-by: rezaadi0105 <rezaadipangestu5@gmail.com>
gcc bug	 https://github.com/linuxppc/linux-ci/commit/6a00ef4493706a23120057fafbc62379bcde11ec	riscv: eliminate unreliable __builtin_frame_address(1)I tried different pieces of code which uses __builtin_frame_address(1)(with both gcc version 7.5.0 and 10.3.0) to verify whether it works asexpected on riscv64. The result is negative.What the compiler had generated is as below:31                      fp = (unsigned long)__builtin_frame_address(1);   0xffffffff80006024 <+200>:   ld      s1,0(s0)It takes '0(s0)' as the address of frame 1 (caller), but the actual addressshould be '-16(s0)'.          |       ...       | <-+          +-----------------+   |          | return address  |   |          | previous fp     |   |          | saved registers |   |          | local variables |   |  $fp --> |       ...       |   |          +-----------------+   |          | return address  |   |          | previous fp --------+          | saved registers |  $sp --> | local variables |          +-----------------+This leads the kernel can not dump the full stack trace on riscv.[    7.222126][    T1] Call Trace:[    7.222804][    T1] [<ffffffff80006058>] dump_backtrace+0x2c/0x3aThis problem is not exposed on most riscv builds just because the '0(s0)'occasionally is the address frame 2 (caller's caller), if only ra and fpare stored in frame 1 (caller).          |       ...       | <-+          +-----------------+   |          | return address  |   |  $fp --> | previous fp     |   |          +-----------------+   |          | return address  |   |          | previous fp --------+          | saved registers |  $sp --> | local variables |          +-----------------+This could be a *bug* of gcc that should be fixed. But as noted in gccmanual "Calling this function with a nonzero argument can haveunpredictable effects, including crashing the calling program.", let'sremove the '__builtin_frame_address(1)' in backtrace code.With this fix now it can show full stack trace:[   10.444838][    T1] Call Trace:[   10.446199][    T1] [<ffffffff8000606c>] dump_backtrace+0x2c/0x3a[   10.447711][    T1] [<ffffffff800060ac>] show_stack+0x32/0x3e[   10.448710][    T1] [<ffffffff80a005c0>] dump_stack_lvl+0x58/0x7a[   10.449941][    T1] [<ffffffff80a005f6>] dump_stack+0x14/0x1c[   10.450929][    T1] [<ffffffff804c04ee>] ubsan_epilogue+0x10/0x5a[   10.451869][    T1] [<ffffffff804c092e>] __ubsan_handle_load_invalid_value+0x6c/0x78[   10.453049][    T1] [<ffffffff8018f834>] __pagevec_release+0x62/0x64[   10.455476][    T1] [<ffffffff80190830>] truncate_inode_pages_range+0x132/0x5be[   10.456798][    T1] [<ffffffff80190ce0>] truncate_inode_pages+0x24/0x30[   10.457853][    T1] [<ffffffff8045bb04>] kill_bdev+0x32/0x3c...Signed-off-by: Changbin Du <changbin.du@gmail.com>Fixes: eac2f3059e02 ("riscv: stacktrace: fix the riscv stacktrace when CONFIG_FRAME_POINTER enabled")Cc: stable@vger.kernel.orgSigned-off-by: Palmer Dabbelt <palmer@rivosinc.com>
gcc bug	 https://github.com/KavetiRohith/kernel_xiaomi_vayu/commit/4ea64cb438bf4cc567413ddbac43445215fe5fd0	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Panchajanya1999 <panchajanya@azure-dev.live>
gcc bug	 https://github.com/haraldkl/aotus/commit/8447c59aa1dc46f4bf74ce662fc38671a92889c2	Do not warn about maybe uninitialized values for GCC, as it doesnot work properly, see:https://gcc.gnu.org/bugzilla//show_bug.cgi?id=86117#c5
gcc bug	 https://github.com/MontaVista-OpenSourceTechnology/linux-live-app-coredump/commit/6a00ef4493706a23120057fafbc62379bcde11ec	riscv: eliminate unreliable __builtin_frame_address(1)I tried different pieces of code which uses __builtin_frame_address(1)(with both gcc version 7.5.0 and 10.3.0) to verify whether it works asexpected on riscv64. The result is negative.What the compiler had generated is as below:31                      fp = (unsigned long)__builtin_frame_address(1);   0xffffffff80006024 <+200>:   ld      s1,0(s0)It takes '0(s0)' as the address of frame 1 (caller), but the actual addressshould be '-16(s0)'.          |       ...       | <-+          +-----------------+   |          | return address  |   |          | previous fp     |   |          | saved registers |   |          | local variables |   |  $fp --> |       ...       |   |          +-----------------+   |          | return address  |   |          | previous fp --------+          | saved registers |  $sp --> | local variables |          +-----------------+This leads the kernel can not dump the full stack trace on riscv.[    7.222126][    T1] Call Trace:[    7.222804][    T1] [<ffffffff80006058>] dump_backtrace+0x2c/0x3aThis problem is not exposed on most riscv builds just because the '0(s0)'occasionally is the address frame 2 (caller's caller), if only ra and fpare stored in frame 1 (caller).          |       ...       | <-+          +-----------------+   |          | return address  |   |  $fp --> | previous fp     |   |          +-----------------+   |          | return address  |   |          | previous fp --------+          | saved registers |  $sp --> | local variables |          +-----------------+This could be a *bug* of gcc that should be fixed. But as noted in gccmanual "Calling this function with a nonzero argument can haveunpredictable effects, including crashing the calling program.", let'sremove the '__builtin_frame_address(1)' in backtrace code.With this fix now it can show full stack trace:[   10.444838][    T1] Call Trace:[   10.446199][    T1] [<ffffffff8000606c>] dump_backtrace+0x2c/0x3a[   10.447711][    T1] [<ffffffff800060ac>] show_stack+0x32/0x3e[   10.448710][    T1] [<ffffffff80a005c0>] dump_stack_lvl+0x58/0x7a[   10.449941][    T1] [<ffffffff80a005f6>] dump_stack+0x14/0x1c[   10.450929][    T1] [<ffffffff804c04ee>] ubsan_epilogue+0x10/0x5a[   10.451869][    T1] [<ffffffff804c092e>] __ubsan_handle_load_invalid_value+0x6c/0x78[   10.453049][    T1] [<ffffffff8018f834>] __pagevec_release+0x62/0x64[   10.455476][    T1] [<ffffffff80190830>] truncate_inode_pages_range+0x132/0x5be[   10.456798][    T1] [<ffffffff80190ce0>] truncate_inode_pages+0x24/0x30[   10.457853][    T1] [<ffffffff8045bb04>] kill_bdev+0x32/0x3c...Signed-off-by: Changbin Du <changbin.du@gmail.com>Fixes: eac2f3059e02 ("riscv: stacktrace: fix the riscv stacktrace when CONFIG_FRAME_POINTER enabled")Cc: stable@vger.kernel.orgSigned-off-by: Palmer Dabbelt <palmer@rivosinc.com>
gcc bug	 https://github.com/zeng450026937/base/commit/8f4dbc27d7a19efd35181ddd533523ae6371a03d	GCC: add alternative for attribute no_stack_protectorThe attribute no_stack_protector is supported only with >=GCC-11.For older compilers use optimize attribute and force-fno-stack-protector. This resolves stack smashing errors seenafter https://crrev.com/c/2895917, because GCC ignored theno_stack_protector attribute.Bug: 819294Change-Id: I98e5405b1f85268c1dac710946b044bb1fc5fc89Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3064602Reviewed-by: Matthew Denton <mpdenton@chromium.org>Reviewed-by: Robert Sesek <rsesek@chromium.org>Reviewed-by: Daniel Cheng <dcheng@chromium.org>Commit-Queue: Matthew Denton <mpdenton@chromium.org>Cr-Commit-Position: refs/heads/master@{#910135}NOKEYCHECK=TrueGitOrigin-RevId: 4b456e7d2a084eebdb7aab860762da8c24df3cb6
gcc bug	 https://github.com/MathieuDonofrio/xecs/commit/c8a97fb26439679e4c42ea0a3f5e7fd011eefc2a	Fixed bugs with GCC
gcc bug	 https://github.com/maerhart/arc-project/commit/a9911cc8d74d6173f58acc97ba33d575e31b215e	GCC can not infer this-> inside lambdasThis bug is not fixed until later versions of GCC.
gcc bug	 https://github.com/jonathanmetzman/systemd/commit/bc2a4af25f7f7673712ff9b70822a1f68974ee4c	meson: re-enable -Wunused-result with clangWe disabled it in f73fb7b742f294b6d2126afa16001bd2ff6ab461 in response to anapparent gcc bug. It seems that depending on the combination of optimizationoptions, gcc still ignores (void). But this seems to work fine with clang, solet's re-enable the warning conditionally.
gcc bug	 https://github.com/pavel532/libdeflate/commit/d045a4933585fceef38d235727c49d9eac61cd61	Don't use ARM CRC32 intrinsics when affected by gcc bug 104439The following build error was reported athttps://github.com/ebiggers/libdeflate/pull/163:    /tmp/ccAwbDTP.s:140: Error: selected processor does not support crc32b r0,r0,r3' in ARM mode    [followed by lots of similar errors]This is caused by https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104439, agcc bug that has been fixed.  To work around this, disable buildingcrc32_arm() as dynamically-dispatched code on the affected gcc versions.
gcc bug	 https://github.com/feitome/buildroot/commit/d8e6179807bdfc89608a037e31c0dcc43382bcb0	toolchain: disable gcc bug 60620 if gcc version >= 10.xSince gcc version 10.x bug 60620 doesn't show anymore, so let's make itenabled up to versino 10.x excluded.Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/ebiggers/libdeflate/commit/d045a4933585fceef38d235727c49d9eac61cd61	Don't use ARM CRC32 intrinsics when affected by gcc bug 104439The following build error was reported athttps://github.com/ebiggers/libdeflate/pull/163:    /tmp/ccAwbDTP.s:140: Error: selected processor does not support crc32b r0,r0,r3' in ARM mode    [followed by lots of similar errors]This is caused by https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104439, agcc bug that has been fixed.  To work around this, disable buildingcrc32_arm() as dynamically-dispatched code on the affected gcc versions.
gcc bug	 https://github.com/miraclestars/android_kernel_samsung_sm8250/commit/a5c1c2478a8580c03652bf4e57552566be74a858	drop_monitor: work around gcc-10 stringop-overflow warning[ Upstream commit dc30b4059f6e2abf3712ab537c8718562b21c45d ]The current gcc-10 snapshot produces a false-positive warning:net/core/drop_monitor.c: In function 'trace_drop_common.constprop':cc1: error: writing 8 bytes into a region of size 0 [-Werror=stringop-overflow=]In file included from net/core/drop_monitor.c:23:include/uapi/linux/net_dropmon.h:36:8: note: at offset 0 to object 'entries' with size 4 declared here   36 |  __u32 entries;      |        ^~~~~~~I reported this in the gcc bugzilla, but in case it does not getfixed in the release, work around it by using a temporary variable.Fixes: 9a8afc8d3962 ("Network Drop Monitor: Adding drop monitor implementation & Netlink protocol")Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94881Signed-off-by: Arnd Bergmann <arnd@arndb.de>Acked-by: Neil Horman <nhorman@tuxdriver.com>Signed-off-by: David S. Miller <davem@davemloft.net>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/gao745/bminor-glibc/commit/86a4d3fa7d1bda3c02cf713cf289d6f893970117	elf: work around a gcc bug in elf_get_dynamic_infoSince commit 2f056e8a5dd4dc0f075413f931e82cede37d1057"aarch64: define PI_STATIC_AND_HIDDEN",building glibc with gcc-8 on aarch64 fails with/BLD/elf/librtld.os: in function `elf_get_dynamic_info':/SRC/elf/get-dynamic-info.h:70:(.text+0xad8): relocation truncated to fit: R_AARCH64_ADR_PREL_PG_HI21 against symbol `_rtld_local' defined in .data section in /BLD/elf/librtld.osThis is a gcc bug:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98618The bug is fixed on gcc-10 and not yet backported. gcc-9 is affected,but the issue happens to not trigger in glibc, gcc-8 and older seemsto miscompile rtld.os.Rewriting the affected code in elf_get_dynamic_info seems to make theissue go away on <= gcc-9.The change makes the logic a bit clearer too (by separating the indexcomputation and array update) and drops an older gcc workaround (sincegcc 4.6 is no longer supported).Reviewed-by: Adhemerval Zanella  <adhemerval.zanella@linaro.org>
gcc bug	 https://github.com/LouisVeblen/SDL/commit/5045d299a6a73219d0e70abb74d6a17186a4db0f	enable AddressSanitizer only for GCC 5 onwards (bug #5533)
gcc bug	 https://github.com/gonzoua/freebsd-src/commit/6d759051d3998614524b8186a27f44dc98986546	fdgrowtable_test.c: appease gccWork around bogus gcc -Wreturn-type.https://gcc.gnu.org/bugzilla/show_bug.cgi?id=44511Reviewed by:
gcc bug	 https://github.com/MontaVista-OpenSourceTechnology/linux-live-app-coredump/commit/82880283d7fcd0a1d20964a56d6d1a5cc0df0713	objtool: Fix truncated string warningOn GCC 12, the build fails due to a possible truncated string:    check.c: In function 'validate_call':    check.c:2865:58: error: '%d' directive output may be truncated writing between 1 and 10 bytes into a region of size 9 [-Werror=format-truncation=]     2865 |                 snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);          |                                                          ^~In theory it's a valid bug:    static char pvname[16];    int idx;    ...    idx = (rel->addend / sizeof(void *));    snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);There are only 7 chars for %d while it could take up to 9, so theprinted "pv_ops[%d]" string could get truncated.In reality the bug should never happen, because pv_ops only has ~80entries, so 7 chars for the integer is more than enough.  Still, it'sworth fixing.  Bump the buffer size by 2 bytes to silence the warning.[ jpoimboe: changed size to 19; massaged changelog ]Fixes: db2b0c5d7b6f ("objtool: Support pv_opsindirect calls for noinstr")Reported-by: Adam Borowski <kilobyte@angband.pl>Reported-by: Martin Li閹穉 <mliska@suse.cz>Signed-off-by: Sergei Trofimovich <slyich@gmail.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220120233748.2062559-1-slyich@gmail.com
gcc bug	 https://github.com/LuanHalaiko/kernel_raphael_sm8150/commit/1f2591a8b1fd68bf9abe02dd4798c6444a99ed89	BACKPORT: kbuild: add CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3Add support to use "-O3" optimization level while compiling linuxkernel with Clang 11 / GCC 9 or newer.Since Android R already suggests using Clang 11 as the base compiler,we have no issues in using "-O3" optimization levels as the bugs thosewere present 10 years ago at this level of optimization are non-existentsince they are already addressed.Add CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y to defconfig file in orderto keep the current config settings.[panchajanya1999]: Backport it to android-4.14 and refactor commit message.Original Commit: https://github.com/aosp-mirror/kernel_common/commit/15f5db60a13748f44e5a14a2573c2cfcdc152f1cChange-Id: I29b04b60d4dd8af588f2f262379fb57c0dbeb110Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>Acked-by: Vineet Gupta <vgupta@synopsys.com>Co-authored-by: Panchajanya1999 <panchajanya@azure-dev.live>Signed-off-by: Panchajanya1999 <panchajanya@azure-dev.live>Signed-off-by: reaPeR1010 <reaPeR10x10x@gmail.com>
gcc bug	 https://github.com/gldisater/freebsd/commit/6d759051d3998614524b8186a27f44dc98986546	fdgrowtable_test.c: appease gccWork around bogus gcc -Wreturn-type.https://gcc.gnu.org/bugzilla/show_bug.cgi?id=44511Reviewed by:
gcc bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/07973852a6b12fc810d01c92ca34084c5933412e	Bug 1714004 - Add a tier 2 build using GCC 11. r=sylvestre,andiDifferential Revision: https://phabricator.services.mozilla.com/D116549
gcc bug	 https://github.com/OdSazib/kernel_xiaomi_sdm660/commit/be560fef949bbf4884dd14b4e29fe65fb683c748	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c6704Signed-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>Signed-off-by: clarencelol <clarencekuiek@icloud.com>Signed-off-by: OdSazib <odsazib@gmail.com>
gcc bug	 https://github.com/OPAE/linux-dfl/commit/82880283d7fcd0a1d20964a56d6d1a5cc0df0713	objtool: Fix truncated string warningOn GCC 12, the build fails due to a possible truncated string:    check.c: In function 'validate_call':    check.c:2865:58: error: '%d' directive output may be truncated writing between 1 and 10 bytes into a region of size 9 [-Werror=format-truncation=]     2865 |                 snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);          |                                                          ^~In theory it's a valid bug:    static char pvname[16];    int idx;    ...    idx = (rel->addend / sizeof(void *));    snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);There are only 7 chars for %d while it could take up to 9, so theprinted "pv_ops[%d]" string could get truncated.In reality the bug should never happen, because pv_ops only has ~80entries, so 7 chars for the integer is more than enough.  Still, it'sworth fixing.  Bump the buffer size by 2 bytes to silence the warning.[ jpoimboe: changed size to 19; massaged changelog ]Fixes: db2b0c5d7b6f ("objtool: Support pv_opsindirect calls for noinstr")Reported-by: Adam Borowski <kilobyte@angband.pl>Reported-by: Martin Li閹穉 <mliska@suse.cz>Signed-off-by: Sergei Trofimovich <slyich@gmail.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220120233748.2062559-1-slyich@gmail.com
gcc bug	 https://github.com/ffzwadd/webrtc_base/commit/8f4dbc27d7a19efd35181ddd533523ae6371a03d	GCC: add alternative for attribute no_stack_protectorThe attribute no_stack_protector is supported only with >=GCC-11.For older compilers use optimize attribute and force-fno-stack-protector. This resolves stack smashing errors seenafter https://crrev.com/c/2895917, because GCC ignored theno_stack_protector attribute.Bug: 819294Change-Id: I98e5405b1f85268c1dac710946b044bb1fc5fc89Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3064602Reviewed-by: Matthew Denton <mpdenton@chromium.org>Reviewed-by: Robert Sesek <rsesek@chromium.org>Reviewed-by: Daniel Cheng <dcheng@chromium.org>Commit-Queue: Matthew Denton <mpdenton@chromium.org>Cr-Commit-Position: refs/heads/master@{#910135}NOKEYCHECK=TrueGitOrigin-RevId: 4b456e7d2a084eebdb7aab860762da8c24df3cb6
gcc bug	 https://github.com/systemd/systemd/commit/bc2a4af25f7f7673712ff9b70822a1f68974ee4c	meson: re-enable -Wunused-result with clangWe disabled it in f73fb7b742f294b6d2126afa16001bd2ff6ab461 in response to anapparent gcc bug. It seems that depending on the combination of optimizationoptions, gcc still ignores (void). But this seems to work fine with clang, solet's re-enable the warning conditionally.
gcc bug	 https://github.com/freedesktop/drm-intel/commit/82880283d7fcd0a1d20964a56d6d1a5cc0df0713	objtool: Fix truncated string warningOn GCC 12, the build fails due to a possible truncated string:    check.c: In function 'validate_call':    check.c:2865:58: error: '%d' directive output may be truncated writing between 1 and 10 bytes into a region of size 9 [-Werror=format-truncation=]     2865 |                 snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);          |                                                          ^~In theory it's a valid bug:    static char pvname[16];    int idx;    ...    idx = (rel->addend / sizeof(void *));    snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);There are only 7 chars for %d while it could take up to 9, so theprinted "pv_ops[%d]" string could get truncated.In reality the bug should never happen, because pv_ops only has ~80entries, so 7 chars for the integer is more than enough.  Still, it'sworth fixing.  Bump the buffer size by 2 bytes to silence the warning.[ jpoimboe: changed size to 19; massaged changelog ]Fixes: db2b0c5d7b6f ("objtool: Support pv_opsindirect calls for noinstr")Reported-by: Adam Borowski <kilobyte@angband.pl>Reported-by: Martin Li閹穉 <mliska@suse.cz>Signed-off-by: Sergei Trofimovich <slyich@gmail.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220120233748.2062559-1-slyich@gmail.com
gcc bug	 https://github.com/woodsts/linux-stable/commit/82880283d7fcd0a1d20964a56d6d1a5cc0df0713	objtool: Fix truncated string warningOn GCC 12, the build fails due to a possible truncated string:    check.c: In function 'validate_call':    check.c:2865:58: error: '%d' directive output may be truncated writing between 1 and 10 bytes into a region of size 9 [-Werror=format-truncation=]     2865 |                 snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);          |                                                          ^~In theory it's a valid bug:    static char pvname[16];    int idx;    ...    idx = (rel->addend / sizeof(void *));    snprintf(pvname, sizeof(pvname), "pv_ops[%d]", idx);There are only 7 chars for %d while it could take up to 9, so theprinted "pv_ops[%d]" string could get truncated.In reality the bug should never happen, because pv_ops only has ~80entries, so 7 chars for the integer is more than enough.  Still, it'sworth fixing.  Bump the buffer size by 2 bytes to silence the warning.[ jpoimboe: changed size to 19; massaged changelog ]Fixes: db2b0c5d7b6f ("objtool: Support pv_opsindirect calls for noinstr")Reported-by: Adam Borowski <kilobyte@angband.pl>Reported-by: Martin Li閹穉 <mliska@suse.cz>Signed-off-by: Sergei Trofimovich <slyich@gmail.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220120233748.2062559-1-slyich@gmail.com
gcc bug	 https://github.com/frobware/haproxy-2.4/commit/d6b4b6da3f08ecb3df633aea5d5d9f072ad52135	BUG/MINOR: server: fix potential null gcc error in delete servergcc still reports a potential null pointer dereference in delete serverfunction event with a BUG_ON before it. Remove the misleading NULL checkin the for loop which should never happen.This does not need to be backported.
gcc bug	 https://github.com/lock3/cppx/commit/12de8e1399fecf691639ba430b3824acb1311e70	[clangd] Work around GCC bug 66735
gcc bug	 https://github.com/openSUSE/systemd/commit/bc2a4af25f7f7673712ff9b70822a1f68974ee4c	meson: re-enable -Wunused-result with clangWe disabled it in f73fb7b742f294b6d2126afa16001bd2ff6ab461 in response to anapparent gcc bug. It seems that depending on the combination of optimizationoptions, gcc still ignores (void). But this seems to work fine with clang, solet's re-enable the warning conditionally.
gcc bug	 https://github.com/BelledonneCommunications/bcg729/commit/dcfa63fc9d52d7fc761d5fb253e8ece8b11e06c8	Fix #10: Making it build on debian jessieAvoiding missing-braces error wich is apparently a GCC bug (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119)
gcc bug	 https://github.com/ibaoger/webrtc/commit/3987e61086b277e26e999159cff1f4f188dfddbe	GCC: fix template specialization in webrtc::BitstreamReaderGCC complains that explicit specialization in non-namespace scopeis happening for webrtc::BitstreamReader::Read(). However,specializationvfor bool isn't used because std::is_unsigned<bool>::valuereturns true. Add std::is_same for bool check and enable secondspecialization only for bool types.Bug: chromium:819294Change-Id: I1873cd59e2737516bd4012fb952da65d6bf3172bReviewed-on: https://webrtc-review.googlesource.com/c/src/+/231561Reviewed-by: Danil Chapovalov <danilchap@webrtc.org>Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Danil Chapovalov <danilchap@webrtc.org>Cr-Commit-Position: refs/heads/main@{#35007}
gcc bug	 https://github.com/chenshuo/muduo/commit/9aaeda812bde476d231495212e6cf331ae2792b4	Fix build on gcc <= 4.9, #512.Workaround a bug in gcc "-Wshadow is too strict / has false positives"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57709This should fix build on Ubuntu 14.04, Debian 7&8, CentOS 7.
gcc bug	 https://github.com/PKRoma/linux/commit/2a24d80fc86bcd70c8e780078254e873ea217379	powerpc/asm: Remove UPD_CONSTR after GCC 4.9 removalUPD_CONSTR was previously a preprocessor define for an old GCC 4.9inline asm bug with m<> constraints.Fixes: 6563139d90ad ("powerpc: remove GCC version check for UPD_CONSTR")Suggested-by: Nathan Chancellor <nathan@kernel.org>Suggested-by: Christophe Leroy <christophe.leroy@csgroup.eu>Suggested-by: Michael Ellerman <mpe@ellerman.id.au>Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://lore.kernel.org/r/20210914161712.2463458-1-ndesaulniers@google.com
gcc bug	 https://github.com/shinchiro/mpv-winbuild-cmake/commit/cb4a5baa7ff58cb33cd6be901aaa27a6b72b9280	gcc: revert back to 10.2.1+20210130Somewhere in february, gcc's snapshot introduced bug(?) as https://github.com/mpv-player/mpv/issues/8667.
gcc bug	 https://github.com/DNKpp/Simple-Vector/commit/c3f9ee0e2192577f4ed39cb7508da33612d07ea8	workaround annoying gcc-10 compiler bugSigned-off-by: DNKpp <DNKpp2011@gmail.com>
gcc bug	 https://github.com/nikolashn/basque/commit/2c0af603b6296a5daac5dd46fea6a90af2dcdd66	Refactor MOV and fix bugs in elf64.helf64.h:Refactored code generation for MOV instructions.config.mk:Added -Wno-unused-value to CFLAGS for the `all'target, since I like using && over if statements(its value gets unused so gcc gives a warning).
gcc bug	 https://github.com/buzunser/InfinityKernel/commit/cdcf872e8d069d01e94edba60cfc935343ab3a7d	FROMLIST: [PATCH v5 03/12] arm: vdso: inline assembler operations to compiler.h(cherry picked from commit https://patchwork.kernel.org/patch/10044507/)Take an effort to recode the arm64 vdso code from assembler to Cpreviously submitted by Andrew Pinski <apinski@cavium.com>, reworkit for use in both arm and arm64, overlapping any optimizationsfor each architecture. But instead of landing it in arm64, land theresult into lib/vdso and unify both implementations to simplifyfuture maintenance.Move compiler-specific code to a local compiler.h file:- CONFIG_AEABI dependency check.- System call fallback functions standardized into a  DEFINE_FALLBACK macro.- Replace arch_counter_get_cntvct() with arch_vdso_read_counter.- Deal with architecture specific unresolved references emitted  by GCC.- Optimize handling of fallback calls in callers.- For time functions that always return success, do not waste time  checking return value for switch to fallback.- Optimize unlikely nullptr checking in __vdso_gettimeofday,  if tv null no need to proceed to fallback, as vdso is still  capable of filling in the tv values.Signed-off-by: Mark Salyzyn <salyzyn@android.com>Cc: James Morse <james.morse@arm.com>Cc: Russell King <linux@armlinux.org.uk>Cc: Catalin Marinas <catalin.marinas@arm.com>Cc: Will Deacon <will.deacon@arm.com>Cc: Andy Lutomirski <luto@amacapital.net>Cc: Dmitry Safonov <dsafonov@virtuozzo.com>Cc: John Stultz <john.stultz@linaro.org>Cc: Mark Rutland <mark.rutland@arm.com>Cc: Laura Abbott <labbott@redhat.com>Cc: Kees Cook <keescook@chromium.org>Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>Cc: Andy Gross <andy.gross@linaro.org>Cc: Kevin Brodsky <kevin.brodsky@arm.com>Cc: Andrew Pinski <apinski@cavium.com>Cc: Thomas Gleixner <tglx@linutronix.de>Cc: linux-kernel@vger.kernel.orgCc: linux-arm-kernel@lists.infradead.orgBug: 63737556Bug: 20045882Change-Id: I468e4c32b5136d199982bf25df8967321e384d90Signed-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/DNKpp/Simple-Vector/commit/3a12acb5bc2d91dc376f57b0bb35d62fe068513e	workaround annoying gcc-10 compiler bugSigned-off-by: DNKpp <DNKpp2011@gmail.com>
gcc bug	 https://github.com/mhjacobson/avr-objc/commit/6187e336d706f1a87a7f0cbd9efa838f9d966737	objc.m: add workaround for GCC bug (difference from clang in how it emitsclasses when `sizeof (unsigned int) != sizeof (uint8_t *)`)
gcc bug	 https://github.com/drchristensen/dpdk-power/commit/16b809d144dc2df7f31695b5abc64a809021b154	net/ice/base: fix strict-aliasing with GCCCode changes done for build issue as reported in Bug 817error: dereferencing type-punned pointer will break strict-aliasing rules.added union to avoid pointer dereferencingThe build issue has been reported with both gcc 4.8.5 (RHEL 7) andgcc 5.4.0 (Ubuntu 16.04).Bugzilla ID: 817Fixes: 39925373a333 ("net/ice/base: add parser execution main loop")Signed-off-by: Aman Deep Singh <aman.deep.singh@intel.com>Tested-by: David Marchand <david.marchand@redhat.com>Acked-by: Ferruh Yigit <ferruh.yigit@intel.com>
gcc bug	 https://github.com/PXLVision/eigen/commit/6035da5283f12f7e6a49cda0c21696c8e5a115b7	Fix compile issues for gcc 4.8.- Move constructors can only be defaulted as NOEXCEPT if all membershave NOEXCEPT move constructors.- gcc 4.8 has some funny parsing bug in `a < b->c`, thinking `b-` is a template parameter.
gcc bug	 https://github.com/mozilla/gecko-dev/commit/87c8445c5a38948dd61c9ce63d04947be0130217	Bug 1711821 - Word around GCC bug with nodiscard forwarded nullptr r=petervDifferential Revision: https://phabricator.services.mozilla.com/D115458
gcc bug	 https://github.com/nodfur/nixpkgs/commit/5cc72dbec4b80094f6ba41c7f14af2abf996919f	cvise: use /bin.bash from nix storeNoticed failures as an incorrect handling of `--command` param:    $ cvise --command="gcc -c bug.c |& fgrep 'during RTL pass: expand'" bug.c    C-Vise cannot run because the interestingness test does not return    zero.This happens because temporary shell script has "#!/bin/bash" shebang.The change replaces it to path from nix store.
gcc bug	 https://github.com/13667836765/muduo/commit/9aaeda812bde476d231495212e6cf331ae2792b4	Fix build on gcc <= 4.9, #512.Workaround a bug in gcc "-Wshadow is too strict / has false positives"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57709This should fix build on Ubuntu 14.04, Debian 7&8, CentOS 7.
gcc bug	 https://github.com/kofuk/WebKit/commit/265cbb7e8e1395c0078a6a4f1d5cf3d8f146a4c0	Fix build with GCC 8.4 on Ubuntu 18.04https://bugs.webkit.org/show_bug.cgi?id=232305Patch by Daniel Kolesa <dkolesa@igalia.com> on 2021-11-01Reviewed by Adrian Perez de Castro.Source/WebCore:Fix build with GCC 8.4 on Ubuntu 18.04Thes sections of the code trigger an internal compiler error withGCC 8.4, segfaulting the compiler. This adds a workaround thatmakes it work again.* Modules/async-clipboard/ClipboardItemBindingsDataSource.cpp:(WebCore::ClipboardItemBindingsDataSource::collectDataForWriting):Source/WebKit:Thes sections of the code trigger an internal compiler error withGCC 8.4, segfaulting the compiler. This adds a workaround thatmakes it work again.* NetworkProcess/NetworkProcess.cpp:(WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains):Canonical link: https://commits.webkit.org/243743@maingit-svn-id: https://svn.webkit.org/repository/webkit/trunk@285101 268f45cc-cd09-0410-ab3c-d52691b4dbfc
gcc bug	 https://github.com/QcmPlab/SciFortran/commit/34cf6ae93f515c122b7329278cf52f5430a18638	4.7.0 UPDATEThis minor version includes former bug fix and updates.Rank+corank<=15 arrays are accepted in some parts (assert_shape, mpi)if compiler GCC>8.In this commit a bug as been removed in file_size function in IOFILE.In debug mode the -pendantic compilation option has been removed as itconflicts with -fallow-argument-mismatch (which in turn fix a bugin recent GNU gcc/gfortran compilers).THIS MINOR VERSION HAS BEEN TESTED IN DEBUG MODE.
gcc bug	 https://github.com/JacquesLucke/blender/commit/6cd64f8caacc1a7c679d962a053f73263fc18c2c	Add workaround for gcc 11 compiler bugDifferential Revision: https://developer.blender.org/D11462
gcc bug	 https://github.com/fsociety-tribute/barbet/commit/1aa358fb79d2ac6808d8171440f05a351cb9fb48	BACKPORT: arm64: vdso32: suppress error message for 'make mrproper'commit 14831fad73f5ac30ac61760487d95a538e6ab3cb upstream.When running the following command without arm-linux-gnueabi-gcc inone's $PATH, the following warning is observed:$ ARCH=arm64 CROSS_COMPILE_COMPAT=arm-linux-gnueabi- make -j72 LLVM=1 mrpropermake[1]: arm-linux-gnueabi-gcc: No such file or directoryThis is because KCONFIG is not run for mrproper, so CONFIG_CC_IS_CLANGis not set, and we end up eagerly evaluating various variables that tryto invoke CC_COMPAT.This is a similar problem to what was observed incommit dc960bfeedb0 ("h8300: suppress error messages for 'make clean'")Reported-by: Lucas Henneman <henneman@google.com>Suggested-by: Masahiro Yamada <masahiroy@kernel.org>[nd: adjusted context due to missing e35123d83ee3][nd: backported because Android backported compat vdso support to 4.19.y]Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Tested-by: Nathan Chancellor <nathan@kernel.org>Link: https://lore.kernel.org/r/20211019223646.1146945-4-ndesaulniers@google.comSigned-off-by: Will Deacon <will@kernel.org>Bug: 202827173Change-Id: Ic1ad9eb2871fd4f6c4f0e27df673df5cb4012df9
gcc bug	 https://github.com/ArjunaCluster/spack/commit/ae20fe4d79fff2854dcb84f7c3739762aecdac1b	fix: Don't assume gcc@11.2 exists and rm self loop on spack userFound some bugs in the setup (It worked but not from a clean slate)
gcc bug	 https://github.com/WriteMemory/openwrt/commit/9d8f620679df7f6f58ba1452311400da088a404b	tools/zlib: bump to latest stable release 1.2.12 (CVE-2018-25032)List of changes since previous release from 2018 is quite long: * Fix crc32.c to compile local functions only if used. * Check for cc masquerading as gcc or clang in configure. * Remove destructive aspects of make distclean. * Separate out address sanitizing from warnings in configure. * Eliminate use of ULL constants. * Add fallthrough comments for gcc. * Clean up minizip to reduce warnings for testing. * Fix unztell64() in minizip to work past 4GB. (Dani濮ｆ泊 H閺嬫chner) * minizip warning fix if MAXU32 already defined. (gvollant) * Replace black/white with allow/block. (theresa-m) * Fix indentation in minizip's zip.c. * Improve portability of contrib/minizip. * Correct typo in blast.c. * Change macro name in inflate.c to avoid collision in VxWorks. * Clarify gz* function interfaces, referring to parameter names. * Fix error in comment on the polynomial representation of a byte. * Fix memory leak on error in gzlog.c. * Avoid adding empty gzip member after gzflush with Z_FINISH. * Explicitly note that the 32-bit check values are 32 bits. * Use ARM crc32 instructions if the ARM architecture has them. * Add use of the ARMv8 crc32 instructions when requested. * Correct comment in crc32.c. * Don't bother computing check value after successful inflateSync(). * Use atomic test and set, if available, for dynamic CRC tables. * Speed up software CRC-32 computation by a factor of 1.5 to 3. * Add crc32_combine_gen() and crc32_combine_op() for fast combines. * Add tables for crc32_combine(), to speed it up by a factor of 200. * Fix the zran.c example to work on a multiple-member gzip file. * Add gznorm.c example, which normalizes gzip files. * Show all the codes for the maximum tables size in enough.c. * Clarify that prefix codes are counted in enough.c. * Use inline function instead of macro for index in enough.c. * Clean up code style in enough.c, update version. * Use a macro for the printf format of big_t in enough.c. * Use a structure to make globals in enough.c evident. * Assure that the number of bits for deflatePrime() is valid. * Fix a bug that can crash deflate on some input when using Z_FIXED. * Correct the initialization requirements for deflateInit2(). * Emphasize the need to continue decompressing gzip members. * Add legal disclaimer to README. * Fix deflateEnd() to not report an error at start of raw deflate. * Remove old assembler code in which bugs have manifested. * Make the names in functions declarations identical to definitions. * Avoid an undefined behavior of memcpy() in _tr_stored_block(). * Avoid undefined behaviors of memcpy() in gz*printf(). * Avoid an undefined behavior of memcpy() in gzappend(). * Avoid the use of ptrdiff_t. * Handle case where inflateSync used when header never processed. * Don't compute check value for raw inflate if asked to validate. * Add address checking in clang to -w option of configure. * Return an error if the gzputs string length can't fit in an int. * Small speedup to inflate [psumbera]. * Update use of errno for newer Windows CE versions. * Avoid some conversion warnings in gzread.c and gzwrite.c. * Have Makefile return non-zero error code on test failure. * Avoid a conversion error in gzseek when off_t type too small. * Fix CLEAR_HASH macro to be usable as a single statement. * Fix bug when window full in deflate_stored(). * Limit hash table inserts after switch from stored deflate. * Permit a deflateParams() parameter change as soon as possible. * Cygwin does not have _wopen(), so do not create gzopen_w() there.Removed 006-fix-compressor-crash-on-certain-inputs.patch which washotfix for CVE-2018-25032 and is now included in this release.This release is not available on @SF (yet?) so the sources are nowpulled from GitHub.Fixes: CVE-2018-25032Signed-off-by: Petr 閼癸箹etiar <ynezz@true.cz>
gcc bug	 https://github.com/WriteMemory/openwrt/commit/8839a939ee7681f8ca42846d05ce19b3df1e55d5	libs/zlib: bump to latest stable release 1.2.12 (CVE-2018-25032)List of changes since previous release from 2018 is quite long: * Fix crc32.c to compile local functions only if used. * Check for cc masquerading as gcc or clang in configure. * Remove destructive aspects of make distclean. * Separate out address sanitizing from warnings in configure. * Eliminate use of ULL constants. * Add fallthrough comments for gcc. * Clean up minizip to reduce warnings for testing. * Fix unztell64() in minizip to work past 4GB. (Dani濮ｆ泊 H閺嬫chner) * minizip warning fix if MAXU32 already defined. (gvollant) * Replace black/white with allow/block. (theresa-m) * Fix indentation in minizip's zip.c. * Improve portability of contrib/minizip. * Correct typo in blast.c. * Change macro name in inflate.c to avoid collision in VxWorks. * Clarify gz* function interfaces, referring to parameter names. * Fix error in comment on the polynomial representation of a byte. * Fix memory leak on error in gzlog.c. * Avoid adding empty gzip member after gzflush with Z_FINISH. * Explicitly note that the 32-bit check values are 32 bits. * Use ARM crc32 instructions if the ARM architecture has them. * Add use of the ARMv8 crc32 instructions when requested. * Correct comment in crc32.c. * Don't bother computing check value after successful inflateSync(). * Use atomic test and set, if available, for dynamic CRC tables. * Speed up software CRC-32 computation by a factor of 1.5 to 3. * Add crc32_combine_gen() and crc32_combine_op() for fast combines. * Add tables for crc32_combine(), to speed it up by a factor of 200. * Fix the zran.c example to work on a multiple-member gzip file. * Add gznorm.c example, which normalizes gzip files. * Show all the codes for the maximum tables size in enough.c. * Clarify that prefix codes are counted in enough.c. * Use inline function instead of macro for index in enough.c. * Clean up code style in enough.c, update version. * Use a macro for the printf format of big_t in enough.c. * Use a structure to make globals in enough.c evident. * Assure that the number of bits for deflatePrime() is valid. * Fix a bug that can crash deflate on some input when using Z_FIXED. * Correct the initialization requirements for deflateInit2(). * Emphasize the need to continue decompressing gzip members. * Add legal disclaimer to README. * Fix deflateEnd() to not report an error at start of raw deflate. * Remove old assembler code in which bugs have manifested. * Make the names in functions declarations identical to definitions. * Avoid an undefined behavior of memcpy() in _tr_stored_block(). * Avoid undefined behaviors of memcpy() in gz*printf(). * Avoid an undefined behavior of memcpy() in gzappend(). * Avoid the use of ptrdiff_t. * Handle case where inflateSync used when header never processed. * Don't compute check value for raw inflate if asked to validate. * Add address checking in clang to -w option of configure. * Return an error if the gzputs string length can't fit in an int. * Small speedup to inflate [psumbera]. * Update use of errno for newer Windows CE versions. * Avoid some conversion warnings in gzread.c and gzwrite.c. * Have Makefile return non-zero error code on test failure. * Avoid a conversion error in gzseek when off_t type too small. * Fix CLEAR_HASH macro to be usable as a single statement. * Fix bug when window full in deflate_stored(). * Limit hash table inserts after switch from stored deflate. * Permit a deflateParams() parameter change as soon as possible. * Cygwin does not have _wopen(), so do not create gzopen_w() there.Removed 006-fix-compressor-crash-on-certain-inputs.patch which washotfix for CVE-2018-25032 and is now included in this release.This release is not available on @SF (yet?) so the sources are nowpulled from GitHub.Fixes: CVE-2018-25032Signed-off-by: Petr 閼癸箹etiar <ynezz@true.cz>
gcc bug	 https://github.com/spack/spack/commit/6e36c71d6873d5b2feb9494f670b0277a9e68649	Fix GCC 8 build on macOS bigsur %apple-clang@12.0.5 (#28795)* gcc: revise patch range on darwin* gcc: add conflict to work around bootstrap failurecloses #23296 . See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340.```Comparing stages 2 and 3Bootstrap comparison failure!gcc/tree-ssa-operands.o differsgcc/tree-ssanames.o differsgcc/ipa-inline.o differsgcc/tree-ssa-pre.o differsgcc/gimple-loop-interchange.o differs...```639 total differences.* gcc: bump conflict up to correct later version
gcc bug	 https://github.com/swidi/CFI-based-attestation/commit/0e3d7e61867d69721b28e557272bdf4b66010327	Fix gcc build after de3a485d9 due to a gcc bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92598This should fix gcc based builders such as http://lab.llvm.org:8011/#/builders/76/builds/1683
gcc bug	 https://github.com/geoschem/gc-cloud-infrastructure/commit/3ab33196d8b4063c33a261b3f637b1fe3ae8b4df	Improve error reporting and modularize common functions (#7)* added alarm for billing costs* added config variable to specify whether to use spot or on demand queue for benchmark step function* added optional config variable to skip run dir creation and to set time period (only for GCC currently)* fixed bug where OutputDir was being deleted before simulation run* add 1Day option for GCHP* added trap for non zero exit codes* added get-repo.sh utility to benchmarking* create set-config.sh setting for updating simulation settings* created get-input-data.sh to download the data from s3* small updates* improved error reporting* added service user for github
gcc bug	 https://github.com/roberteg16/Quark/commit/0e3d7e61867d69721b28e557272bdf4b66010327	Fix gcc build after de3a485d9 due to a gcc bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92598This should fix gcc based builders such as http://lab.llvm.org:8011/#/builders/76/builds/1683
gcc bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/51effea05bcb833422c91ea65728454a069eec6d	Bug 1719226 - Remove old workarounds when building clang. r=firefox-build-system-reviewers,andi- we needed -gcc-toolchain to pick C/C++ standard headers from the rightversion of GCC, but we now have them in the toolchain sysroot (bug1719207), so we can use that instead.- we needed LD_LIBRARY_PATH when clang was built on an older version ofDebian, but that was changed in bug 1694775.Differential Revision: https://phabricator.services.mozilla.com/D119135
gcc bug	 https://github.com/jhueckelheim/ORAQL/commit/0e3d7e61867d69721b28e557272bdf4b66010327	Fix gcc build after de3a485d9 due to a gcc bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92598This should fix gcc based builders such as http://lab.llvm.org:8011/#/builders/76/builds/1683
gcc bug	 https://github.com/sobkas/mesa/commit/7d64f0dd1612a4ea645a83f507fa7612cb27aefa	nvc0: Fix uninitialized width/height/depth warning.This can happen if view->resource is false.Fixes a warning in GCC 9+ that's been bugging me for a very long time when building Mesa.Signed-off-by: Joshua Ashton <joshua@froggi.es>Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/12955>
gcc bug	 https://github.com/stemnic/avrdude/commit/caae9b4ce4892435c9804c7e0744496ed31f6511	Submitted by Andrew D'Addesio:bug #58078: [PATCH] buspirate: remove compound literals (fixes GCC>=9)* buspirate.c (buspirate_start_mode_bin):avoid propagating local scope compound literalsgit-svn-id: http://svn.savannah.nongnu.org/svn/avrdude/trunk@1455 81a1dc3b-b13d-400b-aceb-764788c761c2
gcc bug	 https://github.com/bmauxirl/virtual-environments/commit/6d4c863d14c2d56cf6d49330b71e1d95379e22bf	Revert "[ubuntu] Add GCC 11 (#3291)" (#3436)This reverts commit 3ebf601284cae6a4406b7ea1ad08cd593a4d619b.Bug: #3376
gcc bug	 https://github.com/harmonoid/harmonoid-custom-codec/commit/cb4a5baa7ff58cb33cd6be901aaa27a6b72b9280	gcc: revert back to 10.2.1+20210130Somewhere in february, gcc's snapshot introduced bug(?) as https://github.com/mpv-player/mpv/issues/8667.
gcc bug	 https://github.com/jaopaulolc/KernelFaRer/commit/0e3d7e61867d69721b28e557272bdf4b66010327	Fix gcc build after de3a485d9 due to a gcc bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92598This should fix gcc based builders such as http://lab.llvm.org:8011/#/builders/76/builds/1683
gcc bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/cfaeef1efd26f5692e4e18eb8fe12595d93471ef	Bug 1730078 - Build clang stage 1 with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125162
gcc bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/da41cd5a4036319c60863162c311e5f0660bb5fa	Bug 1730078 - Build binutils with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125156
gcc bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/b3ea93582430b6579fad91f6425b875540bfba73	Bug 1730078 - Build gn with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125155
gcc bug	 https://github.com/tarun14110/browser_secure_webauthn/commit/bdc07b1e770cc2588737eb18dad0b638977dd698	Bug 1730078 - Build clang stage 1 with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125162
gcc bug	 https://github.com/tarun14110/browser_secure_webauthn/commit/1a5855bb9a829ec230436d854f6a0d555ca787a2	Bug 1730078 - Build binutils with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125156
gcc bug	 https://github.com/tarun14110/browser_secure_webauthn/commit/b58f795d48037b845a516d989c441475194dbf50	Bug 1730078 - Build gn with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125155
gcc bug	 https://github.com/ComputationalRadiationPhysics/picongpu/commit/2841fbc749c17a986c692f686eb43e2f8dedbb30	fix GCC constexpr lambda bugApply workaround for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91377
gcc bug	 https://github.com/LuanHalaiko/kernel_raphael_sm8150/commit/36dcda6ccdb5ad8d68916f8a56b4b324f4d88e9a	UPSTREAM: wireguard: selftests: use newer iproute2 for gcc-10gcc-10 switched to defaulting to -fno-common, which broke iproute2-5.4.This was fixed in iproute-5.6, so switch to that. Because we're after astable testing surface, we generally don't like to bump theseunnecessarily, but in this case, being able to actually build is a basicnecessity.Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: David S. Miller <davem@davemloft.net>(cherry picked from commit ee3c1aa3f34b7842c1557cfe5d8c3f7b8c692de8)Bug: 152722841Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>Change-Id: Id88bafaca825112ed4e3d53baf2b724bcf70fe00Signed-off-by: Danny Lin <danny@kdrag0n.dev>
gcc bug	 https://github.com/dxx-rebirth/dxx-rebirth/commit/bace34343789cbab2995d0c22aa6822b9e5b67ce	Fix gcc-11 warning -Wmaybe-uninitialized on input arrayFor gcc bug #10138 [1], gcc-11 gained a new way to show a-Wmaybe-uninitialized warning.  When an uninitialized array is passed by`const T *` to a function, gcc-11 assumes the array is an input to thefunction, and warns accordingly.  This is often useful, but is incorrectfor the Rebirth partial_range code.  In this code, the pointer is onlypassed so that the eventual exception can print the memory address ofthe affected array.  The called function does not dereference thepointer, and so cannot be influenced by any uninitialized values in theunderlying array.Change the report function to take the array address in a `uintptr_t`,and cast it back for printing.  This silences the gcc-11 warning, whilepreserving the previous semantics in the code.[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=10138
gcc bug	 https://github.com/Thar0/binutils-rsp/commit/47a39c6e18324360b3ef9b72f03e206417f2ce9c	Fix gdb.ada/arrayptr.exp resultsPR ada/28115 points out that gdb.ada/arrayptr.exp works with GNAT 12,but fails with minimal encodings in earlier versions.This patch updates the test to try to report the results correctly.  Itried this with the Fedora 34 system gcc (GCC 11) and with a GCC 12built from git trunk sometime relatively recently.Bug: https://sourceware.org/bugzilla/show_bug.cgi?id=28115
gcc bug	 https://github.com/coreboot/chrome-ec/commit/43c6a470089992920639dce56cbadabc86c361bc	test/utils: Update expected speed gain on memcpy, memmove, memset testsGCC 11 introduces some improvements for memcpy, memmove and memsetfunctions when pointer is not aligned, eg. on bloonchipper:gcc version 8.3.0 (coreboot toolchain v_)Running test_memmove... (speed gain: 33741 -> 7743 us) OKRunning test_memcpy... (speed gain: 33740 -> 7735 us) OKRunning test_memset... (speed gain: 20879 -> 6725 us) OKgcc version 11.2.0 (coreboot toolchain v_)Running test_memmove... (speed gain: 21500 -> 9038 us) OKRunning test_memcpy... (speed gain: 21448 -> 8996 us) OKRunning test_memset... (speed gain: 16722 -> 6848 us) OKAs we can see unaligned memcpy and memmove is 12ms faster, butthey are also about 1ms slower when buffers are aligned.Simple memset is 4 ms faster. Optimized memset speed is the same.As there are so many factors that can influence speed gains (compiler,function inlining, CPU model, caches, architecture, and code placementin memory), we decided to just check if using aligned buffers/optimizedmemset takes less time to perform the operation.CL:3198155 updates coreboot-sdk to GCC 11.BUG=b:200828093BRANCH=noneTEST=Run "utils" hardware unit test on bloonchipper (STM32F4) and     dartmonkey (STM32H7) make sure test pass.Signed-off-by: Patryk Duda <pdk@semihalf.com>Change-Id: Id50f2504928b8b25795fc0c317867b18900bbd39Reviewed-on: https://chromium-review.googlesource.com/c/chromiumos/platform/ec/+/3386834Reviewed-by: Tom Hughes <tomhughes@chromium.org>Reviewed-by: Daisuke Nojiri <dnojiri@chromium.org>Reviewed-by: Patrick Georgi <pgeorgi@chromium.org>
gcc bug	 https://github.com/Prashant1873/kernel_xiaomi_SDM660_4.19/commit/84369fccbcabc45196d3f69af43b9106484db813	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c6704Signed-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>
gcc bug	 https://github.com/rurban/binutils-gdb/commit/47a39c6e18324360b3ef9b72f03e206417f2ce9c	Fix gdb.ada/arrayptr.exp resultsPR ada/28115 points out that gdb.ada/arrayptr.exp works with GNAT 12,but fails with minimal encodings in earlier versions.This patch updates the test to try to report the results correctly.  Itried this with the Fedora 34 system gcc (GCC 11) and with a GCC 12built from git trunk sometime relatively recently.Bug: https://sourceware.org/bugzilla/show_bug.cgi?id=28115
gcc bug	 https://github.com/okta-10/mystic_kernel_sdm660-4.4/commit/7065c907af98f6178a27d12c49743db0c420d566	kernel/trace/bpf_trace.c: work around gcc-4.4.4 anon union initialization bugkernel/trace/bpf_trace.c: In function 'bpf_event_output':kernel/trace/bpf_trace.c:312: error: unknown field 'next' specified in initializerkernel/trace/bpf_trace.c:312: warning: missing braces around initializerkernel/trace/bpf_trace.c:312: warning: (near initialization for 'raw.frag.<anonymous>')Fixes: 555c8a8623a3a87 ("bpf: avoid stack copy and use skb ctx for event output")Acked-by: Daniel Borkmann <daniel@iogearbox.net>Cc: Alexei Starovoitov <ast@kernel.org>Cc: David S. Miller <davem@davemloft.net>Signed-off-by: Andrew Morton <akpm@linux-foundation.org>Acked-by: Alexei Starovoitov <ast@kernel.org>Signed-off-by: David S. Miller <davem@davemloft.net>Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>
gcc bug	 https://github.com/rrthomas/binutils-gdb/commit/47a39c6e18324360b3ef9b72f03e206417f2ce9c	Fix gdb.ada/arrayptr.exp resultsPR ada/28115 points out that gdb.ada/arrayptr.exp works with GNAT 12,but fails with minimal encodings in earlier versions.This patch updates the test to try to report the results correctly.  Itried this with the Fedora 34 system gcc (GCC 11) and with a GCC 12built from git trunk sometime relatively recently.Bug: https://sourceware.org/bugzilla/show_bug.cgi?id=28115
gcc bug	 https://github.com/mrisc32/binutils-mrisc32/commit/47a39c6e18324360b3ef9b72f03e206417f2ce9c	Fix gdb.ada/arrayptr.exp resultsPR ada/28115 points out that gdb.ada/arrayptr.exp works with GNAT 12,but fails with minimal encodings in earlier versions.This patch updates the test to try to report the results correctly.  Itried this with the Fedora 34 system gcc (GCC 11) and with a GCC 12built from git trunk sometime relatively recently.Bug: https://sourceware.org/bugzilla/show_bug.cgi?id=28115
gcc bug	 https://github.com/Codym48/count-in-range/commit/ac40b2d51e7a035d794efc9b0d3d2615e01b791b	Add Hello World and CMake build systemOne possible definition of the simplest possible starting point C++ project- main.cpp that prints "Hello, world!"- CMake cross-platform build system that compiles a single main.exe executable target- .gitignore to ignore the build artifacts from version control- .gitattributes that keeps line endings consistent across OSesThis should work on Linux, Mac, or Windows and is compilable with any C++ compiler like gcc, g++, ninja, cl, or msvc.The "main" target is debuggable with no additional effort via the "Local Windows Debugger", Debug >Start Debugging, or right click > Debug > Start new instance options in the Visual Studio 2015 community edition IDE or via the Visual Studio Code editor with the C/C++ and CMake Tools extensions via the little bug and play arrow icons in the bottom of the IDE.
gcc bug	 https://github.com/kraj/binutils-gdb/commit/47a39c6e18324360b3ef9b72f03e206417f2ce9c	Fix gdb.ada/arrayptr.exp resultsPR ada/28115 points out that gdb.ada/arrayptr.exp works with GNAT 12,but fails with minimal encodings in earlier versions.This patch updates the test to try to report the results correctly.  Itried this with the Fedora 34 system gcc (GCC 11) and with a GCC 12built from git trunk sometime relatively recently.Bug: https://sourceware.org/bugzilla/show_bug.cgi?id=28115
gcc bug	 https://github.com/ProjectElixir-Devices/kernel_oneplus_sm8250/commit/9ba4573c2677b0e1a713c5358a89ccf8eaa6f80b	ARM: 9081/1: fix gcc-10 thumb2-kernel regressioncommit dad7b9896a5dbac5da8275d5a6147c65c81fb5f2 upstream.When building the kernel wtih gcc-10 or higher using theCONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y flag, the compiler picks a slightlydifferent set of registers for the inline assembly in cpu_init() thatsubsequently results in a corrupt kernel stack as well as remaining inFIQ mode. If a banked register is used for the last argument, the wrongversion of that register gets loaded into CPSR_c.  When building in Armmode, the arguments are passed as immediate values and the bug cannothappen.This got introduced when Daniel reworked the FIQ handling and wastechnically always broken, but happened to work with both clang and gccbefore gcc-10 as long as they picked one of the lower registers.This is probably an indication that still very few people build thekernel in Thumb2 mode.Marek pointed out the problem on IRC, Arnd narrowed it down to thisinline assembly and Russell pinpointed the exact bug.Change the constraints to force the final mode switch to use a non-bankedregister for the argument to ensure that the correct constant gets loaded.Another alternative would be to always use registers for the constantarguments to avoid the #ifdef that has now become more complex.Cc: <stable@vger.kernel.org> # v3.18+Cc: Daniel Thompson <daniel.thompson@linaro.org>Reported-by: Marek Vasut <marek.vasut@gmail.com>Acked-by: Ard Biesheuvel <ardb@kernel.org>Fixes: c0e7f7ee717e ("ARM: 8150/3: fiq: Replace default FIQ handler")Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/grate-driver/linux/commit/d3b0b80064e0416850f818184b8f7bba9fdf8c40	selftests/bpf: Fix GCC11 compiler warnings in -O2 modeWhen compiling selftests in -O2 mode with GCC1, we get three newcompilations warnings about potentially uninitialized variables.Compiler is wrong 2 out of 3 times, but this patch makes GCC11 happyanyways, as it doesn't cost us anything and makes optimized selftestsbuild less annoying.The amazing one is tc_redirect case of token that is malloc()'ed beforeASSERT_OK_PTR() check is done on it. Seems like GCC pessimisticallyassumes that libbpf_get_error() will dereference the contents of thepointer (no it won't), so the only way I found to shut GCC up was to dozero-initializaing calloc(). This one was new to me.For linfo case, GCC didn't realize that linfo_size will be initializedby the function that is returning linfo_size as out parameter.core_reloc.c case was a real bug, we can goto cleanup before initializingobj. But we don't need to do any clean up, so just continue iterationintstead.Signed-off-by: Andrii Nakryiko <andrii@kernel.org>Signed-off-by: Alexei Starovoitov <ast@kernel.org>Link: https://lore.kernel.org/bpf/20220211190927.1434329-1-andrii@kernel.org
gcc bug	 https://github.com/bsdjhb/gdb/commit/47a39c6e18324360b3ef9b72f03e206417f2ce9c	Fix gdb.ada/arrayptr.exp resultsPR ada/28115 points out that gdb.ada/arrayptr.exp works with GNAT 12,but fails with minimal encodings in earlier versions.This patch updates the test to try to report the results correctly.  Itried this with the Fedora 34 system gcc (GCC 11) and with a GCC 12built from git trunk sometime relatively recently.Bug: https://sourceware.org/bugzilla/show_bug.cgi?id=28115
gcc bug	 https://github.com/xanmod/linux/commit/4c250bba3233ca709608f67c42ec6f6b203cc37d	x86/bug: Prevent shadowing in __WARN_FLAGScommit 9ce02f0fc68326dd1f87a0a3a4c6ae7fdd39e6f6 upstream.The macro __WARN_FLAGS() uses a local variable named "f". This being acommon name, there is a risk of shadowing other variables.For example, GCC would yield:| In file included from ./include/linux/bug.h:5,|                  from ./include/linux/cpumask.h:14,|                  from ./arch/x86/include/asm/cpumask.h:5,|                  from ./arch/x86/include/asm/msr.h:11,|                  from ./arch/x86/include/asm/processor.h:22,|                  from ./arch/x86/include/asm/timex.h:5,|                  from ./include/linux/timex.h:65,|                  from ./include/linux/time32.h:13,|                  from ./include/linux/time.h:60,|                  from ./include/linux/stat.h:19,|                  from ./include/linux/module.h:13,|                  from virt/lib/irqbypass.mod.c:1:| ./include/linux/rcupdate.h: In function 'rcu_head_after_call_rcu':| ./arch/x86/include/asm/bug.h:80:21: warning: declaration of 'f' shadows a parameter [-Wshadow]|    80 |         __auto_type f = BUGFLAG_WARNING|(flags);                \|       |                     ^| ./include/asm-generic/bug.h:106:17: note: in expansion of macro '__WARN_FLAGS'|   106 |                 __WARN_FLAGS(BUGFLAG_ONCE |                     \|       |                 ^~~~~~~~~~~~| ./include/linux/rcupdate.h:1007:9: note: in expansion of macro 'WARN_ON_ONCE'|  1007 |         WARN_ON_ONCE(func != (rcu_callback_t)~0L);|       |         ^~~~~~~~~~~~| In file included from ./include/linux/rbtree.h:24,|                  from ./include/linux/mm_types.h:11,|                  from ./include/linux/buildid.h:5,|                  from ./include/linux/module.h:14,|                  from virt/lib/irqbypass.mod.c:1:| ./include/linux/rcupdate.h:1001:62: note: shadowed declaration is here|  1001 | rcu_head_after_call_rcu(struct rcu_head *rhp, rcu_callback_t f)|       |                                               ~~~~~~~~~~~~~~~^For reference, sparse also warns about it, c.f. [1].This patch renames the variable from f to __flags (with two underscoreprefixes as suggested in the Linux kernel coding style [2]) in orderto prevent collisions.[1] https://lore.kernel.org/all/CAFGhKbyifH1a+nAMCvWM88TK6fpNPdzFtUXPmRGnnQeePV+1sw@mail.gmail.com/[2] Linux kernel coding style, section 12) Macros, Enums and RTL,paragraph 5) namespace collisions when defining local variables inmacros resembling functionshttps://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtlFixes: bfb1a7c91fb7 ("x86/bug: Merge annotate_reachable() into_BUG_FLAGS() asm")Signed-off-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lkml.kernel.org/r/20220324023742.106546-1-mailhol.vincent@wanadoo.frSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/ALittleDruid/aom/commit/ff103cac8acaa442bab3d4cdc79b849113e3c457	Fix SIMD inline optimization for building with gccIn simd_cmp_impl.h, SIMD_INLINE was defined too late for it to haveeffect. This resulted in a build error using the optimization levelwith the gcc configuration. This CL moves the define before theinclusion of aom_simd.h and resolves the build issue.BUG=aomedia:3171Change-Id: I420e0aafd089df5b7015caa2b2443da75f4d3733
gcc bug	 https://github.com/MontaVista-OpenSourceTechnology/linux-live-app-coredump/commit/bfb1a7c91fb7758273b4a8d735313d9cc388b502	x86/bug: Merge annotate_reachable() into _BUG_FLAGS() asmIn __WARN_FLAGS(), we had two asm statements (abbreviated):  asm volatile("ud2");  asm volatile(".pushsection .discard.reachable");These pair of statements are used to trigger an exception, but then helpobjtool understand that for warnings, control flow will be restoredimmediately afterwards.The problem is that volatile is not a compiler barrier. GCC explicitlydocuments this:> Note that the compiler can move even volatile asm instructions> relative to other code, including across jump instructions.Also, no clobbers are specified to prevent instructions from subsequentstatements from being scheduled by compiler before the second asmstatement. This can lead to instructions from subsequent statementsbeing emitted by the compiler before the second asm statement.Providing a scheduling model such as via -march= options enables thecompiler to better schedule instructions with known latencies to hidelatencies from data hazards compared to inline asm statements in whichlatencies are not estimated.If an instruction gets scheduled by the compiler between the two asmstatements, then objtool will think that it is not reachable, producinga warning.To prevent instructions from being scheduled in between the two asmstatements, merge them.Also remove an unnecessary unreachable() asm annotation from BUG() infavor of __builtin_unreachable(). objtool is able to track that the ud2from BUG() terminates control flow within the function.Link: https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#VolatileLink: https://github.com/ClangBuiltLinux/linux/issues/1483Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220202205557.2260694-1-ndesaulniers@google.com
gcc bug	 https://github.com/ahjragaas/binutils-gdb/commit/47a39c6e18324360b3ef9b72f03e206417f2ce9c	Fix gdb.ada/arrayptr.exp resultsPR ada/28115 points out that gdb.ada/arrayptr.exp works with GNAT 12,but fails with minimal encodings in earlier versions.This patch updates the test to try to report the results correctly.  Itried this with the Fedora 34 system gcc (GCC 11) and with a GCC 12built from git trunk sometime relatively recently.Bug: https://sourceware.org/bugzilla/show_bug.cgi?id=28115
gcc bug	 https://github.com/a4lg/binutils-gdb/commit/47a39c6e18324360b3ef9b72f03e206417f2ce9c	Fix gdb.ada/arrayptr.exp resultsPR ada/28115 points out that gdb.ada/arrayptr.exp works with GNAT 12,but fails with minimal encodings in earlier versions.This patch updates the test to try to report the results correctly.  Itried this with the Fedora 34 system gcc (GCC 11) and with a GCC 12built from git trunk sometime relatively recently.Bug: https://sourceware.org/bugzilla/show_bug.cgi?id=28115
gcc bug	 https://github.com/Zirias/zfbsd-ports/commit/ead2e6c0adfc0df72aab233bfe82d95104982e75	lang/php81: Update version 8.1.1=>8.1.2- Remove references to defunct php72- Change to CONFLICTS_INSTALL for regex pattern to avoid changing while  updating/adding major versions. [1]- Core:    * Fixed bug #81216 (Nullsafe operator leaks dynamic property name).    * Fixed bug #81684 (Using null coalesce assignment with      $GLOBALS["x"] produces opcode error).    * Fixed bug #81656 (GCC-11 silently ignores -R).    * Fixed bug #81683 (Misleading "access type ... must be public"      error message on final or abstract interface methods).    * Fixed bug #81585 (cached_chunks are not counted to real_size on      shutdown).    * Fixed bug #7757 (Multi-inherited final constant causes fatal      error).    * Fixed zend_fibers.c build with ZEND_FIBER_UCONTEXT.    * Added riscv64 support for fibers.- Filter:    * Fixed FILTER_FLAG_NO_RES_RANGE flag.- Hash:    * Fixed bug #7759 (Incorrect return types for hash() and      hash_hmac()).    * Fixed bug #7826 (Inconsistent argument name in hash_hmac_file and      hash_file).- MBString:    * Fixed bug #81693 (mb_check_encoding(7bit) segfaults).- MySQLi:    * Fixed bug #81658 (MYSQL_OPT_LOAD_DATA_LOCAL_DIR not available in      MariaDB).    * Introduced MYSQLI_IS_MARIADB.    * Fixed bug #7746 (mysqli_sql_exception->getSqlState()).- MySQLnd:    * Fixed bug where large bigints may be truncated.- OCI8:    * Fixed bug #7765 (php_oci_cleanup_global_handles segfaults at      second call).- OPcache:    * Fixed bug #81679 (Tracing JIT crashes on reattaching).- Readline:    * Fixed bug #81598 (Cannot input unicode characters in PHP 8      interactive shell).- Reflection:    * Fixed bug #81681 (ReflectionEnum throwing exceptions).- PDO_PGSQL:    * Fixed error message allocation of PDO PgSQL.- Sockets:    * Avoid void* arithmetic in sockets/multicast.c on NetBSD.    * Fixed ext/sockets build on Haiku.- Spl:    * Fixed bug #75917 (SplFileObject::seek broken with CSV flags).    * Fixed bug #7809 (Cloning a faked SplFileInfo object may segfault).- Standard:    * Fixed bug #7748 (gethostbyaddr outputs binary string).    * Fixed bug #7815 (php_uname doesn't recognise latest Windows      versions).Reported by:    se [1]Differential Revision:
gcc bug	 https://github.com/conda-forge/staged-recipes/commit/040334809a752a1b39276f85f8fe44e041224969	BUG: Limit GCC version to <= 8 for NVCC
gcc bug	 https://github.com/wagerr/wagerr/commit/8ea542b7aad7c582c45bcf3758153a0f7048a2a8	fix old gcc compiler bug (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50025)
gcc bug	 https://github.com/RicardoLuis0/RBuild/commit/b75eac62a333e398ff65d6f7bcc5200ff75811dd	fix std::thread segfault when statically linkedhttps://stackoverflow.com/a/31265512 , https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52590
gcc bug	 https://github.com/sleepybishop/oblas/commit/877a4bffae1bcb18d74015889a11ae0b2d6cbb12	gcc has added avx intrinsics (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91341#c3)
gcc bug	 https://github.com/isrc-cas/chromium-v8-build/commit/e2395fc5f7856c4976433964b70e4400a4cb627f	GCC: no -fno-delete-null-pointer-checks in compiler flagsGCC seems to have a bug with constexpr when this flag is present:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97913So enable it only on clang for now.Bug: 1139129Change-Id: If657d5e3fac1621adf57c266cfd64ce628dc7b86Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2551494Commit-Queue: Matthew Denton <mpdenton@chromium.org>Reviewed-by: Nico Weber <thakis@chromium.org>Cr-Commit-Position: refs/heads/master@{#829585}GitOrigin-RevId: 023af6393c5555cd66eb8c45e33d18c6a0cf38ba
gcc bug	 https://github.com/denoland/chromium_build/commit/e2395fc5f7856c4976433964b70e4400a4cb627f	GCC: no -fno-delete-null-pointer-checks in compiler flagsGCC seems to have a bug with constexpr when this flag is present:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97913So enable it only on clang for now.Bug: 1139129Change-Id: If657d5e3fac1621adf57c266cfd64ce628dc7b86Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2551494Commit-Queue: Matthew Denton <mpdenton@chromium.org>Reviewed-by: Nico Weber <thakis@chromium.org>Cr-Commit-Position: refs/heads/master@{#829585}GitOrigin-RevId: 023af6393c5555cd66eb8c45e33d18c6a0cf38ba
gcc bug	 https://github.com/TwistedPrime/Twisted-OP7/commit/846737e63cfe7ee81788c4ca9babe0d3bf687677	gcc-plugins: latent_entropy: use /dev/urandomcommit c40160f2998c897231f8454bf797558d30a20375 upstream.While the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.comSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/sarthakroy2002/kernel_realme_RMX2020/commit/846737e63cfe7ee81788c4ca9babe0d3bf687677	gcc-plugins: latent_entropy: use /dev/urandomcommit c40160f2998c897231f8454bf797558d30a20375 upstream.While the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.comSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/google/kmsan/commit/bfb1a7c91fb7758273b4a8d735313d9cc388b502	x86/bug: Merge annotate_reachable() into _BUG_FLAGS() asmIn __WARN_FLAGS(), we had two asm statements (abbreviated):  asm volatile("ud2");  asm volatile(".pushsection .discard.reachable");These pair of statements are used to trigger an exception, but then helpobjtool understand that for warnings, control flow will be restoredimmediately afterwards.The problem is that volatile is not a compiler barrier. GCC explicitlydocuments this:> Note that the compiler can move even volatile asm instructions> relative to other code, including across jump instructions.Also, no clobbers are specified to prevent instructions from subsequentstatements from being scheduled by compiler before the second asmstatement. This can lead to instructions from subsequent statementsbeing emitted by the compiler before the second asm statement.Providing a scheduling model such as via -march= options enables thecompiler to better schedule instructions with known latencies to hidelatencies from data hazards compared to inline asm statements in whichlatencies are not estimated.If an instruction gets scheduled by the compiler between the two asmstatements, then objtool will think that it is not reachable, producinga warning.To prevent instructions from being scheduled in between the two asmstatements, merge them.Also remove an unnecessary unreachable() asm annotation from BUG() infavor of __builtin_unreachable(). objtool is able to track that the ud2from BUG() terminates control flow within the function.Link: https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#VolatileLink: https://github.com/ClangBuiltLinux/linux/issues/1483Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220202205557.2260694-1-ndesaulniers@google.com
gcc bug	 https://github.com/ItsProf-org/my_whatever_kernel/commit/846737e63cfe7ee81788c4ca9babe0d3bf687677	gcc-plugins: latent_entropy: use /dev/urandomcommit c40160f2998c897231f8454bf797558d30a20375 upstream.While the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.comSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/youling257/android-mainline/commit/c40160f2998c897231f8454bf797558d30a20375	gcc-plugins: latent_entropy: use /dev/urandomWhile the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.com
gcc bug	 https://github.com/tq-systems/linux-em/commit/c40160f2998c897231f8454bf797558d30a20375	gcc-plugins: latent_entropy: use /dev/urandomWhile the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.com
gcc bug	 https://github.com/jpirko/linux_mlxsw/commit/c40160f2998c897231f8454bf797558d30a20375	gcc-plugins: latent_entropy: use /dev/urandomWhile the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.com
gcc bug	 https://github.com/jeffmerkey/linux/commit/c40160f2998c897231f8454bf797558d30a20375	gcc-plugins: latent_entropy: use /dev/urandomWhile the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.com
gcc bug	 https://github.com/yuzu-emu/yuzu/commit/2dc86372c76afb134651499452bb5074b6d1e839	shader: Fix bugs and build issues on GCC
gcc bug	 https://github.com/bcopeland/wireless-testing/commit/c40160f2998c897231f8454bf797558d30a20375	gcc-plugins: latent_entropy: use /dev/urandomWhile the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.com
gcc bug	 https://github.com/xaya/xaya/commit/d6fae988eff78e28756d9b6219ec0239c420f51b	guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to makeit avoid using aligned vmov instructions. This works around a longstanding issuein GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recentlydiscovered to be causing issues, see #24726.Note that distros like Debian are also patching around this issue, and that iswhere this patch comes from. This would also explain why we haven't run into thisproblem earlier, in development builds. See:https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.Fixes #24726.Alternative to #24727.See also:https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559
gcc bug	 https://github.com/Neternels/nethunter-sdm660/commit/3b66afdee31a88d09a814a534c332116338eb331	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c670
gcc bug	 https://github.com/mysql/mysql-server/commit/b8bfd2ae325b65bef95e65176af38ca052670e96	Bug #33058987 LOOK FOR ALTERNATIVE AR AND RANLIB ON UBUNTU 18.04The patch for:    Bug #32877062 SWITCH TO GCC 8 ON UBUNTU 18.04selected alternative gcc version gcc-8 on Ubuntu 18.04This patch looks for accompanying gcc-ar and gcc-ranlib tools as well.Change-Id: I07423bc78192d992e587aad081de71889fd7c4ce
gcc bug	 https://github.com/kubagalecki/L3STER/commit/07c21f61db32d7321c81b046d4e77b115af07e37	Gcc version proofing (#12)* gcc bug workaround, ci no longer triggers on PR* more range algos, gcc 11.1 conformance
gcc bug	 https://github.com/Kitware/iMSTK/commit/87d555293be50e132f892531a932f50b077acadc	BUG: Fix physx build under newer gccgcc throws an error here
gcc bug	 https://github.com/hebasto/bitcoin-qtw/commit/d3ef3cfa82377fb3b4746a9d16fa1b7e41eba647	guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to makeit avoid using aligned vmov instructions. This works around a longstanding issuein GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recentlydiscovered to be causing issues, see #24726.Note that distros like Debian are also patching around this issue, and that iswhere this patch comes from. This would also explain why we haven't run into thisproblem earlier, in development builds. See:https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.Fixes #24726.Alternative to #24727.See also:https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559
gcc bug	 https://github.com/ehawkvu/kiss-xorg/commit/0988fc5fef96eafbdb393788a1cb082ceb258d57	gcc: backport patch from GCC 11.2This fixes a compiler bug which causes Firefox builds to fail.
gcc bug	 https://github.com/boschmitt/tweedledum/commit/5d545f8c5758ceb911cbde581d72ec725cf211a3	Workaround gcc bug
gcc bug	 https://github.com/boundarydevices/buildroot/commit/27b425ef4995e43c84b36c44d7d7d1c018b0fdef	package/heirloom-mailx: fix build failure due to gcc bug 101916The heirloom-mailx package exhibits gcc bug 101916 when built for theSH4 architecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101916=y.Also introduce HEIRLOOM_MAILX_CFLAGS as done for other packages and movethe already present -fPIC CFLAG to it.Fixes:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/dhruv/bitcoin-core-ci/commit/d6fae988eff78e28756d9b6219ec0239c420f51b	guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to makeit avoid using aligned vmov instructions. This works around a longstanding issuein GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recentlydiscovered to be causing issues, see #24726.Note that distros like Debian are also patching around this issue, and that iswhere this patch comes from. This would also explain why we haven't run into thisproblem earlier, in development builds. See:https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.Fixes #24726.Alternative to #24727.See also:https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559
gcc bug	 https://github.com/Hasiergo/Lenovo_TB-X606F_kernel/commit/081013ee306713e18e648e9d6e91e6897d5f0b2a	gcc-10 warnings: fix low-hanging fruitcommit 9d82973e032e246ff5663c9805fbb5407ae932e3 upstream.Due to a bug-report that was compiler-dependent, I updated one of mymachines to gcc-10.  That shows a lot of new warnings.  Happily theyseem to be mostly the valid kind, but it's going to cause a round ofchurn for getting rid of them..This is the really low-hanging fruit of removing a couple of zero-sizedarrays in some core code.  We have had a round of these patches before,and we'll have many more coming, and there is nothing special aboutthese except that they were particularly trivial, and triggered morewarnings than most.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Hasiergo/Lenovo_TB-X606F_kernel/commit/4650e0200ec33f093a355e7e089632a0aedd5862	cpupower: avoid multiple definition with gcc -fno-common[ Upstream commit 2de7fb60a4740135e03cf55c1982e393ccb87b6b ]Building cpupower with -fno-common in CFLAGS results in errors due tomultiple definitions of the 'cpu_count' and 'start_time' variables../utils/idle_monitor/snb_idle.o:./utils/idle_monitor/cpupower-monitor.h:28:multiple definition of `cpu_count';./utils/idle_monitor/nhm_idle.o:./utils/idle_monitor/cpupower-monitor.h:28:first defined here..../utils/idle_monitor/cpuidle_sysfs.o:./utils/idle_monitor/cpuidle_sysfs.c:22:multiple definition of `start_time';./utils/idle_monitor/amd_fam14h_idle.o:./utils/idle_monitor/amd_fam14h_idle.c:85:first defined hereThe -fno-common option will be enabled by default in GCC 10.Bug: https://bugs.gentoo.org/707462Signed-off-by: Mike Gilbert <floppym@gentoo.org>Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/PXLVision/eigen/commit/9882aec279cbea28f5cd9ff40fc0f3e3988ab6f0	Silence string overflow warning for GCC in initializer_list_construction test.This looks to be a GCC bug.  It doesn't seem to reproduce is a smaller example,making it hard to isolate.
gcc bug	 https://github.com/Pekkari/builroot/commit/a8a9b12766a434e7d70cd246689d4de11d440875	package/pixman: fix build failure due to gcc bug 101737The pixman package exhibits gcc bug 101737 when built for the SH4architecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101737=y.Also let's add PIXMAN_CFLAGS and pass the Codesourcery work around CFLAGSto it for consistency like we do for the rest of the packages.Fixes:http://autobuild.buildroot.net/results/b20/b20869bbb48edb1f0a847ea9e2e1a0462d6350be/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/bminor/binutils-gdb/commit/2990bf409642bd16d99d66e5f828291148157ab3	Update bug reporting addresshttps://sourceware.org/bugzilla/ everywherebfd/
gcc bug	 https://github.com/delphix/linux-kernel-oracle/commit/7206ce2b4c277f41b5d482fbcca477dbd535bdd8	clk: qcom: gcc-msm8996: Drop (again) gcc_aggre1_pnoc_ahb_clkBugLink: https://bugs.launchpad.net/bugs/1954834[ Upstream commit 05cf3ec00d460b50088d421fb878a0f83f57e262 ]The gcc_aggre1_pnoc_ahb_clk is crucial for the proper MSM8996/APQ8096functioning. If it gets disabled, several subsytems will stop working(including eMMC/SDCC and USB). There are no in-kernel users of thisclock, so it is much simpler to remove from the kernel.The clock was first removed in the commit 9e60de1cf270 ("clk: qcom:Remove gcc_aggre1_pnoc_ahb_clk from msm8996") by Stephen Boyd, but gotadded back in the commit b567752144e3 ("clk: qcom: Add some missing gccclks for msm8996") by Rajendra Nayak.Let's remove it again in hope that nobody adds it back.Reported-by: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>Cc: Rajendra Nayak <rnayak@codeaurora.org>Cc: Konrad Dybcio <konrad.dybcio@somainline.org>Fixes: b567752144e3 ("clk: qcom: Add some missing gcc clks for msm8996")Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>Link: https://lore.kernel.org/r/20211104011155.2209654-1-dmitry.baryshkov@linaro.orgSigned-off-by: Stephen Boyd <sboyd@kernel.org>Signed-off-by: Sasha Levin <sashal@kernel.org>Signed-off-by: Kamal Mostafa <kamal@canonical.com>Signed-off-by: Kleber Sacilotto de Souza <kleber.souza@canonical.com>
gcc bug	 https://github.com/Tencent/TencentKona-8/commit/1f087cd78987db6c0e02a008a61b6e41874474f0	FIX(BUILD): Fix the stringop-overflow warning in gcc 8.3.1--bug=90147219
gcc bug	 https://github.com/FreshROMs/android_kernel_samsung_exynos9610_mint/commit/45f27005aa1d1ed0cffaa4f0019de51f8bdb063e	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Forenche <prahul2003@gmail.com>Signed-off-by: John Vincent <git@tensevntysevn.cf>
gcc bug	 https://github.com/vasishath/yuzu/commit/2dc86372c76afb134651499452bb5074b6d1e839	shader: Fix bugs and build issues on GCC
gcc bug	 https://github.com/kisslinux/repo/commit/ce656189865ac13055c7cfdbfd886f66339eb9b3	gcc: backport patch from GCC 11.2This fixes a compiler bug which causes Firefox builds to fail.
gcc bug	 https://github.com/OPAE/linux-dfl/commit/bfb1a7c91fb7758273b4a8d735313d9cc388b502	x86/bug: Merge annotate_reachable() into _BUG_FLAGS() asmIn __WARN_FLAGS(), we had two asm statements (abbreviated):  asm volatile("ud2");  asm volatile(".pushsection .discard.reachable");These pair of statements are used to trigger an exception, but then helpobjtool understand that for warnings, control flow will be restoredimmediately afterwards.The problem is that volatile is not a compiler barrier. GCC explicitlydocuments this:> Note that the compiler can move even volatile asm instructions> relative to other code, including across jump instructions.Also, no clobbers are specified to prevent instructions from subsequentstatements from being scheduled by compiler before the second asmstatement. This can lead to instructions from subsequent statementsbeing emitted by the compiler before the second asm statement.Providing a scheduling model such as via -march= options enables thecompiler to better schedule instructions with known latencies to hidelatencies from data hazards compared to inline asm statements in whichlatencies are not estimated.If an instruction gets scheduled by the compiler between the two asmstatements, then objtool will think that it is not reachable, producinga warning.To prevent instructions from being scheduled in between the two asmstatements, merge them.Also remove an unnecessary unreachable() asm annotation from BUG() infavor of __builtin_unreachable(). objtool is able to track that the ud2from BUG() terminates control flow within the function.Link: https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#VolatileLink: https://github.com/ClangBuiltLinux/linux/issues/1483Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220202205557.2260694-1-ndesaulniers@google.com
gcc bug	 https://github.com/SortaCore/MMF2Exts/commit/4f7917b19d6e5b2724f18ab612883ea0310ddaba	Disable ARMv7 ASM entirely on mobileARMv7 seems to die on Samsung A10s; a particular model of phone that has an ARM64 processor, but runs in 32-bit mode, effectively like ARMv7. Any parameter passing via ASM causes it to crash.The assembly programmer is still working on new scripts. We have ARM64, but ARMv7 is fighting with use of floats, and the above issue. Might even be compiler bugs, since the GCC that comes with VS is pretty dated.
gcc bug	 https://github.com/jake5253/buildroot/commit/27b425ef4995e43c84b36c44d7d7d1c018b0fdef	package/heirloom-mailx: fix build failure due to gcc bug 101916The heirloom-mailx package exhibits gcc bug 101916 when built for theSH4 architecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101916=y.Also introduce HEIRLOOM_MAILX_CFLAGS as done for other packages and movethe already present -fPIC CFLAG to it.Fixes:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/ammarfaizi2/linux-block/commit/bfb1a7c91fb7758273b4a8d735313d9cc388b502	x86/bug: Merge annotate_reachable() into _BUG_FLAGS() asmIn __WARN_FLAGS(), we had two asm statements (abbreviated):  asm volatile("ud2");  asm volatile(".pushsection .discard.reachable");These pair of statements are used to trigger an exception, but then helpobjtool understand that for warnings, control flow will be restoredimmediately afterwards.The problem is that volatile is not a compiler barrier. GCC explicitlydocuments this:> Note that the compiler can move even volatile asm instructions> relative to other code, including across jump instructions.Also, no clobbers are specified to prevent instructions from subsequentstatements from being scheduled by compiler before the second asmstatement. This can lead to instructions from subsequent statementsbeing emitted by the compiler before the second asm statement.Providing a scheduling model such as via -march= options enables thecompiler to better schedule instructions with known latencies to hidelatencies from data hazards compared to inline asm statements in whichlatencies are not estimated.If an instruction gets scheduled by the compiler between the two asmstatements, then objtool will think that it is not reachable, producinga warning.To prevent instructions from being scheduled in between the two asmstatements, merge them.Also remove an unnecessary unreachable() asm annotation from BUG() infavor of __builtin_unreachable(). objtool is able to track that the ud2from BUG() terminates control flow within the function.Link: https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#VolatileLink: https://github.com/ClangBuiltLinux/linux/issues/1483Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220202205557.2260694-1-ndesaulniers@google.com
gcc bug	 https://github.com/Davidgould187/Bitcoin/commit/d6fae988eff78e28756d9b6219ec0239c420f51b	guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to makeit avoid using aligned vmov instructions. This works around a longstanding issuein GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recentlydiscovered to be causing issues, see #24726.Note that distros like Debian are also patching around this issue, and that iswhere this patch comes from. This would also explain why we haven't run into thisproblem earlier, in development builds. See:https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.Fixes #24726.Alternative to #24727.See also:https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559
gcc bug	 https://github.com/edubart/nelua-lang/commit/93d05172b90f075c2998d457332f8024324d6ffe	Fix strict aliasing bug in GCC 4.4.5 with -O2
gcc bug	 https://github.com/cyblord/avrdude/commit/8b162ebd3ec4bd7d7e0f0e959d527a34e3a71f21	Submitted by Andrew D'Addesio:bug #58078: [PATCH] buspirate: remove compound literals (fixes GCC>=9)* buspirate.c (buspirate_start_mode_bin):avoid propagating local scope compound literals
gcc bug	 https://github.com/gkdr/libomemo/commit/ffa29d3e2c14433f57de3c0201cb4517d5683673	Makefile: Fix crosscompilation installing to wrong directoryBy using $(CC) instead of hardcoding gcc we make sure to get thecorrect triplet that is being used for the installation directory.Credits go to Helmut Grohne for providing a fix, seehttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1003476
gcc bug	 https://github.com/bitcoin/bitcoin/commit/d6fae988eff78e28756d9b6219ec0239c420f51b	guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to makeit avoid using aligned vmov instructions. This works around a longstanding issuein GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recentlydiscovered to be causing issues, see #24726.Note that distros like Debian are also patching around this issue, and that iswhere this patch comes from. This would also explain why we haven't run into thisproblem earlier, in development builds. See:https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.Fixes #24726.Alternative to #24727.See also:https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559
gcc bug	 https://github.com/sailfishos-mirror/qtbase/commit/5c908c826313143a65ef7e95e5af6625fe1ba813	Implement QTest::qWait() in terms of QTest::qWaitFor()A comment in the existing implementation encouraged doing so, but fora bug in GCC 6. We no longer care.Change-Id: Ia8cb2bc5e184510e3d756e8bbfe6bc0e852e6830Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
gcc bug	 https://github.com/pablode/gatling/commit/d9f61a67bd9aae7134ee5c79a8db96fe6fdb2b32	hdGatling: fix gcc 11 compilation error.Due to this bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79700
gcc bug	 https://github.com/gopro/gopro-lib-node.gl/commit/9fa4e790a268b88cb7fcefbba669df079575721a	internal: workaround a critical gcc 10 issueWorkarounds a critical issue妤?that has not been fixed within the last 6months.[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189[1]: http://r6.ca/blog/20200929T023701Z.html
gcc bug	 https://github.com/crdroidandroid/android_kernel_xiaomi_daisy/commit/ff8193155c4783abb6834aa41aaa0c4954a6cb2d	msm: camera_v2-legacy: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Bug: 141693040Change-Id: I787acb29623a0fa3875c4e6d8b097b223e4c6704Signed-off-by: Petri Gynther <pgynther@google.com>
gcc bug	 https://github.com/thornjad/emacs/commit/5444f607a64c223489f6aa70b1f4bbce1c32ba63	Use the newest gcc installed by Macports* configure.ac: There may be more than one gcc version installedin Macports (bug#50649).  Use the newest.Copyright-paperwork-exempt: yes
gcc bug	 https://github.com/sailfishos-mirror/gecko-dev/commit/d5c0037acd601b4eafc57dc91c3ee271b23c4619	Bug 1739040 - Pick cc upstream patch for GCC 11 on armhf linux. r=emilioDifferential Revision: https://phabricator.services.mozilla.com/D130228
gcc bug	 https://github.com/alexcrichton/cc-rs/commit/b2f6b146b75299c444e05bbde50d03705c7c4b6e	Fix armhf build for GCC-11 (#627)GCC 11 changed the default flag to put the FP option in the -march flag (arm7-a+fp) rather than a specific FPU flag. Therefore it needs to be given separately now.See https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1939379 for some more details.
gcc bug	 https://github.com/sailfishos-mirror/ruby/commit/f752382688f18b98ac36aff10158309b4cf91e1c	spec/ruby/optional/capi/ext: must support GCC 5What a silly bug.
gcc bug	 https://github.com/ArtifexSoftware/mujs/commit/90a63426ee93d9079a032740e519988e26d1949c	Issue #152: Work around GCC compiler bug introduced in 2015.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103052 for details.
gcc bug	 https://github.com/tmiguelf/utilities/commit/9a90a404fe9568e9c136431996dc3ed64a68643e	fixed gcc thread join bug
gcc bug	 https://github.com/TileDB-Inc/TileDB/commit/9627b5a4d51f031aca0699e41f8cd47c081a2c36	Guard ZStd resource pool to fix initialization race (#2699)* Fix no-unused warning on GCC 7.3* Guard ZStd resource pool to fix initialization raceFixes sc-12665TYPE: BUGDESC: Guard ZStd resource pool to fix initialization race
gcc bug	 https://github.com/guoren83/linux-allwinner-d1/commit/2ba50da9ec34196a895b4947dc6bb1dbf1ace670	kconfig: nconf: get rid of (void) casts from wattrset() callsThis reverts commit 10175ba65fde ("nconfig: Silence unused return valuesfrom wattrset").With this patch applied, recent GCC versions can cleanly build nconfwithout "value computed is not used" warnings.The wattrset() used to be implemented as a macro, like this:  #define wattrset(win,at) \          (NCURSES_OK_ADDR(win) \            ? ((win)->_attrs = NCURSES_CAST(attr_t, at), \               OK) \            : ERR)The GCC bugzilla [1] reported a false-positive -Wunused-value warningin a similar test case. It was fixed by GCC 4.4.1.Let's revert that commit, and see if somebody will claim the issue.[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=39889Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
gcc bug	 https://github.com/Kaz205/renoir/commit/961753b6eb9d58e3bd1f0806afd203c90527b9ae	lib/string.c: Use freestanding environmentgcc can transform the loop in a naive implementation of memset/memcpyetc into a call to the function itself.  This optimization is enabled by-ftree-loop-distribute-patterns.This has been the case for a while, but gcc-10.x enables this option at-O2 rather than -O3 as in previous versions.Add -ffreestanding, which implicitly disables this optimization withgcc.  It is unclear whether clang performs such optimizations, buthopefully it will also not do so in a freestanding environment.Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56888Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/OP-TEE/optee_os/commit/30e743f6b08776e41843a81d8f628c334f24e73f	lib: libutils: Use ret for longjmp with Clang and BTIlongjmp uses br instead of ret to jump to the target. Thus the targetlocation should have the right BTI launchpad to handle this.clang has a bug [1] and doesn't add the BTI after setjmp causingexception when BTI is enabled. This works well with gcc [2]and can be tested when compiling xtests with WITH_CXX_TESTS=n.To avoid the exception, use ret instead of br with clang and BTI.[1] - https://bugs.llvm.org/show_bug.cgi?id=49544[2] - https://gcc.gnu.org/legacy-ml/gcc-patches/2018-11/msg02472.htmlSigned-off-by: Ruchika Gupta <ruchika.gupta@linaro.org>Reviewed-by: Jerome Forissier <jerome@forissier.org>
gcc bug	 https://github.com/VoidDev-0/kernel_xiaomi_tucana/commit/9955eb80a7cbc7bdbab626d70ad30b3b5f8a3dc6	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/itsLog1cs/kernel_nokia_D1C/commit/442aae0f186bd182f927bc2e9b29b72f797d4f31	lib: make memzero_explicit more robust against dead store elimination[ Upstream commit 7829fb09a2b4268b30dd9bc782fa5ebee278b137 ]In commit 0b053c951829 ("lib: memzero_explicit: use barrier insteadof OPTIMIZER_HIDE_VAR"), we made memzero_explicit() more robust incase LTO would decide to inline memzero_explicit() and eventuallyfind out it could be elimiated as dead store.While using barrier() works well for the case of gcc, recent effortsfrom LLVMLinux people suggest to use llvm as an alternative to gcc,and there, Stephan found in a simple stand-alone user space examplethat llvm could nevertheless optimize and thus elimitate the memset().A similar issue has been observed in the referenced llvm bug report,which is regarded as not-a-bug.Based on some experiments, icc is a bit special on its own, while itdoesn't seem to eliminate the memset(), it could do so with an ownimplementation, and then result in similar findings as with llvm.The fix in this patch now works for all three compilers (also testedwith more aggressive optimization levels). Arguably, in the currentkernel tree it's more of a theoretical issue, but imho, it's betterto be pedantic about it.It's clearly visible with gcc/llvm though, with the below code: if wewould have used barrier() only here, llvm would have omitted clearing,not so with barrier_data() variant:  static inline void memzero_explicit(void *s, size_t count)  {    memset(s, 0, count);    barrier_data(s);  }  int main(void)  {    char buff[20];    memzero_explicit(buff, sizeof(buff));    return 0;  }  $ gcc -O2 test.c  $ gdb a.out  (gdb) disassemble main  Dump of assembler code for function main:   0x0000000000400400  <+0>: lea   -0x28(%rsp),%rax   0x0000000000400405  <+5>: movq  $0x0,-0x28(%rsp)   0x000000000040040e <+14>: movq  $0x0,-0x20(%rsp)   0x0000000000400417 <+23>: movl  $0x0,-0x18(%rsp)   0x000000000040041f <+31>: xor   %eax,%eax   0x0000000000400421 <+33>: retq  End of assembler dump.  $ clang -O2 test.c  $ gdb a.out  (gdb) disassemble main  Dump of assembler code for function main:   0x00000000004004f0  <+0>: xorps  %xmm0,%xmm0   0x00000000004004f3  <+3>: movaps %xmm0,-0x18(%rsp)   0x00000000004004f8  <+8>: movl   $0x0,-0x8(%rsp)   0x0000000000400500 <+16>: lea    -0x18(%rsp),%rax   0x0000000000400505 <+21>: xor    %eax,%eax   0x0000000000400507 <+23>: retq  End of assembler dump.As gcc, clang, but also icc defines __GNUC__, it's sufficient to definethis in compiler-gcc.h only to be picked up. For a fallback or otherwiseunsupported compiler, we define it as a barrier. Similarly, for ecc whichdoes not support gcc inline asm.Reference: https://llvm.org/bugs/show_bug.cgi?id=15495Reported-by: Stephan Mueller <smueller@chronox.de>Tested-by: Stephan Mueller <smueller@chronox.de>Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>Cc: Theodore Ts'o <tytso@mit.edu>Cc: Stephan Mueller <smueller@chronox.de>Cc: Hannes Frederic Sowa <hannes@stressinduktion.org>Cc: mancha security <mancha1@zoho.com>Cc: Mark Charlebois <charlebm@gmail.com>Cc: Behan Webster <behanw@converseincode.com>Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/BH4DKC/iMSTK/commit/87d555293be50e132f892531a932f50b077acadc	BUG: Fix physx build under newer gccgcc throws an error here
gcc bug	 https://github.com/dopaemon/Doraemon/commit/0fb20bd3a4d8a7da1cd5bd07f52fec131c1f84e6	lib: Prepare zstd for preboot environment, improve performanceThese changes are necessary to get the build to work in the prebootenvironment, and to get reasonable performance:- Remove a double definition of the CHECK_F macro when the zstd  library is amalgamated.- Switch ZSTD_copy8() to __builtin_memcpy(), because in the preboot  environment on x86 gcc can't inline `memcpy()` otherwise.- Limit the gcc hack in ZSTD_wildcopy() to the broken gcc version. See  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81388.ZSTD_copy8() and ZSTD_wildcopy() are in the core of the zstd hot loop.So outlining these calls to memcpy(), and having an extra branch are verydetrimental to performance.Signed-off-by: Nick Terrell <terrelln@fb.com>Signed-off-by: Ingo Molnar <mingo@kernel.org>Tested-by: Sedat Dilek <sedat.dilek@gmail.com>Reviewed-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20200730190841.2071656-2-nickrterrell@gmail.com
gcc bug	 https://github.com/gentoo-mirror/gentoo/commit/33e2dd3e660a35122e076abec63252566326cfe0	sys-devel/gcc: 10.2.0: cut 4 patchsetSingle new patch:+ 40_all_ipa-to_frequency.patch: fix ICE on empty profile merges.Bug: https://bugs.gentoo.org/746578Bug: https://gcc.gnu.org/PR97295Package-Manager: Portage-3.0.9, Repoman-3.0.2Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
gcc bug	 https://github.com/WireGuard/wireguard-linux/commit/50348fac29211a54702b375e6e5717198a7d0cf6	net/iucv: get rid of register asm usageUsing register asm statements has been proven to be very error prone,especially when using code instrumentation where gcc may add functioncalls, which clobbers register contents in an unexpected way.Therefore get rid of register asm statements in iucv code, even thoughthere is currently nothing wrong with it. This way we know for surethat the above mentioned bug class won't be introduced here.Acked-by: Karsten Graul <kgraul@linux.ibm.com>Signed-off-by: Heiko Carstens <hca@linux.ibm.com>Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>Signed-off-by: David S. Miller <davem@davemloft.net>
gcc bug	 https://github.com/libjxl/libjxl/commit/87fe7c16e1fb2e21b6a1dca26782950ae1559d99	libjxl implementation rely on c11 atomics (cache_aligned.cc) (#1128)* Initialize c++ requirements before calling check_cxx_source_compiles* libjxl implementation rely on c11 atomics (cache_aligned.cc)It turns out that GCC requires explicitly linking to a library `atomic`in order to support c11/atomics. gcc spec file will not handle itdirectly at least not on the following Debian archs: armel, mipsel,powerpc and riscv64.Introduce a new cmake module to detect usage of gcc/atomic and addmissing library to the link step.For reference:* https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104248
gcc bug	 https://github.com/Wei-N-Ning/cxxConcurrency/commit/3c48f47aaa7aaecf4a387799ef83e643d6dde674	fix bug; hardcode gcc version
gcc bug	 https://github.com/Dark-Matter7232/Cosmic-fresh/commit/4ee1f68d99593e906913c4e50316600d2e2c4086	lto, workaround: Disable LTO for BPFDisable LTO for the BPF interpreter. This works around a gcc bug in the LTOpartitioner that partitions the jumptable used the BPF interpreterinto a different LTO unit. This in term causes assemblererrors because the jump table contains references to thecode labels in the original file.gcc problem tracked in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50676Signed-off-by: Andi Kleen <ak@linux.intel.com>
gcc bug	 https://github.com/stinsonga/emacs-mirror/commit/7445560d0cd4d94f93988d51a98bdba465173f44	Fix problem with folded Gcc headers in Gnus* lisp/gnus/gnus-msg.el (gnus-inews-do-gcc): Tokenize the gccheader properly (there may be newlines and tabs in the separators)(bug#43036).
gcc bug	 https://github.com/SDL-Hercules-390/hyperion/commit/88b956afadf6b03221e950b380fc2ba5f3e06876	Remove/silence all warning for gcc. 4 left for clang (but it may be a clang bug : -Wno-unused-local-typedef[s] has no effect).
gcc bug	 https://github.com/Atom-X-Devs/android_kernel_samsung_9611-m21/commit/e2b3a8200abad48ceae5dd56683a7e09dfcb7789	lto, workaround: Disable LTO for BPFDisable LTO for the BPF interpreter. This works around a gcc bug in the LTOpartitioner that partitions the jumptable used the BPF interpreterinto a different LTO unit. This in term causes assemblererrors because the jump table contains references to thecode labels in the original file.gcc problem tracked in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50676Signed-off-by: Andi Kleen <ak@linux.intel.com>
gcc bug	 https://github.com/libsdl-org/SDL/commit/06ad887f44203966b194cdcf95309046a2a1a2ca	Fixed bug 3816 - asm code in video/SDL_stretch.cOzkan Sezer- adds MSVC __declspec(align(x)) support,- disables asm if PAGE_ALIGNED no macro is defined,- still disables asm for gcc < 4.6, need more info,- drops Watcom support.
gcc bug	 https://github.com/navsystem/gentoo-portage/commit/363ff6cb28a438d29a65efc77c07f40ed8e6c9ec	sys-devel/gcc: 9.3.0: cut 4 patchsetThree new patches:+ 30_all_plugin-objdump.patch: always use prefixed objdump+ 31_all_ipa-to_frequency.patch: fix ICE on empty profile merges.+ 32_all_assume-aligned.patch: don't assume alignmentBug: https://bugs.gentoo.org/746578Bug: https://gcc.gnu.org/PR97295Bug: https://bugs.gentoo.org/750905Bug: https://gcc.gnu.org/PR94163Package-Manager: Portage-3.0.9, Repoman-3.0.2Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
gcc bug	 https://github.com/OpenNuvoton/MA35D1_linux-5.4.y/commit/83b3e5b2c521068bec02f03ca79df2755fe1b461	m68knommu: only set CONFIG_ISA_DMA_API for ColdFire sub-arch[ Upstream commit db87db65c1059f3be04506d122f8ec9b2fa3b05e ]> Hi Arnd,>> First bad commit (maybe != root cause):>> tree:   https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git master> head:   2f73937c9aa561e2082839bc1a8efaac75d6e244> commit: 47fd22f2b84765a2f7e3f150282497b902624547 [4771/5318] cs89x0: rework driver configuration> config: m68k-randconfig-c003-20210804 (attached as .config)> compiler: m68k-linux-gcc (GCC) 10.3.0> reproduce (this is a W=1 build):>         wget https://raw.githubusercontent.com/intel/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross>         chmod +x ~/bin/make.cross>         # https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/commit/?id=47fd22f2b84765a2f7e3f150282497b902624547>         git remote add linux-next https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git>         git fetch --no-tags linux-next master>         git checkout 47fd22f2b84765a2f7e3f150282497b902624547>         # save the attached .config to linux build tree>         COMPILER_INSTALL_PATH=$HOME/0day COMPILER=gcc-10.3.0 make.cross ARCH=m68k>> If you fix the issue, kindly add following tag as appropriate> Reported-by: kernel test robot <lkp@intel.com>>> All errors (new ones prefixed by >>):>>    In file included from include/linux/kernel.h:19,>                     from include/linux/list.h:9,>                     from include/linux/module.h:12,>                     from drivers/net/ethernet/cirrus/cs89x0.c:51:>    drivers/net/ethernet/cirrus/cs89x0.c: In function 'net_open':>    drivers/net/ethernet/cirrus/cs89x0.c:897:20: error: implicit declaration of function 'isa_virt_to_bus'; did you mean 'virt_to_bus'? [-Werror=implicit-function-declaration]>      897 |     (unsigned long)isa_virt_to_bus(lp->dma_buff));>          |                    ^~~~~~~~~~~~~~~>    include/linux/printk.h:141:17: note: in definition of macro 'no_printk'>      141 |   printk(fmt, ##__VA_ARGS__);  \>          |                 ^~~~~~~~~~~>    drivers/net/ethernet/cirrus/cs89x0.c:86:3: note: in expansion of macro 'pr_debug'>       86 |   pr_##level(fmt, ##__VA_ARGS__);   \>          |   ^~~>    drivers/net/ethernet/cirrus/cs89x0.c:894:3: note: in expansion of macro 'cs89_dbg'>      894 |   cs89_dbg(1, debug, "%s: dma %lx %lx\n",>          |   ^~~~~~~~> >> drivers/net/ethernet/cirrus/cs89x0.c:914:3: error: implicit declaration of function 'disable_dma'; did you mean 'disable_irq'? [-Werror=implicit-function-declaration]As far as I can tell, this is a bug with the m68kmmu architecture, notwith my driver:The CONFIG_ISA_DMA_API option is provided for coldfire, which implements it,but dragonball also sets the option as a side-effect, without actuallyimplementingthe interfaces. The patch below should fix it.Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/fmtlib/fmt/commit/712abe40f297bf0a1bbf3479599fd4a0d10dc0d2	Workaround a bug in gcc 7.5 (#1912)Thanks Martin Janzen.
gcc bug	 https://github.com/oneapi-src/oneDNN/commit/a241a28b1671862b30425ef5aef22dbfb1b44f64	gpu: jit: gemm: remove nested lambda to avoid gcc bug
gcc bug	 https://github.com/objectcomputing/OpenDDS/commit/faf2d94153ee88f50d99027b96eef0ce08e7dd5c	Merge pull request #1852 from mitza-oci/gcc52Work around a bug on GCC 5.2
gcc bug	 https://github.com/turex/siberia_hi6250_kernel/commit/c08097124192cce912d24064358c60a6f6214938	media: r820t: fix r820t_write_reg for KASANcommit 16c3ada89cff9a8c2a0eea34ffa1aa20af3f6008 upstream.With CONFIG_KASAN, we get an overly long stack frame due to inliningthe register access functions:drivers/media/tuners/r820t.c: In function 'generic_set_freq.isra.7':drivers/media/tuners/r820t.c:1334:1: error: the frame size of 2880 bytes is larger than 2048 bytes [-Werror=frame-larger-than=]This is caused by a gcc bug that has now been fixed in gcc-8.To work around the problem, we can pass the register datathrough a local variable that older gcc versions can optimizeout as well.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/sourceruckus/linux-mdl/commit/6b2cdcc8f5552615c7bdfc0ba3fa45a5d0d15680	mm: mempolicy: fix THP allocations escaping mempolicy restrictionscommit 338635340669d5b317c7e8dcf4fff4a0f3651d87 upstream.alloc_pages_vma() may try to allocate THP page on the local NUMA nodefirst:
gcc bug	 https://github.com/cameron314/concurrentqueue/commit/b9b4aa8350735ad72436638e71b3115ed28aa11b	Work around template argument deduction bug in GCC 9.2.0 (issue #218)
gcc bug	 https://github.com/OpenNFS/OpenNFS/commit/cc4ce246e23b9c803a20edce250f126d764b6513	[BUILDFIX] Attempt a workaround for potential old GCC bug
gcc bug	 https://github.com/yad-tahir/gentoo-mirror/commit/59879605aa5f6c7431c3b444d180ebfda768c297	sys-devel/gcc: x86 stable (bug #758437)Package-Manager: Portage-3.0.10, Repoman-3.0.2Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
gcc bug	 https://github.com/Arungz/kernel_xiaomi_sm6150/commit/84cc7f0732746c81730ecabc2b6172f398e2c6a4	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/VcDevel/Vc/commit/11fbd23e18fde26f1be3fec731d6899c2aa024bb	Work around GCC bug
gcc bug	 https://github.com/sailfishos-mirror/emacs/commit/7445560d0cd4d94f93988d51a98bdba465173f44	Fix problem with folded Gcc headers in Gnus* lisp/gnus/gnus-msg.el (gnus-inews-do-gcc): Tokenize the gccheader properly (there may be newlines and tabs in the separators)(bug#43036).
gcc bug	 https://github.com/StollD/linux-fedora/commit/50348fac29211a54702b375e6e5717198a7d0cf6	net/iucv: get rid of register asm usageUsing register asm statements has been proven to be very error prone,especially when using code instrumentation where gcc may add functioncalls, which clobbers register contents in an unexpected way.Therefore get rid of register asm statements in iucv code, even thoughthere is currently nothing wrong with it. This way we know for surethat the above mentioned bug class won't be introduced here.Acked-by: Karsten Graul <kgraul@linux.ibm.com>Signed-off-by: Heiko Carstens <hca@linux.ibm.com>Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>Signed-off-by: David S. Miller <davem@davemloft.net>
gcc bug	 https://github.com/guoren83/linux-allwinner-d1/commit/50348fac29211a54702b375e6e5717198a7d0cf6	net/iucv: get rid of register asm usageUsing register asm statements has been proven to be very error prone,especially when using code instrumentation where gcc may add functioncalls, which clobbers register contents in an unexpected way.Therefore get rid of register asm statements in iucv code, even thoughthere is currently nothing wrong with it. This way we know for surethat the above mentioned bug class won't be introduced here.Acked-by: Karsten Graul <kgraul@linux.ibm.com>Signed-off-by: Heiko Carstens <hca@linux.ibm.com>Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>Signed-off-by: David S. Miller <davem@davemloft.net>
gcc bug	 https://github.com/cilium/proxy/commit/a5bc798956c937e986abf3b86cba7c25a9e70d40	build: Switch back to GCCEncountered a compiler bug in clang++-10 on arm64. While un-optimizedbuild fails on GCC due to argument list being too long, optimizedbuild likely succeeds as the path names are shorter.Signed-off-by: Jarno Rajahalme <jarno@covalent.io>
gcc bug	 https://github.com/openmm/openmm/commit/2a97d8c9ff62f8ccdd61999c1a2965bb3849688e	Workaround for bug in GCC 8 on PPC
gcc bug	 https://github.com/lineage16-suez/kernel_amazon_suez/commit/90679ec8829cf60a9aad4716d4a640e7bdea4a2f	media: r820t: fix r820t_write_reg for KASANcommit 16c3ada89cff9a8c2a0eea34ffa1aa20af3f6008 upstream.With CONFIG_KASAN, we get an overly long stack frame due to inliningthe register access functions:drivers/media/tuners/r820t.c: In function 'generic_set_freq.isra.7':drivers/media/tuners/r820t.c:1334:1: error: the frame size of 2880 bytes is larger than 2048 bytes [-Werror=frame-larger-than=]This is caused by a gcc bug that has now been fixed in gcc-8.To work around the problem, we can pass the register datathrough a local variable that older gcc versions can optimizeout as well.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>(cherry picked from commit 6b77993e00f86642a60ed2b2830b268b1f6c1572)
gcc bug	 https://github.com/mchalupa/dg/commit/98e7f52c0c294cd159a06f6c0f9f39bd7c7bb355	PTSet: use Map instead of HashMap if no Hopscotch is availableThere is a bug in GCC that breaks HashMap in the setting of points-tosets (statical initialization), so use std::map instead.TODO: the bug is in GCC AFAIK, so we could also check for Clangand enable it with clang.
gcc bug	 https://github.com/PKRoma/linux/commit/0e96ea5c3eb5904e5dc2f3d414e2aba361933b87	MIPS: Loongson64: Clean up use of cc-ifversionThis Makefile checks that GCC is 4.9 or newer, which is redundant aftercommit 76ae847497bc ("Documentation: raise minimum supported version ofGCC to 5.1"), so cc-option can be removed.Clang does not support -march=loongson3a so it needs to continue to use-march=mips64r2, which no longer needs cc-option because all supportedclang versions recognize this flag.-march=loonson3a can be used unconditionally with GCC because theminimum supported GCC version has been bumped past 4.9.0, which won'thave the bug mentioned in the comment. The _MIPS_ISA macro redefinitioncan be removed at the same time for the same reason.Suggested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>Suggested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
gcc bug	 https://github.com/Pekkari/builroot/commit/63943ecf455fabba2b91f5c2a901f220d3975cb4	package/lmbench: fix build failure due to gcc bug 101915The lmbench package exhibits gcc bug 101915 when built for theMicroblaze architecture with optimization enabled, which causes a buildfailure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101915=y.Fixes:http://autobuild.buildroot.net/results/ae1/ae1e4d61ed367c6cb64442c60d98882cc7985346/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/sunyaojing/myBitcoin/commit/87780dfee8c82ea09b84e74d331db2ad6f9e75ab	Merge bitcoin/bitcoin#22994: ci: use Debian Bullseye in ARM CI252d1a70fb452893efe4ab64298139eb08d8ac98 ci: use Debian Bullseye in ARM CI (fanquake)Pull request description:  This works around an issue when trying to use `std::filesystem::remove_all` with the ARM GCC on Buster.  Has been split out of #20744.  See commentary starting here: https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810279549.  Also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93201.ACKs for top commit:  MarcoFalke:    cr ACK 252d1a70fb452893efe4ab64298139eb08d8ac98  hebasto:    ACK 252d1a70fb452893efe4ab64298139eb08d8ac98, I have reviewed the code and it looks OK, I agree it can be merged.Tree-SHA512: ca71f5cb07fe06c1c7f0160935e667ffeb62bd6a1a89b54124b5633c5c176347a2207aaa5eca68938ed89db9778d357e42b677115d4ed386fa2d7d2ffa5025ad
gcc bug	 https://github.com/jake5253/buildroot/commit/3245874961152628877d1fb8cd14406aa4c8bd6a	package/harfbuzz: work around arc gcc10 bugWith BR2_GCC_VERSION_ARC=y(arc gcc10) harfbuzz package exhibits a gcc bugthat makes build to fail. This bug is found only in official arc gcc10provided by Synopsis, so we can't use the BR2_TOOLCHAIN_HAS_GCC_BUG_approach since bug can't be even filed in gcc bugzilla.To work around this, if BR2_GCC_VERSION_ARC=y we force using -O0.Fixes:http://autobuild.buildroot.net/results/e4d/e4da9ba40c8f4567601d404e20dd6a0b322210c2/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/pro-bitcoin/pro-bitcoin/commit/87780dfee8c82ea09b84e74d331db2ad6f9e75ab	Merge bitcoin/bitcoin#22994: ci: use Debian Bullseye in ARM CI252d1a70fb452893efe4ab64298139eb08d8ac98 ci: use Debian Bullseye in ARM CI (fanquake)Pull request description:  This works around an issue when trying to use `std::filesystem::remove_all` with the ARM GCC on Buster.  Has been split out of #20744.  See commentary starting here: https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810279549.  Also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93201.ACKs for top commit:  MarcoFalke:    cr ACK 252d1a70fb452893efe4ab64298139eb08d8ac98  hebasto:    ACK 252d1a70fb452893efe4ab64298139eb08d8ac98, I have reviewed the code and it looks OK, I agree it can be merged.Tree-SHA512: ca71f5cb07fe06c1c7f0160935e667ffeb62bd6a1a89b54124b5633c5c176347a2207aaa5eca68938ed89db9778d357e42b677115d4ed386fa2d7d2ffa5025ad
gcc bug	 https://github.com/josibake/champcoin/commit/87780dfee8c82ea09b84e74d331db2ad6f9e75ab	Merge bitcoin/bitcoin#22994: ci: use Debian Bullseye in ARM CI252d1a70fb452893efe4ab64298139eb08d8ac98 ci: use Debian Bullseye in ARM CI (fanquake)Pull request description:  This works around an issue when trying to use `std::filesystem::remove_all` with the ARM GCC on Buster.  Has been split out of #20744.  See commentary starting here: https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810279549.  Also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93201.ACKs for top commit:  MarcoFalke:    cr ACK 252d1a70fb452893efe4ab64298139eb08d8ac98  hebasto:    ACK 252d1a70fb452893efe4ab64298139eb08d8ac98, I have reviewed the code and it looks OK, I agree it can be merged.Tree-SHA512: ca71f5cb07fe06c1c7f0160935e667ffeb62bd6a1a89b54124b5633c5c176347a2207aaa5eca68938ed89db9778d357e42b677115d4ed386fa2d7d2ffa5025ad
gcc bug	 https://github.com/farosas/buildroot/commit/3245874961152628877d1fb8cd14406aa4c8bd6a	package/harfbuzz: work around arc gcc10 bugWith BR2_GCC_VERSION_ARC=y(arc gcc10) harfbuzz package exhibits a gcc bugthat makes build to fail. This bug is found only in official arc gcc10provided by Synopsis, so we can't use the BR2_TOOLCHAIN_HAS_GCC_BUG_approach since bug can't be even filed in gcc bugzilla.To work around this, if BR2_GCC_VERSION_ARC=y we force using -O0.Fixes:http://autobuild.buildroot.net/results/e4d/e4da9ba40c8f4567601d404e20dd6a0b322210c2/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/rohan-linux/buildroot/commit/3245874961152628877d1fb8cd14406aa4c8bd6a	package/harfbuzz: work around arc gcc10 bugWith BR2_GCC_VERSION_ARC=y(arc gcc10) harfbuzz package exhibits a gcc bugthat makes build to fail. This bug is found only in official arc gcc10provided by Synopsis, so we can't use the BR2_TOOLCHAIN_HAS_GCC_BUG_approach since bug can't be even filed in gcc bugzilla.To work around this, if BR2_GCC_VERSION_ARC=y we force using -O0.Fixes:http://autobuild.buildroot.net/results/e4d/e4da9ba40c8f4567601d404e20dd6a0b322210c2/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/hebasto/bitcoin-qtw/commit/32a8a09a08df46781c7c7d98d83df9936f9de961	Merge bitcoin/bitcoin#23778: release: Guix 1.4.0 & GCC 10.3698eda4780b83f7e1b11c7b9564191548324afdb guix: use upstream python-requests (2.26.0) (fanquake)2fdb6d0f11509914ae896ff64d0935e73eb80a83 build: use python-asn1crypto from upstream (fanquake)52f4f1c9de6aec6d765fbe06b0c8b0fa34432ac2 guix: use uptream nsis-x86_64 (fanquake)b55be93a9846ab438d9d1e5f21c458d4af439e07 guix: use GCC 10 (over GCC 8) to build releases (fanquake)Pull request description:  Guix's `core-updates-frozen` branch has been merged back into `master`, and a [`version-1.4.0`](https://git.savannah.gnu.org/cgit/guix.git/log/?h=version-1.4.0) branch has been created. This is great, as it means the next Guix release is on the horizon, and it contains a number of changes I'd like to take advantage of. In particular, is migrating the version of GCC we use for releases from GCC 8 to GCC 10.3.0 (which is also the new Guix default GCC). This is my preferred method of unblocking progress in #20744, which is currently stalled due to support for `std::filesystem` for Windows not arriving in GCC until version 9, whereas it's usable on Linux starting with GCC 8. The current set of changes in that PR [attempt to backport support](https://github.com/bitcoin/bitcoin/pull/20744/commits/9604eda1abe6ffc02c97e3434c3c2c4ce1250794) for `std::filesystem`, for Windows, to GCC 8, similar to what is currently done by Debian, however that is somewhat convoluted, and using GCC 10 with our current Guix version would require updating at least one Guix patch to GCC, so is not completely straightforward either.  Other changes included here:  * Dropping our `--no-*` patch for mingw binutils ld, as we can take advantage of the `--disable-*` flags that are now available in binutlils 2.37. The security check tests are updated accordingly.  * Dropping our current patch for NSIS, as it's been integrated upstream, however given we are building v3.05, we need a different one (https://github.com/kichik/nsis/commit/229b6136c41ba5caba25936f4927476d20aa283f) for compiling against GCC 10.  * Removing our `python-asn1crypto` package definition, as an identical package is available in Guix. Over time we should look at trying to get the rest of the python packages we define here upstreamed.  * Adding a patch for `python-elfsteem` to fix an issue in the example code when using Python 3.9+.  * Our base glibc (`2.24`) now inherits from glibc-2.31. Guix has removed packages of glibc < 2.29, and the current version of glibc is `2.33`. However glibc-2.31 is the newest version that still contains a workaround for installing sunrpc data, which we need, so inheriting from that version seemed like the most straightforward solution.  * As mentioned, Guix has removed glibcs < 2.29, so we add our own package definition for glibc 2.27, which we use for our RISC-V toolchain (also inheriting from 2.31).  The guix commit hash currently points to the head of the `version-1.4.0` branch. This can be updated to an official release tag when one is available.  Looking for Concept ACKs on migrating to using GCC 10.3 for building releases. Keeping in mind issues like #20005, however that particular bug should be fixed in GCC 10.3.0+, according to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189.  Guix Builds:  ```bash  bash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum  ea56ef38bd94dbcb11b9d10e2f10c205109daad03fea4313f79892fc497ba68d  guix-build-698eda4780b8/output/aarch64-linux-gnu/SHA256SUMS.part  01123ab23e5a09dc06a897837389e859d302ba2b18fbe827936ec8983765e7df  guix-build-698eda4780b8/output/aarch64-linux-gnu/bitcoin-698eda4780b8-aarch64-linux-gnu-debug.tar.gz  7a24e25c2237e5aeb14508b91c5c6954572814e1767e892c164494f32d73b0c0  guix-build-698eda4780b8/output/aarch64-linux-gnu/bitcoin-698eda4780b8-aarch64-linux-gnu.tar.gz  0e1dba0233da1f487222b128964980d50393e61a6971bcf4c71951c29fdf3993  guix-build-698eda4780b8/output/arm-linux-gnueabihf/SHA256SUMS.part  8cd4c6f42abc81427f1d2500f86daced2a4ee78882dd9d03b5a0211a1d96306e  guix-build-698eda4780b8/output/arm-linux-gnueabihf/bitcoin-698eda4780b8-arm-linux-gnueabihf-debug.tar.gz  c180db6bffb1a54b6dc65929d86d5eba9adf876a28ad320590ed230233e57299  guix-build-698eda4780b8/output/arm-linux-gnueabihf/bitcoin-698eda4780b8-arm-linux-gnueabihf.tar.gz  4efcda7b63646eb46dabea7122fb026f2c063d2919a9dcbbffbc0929b9c56ced  guix-build-698eda4780b8/output/dist-archive/bitcoin-698eda4780b8.tar.gz  1e35e96034fed00674f362d6471fb402dd2758cec2860ded4fd7e37c38935a44  guix-build-698eda4780b8/output/powerpc64-linux-gnu/SHA256SUMS.part  96a0b7f54d3b3935c134f8c2aaaf11a314b54c9d7924ba751503caa16bd1c840  guix-build-698eda4780b8/output/powerpc64-linux-gnu/bitcoin-698eda4780b8-powerpc64-linux-gnu-debug.tar.gz  ae05137b6fb3494120f5413bf8a94ca3c1b0c047e1f512e6c2c5a0b1f122f075  guix-build-698eda4780b8/output/powerpc64-linux-gnu/bitcoin-698eda4780b8-powerpc64-linux-gnu.tar.gz  c22e5fbcdcdbfa5d385537e2c1dab55004d9e94396ebccef0bc3d216edfacbbe  guix-build-698eda4780b8/output/powerpc64le-linux-gnu/SHA256SUMS.part  52602b41e81a921435d93f2a3ae29549aa65a4147cdbf1ed7d9e4a44c4dc902a  guix-build-698eda4780b8/output/powerpc64le-linux-gnu/bitcoin-698eda4780b8-powerpc64le-linux-gnu-debug.tar.gz  a2cc7e9385452163a7bda99f6f9aa630fd35d4ba13d4fd9a4dd7e8062206650d  guix-build-698eda4780b8/output/powerpc64le-linux-gnu/bitcoin-698eda4780b8-powerpc64le-linux-gnu.tar.gz  e75fadf1b1c7e4ae3d52e7a8051a881de17bd4d9d32c1ca29ca0ddbb8028ee51  guix-build-698eda4780b8/output/riscv64-linux-gnu/SHA256SUMS.part  3b643c33842a15befb5d36d13b598a5e628c11b95671336c8dea51b5eed9c79a  guix-build-698eda4780b8/output/riscv64-linux-gnu/bitcoin-698eda4780b8-riscv64-linux-gnu-debug.tar.gz  e9a1ee7451502508cde73dc300aca8a421e379ac08c3f4adaf8c768fbfa942ac  guix-build-698eda4780b8/output/riscv64-linux-gnu/bitcoin-698eda4780b8-riscv64-linux-gnu.tar.gz  c0508a0872cf1415a47983d2ebbc9e5a46282ce7b6453afac544e0d1315b7bf9  guix-build-698eda4780b8/output/x86_64-apple-darwin/SHA256SUMS.part  7c02267cb91e2649088af5e96f81142beaad67f6a1a0588355174a4157b31458  guix-build-698eda4780b8/output/x86_64-apple-darwin/bitcoin-698eda4780b8-osx-unsigned.dmg  46dbf5a911abfa63e3c5aa8440289da5fdea89da013253c08768ce58b798a99d  guix-build-698eda4780b8/output/x86_64-apple-darwin/bitcoin-698eda4780b8-osx-unsigned.tar.gz  ab2e2360f18cb1b80bfd37f1a9508a938e89237767120472f932402cc809f0eb  guix-build-698eda4780b8/output/x86_64-apple-darwin/bitcoin-698eda4780b8-osx64.tar.gz  f58aa000692f7ea09ab8e7ec159a806d3a665f0f70558e62a53d56afb361eb02  guix-build-698eda4780b8/output/x86_64-linux-gnu/SHA256SUMS.part  78a76aef8469b07a41588e019a6dfa890c36fd5becf2c8d73a71c9e72bcabde6  guix-build-698eda4780b8/output/x86_64-linux-gnu/bitcoin-698eda4780b8-x86_64-linux-gnu-debug.tar.gz  5e6e0040b37ff035de41c8fcfee5d498bd19fa489024704dd4caa0ab9f566450  guix-build-698eda4780b8/output/x86_64-linux-gnu/bitcoin-698eda4780b8-x86_64-linux-gnu.tar.gz  d6e6af70f277d9c9ef9b4773ec05920355ac07ebec71ff3e179676047329964b  guix-build-698eda4780b8/output/x86_64-w64-mingw32/SHA256SUMS.part  37f24f6899e7803ed07bd0f5eb3f0fb6237ac1254dd72f446e9e4e488a927c8e  guix-build-698eda4780b8/output/x86_64-w64-mingw32/bitcoin-698eda4780b8-win-unsigned.tar.gz  14f7d1c14a5fc3b4c336d301f936c5578d6e31d61ec720dfc9d4129445d1e2a2  guix-build-698eda4780b8/output/x86_64-w64-mingw32/bitcoin-698eda4780b8-win64-debug.zip  c8049dcc0308a76f21dd781e8561ebbafa84034fbf8e3afa7d4017866d7fd195  guix-build-698eda4780b8/output/x86_64-w64-mingw32/bitcoin-698eda4780b8-win64-setup-unsigned.exe  fb1e6580c25b073118f121aabaa04aa09643bc97cfeaea7c9a24bbe65c33cbb6  guix-build-698eda4780b8/output/x86_64-w64-mingw32/bitcoin-698eda4780b8-win64.zip  ```ACKs for top commit:  hebasto:    re-ACK 698eda4780b83f7e1b11c7b9564191548324afdbTree-SHA512: 2f5f4f6bb1f55a048dba88523f235320e51c4af963355abf6a86b7035623b2100ae3dc44396c76fbeea89ae9cfbc5342abd3e2c41760ede8b689d7757d6e7f25
gcc bug	 https://github.com/hebasto/bitcoin-qtw/commit/d4b9f34eaf13ed695f874cccce84943efe4c3f94	Merge bitcoin/bitcoin#24736: guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64d3ef3cfa82377fb3b4746a9d16fa1b7e41eba647 guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64 (fanquake)Pull request description:  This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to make  it avoid using aligned vmov instructions. This works around a longstanding issue  in GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recently  discovered to be causing issues, see #24726.  Note that distros like Debian are also patching around this issue, and that is  where this patch comes from. This would also explain why we haven't run into this  problem earlier, in development builds. See:  https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.  Fixes #24726.  Alternative to #24727.  See also:  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559ACKs for top commit:  laanwj:    Concept and code review ACK d3ef3cfa82377fb3b4746a9d16fa1b7e41eba647  hebasto:    ACK d3ef3cfa82377fb3b4746a9d16fa1b7e41eba647, tested Guix ` bitcoin-d3ef3cfa8237-win64.zip` artifact on Windows 11 Pro 21H2:Tree-SHA512: f522efd8e604ab1d9f9c385147f6f488767cfe66f08a1c8b4ff67d448e065f8f2334bf825d99e7fe9571ada9038002b08434585f639120cb29b2e314da7b556e
gcc bug	 https://github.com/domob1812/namecoin-core/commit/83b26cb97cb46516aa4fdee3bcbfa751d28c1233	Merge bitcoin/bitcoin#24736: guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64d6fae988eff78e28756d9b6219ec0239c420f51b guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64 (fanquake)Pull request description:  This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to make  it avoid using aligned vmov instructions. This works around a longstanding issue  in GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recently  discovered to be causing issues, see #24726.  Note that distros like Debian are also patching around this issue, and that is  where this patch comes from. This would also explain why we haven't run into this  problem earlier, in development builds. See:  https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.  Fixes #24726.  Alternative to #24727.  See also:  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559ACKs for top commit:  laanwj:    Concept and code review ACK d6fae988eff78e28756d9b6219ec0239c420f51b  hebasto:    ACK d6fae988eff78e28756d9b6219ec0239c420f51b, tested Guix ` bitcoin-d6fae988eff7-win64.zip` artifact on Windows 11 Pro 21H2:Tree-SHA512: f522efd8e604ab1d9f9c385147f6f488767cfe66f08a1c8b4ff67d448e065f8f2334bf825d99e7fe9571ada9038002b08434585f639120cb29b2e314da7b556e
gcc bug	 https://github.com/navsystem/gentoo-portage/commit/2289f986931f2be0dacf51b7b267d747cafbe63f	sys-devel/gcc-config: x86 stable wrt bug #830376Package-Manager: Portage-3.0.28, Repoman-3.0.3RepoMan-Options: --include-arches="x86"Signed-off-by: Agostino Sarubbo <ago@gentoo.org>
gcc bug	 https://github.com/navsystem/gentoo-portage/commit/9c7d293a72284d5827932a10a64e100011a8aa0b	sys-devel/gcc-config: amd64 stable wrt bug #830376Package-Manager: Portage-3.0.28, Repoman-3.0.3RepoMan-Options: --include-arches="amd64"Signed-off-by: Agostino Sarubbo <ago@gentoo.org>
gcc bug	 https://github.com/MontaVista-OpenSourceTechnology/linux-live-app-coredump/commit/b06a17583f6f810f620f95382b171cc5ce9848ee	Merge tag 'array-bounds-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull array-bounds updates from Kees Cook: "This enables -Warray-bounds and -Wzero-length-bounds, now that the  many bug fixes have landed all over the place in the kernel, and in  GCC itself[1].  A couple fixes[2] for known corner-case issues currently live in my  "pending-fixes" tree which I'm expecting to send next week if other  maintainers still haven't picked them up.  I'm also expecting we can enable -Wstringop-overflow next cycle, as  there are only a few stragglers[3], but it might even be possible for  this release"[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578[2] https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/commit/?h=for-next/pending-fixes&id=2d253138910eec553fc706379914243d71de9b85[3] https://github.com/KSPP/linux/issues/181* tag 'array-bounds-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  Makefile: Enable -Wzero-length-bounds  Makefile: Enable -Warray-bounds
gcc bug	 https://github.com/linuxppc/linux-ci/commit/b06a17583f6f810f620f95382b171cc5ce9848ee	Merge tag 'array-bounds-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull array-bounds updates from Kees Cook: "This enables -Warray-bounds and -Wzero-length-bounds, now that the  many bug fixes have landed all over the place in the kernel, and in  GCC itself[1].  A couple fixes[2] for known corner-case issues currently live in my  "pending-fixes" tree which I'm expecting to send next week if other  maintainers still haven't picked them up.  I'm also expecting we can enable -Wstringop-overflow next cycle, as  there are only a few stragglers[3], but it might even be possible for  this release"[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578[2] https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/commit/?h=for-next/pending-fixes&id=2d253138910eec553fc706379914243d71de9b85[3] https://github.com/KSPP/linux/issues/181* tag 'array-bounds-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  Makefile: Enable -Wzero-length-bounds  Makefile: Enable -Warray-bounds
gcc bug	 https://github.com/laffont-emile/tp_allocation_memoire/commit/25a2a2b68b173d26ac3bc1bacc43759ae105ae1c	Fix gcc warnings (that are bugs in the code)
gcc bug	 https://github.com/tivolicloud/interface/commit/371b520aed9c276320fc9e491960f9f9f470534e	Revert "Updated draco to fix gcc 11 bugs"This reverts commit ee996bf4a459d7ea857aec929532b1116f07e4aa.
gcc bug	 https://github.com/beagleboard/buildroot/commit/cf912e852a01fffc2b1bfe1de3d68dbca939a18d	package/gnuradio: disable package if affected from gcc bug 43744This package is affected by gcc bug 43744 and I have not found a workaround for it(i.e. the common -O0 we use or other), so let's disable it ifgcc has such bug.Fixes:http://autobuild.buildroot.net/results/1db/1db6c59c98e3c09fa13277076ee2fbe7967f1f6b/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/HernandezJosze/SimuladorWebDeCodigoC/commit/6866d14817fa1b26952b2ce6c268e6db50fdaf12	simplificaciones en la b閻搎ueda del bug de gccva
gcc bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/a862a3a0cf27f15ddfdd516b7b0dd98e6520a99d	Bug 1747498 - Move SIMD flags to python configure. r=firefox-build-system-reviewers,mhentgesAnd because we don't support MSVC anymore, we can use the GCC-styleflags everywhere.Differential Revision: https://phabricator.services.mozilla.com/D134640
gcc bug	 https://github.com/Hasiergo/Lenovo_TB-X606F_kernel/commit/d801dddea7399b7fefe47fc3492d736c76102c3c	gcov: Disable gcov build with GCC 10[ Upstream commit cfc905f158eaa099d6258031614d11869e7ef71c ]GCOV built with GCC 10 doesn't initialize n_function variable.  Thisproduces different kernel panics as was seen by Colin in Ubuntu and mein FC 32.As a workaround, let's disable GCOV build for broken GCC 10 version.Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1891288Link: https://lore.kernel.org/lkml/20200827133932.3338519-1-leon@kernel.orgLink: https://lore.kernel.org/lkml/CAHk-=whbijeSdSvx-Xcr0DPMj0BiwhJ+uiNnDSVZcr_h_kg7UA@mail.gmail.com/Cc: Colin Ian King <colin.king@canonical.com>Signed-off-by: Leon Romanovsky <leonro@nvidia.com>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/Pekkari/builroot/commit/b1e8594f0926c7867b0efbff5fafa411e54c2782	toolchain: reorder gcc bugs by numberReorder gcc bugs by numberSigned-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/vsrinivas/fuchsia/commit/44c7821781fde89dd1786f3561a1dbdae3a8e92c	[kernel] Punt GCC <arm_acle.h> workaroundThe arcane workaround for -mgeneral-regs-only has regressed in somecases under GCC 11.  Unfortunately, the GCC bug that motivated itstill has not been fixed yet.  However, it turns out that GCC's<arm_acle.h> is not actually providing anything the kernel is using.So punt the workaround kludge and go back to -mgeneral-regs-only onthe command line for kernel code, which avoids GCC 11's new issues.Bug: 88803Change-Id: I490dd24bf938b72e3ad9b2facdeb240a402204a1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/611947Fuchsia-Auto-Submit: Roland McGrath <mcgrathr@google.com>Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Roland McGrath <mcgrathr@google.com>
gcc bug	 https://github.com/yaobao1993/emacs/commit/1283c2db5c3a846046612617f0b83f76d885e963	Merge from origin/emacs-280d374b1b83 Work around GCC bug 102671
gcc bug	 https://github.com/aakefbs/ql-fstest/commit/d75fa19d7336ad3d39d42df62fca2e39ffc61265	Fix missing bracesgcc-6 detected a wrong indentation, which was indeeda minor bug due to missing braces.
gcc bug	 https://github.com/rebhu-open-source-foundation/gecko-b2g/commit/b76a8b0919066126de07f4a3c0092bbc3a583522	Bug 1730078 - Build gcc-11 with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125157
gcc bug	 https://github.com/FascodeNet/Flast_gecko_2/commit/b76a8b0919066126de07f4a3c0092bbc3a583522	Bug 1730078 - Build gcc-11 with system gcc. r=firefox-build-system-reviewers,mhentgesDifferential Revision: https://phabricator.services.mozilla.com/D125157
gcc bug	 https://github.com/Pekkari/builroot/commit/fe4e06d3176b01834fda92d25ae7ece65f3550e0	toolchain: improve conditions for gcc bug 99140Gcc bug 99140 has been fixed on gcc 8.x but reappeared on gcc 9.x whileit's been fixed on gcc 10.x+. So let's updateBR2_TOOLCHAIN_HAS_GCC_BUG_99140 accordingly.Fixes:http://autobuild.buildroot.net/results/c55/c55f50a8d657695f0d5492c32efa666254cd7f99/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/YoeDistro/poky/commit/80cd0b8a52b5681d1d85e72b9e713d5b3b764d27	gcc: Drop further unneeded precompiled header patchAccording to comments on the bug report from gcc developers, weno longer need to do this post gcc 10. Lets therefore drop the patch.(From OE-Core rev: 8ddc6f46d40cdcc462de23d1b1218f2ed9fd3d07)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc bug	 https://github.com/n-kulberg/stereo/commit/f82d9834d120e26f4d624580e9819f6143cb769c	Fixed bug in gcc:abs() in MSVS and clang has floating point realizations. In gcc it's just integral
gcc bug	 https://github.com/Xiaomi-MSM8996-4-4/android_kernel_xiaomi_gemini/commit/30edd7a846462894b30e526f590b5ce9bdb9a99b	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I10557fb29b4a5d4139d690661c22ab5be3fedaafSigned-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
gcc bug	 https://github.com/chromium/chromium/commit/69dfdf870f8f3161f50d455c51df565a27ac4f5e	GCC: fix noexcept in AccountInfoMove constructor and move assignment operator for AccountInfo ismarked noexcept. However, move constructor and assignment operatorof member AccountCapabilities are not noexcept. Therefore, GCC failsto compile AccountInfo. Fix this by adding noexcept to moveconstructor and assignment operator of AccountCapabilities.Bug: 819294Change-Id: Ibf3e42066f621153758015823e973f583a9939e0Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3501872Reviewed-by: Alex Ilin <alexilin@chromium.org>Commit-Queue: Alex Ilin <alexilin@chromium.org>Cr-Commit-Position: refs/heads/main@{#978206}
gcc bug	 https://github.com/googleprodkernel/linux-mm/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
gcc bug	 https://github.com/liruncong/NinJaTest/commit/7b5e6a81f9e1271b3b1ff879eaea18231f714bf3	[stm32][gcc] 濞ｅ洭寮介崼婊嗙0闁汇劌鍨簎g闁挎稑鑻惃銏ゅ冀閸喎鈷栭悘鐐存礀閸?x400闁挎稑鐗呯粭瀛爀il IAR濞戞挴鍋撻柤鐤彧缁?
gcc bug	 https://github.com/dgreid/linux/commit/b06a17583f6f810f620f95382b171cc5ce9848ee	Merge tag 'array-bounds-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull array-bounds updates from Kees Cook: "This enables -Warray-bounds and -Wzero-length-bounds, now that the  many bug fixes have landed all over the place in the kernel, and in  GCC itself[1].  A couple fixes[2] for known corner-case issues currently live in my  "pending-fixes" tree which I'm expecting to send next week if other  maintainers still haven't picked them up.  I'm also expecting we can enable -Wstringop-overflow next cycle, as  there are only a few stragglers[3], but it might even be possible for  this release"[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578[2] https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/commit/?h=for-next/pending-fixes&id=2d253138910eec553fc706379914243d71de9b85[3] https://github.com/KSPP/linux/issues/181* tag 'array-bounds-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  Makefile: Enable -Wzero-length-bounds  Makefile: Enable -Warray-bounds
gcc bug	 https://github.com/Kendras056/kernel_asus_sdm636/commit/df9dcc484353548c7533b1d8f71c37886e80159b	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Akhil Narang <akhilnarang.1999@gmail.com>Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>Signed-off-by: Kendras056 <kendras056@gmail.com>
gcc bug	 https://github.com/rohankumardubey/scyllaDB/commit/33f8ec09df309b055766aec5c2845f0c4e525bd4	Merge 'treewide: improve compatibility with gcc 11' from Avi KivityOur source base drifted away from gcc compatibility; this mostlyrestores the ability to build with gcc. An important exception iscoroutines that have an initializer list [1]; this still doesn't work.We aim to switch back to gcc 11 if/when this gives us betterC++ compatibility and performance.Test: unit (dev)[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98056Closes #9459* github.com:scylladb/scylla:  test: radix_tree_printer: avoid template specialization in class context  test: raft: avoid ignored variable errors  test: reader_concurrency_semaphore_test: isolate from namespace of source_location  test: cql_query_test: drop unused lambda assert_replication_not_contains  test: commitlog_test: don't use deprecated seastar::unaligned_cast  test: adjust signed/unsigned comparisons in loops and boost tests  build: silence some gcc 11 warnings  sstables: processing_result_generator: make coroutine support palatable for C++20 compilers  managed_bytes: avoid compile-time loop in converting constructor  service: service_level_controller: drop unused variable sl_compare  raft: disambiguate promise name in raft::active_read  locator: azure_snitch: use full type name in definition of globals  cql3: statements: create_service_level_statement: don't ignore replace_defaults()  cql3: statement_restrictions: adjust call to std::vector deduction guide  types: remove recursive constraint in deserialize_value  cql3: restrictions: relax constraint on visitor_with_binary_operator_content  treewide: handle switch statements that return  cql3: expr: correct type of captured map value_type  cdc: adjust type of streams_count  alternator: disambiguate attrs_to_get in table_requests
gcc bug	 https://github.com/jcorporation/myMPD/commit/50d7e74b4a1b0b00cb29961b07295755176bdf1d	Fix: add -Wno-stringop-overflow to sds compile settings #652It seems to be a gcc 11.2.0  bug that is fixed in 11.2.1- https://stackoverflow.com/questions/69426070/gcc-11-order-of-arguments-triggers-false-positive-wstringop-overflow-is-this-bu
gcc bug	 https://github.com/build2/libbutl/commit/3cb2d76c1e2375ecce69f2c3f462be979295c753	Work around bogus -Wrestrict in GCC 12 (GCC bug #105329)
gcc bug	 https://github.com/build2/build2/commit/7bbbe76637ae5b9733c608c596f1468dd5e27a06	Work around bogus -Wrestrict in GCC 12 (GCC bug #105329)
gcc bug	 https://github.com/Takishima/mindquantum/commit/96fcf092b929222dec78345942e08344a82d04ab	[CXX][BUG] Fix compilation with GCC 7
gcc bug	 https://github.com/aliyun/plugsched/commit/d30b6383beb0d7e585eaf15ec71b9289a6f2efca	border: fixed the extraction bug about typedef structThe gcc.PointerType needs to be dereferenced.Fixes: 481a3273(border: fixed Gcc bugs about typedef struct and va_listarguments)Signed-off-by: Erwei Deng <erwei@linux.alibaba.com>
gcc bug	 https://github.com/bniehoff/lennard-jonesium/commit/1320aa6aad5b09d73887de1f6bdebc525e0c0e79	Move Parameters structs back inside PhasesIt really makes more sense to have the Parameters structs inside theSimulationPhase class definitions as nested classes.  To get around theGCC bug described in (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88165),we simply declare a second constructor overload which is defined in thecpp file.  At this point in the translation unit, the outer class isfully defined, so the bug does not occur and we can call the nestedclass's default constructor without problem.
gcc bug	 https://github.com/sipa/miniscript/commit/2ee9191fec2b4b2f3dfcfa0c8fa28b633a4903e0	Remove GCC 4.8 bug workaround
gcc bug	 https://github.com/sipa/miniscript/commit/fd555242640ebbe0e028877861f03222c109236c	Merge sipa/miniscript#112: Remove GCC 4.8 bug workaround2ee9191fec2b4b2f3dfcfa0c8fa28b633a4903e0 Remove GCC 4.8 bug workaround (Pieter Wuille)Pull request description:ACKs for top commit:  darosior:    web-glance-ACK 2ee9191fec2b4b2f3dfcfa0c8fa28b633a4903e0Tree-SHA512: 040f0de833fd426b842114cf86ab6971c3f330c7f6af57f5438a76cc5079ddbf8a3e7ad5a62b1779b4f5f2a18a7ae90bf4221dff271beb17c46fff1dc1a3837a
gcc bug	 https://github.com/NEWorldProject/klsxx.coroutine/commit/a7c9d48cc9b39a3af62b31dac86f7ea270c5d3e4	Bug fix add mitigations for defunct features and ICEs on GCC 11.2
gcc bug	 https://github.com/gtergeomatica/SEMOR/commit/f580694615327ce817034533b0e8b1bb41e8c937	Bug fix gcc
gcc bug	 https://github.com/alexandriaC7/kernel_oneplus_kebab/commit/497a1e647dad9dadad4c565bebff4477d3e79ad0	drivers: clk: Specify sync probe for gcc-konaBug: 115776306Bug: 77146523Signed-off-by: Miguel de Dios <migueldedios@google.com>Change-Id: I6c9e74fa5ee738581e84c7116333563af0206e31
gcc bug	 https://github.com/NEWorldProject/phttp/commit/3cab0d07fd63396eb44e0fa3f4e5563cb3c6aea3	Bug fix add mitigations for defunct features and ICEs on GCC 11.2
gcc bug	 https://github.com/xu1119/torvalds-linux/commit/2df3fc4a84e917a422935cc5bae18f43f9955d31	net: bcmgenet: Revert "Use stronger register read/writes to assure ordering"It turns out after digging deeper into this bug, that it was beingtriggered by GCC12 failing to call the bcmgenet_enable_dma()routine. Given that a gcc12 fix has been merged [1] and the genetdriver now works properly when built with gcc12, this commit shouldbe reverted.[1]https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105160https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=aabb9a261ef060cf24fd626713f1d7d9df81aa57Fixes: 8d3ea3d402db ("net: bcmgenet: Use stronger register read/writes to assure ordering")Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>Acked-by: Florian Fainelli <f.fainelli@gmail.com>Link: https://lore.kernel.org/r/20220412210420.1129430-1-jeremy.linton@arm.comSigned-off-by: Paolo Abeni <pabeni@redhat.com>
gcc bug	 https://github.com/Thanduriel/Fade/commit/e8befa99dbcabcc82f13c4f2c500eaedc92c955a	# fixed gcc bugs
gcc bug	 https://github.com/Zealandia-Systems/eigen/commit/897071977177ef0fd392861655ba1ad47546a265	Fix gcc-5 packetmath_12 bug.
gcc bug	 https://github.com/brycelelbach/wg21_p2300_std_execution/commit/874b3293ec3bc15741c3f4daf4b9989c4c514e58	Merge pull request #480 from gonzalobg/bugfix/gcc_support* Workaround clang bug 51934* Make __types complete for GCC* Disable everything that fails to build with GCC* Enable GCC on CI* Disable -Wnon-template-friend for GCC* Remove spurious spacesCo-authored-by: Eric Niebler <eniebler@boost.org>
gcc bug	 https://github.com/cheshyre/imsrg-ntcl/commit/424a90c8bf7c9c32031bf7b9113f5b55a6edec95	Fix more GCC char array bugs in NTCL.
gcc bug	 https://github.com/LibreDWG/libredwg/commit/762f4af3c628e37976ded2ec83b8f3caf7566851	gcc -Wstringop-truncation bug #88780abstract the sizes to give gcc a chance.
gcc bug	 https://github.com/CTSRD-CHERI/cheribsd/commit/67054e559365b6c90d7d4e9bcef9acae781ed432	Disable -Wreturn-type on GCC.GCC is more pedantic than clang about warning when a function doesn'thandle undefined enum values (see GCC bug 87950).  Clang's warninggives a more pragmatic coverage and should find any real bugs, sodisable the warning for GCC rather than adding __unreachableannotations to appease GCC.Reviewed by:
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/8ab7e2f4d5a10b68ac38164d6446ef149fe96746	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/dronslam/eigen/commit/897071977177ef0fd392861655ba1ad47546a265	Fix gcc-5 packetmath_12 bug.
gcc bug	 https://github.com/MartB/buildroot-satos/commit/88f79aead8fa750bc0e93ef8798751a4b463e9d9	toolchain: update gcc bug 99410Gcc bug 99410 reappeared in gcc 10.x while building belle-sip, but it'sfixed on gcc 11.x, so let's update bug conditions.Fixes:http://autobuild.buildroot.net/results/846597f3573d3b0d52e80627a9577d14b9348547/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/p-anastas/CoCoPeLia-Framework/commit/85a9503af887b4e7c597cdd0e8313498fb44f20d	Gcc 9.3 Pthread grumpy no return bug fix
gcc bug	 https://github.com/nutsboard-lab/buildroot/commit/88f79aead8fa750bc0e93ef8798751a4b463e9d9	toolchain: update gcc bug 99410Gcc bug 99410 reappeared in gcc 10.x while building belle-sip, but it'sfixed on gcc 11.x, so let's update bug conditions.Fixes:http://autobuild.buildroot.net/results/846597f3573d3b0d52e80627a9577d14b9348547/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/cd863c53498867bd2eead5b9befdb7a522c93e52	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/vbuslov/linux/commit/2df3fc4a84e917a422935cc5bae18f43f9955d31	net: bcmgenet: Revert "Use stronger register read/writes to assure ordering"It turns out after digging deeper into this bug, that it was beingtriggered by GCC12 failing to call the bcmgenet_enable_dma()routine. Given that a gcc12 fix has been merged [1] and the genetdriver now works properly when built with gcc12, this commit shouldbe reverted.[1]https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105160https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=aabb9a261ef060cf24fd626713f1d7d9df81aa57Fixes: 8d3ea3d402db ("net: bcmgenet: Use stronger register read/writes to assure ordering")Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>Acked-by: Florian Fainelli <f.fainelli@gmail.com>Link: https://lore.kernel.org/r/20220412210420.1129430-1-jeremy.linton@arm.comSigned-off-by: Paolo Abeni <pabeni@redhat.com>
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/2473afd3b303e08dc1210b075264a086cfcd7c8d	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/KonradHoeffner/raytracer/commit/901b047f46f7b6bfbaaba776024dc71138b8cd7c	Get it to nearly compile. Seems to be gcc 11.0.2 bug.
gcc bug	 https://github.com/live-clones/eigen/commit/897071977177ef0fd392861655ba1ad47546a265	Fix gcc-5 packetmath_12 bug.
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/3e9b4a88e3d053e4e683ff14b12a8a3cdb7d41c5	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/100256c8e699a20ea66932909d9d0710000d85a0	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/6ee6e62c8319668e7b5e90b8e8ff75422f07c2c8	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/acdemiralp/eigen/commit/897071977177ef0fd392861655ba1ad47546a265	Fix gcc-5 packetmath_12 bug.
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/0868e8e4981ffd6fd9029d7180059f99759d088b	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/972d22611392d507401facbd9be307885601ef41	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/smfrench/smb3-kernel/commit/2df3fc4a84e917a422935cc5bae18f43f9955d31	net: bcmgenet: Revert "Use stronger register read/writes to assure ordering"It turns out after digging deeper into this bug, that it was beingtriggered by GCC12 failing to call the bcmgenet_enable_dma()routine. Given that a gcc12 fix has been merged [1] and the genetdriver now works properly when built with gcc12, this commit shouldbe reverted.[1]https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105160https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=aabb9a261ef060cf24fd626713f1d7d9df81aa57Fixes: 8d3ea3d402db ("net: bcmgenet: Use stronger register read/writes to assure ordering")Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>Acked-by: Florian Fainelli <f.fainelli@gmail.com>Link: https://lore.kernel.org/r/20220412210420.1129430-1-jeremy.linton@arm.comSigned-off-by: Paolo Abeni <pabeni@redhat.com>
gcc bug	 https://github.com/G-P-S/eigen/commit/897071977177ef0fd392861655ba1ad47546a265	Fix gcc-5 packetmath_12 bug.
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/7042bee5506bde4e05ae7afe139f070ad9c28255	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/fac65018a9f0d3e360c666ef3097a7cb66b99e5a	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/dad9f6286fd38913355aa26b8d921c02f585a358	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/aliyun/plugsched/commit/481a3273e9272ef00ee75cff2561dd532abc2a7d	border: fixed Gcc bugs about typedef struct and va_list argumentsThere are two bugs when rebuilding function decleration from gcc tree:1. if argument's type is a typedef alias of a struct type, the 'struct'keyword would missing when rebuilding.2. if the argument type is va_list, the rebuilding result is 'struct*', which is incorrect. The major cause is that the va_list is agcc builtin type, and its gcc tree orgnization is different from regulartypes.Signed-off-by: Qiao Ma <mqaio@linux.alibaba.com>
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/0505afc36c05ef9298dba171b5788dae760e3c3b	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/0d4f1e04c62a71b53ed78a3b3499616820265e72	Re: regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/linux-mailinglist-archives/linux-ia64.vger.kernel.org.0/commit/8afcfe454826c7abe4f7dd61413649e18f40a802	regression: Bug 215601 - gcc segv at startup on ia64
gcc bug	 https://github.com/ne0ndrag0n/isometry/commit/095502b3c25aedc1030470dce5a4edcfd3a6749e	Rearrange resource due to GCC compiler bug
gcc bug	 https://github.com/dvstLab/ginkgo-kernel/commit/84f8915f60c04cd78f7cb0eb7f63768bd8216570	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cd
gcc bug	 https://github.com/Alozxy/lede/commit/adab80e6563cb621c0db562b86cda0b521dc252d	toolchain/glibc: sync upstream (#8866)* glibc: update to latest 2.33 HEAD (bug 28011)b5711025bc x86_64: Remove unneeded static PIE check for undefined weak diagnosticedfd11197e wordexp: handle overflow in positional parameter number (bug 28011)Signed-off-by: Hans Dedecker <dedeckeh@gmail.com>* glibc: update to latest 2.33 HEAD (bug 28213)9b01145592 MIPS: Setup errno for {f,l,}xstat9c676ef514 RISC-V: Update rv64 ULPsc6cadbf83a linux: Remove shmmax check from tst-sysvshm-linux22d37364ae librt: add test (bug 28213)27a78fd712 librt: fix NULL pointer dereference (bug 28213)Signed-off-by: Hans Dedecker <dedeckeh@gmail.com>* toolchain: glibc: Update to version 2.34glibc version 2.34 does not provide versioned shared libraries any more,it only provides shared libraries using the ABI version. Do not try tocopy them any more.The functions from libpthread and librt were integrated into the mainbinary, the libpthread.so and librt.so are only used for backwardscompatibility any more.Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>* toolchain: glibc: Increase minimum kernel version to 5.4Increase the minimum kernel version needed by the glibc compiled forOpenWrt to version 5.4. With this setting the glibc build will removeall code needed to support older kernel versions.Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>* toolchain: glibc: Enable --enable-bind-nowEnable --enable-bind-now when CONFIG_PKG_RELRO_FULL is set. This optionis activated by default. This will enable full RELRO protection.Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>* glibc: update to 2.34 HEAD72123e1b56 NEWS: Add a bug entry for BZ #2875508beb3a3f4 x86: Fix __wcsncmp_evex in strcmp-evex.S [BZ# 28755]b50d5b746c x86: Fix __wcsncmp_avx2 in strcmp-avx2.S [BZ# 28755]1b9cd6a721 NEWS: add bug entry for BZ #28769 and BZ #287703438bbca90 Linux: Detect user namespace support in io/tst-getcwd-smallbuffd084965adc realpath: Avoid overwriting preexisting error (CVE-2021-3998)472e799a5f getcwd: Set errno to ERANGE for size == 1 (CVE-2021-3999)8c8a71c85f tst-realpath-toolong: Fix hurd buildf7a79879c0 realpath: Set errno to ENAMETOOLONG for result larger than PATH_MAX [BZ #28770]73c362840c stdlib: Fix formatting of tests list in Makefile269eb9d930 stdlib: Sort tests in Makefile062ff490c1 support: Add helpers to create paths longer than PATH_MAX82b1acd9de powerpc: Fix unrecognized instruction errors with recent binutils1d401d1fcc x86: use default cache size if it cannot be determined [BZ #28784]6890b8a3ae CVE-2022-23218: Buffer overflow in sunrpc svcunix_create (bug 28768)1081f1d3dd sunrpc: Test case for clnt_create "unix" buffer overflow (bug 22542)7b5d433fd0 CVE-2022-23219: Buffer overflow in sunrpc clnt_create for "unix" (bug 22542)5575daae50 socket: Add the __sockaddr_un_set function03e6e02e6a Disable debuginfod in printer tests [BZ #28757]705f1e4606 Update syscall lists for Linux 5.162fe2af88ab i386: Remove broken CAN_USE_REGISTER_ASM_EBP (bug 28771)73558ffe84 Update syscall lists for Linux 5.15e64235ff42 powerpc: Fix unrecognized instruction errors with recent GCCSigned-off-by: Hans Dedecker <dedeckeh@gmail.com>* toolchain: glibc: Remove patch for ARC700The ARC700 target was renoved, this patch is not needed any more.Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>Co-authored-by: Hans Dedecker <dedeckeh@gmail.com>Co-authored-by: Hauke Mehrtens <hauke@hauke-m.de>
gcc bug	 https://github.com/bluescarni/obake/commit/8a49b78fc3901e5d572f8b634b4f96cd23ee3603	Workaround for GCC bug.
gcc bug	 https://github.com/Ubpa/UGM/commit/19c397fe15105c91322ea55b6218df4ae8bd5a64	fix bugs on clang and gcc
gcc bug	 https://github.com/oss-mirror/glibc/commit/b3f27d8150d4f3c64063a9a257ec1d228de66398	Add narrowing fma functionsThis patch adds the narrowing fused multiply-add functions from TS18661-1 / TS 18661-3 / C2X to glibc's libm: ffma, ffmal, dfmal,f32fmaf64, f32fmaf32x, f32xfmaf64 for all configurations; f32fmaf64x,f32fmaf128, f64fmaf64x, f64fmaf128, f32xfmaf64x, f32xfmaf128,f64xfmaf128 for configurations with _Float64x and _Float128;__f32fmaieee128 and __f64fmaieee128 aliases in the powerpc64le case(for calls to ffmal and dfmal when long double is IEEE binary128).Corresponding tgmath.h macro support is also added.The changes are mostly similar to those for the other narrowingfunctions previously added, especially that for sqrt, so thedescription of those generally applies to this patch as well.  As withsqrt, I reused the same test inputs in auto-libm-test-in as fornon-narrowing fma rather than adding extra or separate inputs fornarrowing fma.  The tests in libm-test-narrow-fma.inc also followthose for non-narrowing fma.The non-narrowing fma has a known bug (bug 6801) that it does not seterrno on errors (overflow, underflow, Inf * 0, Inf - Inf).  Ratherthan fixing this or having narrowing fma check for errors whennon-narrowing does not (complicating the cases when narrowing fma canotherwise be an alias for a non-narrowing function), this patch doesnot attempt to check for errors from narrowing fma and set errno; theCHECK_NARROW_FMA macro is still present, but as a placeholder thatdoes nothing, and this missing errno setting is considered to becovered by the existing bug rather than needing a separate open bug.missing-errno annotations are duly added to many of theauto-libm-test-in test inputs for fma.This completes adding all the new functions from TS 18661-1 to glibc,so will be followed by corresponding stdc-predef.h changes to define__STDC_IEC_60559_BFP__ and __STDC_IEC_60559_COMPLEX__, as the supportfor TS 18661-1 will be at a similar level to that for C standardfloating-point facilities up to C11 (pragmas not implemented, butlibrary functions done).  (There are still further changes to be doneto implement changes to the types of fromfp functions from N2548.)Tested as followed: natively with the full glibc testsuite for x86_64(GCC 11, 7, 6) and x86 (GCC 11); with build-many-glibcs.py with GCC11, 7 and 6; cross testing of math/ tests for powerpc64le, powerpc32hard float, mips64 (all three ABIs, both hard and soft float).  Thedifferent GCC versions are to cover the different cases in tgmath.hand tgmath.h tests properly (GCC 6 has _Float* only as typedefs inglibc headers, GCC 7 has proper _Float* support, GCC 8 adds__builtin_tgmath).
gcc bug	 https://github.com/dbkernel/ClickHouse/commit/8e5279cf6961ac62f1b2e8dadcf356a21e1f6eda	fix gcc explicit namespace bug
gcc bug	 https://github.com/DerpFest-Devices/kernel_xiaomi_violet/commit/3c0da6c49e8eb2a1a8796ec1d32d606955765e1d	drivers: clk: gcc-sm{6,7}150: Specify sync probe for gcc-sm{6,7}150Bug: 115776306Bug: 77146523Change-Id: Ie87e837dcb2e8737146ae775cffc86224a78d24eSigned-off-by: Miguel de Dios <migueldedios@google.com>
gcc bug	 https://github.com/openSUSE/kernel/commit/2df3fc4a84e917a422935cc5bae18f43f9955d31	net: bcmgenet: Revert "Use stronger register read/writes to assure ordering"It turns out after digging deeper into this bug, that it was beingtriggered by GCC12 failing to call the bcmgenet_enable_dma()routine. Given that a gcc12 fix has been merged [1] and the genetdriver now works properly when built with gcc12, this commit shouldbe reverted.[1]https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105160https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=aabb9a261ef060cf24fd626713f1d7d9df81aa57Fixes: 8d3ea3d402db ("net: bcmgenet: Use stronger register read/writes to assure ordering")Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>Acked-by: Florian Fainelli <f.fainelli@gmail.com>Link: https://lore.kernel.org/r/20220412210420.1129430-1-jeremy.linton@arm.comSigned-off-by: Paolo Abeni <pabeni@redhat.com>
gcc bug	 https://github.com/nawawi/buildroot/commit/de1a3737879eef4a9dd283269a896e50a1badabf	package/poppler: fix build failure due to gcc bug 68485The bullet package exhibits gcc bug 68485 when built for the Microblazearchitecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_68485=y like wealready do for BR2_TOOLCHAIN_HAS_GCC_BUG_85180=y.Fixes:http://autobuild.buildroot.net/results/96e77ddba5042ba4dacb16b328fc298a4f00f49a/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/Forgotten-Games-net/pterodactyl-baseimages/commit/a454f9c93ba101ddbe06d79d1d214d1a3c9f59fc	BugFixFix a bug with libgcc_s.so.1 and GCC_4.2.0
gcc bug	 https://github.com/cmbant/CosmoMC/commit/08f8ddc9f385f67c60579180acfb4c7c780ca57a	workarounds for gcc and openblas bugs
gcc bug	 https://github.com/ionutnechita/linux-sunlight/commit/2df3fc4a84e917a422935cc5bae18f43f9955d31	net: bcmgenet: Revert "Use stronger register read/writes to assure ordering"It turns out after digging deeper into this bug, that it was beingtriggered by GCC12 failing to call the bcmgenet_enable_dma()routine. Given that a gcc12 fix has been merged [1] and the genetdriver now works properly when built with gcc12, this commit shouldbe reverted.[1]https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105160https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=aabb9a261ef060cf24fd626713f1d7d9df81aa57Fixes: 8d3ea3d402db ("net: bcmgenet: Use stronger register read/writes to assure ordering")Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>Acked-by: Florian Fainelli <f.fainelli@gmail.com>Link: https://lore.kernel.org/r/20220412210420.1129430-1-jeremy.linton@arm.comSigned-off-by: Paolo Abeni <pabeni@redhat.com>
gcc bug	 https://github.com/aliyun/plugsched/commit/3cafcf72c39f6bdca61c6620522adc6d6b316180	border: fix bug that enum keyword missing in gcc.FunctionDeclWhen rebuilding function declaration from gcc tree, the keyword 'enum'is missed due to gcc bugs.For example:> static bool is_release_function(enum bpf_func_id func_id)It will be rebuilt as:> static bool is_release_function(bpf_func_id func_id)The keyword enum is missing, which will trigger compile error.So we need to add some extra code to fix it.Signed-off-by: Qiao Ma <mqaio@linux.alibaba.com>
gcc bug	 https://github.com/ibaoger/pdfium/commit/822a1d64e9c3cc602df1b3debe0532a2fe6f2848	GCC: fix ambiguous reference to UnsafeInputHandlersGCC sees multiple definitions. Add namespace to avoid confusion.Bug: chromium:819294Change-Id: Id8a5f87940c54a8dfb6b429448f5f454ccaa9e42Reviewed-on: https://pdfium-review.googlesource.com/c/pdfium/+/92490Reviewed-by: Lei Zhang <thestig@chromium.org>Commit-Queue: Lei Zhang <thestig@chromium.org>
gcc bug	 https://github.com/andyholst/linux-stable-fork/commit/2df3fc4a84e917a422935cc5bae18f43f9955d31	net: bcmgenet: Revert "Use stronger register read/writes to assure ordering"It turns out after digging deeper into this bug, that it was beingtriggered by GCC12 failing to call the bcmgenet_enable_dma()routine. Given that a gcc12 fix has been merged [1] and the genetdriver now works properly when built with gcc12, this commit shouldbe reverted.[1]https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105160https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=aabb9a261ef060cf24fd626713f1d7d9df81aa57Fixes: 8d3ea3d402db ("net: bcmgenet: Use stronger register read/writes to assure ordering")Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>Acked-by: Florian Fainelli <f.fainelli@gmail.com>Link: https://lore.kernel.org/r/20220412210420.1129430-1-jeremy.linton@arm.comSigned-off-by: Paolo Abeni <pabeni@redhat.com>
gcc bug	 https://github.com/buildroot/buildroot/commit/33ea4d7887b15ccb3e11d1390c697eee531af565	toolchain: fix gcc bug 99140 conditionGcc bug 99140 exhibits with gcc versions:- up to 7.x- 9.x- 10.xand doesn't show up with gcc versions:- 8.x- 11.xthen moving BR2_TOOLCHAIN_GCC_AT_LEAST_9 to BR2_TOOLCHAIN_GCC_AT_LEAST_10makes gcc version 9 set as working but it's not. So let's back substituteBR2_TOOLCHAIN_GCC_AT_LEAST_10 with BR2_TOOLCHAIN_GCC_AT_LEAST_9.Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/SoptikHa2/gnulib-2020/commit/f60dd0747ad75c2971cc314111c8fc2b8a38ce19	nl_langinfo-tests: work around GCC bug 44511* tests/test-nl_langinfo-mt.c: Ignore -Wreturn-type, to workaround a GCC bug <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=44511>.Problem reported for GNU grep by Andreas Schwab<https://bugs.gnu.org/44535>.
gcc bug	 https://github.com/MathieuDonofrio/genebits/commit/0eabff40116f13c343d668b0b1624ba0cd602961	Remove TypeMap Tag (GCC bug fix)
gcc bug	 https://github.com/sailfishos-mirror/gnulib/commit/f60dd0747ad75c2971cc314111c8fc2b8a38ce19	nl_langinfo-tests: work around GCC bug 44511* tests/test-nl_langinfo-mt.c: Ignore -Wreturn-type, to workaround a GCC bug <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=44511>.Problem reported for GNU grep by Andreas Schwab<https://bugs.gnu.org/44535>.
gcc bug	 https://github.com/tensorflow/tensorflow/commit/9ae7119432abb9c84394c19c12d4255df008bfee	Remove EIGEN_EMPTY_STRUCT_CTOR.This was a work-around for an old gcc bug.  It is no longer required, and has been removed from Eigen upstream.PiperOrigin-RevId: 443473656
gcc bug	 https://github.com/joboccara/NamedType/commit/f05bf96aadf602f67ab505791007e63ae0f9542c	Merge pull request #67 from Nicholas42/masterWork around gcc bug with ambiguous post/pre-increment.
gcc bug	 https://github.com/buildroot/buildroot/commit/de1a3737879eef4a9dd283269a896e50a1badabf	package/poppler: fix build failure due to gcc bug 68485The bullet package exhibits gcc bug 68485 when built for the Microblazearchitecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_68485=y like wealready do for BR2_TOOLCHAIN_HAS_GCC_BUG_85180=y.Fixes:http://autobuild.buildroot.net/results/96e77ddba5042ba4dacb16b328fc298a4f00f49a/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/kernelci/kernelci-core/commit/f65098628c0585d40344a7467862dbceeffdd5a7	config/docker: add workaround patch for gcc-10 pluginsAdd temporary fix for failing builds with Debian gcc-10.  The errorcan be seen with allmodconfig or when gcc plugins are enabled.  Forexample:  https://storage.kernelci.org/mainline/master/v5.17-rc7/x86_64/allmodconfig/gcc-10/logs/build-errors.log  /usr/lib/gcc/x86_64-linux-gnu/10/plugin/include/config/i386/i386.h:2500:10: fatal error: common/config/i386/i386-cpuinfo.h: No such file or directory  /usr/lib/gcc/x86_64-linux-gnu/10/plugin/include/config/i386/i386.h:2500:10: fatal error: common/config/i386/i386-cpuinfo.h: No such file or directoryAdd patch proposed in Debian's bug tracking system since it won't befixed in the Debian package:https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=980609#72Signed-off-by: Denys Fedoryshchenko <denys.f@collabora.com>Signed-off-by: Guillaume Tucker <guillaume.tucker@collabora.com>
gcc bug	 https://github.com/roolebo/gnulib/commit/f60dd0747ad75c2971cc314111c8fc2b8a38ce19	nl_langinfo-tests: work around GCC bug 44511* tests/test-nl_langinfo-mt.c: Ignore -Wreturn-type, to workaround a GCC bug <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=44511>.Problem reported for GNU grep by Andreas Schwab<https://bugs.gnu.org/44535>.
gcc bug	 https://github.com/crdroidandroid/android_kernel_xiaomi_vince/commit/3240a27bb77f350b8394f738ab90e5a49bf90d58	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Danny Lin <danny@kdrag0n.dev>Signed-off-by: GhostMaster69-dev <rathore6375@gmail.com>Signed-off-by: rk134 <rk134@pixelexperience.org>
gcc bug	 https://github.com/coreutils/gnulib/commit/f60dd0747ad75c2971cc314111c8fc2b8a38ce19	nl_langinfo-tests: work around GCC bug 44511* tests/test-nl_langinfo-mt.c: Ignore -Wreturn-type, to workaround a GCC bug <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=44511>.Problem reported for GNU grep by Andreas Schwab<https://bugs.gnu.org/44535>.
gcc bug	 https://github.com/minhngoc25a/wine/commit/d0413d833f430a487589283c53f797da2b4f48a0	ntdll: Don't use inline assembly in do_cpuid.Avoids problems on old GCC.Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=51862Signed-off-by: Jacek Caban <jacek@codeweavers.com>Signed-off-by: Alexandre Julliard <julliard@winehq.org>
gcc bug	 https://github.com/beagleboard/buildroot/commit/137225cef423ccbebc31d0c562bf3f37192739ac	package/gcc: add OpenRisc patches for gcc version 11.1.0At the moment of gcc 11.1.0 release the OpenRisc patches for -mcmodel=largewere still pending. They have been upstreamed yesterday as pointed in gccbugzilla[1]. So they will be part of gcc 11.3.0 or maybe before on 11.2.2. Anyway at the moment if we try to build packages libgeos and protobufwith OpenRisc gcc 11.1.0 it fails due to missing -mcmodel=large. So let'sadd OpenRisc patches for it as done for all the previous versions.Fixes:still not appeared on autobuilers[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99783Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/DaveRichmond/buildroot/commit/f8367664f8aea1e962c111df0432014d744fd00f	package/gcc: add upstream patches that introduce -mcmodel=large option for or1kLet's add upstream patches introducing -mcmodel=large or1k gcc option thatworks in conjunction with previous binutils patch. That option fix binutilsbug 21464[1] allowing to build libgeos with no problem. This way we canconsider buildroot toolchain binutils bug 21464 free.[1]: https://sourceware.org/bugzilla/show_bug.cgi?id=21464Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>[Arnout: remove the PATCH M/N parts - cfr. check-package]
gcc bug	 https://github.com/MartB/buildroot-satos/commit/ee228403e9741b6c799ce1ef34c15993086f266d	package/gcc: use binutils wrappers for target libsThis will use gcc-ar, gcc-nm and gcc-ranlib instead of thenormal binutils tools. The difference is that with thewrappers, gcc plugins will be automatically picked up,which is necessary to build with LTO.With this enabled, it is possible to build everything (including libgccand libstdc++) with LTO by setting BR2_TARGET_OPTIMIZATION="-flto".Note that you'd expect that the GCC build system would automatically dothis when --enable-lto is set, but this is not the case. There are someopen bugs [1][2] to allow building libgcc and libstdc++ with LTO supportbut it's apparently not done yet.Note that there are also reports of problems building libstdc++ with LTO[3], but it seems that's no longer a problem (and the bug didn't getupdated).Signed-off-by: Norbert Lange <nolange79@gmail.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59893[2] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77278[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60160
gcc bug	 https://github.com/wbx-github/openadk/commit/65447d767a0c53869e52ec43af18e97266ea6e3a	microblaze: workaround for gcc bug #97208
gcc bug	 https://github.com/lineage16-suez/kernel_amazon_suez/commit/46f8f21df82546ee03da4a705f2a50e271f3a14d	crypto: improve gcc optimization flags for serpent and wp512commit 7d6e9105026788c497f0ab32fa16c82f4ab5ff61 upstream.An ancient gcc bug (first reported in 2003) has apparently resurfacedon MIPS, where kernelci.org reports an overly large stack frame in thewhirlpool hash algorithm:crypto/wp512.c:987:1: warning: the frame size of 1112 bytes is larger than 1024 bytes [-Wframe-larger-than=]With some testing in different configurations, I'm seeing largevariations in stack frames size up to 1500 bytes for what should havearound 300 bytes at most. I also checked the reference implementation,which is essentially the same code but also comes with some test andbenchmarking infrastructure.It seems that recent compiler versions on at least arm, arm64 and powerpchave a partial fix for this problem, but enabling "-fsched-pressure", buteven with that fix they suffer from the issue to a certain degree. Sometesting on arm64 shows that the time needed to hash a given amount ofdata is roughly proportional to the stack frame size here, which makessense given that the wp512 implementation is doing lots of loads fortable lookups, and the problem with the overly large stack is a resultof doing a lot more loads and stores for spilled registers (as seen frominspecting the object code).Disabling -fschedule-insns consistently fixes the problem for wp512,in my collection of cross-compilers, the results are consistently betteror identical when comparing the stack sizes in this function, thoughsome architectures (notable x86) have schedule-insns disabled bydefault.The four columns are:default: -O2press:
gcc bug	 https://github.com/ace15-guest/BMG/commit/c9d29751b7a2bc2173f6a96560d1fa56299cc280	Remove LTO from debug modeThis circumvents a gcc bug
gcc bug	 https://github.com/imx6ull-pro/buildroot/commit/ee228403e9741b6c799ce1ef34c15993086f266d	package/gcc: use binutils wrappers for target libsThis will use gcc-ar, gcc-nm and gcc-ranlib instead of thenormal binutils tools. The difference is that with thewrappers, gcc plugins will be automatically picked up,which is necessary to build with LTO.With this enabled, it is possible to build everything (including libgccand libstdc++) with LTO by setting BR2_TARGET_OPTIMIZATION="-flto".Note that you'd expect that the GCC build system would automatically dothis when --enable-lto is set, but this is not the case. There are someopen bugs [1][2] to allow building libgcc and libstdc++ with LTO supportbut it's apparently not done yet.Note that there are also reports of problems building libstdc++ with LTO[3], but it seems that's no longer a problem (and the bug didn't getupdated).Signed-off-by: Norbert Lange <nolange79@gmail.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59893[2] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77278[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60160
gcc bug	 https://github.com/buildroot/buildroot/commit/ee228403e9741b6c799ce1ef34c15993086f266d	package/gcc: use binutils wrappers for target libsThis will use gcc-ar, gcc-nm and gcc-ranlib instead of thenormal binutils tools. The difference is that with thewrappers, gcc plugins will be automatically picked up,which is necessary to build with LTO.With this enabled, it is possible to build everything (including libgccand libstdc++) with LTO by setting BR2_TARGET_OPTIMIZATION="-flto".Note that you'd expect that the GCC build system would automatically dothis when --enable-lto is set, but this is not the case. There are someopen bugs [1][2] to allow building libgcc and libstdc++ with LTO supportbut it's apparently not done yet.Note that there are also reports of problems building libstdc++ with LTO[3], but it seems that's no longer a problem (and the bug didn't getupdated).Signed-off-by: Norbert Lange <nolange79@gmail.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59893[2] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77278[3] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60160
gcc bug	 https://github.com/TripleTrable/buildroot/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/rohan-linux/buildroot/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/openlgtv/buildroot-nc4/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/nluhux/buildroot/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/Atom-X-Devs/android_kernel_xiaomi_scarlet/commit/f08fece4710c0275775ba8d12c23448152910f14	drivers: clk: Specify sync probe for gcc-660Bug: 115776306Bug: 77146523Signed-off-by: Miguel de Dios <migueldedios@google.com>Signed-off-by: Tashfin Shakeer Rhythm <tashfinshakeerrhythm@gmail.com>
gcc bug	 https://github.com/stickM4N/stick-lib/commit/a444595b56b0b3048d67ed4a81743427597a34e4	Fix GCC version bug. Reformatted project.
gcc bug	 https://github.com/MartB/buildroot-satos/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/jake5253/buildroot/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/foss-for-synopsys-dwc-arc-processors/buildroot/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/GeGuNa/bind9/commit/ddd5b0ff894fe48f668a63696fbabb3777bbc89b	Downgrade -Wstringop-overread from error to warningDue to a bug in gcc-11, the build fails when AddressSanitizer isenabled.  Downgrading the -Wstringop-overread to just a warning in thegcc:asan build allows the code to compile.
gcc bug	 https://github.com/viktormalik/diffkemp/commit/9cd74c4ccf52f352021dffc3e1d88648444ec50c	Update googletest to version 1.11.0Older versions contain a bug (with -Werror) occurring with GCC 11.
gcc bug	 https://github.com/theimpulson/android_kernel_nokia_sdm660/commit/7835ece503d85c500033773d93d5fd71bb8fc913	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4
gcc bug	 https://github.com/farosas/buildroot/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/riscygeek/micro-linux-repo/commit/b527cb0dd95ff80942ae19cf2748bd3ba194380a	gcc: Fixed minor syntax bugSigned-off-by: Benjamin St閻『z <benni@stuerz.xyz>
gcc bug	 https://github.com/aliyun/plugsched/commit/b89b75550a612407664b00fc76298442e1b19555	border: simplify extracting by apply all gcc bugfixes at a timeDon't concern too much about GCC bugs in extractor.Signed-off-by: Yihao Wu <wuyihao@linux.alibaba.com>Reviewed-by: Shanpei Chen <shanpeic@linux.alibaba.com>
gcc bug	 https://github.com/drowe67/codec2/commit/d6baa253ece9169738b4608cbc5e8a91aa02657e	Merge pull request #266 from fmoessbauer/gcc-11-warningsFix bugs found with GCC 11
gcc bug	 https://github.com/grandchild/vis_avs/commit/1ac1e5c12a52154c5789f6af14fb92e9e7a58cdc	[bug][gcc] Fix struct initialization on older GCC
gcc bug	 https://github.com/OE4T/linux-tegra-5.10/commit/f9c2c83a8b03159f30fc4ba61c466304dae76e14	nvidia: net/wireless/realtek: clean up indentation issuesnow flagged as errors by gcc 11.  Some of these were actualbugs.Signed-off-by: Matt Madison <matt@madison.systems>
gcc bug	 https://github.com/SALMANKHANPM/karmil_xiaomi_whyred/commit/c59aea5db031ef82bd9ed22f65c7a17a02c99e5c	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Akhil Narang <akhilnarang.1999@gmail.com>
gcc bug	 https://github.com/BlossomSeas/mrboom-libretro2/commit/2eba4e0ee097e7f5c947f729e861641a9472735f	Revert Helper: Workaround gcc 7.5.0 division bug (#79) (#80)Emulator recompiler problem
gcc bug	 https://github.com/jamesbut/NeuroEvo/commit/f267ac695a5f36d763d7be13522f18a379cf7c12	Compile for gcc and fixed optional bug
gcc bug	 https://github.com/sourceruckus/linux-mdl/commit/c42813b71a06a2ff4a155aa87ac609feeab76cf3	parisc: Fix unaligned-access crash in bootloaderKernel v5.14 has various changes to optimize unaligned memory accesses,e.g. commit 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers").Those changes triggered an unalignment-exception and thus crashed thebootloader on parisc because the unaligned "output_len" variable now suddenlywas read word-wise while it was read byte-wise in the past.Fix this issue by declaring the external output_len variable as char which thenforces the compiler to generate byte-accesses.Signed-off-by: Helge Deller <deller@gmx.de>Cc: Arnd Bergmann <arnd@kernel.org>Cc: John David Anglin <dave.anglin@bell.net>Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102162Fixes: 8c031ba63f8f ("parisc: Unbreak bootloader due to gcc-7 optimizations")Fixes: 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers")Cc: <stable@vger.kernel.org> # v5.14+
gcc bug	 https://github.com/kraj/glibc/commit/4e58941fc4b4c9d90769aa97ed76aa7e1692cb94	hurd: Enable using ifuncBugs have been fixed in binutils/gcc/glibc.
gcc bug	 https://github.com/eclipse-cdt/cdt/commit/c61e8795325a30f8e2d0adaf388e08cf9f0e4bf6	Bug 568408 - Add more GCC built-ins symbols in parser (based on GCC 10.2.0)Add the built-ins that are straightforward to add, according tohttps://gcc.gnu.org/onlinedocs/gcc-10.2.0/gcc/Other-Builtins.html#Other-BuiltinsChange-Id: I0d680053018442e6d29a694a7128997b23828d2fSigned-off-by: Marc-Andre Laperle <malaperle@gmail.com>
gcc bug	 https://github.com/orfeotoolbox/OTB/commit/bc68624b9d3f6dc604ac6e232dd52cd0580df517	BUG: apply patch from Qt upstream for gcc 9
gcc bug	 https://github.com/jolivain/buildroot/commit/4c9c02471a92161d3c324f37bb8843e4cb2178c9	package/gcc: bump to gcc 10.2Remove upstream patch backported to gcc 10.2:https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e86ae54172bb982e3c9d5aa62d20be5b72fe0f24"GCC 10.2 is a bug-fix release from the GCC 10 branchcontaining important fixes for regressions and serious bugs inGCC 10.1 with more than 94 bugs fixed since the previous release."https://gcc.gnu.org/pipermail/gcc-announce/2020/000164.htmlSigned-off-by: Romain Naour <romain.naour@gmail.com>Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
gcc bug	 https://github.com/Javanaise/mrboom-libretro/commit/2eba4e0ee097e7f5c947f729e861641a9472735f	Revert Helper: Workaround gcc 7.5.0 division bug (#79) (#80)Emulator recompiler problem
gcc bug	 https://github.com/orfeotoolbox/OTB/commit/07097bc7b66cdb3c5d9ea889481aea0ee941b43c	BUG: added missing include (compilation on debian with gcc 10)
gcc bug	 https://github.com/spoutn1k/mcmap/commit/a6ce04c272139da90068b66367b60861617cf6f4	Fix compilation bug on older gcc versions
gcc bug	 https://github.com/ned14/quickcpplib/commit/615520fd3cbbcdfb84340e7fcc0f703f125d43b0	Work around weird GCC bug in our start_lifetime_as emulation.
gcc bug	 https://github.com/ODEX-TOS/linux/commit/c42813b71a06a2ff4a155aa87ac609feeab76cf3	parisc: Fix unaligned-access crash in bootloaderKernel v5.14 has various changes to optimize unaligned memory accesses,e.g. commit 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers").Those changes triggered an unalignment-exception and thus crashed thebootloader on parisc because the unaligned "output_len" variable now suddenlywas read word-wise while it was read byte-wise in the past.Fix this issue by declaring the external output_len variable as char which thenforces the compiler to generate byte-accesses.Signed-off-by: Helge Deller <deller@gmx.de>Cc: Arnd Bergmann <arnd@kernel.org>Cc: John David Anglin <dave.anglin@bell.net>Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102162Fixes: 8c031ba63f8f ("parisc: Unbreak bootloader due to gcc-7 optimizations")Fixes: 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers")Cc: <stable@vger.kernel.org> # v5.14+
gcc bug	 https://github.com/ahjragaas/glibc/commit/4e58941fc4b4c9d90769aa97ed76aa7e1692cb94	hurd: Enable using ifuncBugs have been fixed in binutils/gcc/glibc.
gcc bug	 https://github.com/DeFiCh/ain/commit/0a8ae95120111cfcf7a730175aa80c983026dac8	try to avoid older gcc bug, ubuntu 16.04
gcc bug	 https://github.com/trilinos/Trilinos/commit/115633fb0b7ee13783435f97fcd5e13683126ef2	Phalanx: fix for gcc 5/6 lambda bug on cuda
gcc bug	 https://github.com/wallix/redemption/commit/c5d6cf4cf6fe6cc0cf942da756e5feee9ef0c8e3	[test_framework] fix compilation with gcc-8.3 (known bug in compilator)
gcc bug	 https://github.com/herrnst/dddvb-linux-kernel/commit/c42813b71a06a2ff4a155aa87ac609feeab76cf3	parisc: Fix unaligned-access crash in bootloaderKernel v5.14 has various changes to optimize unaligned memory accesses,e.g. commit 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers").Those changes triggered an unalignment-exception and thus crashed thebootloader on parisc because the unaligned "output_len" variable now suddenlywas read word-wise while it was read byte-wise in the past.Fix this issue by declaring the external output_len variable as char which thenforces the compiler to generate byte-accesses.Signed-off-by: Helge Deller <deller@gmx.de>Cc: Arnd Bergmann <arnd@kernel.org>Cc: John David Anglin <dave.anglin@bell.net>Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102162Fixes: 8c031ba63f8f ("parisc: Unbreak bootloader due to gcc-7 optimizations")Fixes: 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers")Cc: <stable@vger.kernel.org> # v5.14+
gcc bug	 https://github.com/Gateworks/linux-venice/commit/c42813b71a06a2ff4a155aa87ac609feeab76cf3	parisc: Fix unaligned-access crash in bootloaderKernel v5.14 has various changes to optimize unaligned memory accesses,e.g. commit 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers").Those changes triggered an unalignment-exception and thus crashed thebootloader on parisc because the unaligned "output_len" variable now suddenlywas read word-wise while it was read byte-wise in the past.Fix this issue by declaring the external output_len variable as char which thenforces the compiler to generate byte-accesses.Signed-off-by: Helge Deller <deller@gmx.de>Cc: Arnd Bergmann <arnd@kernel.org>Cc: John David Anglin <dave.anglin@bell.net>Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102162Fixes: 8c031ba63f8f ("parisc: Unbreak bootloader due to gcc-7 optimizations")Fixes: 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers")Cc: <stable@vger.kernel.org> # v5.14+
gcc bug	 https://github.com/gregkh/linux/commit/5c34aea341b16e29fde6e6c8d4b18866cd99754d	perf test: Fix DWARF unwind for optimized builds.To ensure the stack frames are on the stack tail calls optimizationsneed to be inhibited. If your compiler supports an attribute use it,otherwise use an asm volatile barrier.The barrier fix was suggested here:https://lore.kernel.org/lkml/20201028081123.GT2628@hirez.programming.kicks-ass.net/Tested with an optimized clang build and by forcing the asm barrierroute with an optimized clang build.A GCC bug tracking a proper disable_tail_calls is:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97831Fixes: 9ae1e990f1ab ("perf tools: Remove broken __no_tail_call       attribute")v2. is a rebase. The original fix patch generated quite a lot of    discussion over the right place for the fix:    https://lore.kernel.org/lkml/20201114000803.909530-1-irogers@google.com/    The patch reflects my preference of it being near the use, so that    future code cleanups don't break this somewhat special usage.Signed-off-by: Ian Rogers <irogers@google.com>Acked-by: Jiri Olsa <jolsa@redhat.com>Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>Cc: Ard Biesheuvel <ardb@kernel.org>Cc: Mark Rutland <mark.rutland@arm.com>Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Namhyung Kim <namhyung@kernel.org>Cc: Peter Zijlstra <peterz@infradead.org>Cc: Stephane Eranian <eranian@google.com>Cc: clang-built-linux@googlegroups.comLink: http://lore.kernel.org/lkml/20210922173812.456348-1-irogers@google.comSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
gcc bug	 https://github.com/markridgewell/Teide/commit/7494028c3056ab70401fc03f7a77beeb43691ff4	Disable coverage on Linux (looks like a GCC bug)
gcc bug	 https://github.com/BossHobby/QUICKSILVER/commit/cd821b919d0ca514b6ea3c6ff3dd39e6be63d1c4	pio: update compiler packagethis reveals a compiler bug with missaligned reads on packed structshttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=51628
gcc bug	 https://github.com/ace15-guest/Ind_Study/commit/c9d29751b7a2bc2173f6a96560d1fa56299cc280	Remove LTO from debug modeThis circumvents a gcc bug
gcc bug	 https://github.com/Deus-Ex-Mortis/RIOT-security/commit/6588db65805c01c8ceb8d6c7cddb41602b30d1f7	pkg/qcbor,wakaama,wolfssl: remove maybe-uninitialized warningsome variable seem uninitialized to gcc with -Og but aren'thttps://gcc.gnu.org/bugzilla/buglist.cgi?quicksearch=may%20be%20used%20uninitializedhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=42145especialy:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90710#c1
gcc bug	 https://github.com/vladlogyin/linux-tb-j616f/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/peterzuger/linux/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/Panchajanya1999/linux-mainline/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/nbd168/wireless/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/linuxppc/linux-ci/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/AMS21/Phi/commit/12cc9d551d37f87161e54c0c260c38083ce6a61a	[tests] Fix `is_nothrow_constructible` with gcc bug 102305
gcc bug	 https://github.com/outpaddling/freebsd-ports-wip/commit/a47dacd33ab7cd475e9fac71286ac40df34e3b52	fastp: Add USE_GCC to hack around bugs
gcc bug	 https://github.com/PixlOne/ipcgull/commit/af96ae0ef1f9f1857caa646ace8dd51be5076fd4	Bug and GCC warning fixes
gcc bug	 https://github.com/kernel-patches/bpf/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/iwamatsu/linux-watchdog/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/intel/mainline-tracking/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/zephyrproject-rtos/sdk-ng/commit/f29d2718d8267acd3eea4cdb71e6bfb0843b3d58	gcc: Pull in Clang 9 bug workaroundPull in the workaround to fix building with Clang 9.This is required to support building GCC on the macOS 11 and above.Signed-off-by: Stephanos Ioannidis <root@stephanos.io>
gcc bug	 https://github.com/Arnau478/owl-os/commit/b10130a1c5b528f1b44ee9aacd8bfcf8df2ebc48	Switched to GCC, implemented basic kernel, and fixed various bugs
gcc bug	 https://github.com/greearb/linux-ct-5.17/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/fzOS/fzOS-kernel/commit/461d2726064d417307d77f940636e3b809bb23a9	Bug Fix:gcc's compliment about pointer types.
gcc bug	 https://github.com/NFS-projects/kernel_xiaomi_rosy/commit/1356b6910bc32d43f31368a1b636dadab382a6cd	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Albert I <kras@raphielgang.org>Signed-off-by: NFS86 <jarbull86@gmail.com>
gcc bug	 https://github.com/Dirk1980ac/linux/commit/bba496656a73fc1d1330b49c7f82843836e9feb1	powerpc/32: Fix boot failure with GCC latent entropy pluginBoot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.eu
gcc bug	 https://github.com/MusicScience37/cpp-stat-bench/commit/3aa18158559de620375015d7ff99fffea0feab44	:bug: Test in GCC.
gcc bug	 https://github.com/boostorg/assert/commit/31b2f52083c2baad93a3ce2e12cf84355c1eabae	Do not use __PRETTY_FUNCTION__ on GCC 4.x due to codegen bugs
gcc bug	 https://github.com/mdaniel/virtualbox-org-svn-vbox-trunk/commit/9aed95f7c0b0e86f69dbb23d4e4ac55ff178a9eb	VMM/IEM: fixed bug in cmpxchg16b worker for gcc targets.git-svn-id: http://www.virtualbox.org/svn/vbox/trunk@94164 cfe28804-0f27-0410-a406-dd0f0b0b656f
gcc bug	 https://github.com/bendavid/narf/commit/e1b8836e376a925f575dd106e0ece839a6edb64b	improve implementation of start_lifetime_as(_array) considering standard compliance and known gcc bugs
gcc bug	 https://github.com/yzglintian/linux/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/SWIFTSIM/swiftsim/commit/05d78d0f3d7a591a349f9c4909abe070806edf85	Merge branch 'lightcone_gcc_bug' into 'master'Comment out field designators when initializing lightcone map typesSee merge request swift/swiftsim!1504
gcc bug	 https://github.com/Billkyriaf/pds_assignment_2/commit/63323cfdde0bb977fcc086ee4b72a29cdb7c67fd	Fixes bug gcc compiler
gcc bug	 https://github.com/Yukina-Supremacy/android_kernel_xiaomi_selene/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/NetBSD/src/commit/9e1ddc550b01c74bbc8d1b3f79e466f1f39e2a66	lint: fix undefined behavior on enum overflow (since 1995)GCC had optimized the check away, due to the obvious integer overflow 'x- 1 == INT_MAX'.  To prevent further bugs like this, compile with-ftrapv.
gcc bug	 https://github.com/xNombre/msm-4.14/commit/9becffdf35b224800600e5388936440cc0b43393	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/sergiomb2/VirtualBox/commit/cf3685298ee0c23589135a7acdd64161aa1c8051	VMM/IEM: fixed bug in cmpxchg16b worker for gcc targets.git-svn-id: http://www.virtualbox.org/svn/vbox@94164 cfe28804-0f27-0410-a406-dd0f0b0b656f
gcc bug	 https://github.com/KDr2/emacs/commit/ad82bbdf08bb2d65c048299ce3740dd151ac733c	Fix test lisp/cedet/semantic/bovine/gcc-tests on macOS (Bug#52431)* test/lisp/cedet/semantic/bovine/gcc-tests.el(semantic-gcc-test-output-parser-this-machine): Also detect Appleclang on macOS Monterey.(cherry picked from commit 6e52becfbe2a33c025b8c4838b3c8f06ba5a6fb8)
gcc bug	 https://github.com/yaap/kernel_oneplus_sm8150/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/alexandriaC7/kernel_oneplus_kebab/commit/a5e274ebfc8f983dcec16ffcbc542acf454fe3ff	kbuild: Only add -fno-var-tracking-assignments for old GCC versionsSome old GCC versions between 4.5.0 and 4.9.1 might miscompile codewith -fvar-tracking-assingments (which is enabled by default with -g -O2).Commit 2062afb ("Fix gcc-4.9.0 miscompilation of load_balance()in scheduler") added -fno-var-tracking-assignments unconditionally towork around this. But newer versions of GCC no longer have this bug, soonly add it for versions of GCC before 5.0. This allows various toolssuch as a perf probe or gdb debuggers or systemtap to resolve variablelocations using dwarf locations in more code.Signed-off-by: Mark Wielaard <mark@klomp.org>Acked-by: Ian Rogers <irogers@google.com>Reviewed-by: Andi Kleen <andi@firstfloor.org>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>Signed-off-by: Adam W. Willis <return.of.octobot@gmail.com>
gcc bug	 https://github.com/nerdhannn/msm-4.4/commit/dba17cbe24421818f8bc68f3eb86b41152ad9f93	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: ramadhannangga <ramadhananggayudhanto@gmail.com>
gcc bug	 https://github.com/tjysdsg/newlib/commit/5fca4e0f180eec4e2507128f1ddf3cb2863f9939	Fix Bug libc/28945- apply fix from Tom de Vries <vries@gcc.gnu.org>  to have calloc zero out storage for nvptx calloc function
gcc bug	 https://github.com/madgraph5/madgraph4gpu/commit/95474a6d278fc4edee51ce08c3a155db5508d258	[cpp17] ** COMPLETE CPP17 ** regenerate gg_tt* with gcc check bug fix (#355)
gcc bug	 https://github.com/elpenny81/AdventOfCode2021/commit/2fb68e0b67e47ecd094d3b8a55e183dad63f3454	Fixed compile bugs with gcc
gcc bug	 https://github.com/xNombre/msm-4.14/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/gentoo/gentoo/commit/fbcbf48f326cc887676e154fdb882038084668e1	dev-libs/libgcrypt: add links to upstream (gnupg + gcc) bug for ARM64 bugSigned-off-by: Sam James <sam@gentoo.org>
gcc bug	 https://github.com/xiaomi-sm6150/android_kernel_xiaomi_sm6150/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/madgraph5/madgraph4gpu/commit/d7f44e3665fadd60a2a1d5a1d9bb48874cf1b7fb	[tex] minor bug fix in printout of nvcc + icx + clang + gcc chain
gcc bug	 https://github.com/jcmdln/emacs/commit/ad82bbdf08bb2d65c048299ce3740dd151ac733c	Fix test lisp/cedet/semantic/bovine/gcc-tests on macOS (Bug#52431)* test/lisp/cedet/semantic/bovine/gcc-tests.el(semantic-gcc-test-output-parser-this-machine): Also detect Appleclang on macOS Monterey.(cherry picked from commit 6e52becfbe2a33c025b8c4838b3c8f06ba5a6fb8)
gcc bug	 https://github.com/LLNL/axom/commit/9593ed10f0a65f53e870573afce571ce0099ac5a	Removes AXOM_MUTABLE_LAMBDA macro in favor a local macro in MeshTesterI confirmed that the problem in MeshTester_detail was due to acompiler bug in gcc@8.1 that is fixed in gcc@8.3.1.Since this problem appears to be restricted to that file,I created a local macro that is only active for gcc@8.1.
gcc bug	 https://github.com/alliander-opensource/power-grid-model/commit/b8431c0bcd6f2c1715d109ee1538e6f1c353df52	fix gcc detection bugSigned-off-by: Tony Xiang <tony.xiang@alliander.com>
gcc bug	 https://github.com/bminor/newlib/commit/5fca4e0f180eec4e2507128f1ddf3cb2863f9939	Fix Bug libc/28945- apply fix from Tom de Vries <vries@gcc.gnu.org>  to have calloc zero out storage for nvptx calloc function
gcc bug	 https://github.com/XayahSuSuSu/android_kernel_xiaomi_cas/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/gnu-mirror-unofficial/emacs/commit/ad82bbdf08bb2d65c048299ce3740dd151ac733c	Fix test lisp/cedet/semantic/bovine/gcc-tests on macOS (Bug#52431)* test/lisp/cedet/semantic/bovine/gcc-tests.el(semantic-gcc-test-output-parser-this-machine): Also detect Appleclang on macOS Monterey.(cherry picked from commit 6e52becfbe2a33c025b8c4838b3c8f06ba5a6fb8)
gcc bug	 https://github.com/greenforce-project/kernel_xiaomi_citrus_sm6115/commit/33a5945c6f87e3307c22baa6ff9d92364f44e6c1	rcu: Fix uninitialized variable in nocb_gp_wait()We never set this to false.  This probably doesn't affect most people'sruntime because GCC will automatically initialize it to false at certaincommon optimization levels.  But that behavior is related to a bug inGCC and obviously should not be relied on.Fixes: 5d6742b37727 ("rcu/nocb: Use rcu_segcblist for no-CBs CPUs")Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
gcc bug	 https://github.com/Disconnect0/android_kernel_xiaomi_ginkgo/commit/c846c2029e9ed2ec06863bddb1b58bd5d7c0867a	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: UtsavBalar1231 <utsavbalar1231@gmail.com>Signed-off-by: danascape <saalim.priv@gmail.com>Signed-off-by: danascape <danascape@gmail.com>Signed-off-by: Forest <forestd.github@gmail.com>
gcc bug	 https://github.com/mannalab/mannawui-arduino-interface/commit/1a332f2c246f2091a66505dcaeb86624e27dd2cb	Merge pull request #20 from bedreski/fix-bugfixed typo in arm-gcc path
gcc bug	 https://github.com/easybuilders/easybuild-easyblocks/commit/6201d8598c8cfb0b938cbd818441b4c1b4dd2a7a	gromacs.py: fix two bugs when using GCC & MKL for FFT and BLAS/LAPACK
gcc bug	 https://github.com/sailfishos-mirror/tar/commit/55f2a0772e08b9febac3ac0de5cb048d4c60d2f5	Fix unlikely uninitalized var bug with sparse file* src/sparse.c (sparse_extract_file): Set *SIZE tostat.st_size so that the caller does not use *SIZEwhen uninitalized.  Problem found with GCC 10 and--enable-gcc-warnings CFLAGS='-O2 -flto -fanalyzer'.
gcc bug	 https://github.com/emacs-mirror/emacs/commit/7445560d0cd4d94f93988d51a98bdba465173f44	Fix problem with folded Gcc headers in Gnus* lisp/gnus/gnus-msg.el (gnus-inews-do-gcc): Tokenize the gccheader properly (there may be newlines and tabs in the separators)(bug#43036).
gcc bug	 https://github.com/ahay/src/commit/9a4ac85c20910d783b399ef2ed11dd2817f1ce3a	Fix bugs and get rid of warnings on Ubuntu 18.04 using gcc
gcc bug	 https://github.com/buildroot/buildroot/commit/4c9c02471a92161d3c324f37bb8843e4cb2178c9	package/gcc: bump to gcc 10.2Remove upstream patch backported to gcc 10.2:https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e86ae54172bb982e3c9d5aa62d20be5b72fe0f24"GCC 10.2 is a bug-fix release from the GCC 10 branchcontaining important fixes for regressions and serious bugs inGCC 10.1 with more than 94 bugs fixed since the previous release."https://gcc.gnu.org/pipermail/gcc-announce/2020/000164.htmlSigned-off-by: Romain Naour <romain.naour@gmail.com>Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
gcc bug	 https://github.com/wastingmylife/kernel_xiaomi_vince/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/trpsl/davinci-kernel/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/google/perfetto/commit/6c151268614502336aa03e02ceef8ef5a50f3ad7	tracing: Fix interceptor build on GCC and WindowsFix the console interceptor build on GCC and Windows, and add a noteabout the console interceptor into the changelog.Bug: 170628040Change-Id: Ia4a67a4cce6d53666f68b68960e16375c48113d4
gcc bug	 https://github.com/boost-ext/sml/commit/17c48146dc2d4b6d80fad39df745ea2b3b1f7508	:bug: [GCC-5] `Wsubobject-linkage` option is not supportedProblem:- GCC-5 doesn't support `Wsubobject-linkage` option.Solution:- Ignore it only with GCC >= 10.
gcc bug	 https://github.com/jirka-h/aprng/commit/382fa96398f9c4ddfc873d1a02b6190ab823bf64	Debug what appears to be gcc bug when compiling create_AR
gcc bug	 https://github.com/live-clones/gmsh/commit/1ac0dbb6c415d9629f79df02b8c7edf847c68ce3	temp fix for attribute warnings (gcc bug)
gcc bug	 https://github.com/BlossomSeas/mrboom-libretro2/commit/8c9dc9b6c18f304f8c7b3514e3e5f5f5524ff645	Helper: Workaround gcc 7.5.0 division bug (#79)Avoid incorrect negative division optimization. Fixes bot behavior on Gamecube
gcc bug	 https://github.com/QuTech-Delft/OpenQL/commit/2291fe7b0a96a18287c9a9006a7d309770907ad1	Update GCC version for Travis to 7. GCC 5.4.0. has a bug where compilation fails with array initializers.
gcc bug	 https://github.com/PixelExperience-Devices/kernel_xiaomi_sm6150/commit/70209b36c0921f5640a6fda6d85c4f53fc2b4810	drivers: clk: gcc-sm6150: Specify sync probe for gcc-sm6150Bug: 115776306Bug: 77146523Change-Id: Ie87e837dcb2e8737146ae775cffc86224a78d24eSigned-off-by: Miguel de Dios <migueldedios@google.com>
gcc bug	 https://github.com/freedesktop/spice-usbredir/commit/9424f1f862276fc79d5c6f021203416c46fc2e41	Fix formatting warnings using some MingW versionUsing PRId64 formatting (or other 64 bit formats) can leadto bug as GCC is detecting some invalid match between stringformat and parameters. This is due to wrong format used.This is very similar to 249f42aaaf182cfd4f4b9120b2468ec8721bd890(cfr "Fix mingw build with __MINGW_PRINTF_FORMAT"), fixing thesame pattern.Signed-off-by: Frediano Ziglio <freddy77@gmail.com>
gcc bug	 https://github.com/TejasKamat/kernel_xiaomi_mojito-1/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/curtin-space/pigweed/commit/626a9b8e988ef9f1bb1c5bc809a3490f96caf86c	Add feature tests for C++20 constexpr and constevalThis restores support for building pw_rpc with xtensa-esp32-elf-gcc(crosstool-NG esp-2020r3) 8.4.0.No-Docs-Update-Reason: bug fixChange-Id: Ia8af09844855f130e866c2c42f18230da7962118Reviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/48701Commit-Queue: Michael Spang <spang@google.com>Reviewed-by: Wyatt Hepler <hepler@google.com>
gcc bug	 https://github.com/ybouret/upsylon/commit/d41b58f570ca18f708d812dd9be03c29b9e38ffc	ok for u2w, bugs in gcc
gcc bug	 https://github.com/adamkaliszan/FreeRtosOnAvr/commit/e88c81f9fa71f14f4942465377aa2760a6268fb2	Gcc cli bug fixes
gcc bug	 https://github.com/Javanaise/mrboom-libretro/commit/8c9dc9b6c18f304f8c7b3514e3e5f5f5524ff645	Helper: Workaround gcc 7.5.0 division bug (#79)Avoid incorrect negative division optimization. Fixes bot behavior on Gamecube
gcc bug	 https://github.com/openMSX/openMSX/commit/c9621509dea901b7699621dce3893a8c3aad0cf7	Workaround visual studio compiler bugMsvc doesn't like the combination of xrange and constexpr. Gcc and clangdo accept the same code. I believe this is a bug in msvc. I'll create abug report later.
gcc bug	 https://github.com/d12frosted/emacs-plus-basis/commit/7445560d0cd4d94f93988d51a98bdba465173f44	Fix problem with folded Gcc headers in Gnus* lisp/gnus/gnus-msg.el (gnus-inews-do-gcc): Tokenize the gccheader properly (there may be newlines and tabs in the separators)(bug#43036).
gcc bug	 https://github.com/eurekadevelopment/Eureka-Kernel-Exynos7885-Q-R-S/commit/be89a318b96032b127ea451a34e47090f05b776e	gcov: Disable gcov build with GCC 10[ Upstream commit cfc905f158eaa099d6258031614d11869e7ef71c ]GCOV built with GCC 10 doesn't initialize n_function variable.  Thisproduces different kernel panics as was seen by Colin in Ubuntu and mein FC 32.As a workaround, let's disable GCOV build for broken GCC 10 version.Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1891288Link: https://lore.kernel.org/lkml/20200827133932.3338519-1-leon@kernel.orgLink: https://lore.kernel.org/lkml/CAHk-=whbijeSdSvx-Xcr0DPMj0BiwhJ+uiNnDSVZcr_h_kg7UA@mail.gmail.com/Cc: Colin Ian King <colin.king@canonical.com>Signed-off-by: Leon Romanovsky <leonro@nvidia.com>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/Stallix/kernel_xiaomi_raphael/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/galanteria01/android_kernel_xiaomi_violet/commit/a74f7f2488c26429bd53397234798c5aaa0948d3	drivers: clk: gcc-sm{6,7}150: Specify sync probe for gcc-sm{6,7}150Bug: 115776306Bug: 77146523Change-Id: Ie87e837dcb2e8737146ae775cffc86224a78d24eSigned-off-by: Miguel de Dios <migueldedios@google.com>
gcc bug	 https://github.com/ShiftMediaProject/libgcrypt/commit/3d095206c30d772d5fc68bf69bfc384e43f766e9	global: fix compile error at pragma GCC diagnostic* src/global.c (_gcry_vcontrol): Move "pragma GCC diagnostics" outsidefunction.--Building with GCC-4.2 (Ubuntu 8.04) failed with error:global.c: In function '_gcry_vcontrol':global.c:714: error: #pragma GCC diagnostic not allowed inside functionsglobal.c:715: error: #pragma GCC diagnostic not allowed inside functionsglobal.c:742: error: #pragma GCC diagnostic not allowed inside functionsGnuPG-bug-id: 5264Signed-off-by: Jussi Kivilinna <jussi.kivilinna@iki.fi>
gcc bug	 https://github.com/RTEMS/sourceware-mirror-binutils-gdb/commit/8f5d31b8d1f80fd9fff4cef4acc4491a0d83fbed	[gdb/testsuite] Fix FAILs due to PR gcc/101452When running test-case gdb.base/ptype-offsets.exp with gcc-11 (with -gdwarf-5default) or gcc-10 with target board unix/gdb:debug_flags=-gdwarf-5 we runinto this regression:... (gdb) ptype/o static_member^M /* offset      |    size */  type = struct static_member {^M-                               static static_member Empty;^M /*      0      |       4 */    int abc;^M ^M                                /* total size (bytes):    4 */^M                              }^M-(gdb) PASS: gdb.base/ptype-offsets.exp: ptype/o static_member+(gdb) FAIL: gdb.base/ptype-offsets.exp: ptype/o static_member...This is caused by missing debug info, which I filed as gcc PR101452 - "[debug,dwarf-5] undefined static member removed by-feliminate-unused-debug-symbols".It's not clear yet whether this is a bug or a feature, but work around this inthe test-cases by:- defining the static member- adding additional_flags=-fno-eliminate-unused-debug-types.Tested on x86_64-linux.gdb/testsuite/ChangeLog:2021-07-20  Tom de Vries  <tdevries@suse.de>
gcc bug	 https://github.com/Spark-Devices/android_kernel_xiaomi_onclite/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/NusantaraROM-Devices/kernel_xiaomi_land/commit/9d092d03580d31904994cc1d67592c903be5bf46	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cd
gcc bug	 https://github.com/zerosign/emacs-native-comp/commit/3bb2fd0c58c6caf1772564524c782f8a4a3fb2b4	* Fix missing 'gcc_jit_type_get_const' macro definition (bug#45303).
gcc bug	 https://github.com/rockstar5495/kernel_xiaomi_mido/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/riscv-android-src/kernel-common/commit/b4c9b6afa3a737b5d02828d1f7183ebde282907c	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/zerosign/emacs-native-comp/commit/407fb165832341d3dccb78d2782d1790a19c4b9d	* Add 'gcc_jit_type_get_const' to Windows dynamic load machinery (bug#45303).
gcc bug	 https://github.com/rgbcorp/kernel_xiaomi_alioth/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/zynaddsubfx/zynaddsubfx/commit/a1abae354e826802f8b6f990cae225d6fb06b2ac	Disable gcc optimizations for a specific functionDue to a gcc opt bug a piece of code was put in a separate function toprevent gcc from optimizing it. Later versions of gcc inlined thefunction and the bug reappeared. So now we explicitly tell gcc to notoptimize it.
gcc bug	 https://github.com/eurekadevelopment/Eureka-Kernel-Exynos7885-Q-R-S/commit/63bf2dcdf0d9b9a04ee5f057c828f97a29de2593	MIPS: Workaround GCC __builtin_unreachable reordering bug[ Upstream commit 906d441febc0de974b2a6ef848a8f058f3bfada3 ]Some versions of GCC for the MIPS architecture suffer from a bug whichcan lead to instructions from beyond an unreachable statement beingincorrectly reordered into earlier branch delay slots if the unreachablestatement is the only content of a case in a switch statement. This canlead to seemingly random behaviour, such as invalid memory accesses fromincorrectly reordered loads or stores, and link failures on microMIPSbuilds.See this potential GCC fix for details:    https://gcc.gnu.org/ml/gcc-patches/2015-09/msg00360.htmlRuntime problems resulting from this bug were initially observed using amaltasmvp_defconfig v4.4 kernel built using GCC 4.9.2 (from a CodescapeSDK 2015.06-05 toolchain), with the result being an address exceptiontaken after log messages about the L1 caches (during probe of the L2cache):    Initmem setup node 0 [mem 0x0000000080000000-0x000000009fffffff]    VPE topology {2,2} total 4    Primary instruction cache 64kB, VIPT, 4-way, linesize 32 bytes.    Primary data cache 64kB, 4-way, PIPT, no aliases, linesize 32 bytes    <AdEL exception here>This is early enough that the kernel exception vectors are not in use,so any further output depends upon the bootloader. This is reproduciblein QEMU where no further output occurs - ie. the system hangs here.Given the nature of the bug it may potentially be hit with differingsymptoms. The bug is known to affect GCC versions as recent as 7.3, andit is unclear whether GCC 8 fixed it or just happens not to encounterthe bug in the testcase found at the link above due to differingoptimizations.This bug can be worked around by placing a volatile asm statement, whichGCC is prevented from reordering past, prior to the__builtin_unreachable call.That was actually done already for other reasons by commit 173a3efd3edb("bug.h: work around GCC PR82365 in BUG()"), but creates problems formicroMIPS builds due to the lack of a .insn directive. The microMIPS ISAallows for interlinking with regular MIPS32 code by repurposing bit 0 ofthe program counter as an ISA mode bit. To switch modes one changes thevalue of this bit in the PC. However typical branch instructions encodetheir offsets as multiples of 2-byte instruction halfwords, which meansthey cannot change ISA mode - this must be done using either an indirectbranch (a jump-register in MIPS terminology) or a dedicated jalxinstruction. In order to ensure that regular branches don't attempt totarget code in a different ISA which they can't actually switch to, thelinker will check that branch targets are code in the same ISA as thebranch.Unfortunately our empty asm volatile statements don't qualify as code,and the link for microMIPS builds fails with errors such as:    arch/mips/mm/dma-default.s:3265: Error: branch to a symbol in another ISA mode    arch/mips/mm/dma-default.s:5027: Error: branch to a symbol in another ISA modeResolve this by adding a .insn directive within the asm statement whichdeclares that what comes next is code. This may or may not be true,since we don't really know what comes next, but as this code is in anunreachable path anyway that doesn't matter since we won't execute it.We do this in asm/compiler.h & select CONFIG_HAVE_ARCH_COMPILER_H inorder to have this included by linux/compiler_types.h afterlinux/compiler-gcc.h. This will result in asm/compiler.h being includedin all C compilations via the -include linux/compiler_types.h argumentin c_flags, which should be harmless.Signed-off-by: Paul Burton <paul.burton@mips.com>Fixes: 173a3efd3edb ("bug.h: work around GCC PR82365 in BUG()")Patchwork: https://patchwork.linux-mips.org/patch/20270/Cc: James Hogan <jhogan@kernel.org>Cc: Ralf Baechle <ralf@linux-mips.org>Cc: Arnd Bergmann <arnd@arndb.de>Cc: linux-mips@linux-mips.orgSigned-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/realme-mt6785-devs/android_kernel_realme_mt6785/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Plankton86/Magazine-Kernel-X00T/commit/ddcefa4e7e7b1988a608b71abcad9a0c82a037c8	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>
gcc bug	 https://github.com/sailfishos-mirror/valgrind/commit/e24f3b6b214588676c24f66ca0d144ba2592447f	Bugs 435732 and 403802The problem is that the testcase specific suppression has stacksthat are too specific. This causes breakage with different versionsof GCC and libstdc++. The suppression only needs to mask the memorypool used for standard io.There are several suppression stanzas so future tweaks may still benecessary.
gcc bug	 https://github.com/pembem22/blender/commit/6cd64f8caacc1a7c679d962a053f73263fc18c2c	Add workaround for gcc 11 compiler bugDifferential Revision: https://developer.blender.org/D11462
gcc bug	 https://github.com/freebsd/drm-kmod/commit/7e5c6715f1f58d646bf98b6decdb7ba4f0c98992	drm/i915: Replace zero-length array with flexible-arrayThe current codebase makes use of the zero-length array languageextension to the C90 standard, but the preferred mechanism to declarevariable-length types such as these ones is a flexible array member[1][2],introduced in C99:struct foo {        int stuff;        struct boo array[];};By making use of the mechanism above, we will get a compiler warningin case the flexible array does not occur last in the structure, whichwill help us prevent some kind of undefined behavior bugs from beinginadvertently introduced[3] to the codebase from now on.Also, notice that, dynamic memory allocations won't be affected bythis change:"Flexible array members have incomplete type, and so the sizeof operatormay not be applied. As a quirk of the original implementation ofzero-length arrays, sizeof evaluates to zero."[1]sizeof(flexible-array-member) triggers a warning because flexible arraymembers have incomplete type[1]. There are some instances of code inwhich the sizeof operator is being incorrectly/erroneously applied tozero-length arrays and the result is zero. Such instances may be hidingsome bugs. So, this work (flexible-array member conversions) will alsohelp to get completely rid of those sorts of issues.This issue was found with the help of Coccinelle.[1] https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html[2] https://github.com/KSPP/linux/issues/21[3] commit 76497732932f ("cxgb3/l2t: Fix undefined behaviour")Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>Link: https://patchwork.freedesktop.org/patch/msgid/20200507185408.GA14561@embeddedor
gcc bug	 https://github.com/OscarDPan/eigen/commit/6035da5283f12f7e6a49cda0c21696c8e5a115b7	Fix compile issues for gcc 4.8.- Move constructors can only be defaulted as NOEXCEPT if all membershave NOEXCEPT move constructors.- gcc 4.8 has some funny parsing bug in `a < b->c`, thinking `b-` is a template parameter.
gcc bug	 https://github.com/RealJohnGalt/GaltsGulch-sm8150/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/openeuler-mirror/kernel/commit/2a24d80fc86bcd70c8e780078254e873ea217379	powerpc/asm: Remove UPD_CONSTR after GCC 4.9 removalUPD_CONSTR was previously a preprocessor define for an old GCC 4.9inline asm bug with m<> constraints.Fixes: 6563139d90ad ("powerpc: remove GCC version check for UPD_CONSTR")Suggested-by: Nathan Chancellor <nathan@kernel.org>Suggested-by: Christophe Leroy <christophe.leroy@csgroup.eu>Suggested-by: Michael Ellerman <mpe@ellerman.id.au>Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://lore.kernel.org/r/20210914161712.2463458-1-ndesaulniers@google.com
gcc bug	 https://github.com/Buxoler/Numpy/commit/e69faef03428b82f5651a5fb521610ddea2bd22a	Merge pull request #19394 from seiko2plus/issue_19255BUG, SIMD: Fix infinite loop during count non-zero on GCC-11
gcc bug	 https://github.com/masc-ucsc/livehd/commit/e0a0649402877d9afd22b175361e8e56e2d80a1a	CI: get rid of unstable GCC 11 installationBug: actions/virtual-environments#3376
gcc bug	 https://github.com/boostorg/variant2/commit/3015e56bcbeff638f33264ec08b8c22a2cbfe312	GCC bug 63707 has been fixed for GCC 11
gcc bug	 https://github.com/DeepakChaurasia30/kernel_oppo_msm8916-offical/commit/943cc7f97674565e9fffe5e7695f32ddbc0b658e	MIPS: ip27: Disable qlge driver in defconfigcommit b617649468390713db1515ea79fc772d2eb897a8 upstream.One of the last remaining failures in kernelci.org is for a gcc bug:drivers/net/ethernet/qlogic/qlge/qlge_main.c:4819:1: error: insn does not satisfy its constraints:drivers/net/ethernet/qlogic/qlge/qlge_main.c:4819:1: internal compiler error: in extract_constrain_insn, at recog.c:2190This is apparently broken in gcc-6 but fixed in gcc-7, and I cannotreproduce the problem here. However, it is clear that ip27_defconfigdoes not actually need this driver as the platform has only PCI-X butnot PCIe, and the qlge adapter in turn is PCIe-only.The driver was originally enabled in 2010 along with lots of otherdrivers.Fixes: 59d302b342e5 ("MIPS: IP27: Make defconfig useful again.")Signed-off-by: Arnd Bergmann <arnd@arndb.de>Cc: Ralf Baechle <ralf@linux-mips.org>Cc: linux-mips@linux-mips.orgCc: linux-kernel@vger.kernel.orgPatchwork: https://patchwork.linux-mips.org/patch/15197/Signed-off-by: James Hogan <james.hogan@imgtec.com>Signed-off-by: Willy Tarreau <w@1wt.eu>
gcc bug	 https://github.com/WaterfoxCo/Waterfox/commit/87c8445c5a38948dd61c9ce63d04947be0130217	Bug 1711821 - Word around GCC bug with nodiscard forwarded nullptr r=petervDifferential Revision: https://phabricator.services.mozilla.com/D115458
gcc bug	 https://github.com/LibreELEC/LibreELEC.tv/commit/2d5a7c167169c68d1e986b66168c2d20542fc6bf	zlib: update to 1.2.12Changelog: https://www.zlib.net/ChangeLog.txtChangeLog file for zlibChanges in 1.2.12 (27 Mar 2022)- Cygwin does not have _wopen(), so do not create gzopen_w() there- Permit a deflateParams() parameter change as soon as possible- Limit hash table inserts after switch from stored deflate- Fix bug when window full in deflate_stored()- Fix CLEAR_HASH macro to be usable as a single statement- Avoid a conversion error in gzseek when off_t type too small- Have Makefile return non-zero error code on test failure- Avoid some conversion warnings in gzread.c and gzwrite.c- Update use of errno for newer Windows CE versions- Small speedup to inflate [psumbera]- Return an error if the gzputs string length can't fit in an int- Add address checking in clang to -w option of configure- Don't compute check value for raw inflate if asked to validate- Handle case where inflateSync used when header never processed- Avoid the use of ptrdiff_t- Avoid an undefined behavior of memcpy() in gzappend()- Avoid undefined behaviors of memcpy() in gz*printf()- Avoid an undefined behavior of memcpy() in _tr_stored_block()- Make the names in functions declarations identical to definitions- Remove old assembler code in which bugs have manifested- Fix deflateEnd() to not report an error at start of raw deflate- Add legal disclaimer to README- Emphasize the need to continue decompressing gzip members- Correct the initialization requirements for deflateInit2()- Fix a bug that can crash deflate on some input when using Z_FIXED- Assure that the number of bits for deflatePrime() is valid- Use a structure to make globals in enough.c evident- Use a macro for the printf format of big_t in enough.c- Clean up code style in enough.c, update version- Use inline function instead of macro for index in enough.c- Clarify that prefix codes are counted in enough.c- Show all the codes for the maximum tables size in enough.c- Add gznorm.c example, which normalizes gzip files- Fix the zran.c example to work on a multiple-member gzip file- Add tables for crc32_combine(), to speed it up by a factor of 200- Add crc32_combine_gen() and crc32_combine_op() for fast combines- Speed up software CRC-32 computation by a factor of 1.5 to 3- Use atomic test and set, if available, for dynamic CRC tables- Don't bother computing check value after successful inflateSync()- Correct comment in crc32.c- Add use of the ARMv8 crc32 instructions when requested- Use ARM crc32 instructions if the ARM architecture has them- Explicitly note that the 32-bit check values are 32 bits- Avoid adding empty gzip member after gzflush with Z_FINISH- Fix memory leak on error in gzlog.c- Fix error in comment on the polynomial representation of a byte- Clarify gz* function interfaces, referring to parameter names- Change macro name in inflate.c to avoid collision in VxWorks- Correct typo in blast.c- Improve portability of contrib/minizip- Fix indentation in minizip's zip.c- Replace black/white with allow/block. (theresa-m)- minizip warning fix if MAXU32 already defined. (gvollant)- Fix unztell64() in minizip to work past 4GB. (Dani閼存瑨濮 H閼存瑩婀秗chner)- Clean up minizip to reduce warnings for testing- Add fallthrough comments for gcc- Eliminate use of ULL constants- Separate out address sanitizing from warnings in configure- Remove destructive aspects of make distclean- Check for cc masquerading as gcc or clang in configure- Fix crc32.c to compile local functions only if used
gcc bug	 https://github.com/Orion-Kernel/kernel_xiaomi_sm6250/commit/75c0dee6035b739a249e5a802952a6dea3ef4621	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/lazyyq/linux-raspi/commit/8c324579d0eec7b228da5ac22648f712d4c5699d	hwmon: (pmbus/lm25066) Let compiler determine outer dimension of lm25066_coeffBugLink: https://bugs.launchpad.net/bugs/1954337[ Upstream commit b7931a7b0e0df4d2a25fedd895ad32c746b77bc1 ]Maintaining this manually is error prone (there are currently onlyfive chips supported, not six); gcc can do it for us automatically.Signed-off-by: Zev Weiss <zev@bewilderbeest.net>Fixes: 666c14906b49 ("hwmon: (pmbus/lm25066) Drop support for LM25063")Link: https://lore.kernel.org/r/20210928092242.30036-5-zev@bewilderbeest.netSigned-off-by: Guenter Roeck <linux@roeck-us.net>Signed-off-by: Sasha Levin <sashal@kernel.org>Signed-off-by: Kamal Mostafa <kamal@canonical.com>Signed-off-by: Kelsey Skunberg <kelsey.skunberg@canonical.com>
gcc bug	 https://github.com/live-clones/eigen/commit/6035da5283f12f7e6a49cda0c21696c8e5a115b7	Fix compile issues for gcc 4.8.- Move constructors can only be defaulted as NOEXCEPT if all membershave NOEXCEPT move constructors.- gcc 4.8 has some funny parsing bug in `a < b->c`, thinking `b-` is a template parameter.
gcc bug	 https://github.com/deephealthproject/ecvl/commit/89b77ffa497c9a1d7178f144b6b9be6d8cc27fce	Workaround for some version of gcc bug
gcc bug	 https://github.com/commercial-emacs/commercial-emacs/commit/ad82bbdf08bb2d65c048299ce3740dd151ac733c	Fix test lisp/cedet/semantic/bovine/gcc-tests on macOS (Bug#52431)* test/lisp/cedet/semantic/bovine/gcc-tests.el(semantic-gcc-test-output-parser-this-machine): Also detect Appleclang on macOS Monterey.(cherry picked from commit 6e52becfbe2a33c025b8c4838b3c8f06ba5a6fb8)
gcc bug	 https://github.com/hradec/pipeVFX/commit/114ce558ffe776bb10011832fcc785d4b4cea966	fixed bug in gcc 6.3.1 that was forcing it to uncompress all the time.
gcc bug	 https://github.com/wagle/graphviz/commit/47dd9598091b8fca57820e34ab5077f73cca4165	Revert "more sqrt"This reverts commit ef77679d9fd51ac7a1a69e5a2635c2280856cd85. This commit wasworking around a GCC bug. Quoting its predecessor0dfd6ab3449455907a5a684fb54cb8b54c5befd5 that gives context:  work around a bug in GCC: It generates a call to "sqrtf" for "(float)sqrt(d)"  but sqrtf doesn't exist in libm.a.  reported by: Aaron Digulla <digulla@hepe.com>As of fe3f9411d2c59b463ab1b64eecfd19f2db55d2fc, Graphviz requires a C99compiler. C99 guarantees `sqrtf` so even if this 闁炽儲绔秛g闁?still exists, generatinga `sqrtf` call is fine on a C99 toolchain.
gcc bug	 https://github.com/RasyidAlKautsar/Android_Kernel_Xiaomi_Mido/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/RadiantDevices/kernel_realme_sdm710-common/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/hexops/dawn/commit/7170b727c9da5357b7d6be0af2271bbfafb82a6e	dawn/node: Fix GCC warningAbout comparisons of different datatypesBug: dawn:1123Change-Id: Iefdb8195041b824f63344a0b367fd5bebbe3ca85Reviewed-on: https://dawn-review.googlesource.com/c/dawn/+/86308Reviewed-by: Corentin Wallez <cwallez@chromium.org>Commit-Queue: Ben Clayton <bclayton@google.com>
gcc bug	 https://github.com/fplll/g6k/commit/695f77a0c9f487ec14709425b94d7791179015b2	Fix bugs with older gcc
gcc bug	 https://github.com/landness/RPC-K8S-githubAction_cicd_test/commit/2b6e41f8f4208e063e5c249061578ba0440dec01	dockerfile compile bug fix--gcc-c++
gcc bug	 https://github.com/projects-nexus/android_kernel_lavender-4.19/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/projectceladon/linux-intel-lts2020-chromium/commit/b4c9b6afa3a737b5d02828d1f7183ebde282907c	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Vishalcj17/android_kernel_qcom_sm8350/commit/7789fb51fc1bb6fe40312addcf1a23dfb924a8eb	drivers: clk: Specify sync probe for gcc-lahainaBug: 115776306Bug: 77146523Signed-off-by: Miguel de Dios <migueldedios@google.com>Change-Id: I6c9e74fa5ee738581e84c7116333563af0206e31
gcc bug	 https://github.com/sailfishos-mirror/bind9/commit/ddd5b0ff894fe48f668a63696fbabb3777bbc89b	Downgrade -Wstringop-overread from error to warningDue to a bug in gcc-11, the build fails when AddressSanitizer isenabled.  Downgrading the -Wstringop-overread to just a warning in thegcc:asan build allows the code to compile.
gcc bug	 https://github.com/ProjectElixir-Devices/kernel_realme_x3/commit/55877e580d4ece7c4a1c46a82da942a6502d5e26	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/dancingDora/bighomewirk_basic/commit/6e8e7516d59effa4f30a0a1fedbe5bca910e65ff	fix: bypass gcc bug
gcc bug	 https://github.com/RadiantDevices/kernel_xiaomi_whyred/commit/de31cbea185d63f9eb002876e542ad6e9803f8bd	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I10557fb29b4a5d4139d690661c22ab5be3fedaafSigned-off-by: Petri Gynther <pgynther@google.com>
gcc bug	 https://github.com/proton-vayu/android_kernel_xiaomi_vayu/commit/3d92474c9b9015eb0a4a4e921dc52cdd67f2c163	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Panchajanya1999 <panchajanya@azure-dev.live>
gcc bug	 https://github.com/breakthatbass/dotfiles/commit/751f345f399ef446dece095d29673203321cf45b	fix gcc function bug
gcc bug	 https://github.com/ermig1979/Cpl/commit/bda4141d49d1fcbc2e412b159aaf04531c704889	*fix GCC compiler bugs.
gcc bug	 https://github.com/aliyun/plugsched/commit/df62506305e720e67750dbf878ab523d27d9182b	Merge pull request #4 from aliyun/fix_gcc-python-plugin_repocontrib: Fix two bugs in Dockerfile when working with Anolis OS
gcc bug	 https://github.com/PixelOS-Devices/kernel_oneplus_sm8150/commit/85d0d4baa4959ffd7c5999dde829a95496f0baac	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Carlos Jimenez (JavaShin-X) <javashin1986@gmail.com>Signed-off-by: Cyber Knight <cyberknight755@gmail.com>
gcc bug	 https://github.com/dlwlrma123/xiaomi_kernel_surya/commit/a1154bf900dd1aaa968b57dc3b90777680f7be0a	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Yaroslav Furman <yaro330@gmail.com>
gcc bug	 https://github.com/codership/galera/commit/45dabef6bf72015c16cc778aff58d4a1502cba21	Workaround for Xenial GCC compilation bugRefs codership/galera-bugs#499
gcc bug	 https://github.com/Ergus/Emacs/commit/7445560d0cd4d94f93988d51a98bdba465173f44	Fix problem with folded Gcc headers in Gnus* lisp/gnus/gnus-msg.el (gnus-inews-do-gcc): Tokenize the gccheader properly (there may be newlines and tabs in the separators)(bug#43036).
gcc bug	 https://github.com/ppooopppooo/kernel_xiaomi_sm8250/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/GEOS-ESM/GEOSgcm_GridComp/commit/ca84e69e0981519d88e662218d2547601ee73165	Fixes #332. Bug fix for GCC 10 and DRHOS0
gcc bug	 https://github.com/troldal/OpenXLSX/commit/0a82c6070749fcca0bbc9484fadac59325404251	Fixed GCC-7 and Clang-8 bugs.
gcc bug	 https://github.com/mylesalamb/IndividualProject/commit/909437c044a6790d3dfed1e8df3a31c962e3dbd8	Bug in gcc?Switched compiler to clang and it seems to work with the existing raw sock code?very little on this on stakc overflow
gcc bug	 https://github.com/tfussell/xlnt/commit/edb27e84f873d3e374952de6a86dc25c64ff0aef	Merge pull request #425 from yschungmr/hotfix/gcc-5-build-bugFixed gcc 5 build bug
gcc bug	 https://github.com/jonmason/ntb/commit/df05c0e9496ce1e28b51f79f9fae94479a37fa60	Documentation: Raise the minimum supported version of LLVM to 11.0.0LLVM versions prior to 11.0.0 have a harder time with dead codeelimination, which can cause issues with commonly used expressions suchas BUILD_BUG_ON and the bitmask functions/macros in bitfield.h (see thefirst two issues links below).Whenever there is an issue within LLVM that has been resolved in a laterrelease, the only course of action is to gate the problematicconfiguration or source code on the toolchain verson or raise theminimum supported version of LLVM for building the kernel, as LLVM has alimited support lifetime compared to GCC. GCC major releases willtypically see a few point releases across a two year period on averagewhereas LLVM major releases are only supported until the next majorrelease and will only see one or two point releases within thattimeframe. For example, GCC 8.1 was released in May 2018 and GCC 8.5 wasreleased in May 2021, whereas LLVM 12.0.0 was released in April 2021 andits only point release, 12.0.1, was released in July 2021, giving aminimal window for fixes to be backported.To resolve these build errors around improper dead code elimination,raise the minimum supported version of LLVM for building the kernel to11.0.0. Doing so is a more proper solution than mucking around with corekernel macros that have always worked with GCC or disabling drivers forusing these macros in a proper manner. This type of issue may continueto crop up and require patching, which creates more debt for bumping theminimum supported version in the future.This should have a minimal impact to distributions. Using a script topull several different Docker images and check the output of'clang --version':archlinux:latest: clang version 13.0.0debian:oldoldstable-slim: clang version 3.8.1-24 (tags/RELEASE_381/final)debian:oldstable-slim: clang version 7.0.1-8+deb10u2 (tags/RELEASE_701/final)debian:stable-slim: Debian clang version 11.0.1-2debian:testing-slim: Debian clang version 11.1.0-4debian:unstable-slim: Debian clang version 11.1.0-4fedora:34: clang version 12.0.1 (Fedora 12.0.1-1.fc34)fedora:latest: clang version 13.0.0 (Fedora 13.0.0-3.fc35)fedora:rawhide: clang version 13.0.0 (Fedora 13.0.0-5.fc36)opensuse/leap:15.2: clang version 9.0.1opensuse/leap:latest: clang version 11.0.1opensuse/tumbleweed:latest: clang version 13.0.0ubuntu:bionic: clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)ubuntu:latest: clang version 10.0.0-4ubuntu1ubuntu:hirsute: Ubuntu clang version 12.0.0-3ubuntu1~21.04.2ubuntu:rolling: Ubuntu clang version 13.0.0-2ubuntu:devel: Ubuntu clang version 13.0.0-9In every case, the distribution's version of clang is either older thanthe current minimum supported version of LLVM 10.0.1 or equal to orgreater than the proposed 11.0.0 so nothing should change.Another benefit of this change is LLVM=1 works better with arm64 andx86_64 since commit f12b034afeb3 ("scripts/Makefile.clang: default toLLVM_IAS=1") enabled the integrated assembler by default, which onlyworks well with clang 11+ (clang-10 required it to be disabled tosuccessfully build a kernel).Link: https://github.com/ClangBuiltLinux/linux/issues/1293Link: https://github.com/ClangBuiltLinux/linux/issues/1506Link: https://github.com/ClangBuiltLinux/linux/issues/1511Link: https://github.com/llvm/llvm-project/commit/fa496ce3c6774097080c8a9cb808da56f383b938Link: https://groups.google.com/g/clang-built-linux/c/mPQb9_ZWW0s/m/W7o6S-QTBAAJLink: https://github.com/ClangBuiltLinux/misc-scriptsSigned-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Miguel Ojeda <ojeda@kernel.org>Reviewed-by: Mark Brown <broonie@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
gcc bug	 https://github.com/olafhering/valgrind/commit/383e463e1a0f3b6b1ba4783de4d490956b9ea7a7	Initial change for Bug 429952 didn't work well with older GCC. Use the __clang__ macro instead.
gcc bug	 https://github.com/kernc/xsuspender/commit/ee088d8b8eab2124b5af8528e8536747950e8188	BUG: Fix linking with GCC 10Fixes https://github.com/kernc/xsuspender/issues/18Thanks @volfyd
gcc bug	 https://github.com/PixelExperience-Devices/kernel_razer_sdm845/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/kpu/intgemm/commit/4b72854ddd9ed43e38468870a5f27e6c00f18d24	Bypass gcc 5.4.0 compiler bug
gcc bug	 https://github.com/Pierre2324/NGK_android_kernel_xiaomi_sdm845/commit/25cca5f6e824b7a968ff5352674ce378ad4a99bd	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/libffi/libffi/commit/2e90bb5577ea1fe3bc1716954e790999bc3549f7	Add gcc bug tests back
gcc bug	 https://github.com/DOITfit/kernel-raphael/commit/95b90fed473be62ba3e2210f51e535ed560cb178	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cd
gcc bug	 https://github.com/Lupin-CNC/cbang/commit/8cd51290d2f8ea1a0a4fec238e1eb2d35303462d	Work around possible gcc bug. Close #58
gcc bug	 https://github.com/ExyBrick/android_kernel_samsung_universal9810/commit/20797cb4a509c713f1704e6d73286fd01ef32826	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/AerialX/rawksd/commit/b2900e700ded5f8fb482a283d43ce920d5a650de	Fix bugs caught by gcc warnings
gcc bug	 https://github.com/PalladiumOS-Devices/kernel_xiaomi_sm6250/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/thekevinday/fll/commit/63c22e0e51759409b250d93f1fb5072c892ecc86	Bugfix: Incorrect code used in UTF8 character code for U+12C1.This bug was discovered due to a CLang warning that GCC did not identify.
gcc bug	 https://github.com/pakaoraki/android_kernel_samsung_universal9810/commit/6929e11467948dabbe499b59b14f6d3acb329949	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/SALMANKHANPM/karmil_xiaomi_whyred/commit/ff80f87ea16661ccaa4851e01cba7bde47a7acef	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4
gcc bug	 https://github.com/NetBSD/pkgsrc/commit/853503e5d95cffaf29b82c72466b420aa149faa8	nss: update to 3.77.Changes:   - Bug 1762244 - resolve mpitests build failure on Windows.   - Bug 1761779 - Fix link to TLS page on wireshark wiki   - Bug 1754890 - Add two D-TRUST 2020 root certificates.   - Bug 1751298 - Add Telia Root CA v2 root certificate.   - Bug 1751305 - Remove expired explicitly distrusted certificates from certdata.txt.   - Bug 1005084 - support specific RSA-PSS parameters in mozilla::pkix   - Bug 1753535 - Remove obsolete stateEnd check in SEC_ASN1DecoderUpdate.   - Bug 1756271 - Remove token member from NSSSlot struct.   - Bug 1602379 - Provide secure variants of mpp_pprime and mpp_make_prime.   - Bug 1757279 - Support UTF-8 library path in the module spec string.   - Bug 1396616 - Update nssUTF8_Length to RFC 3629 and fix buffer overrun.   - Bug 1760827 - Add a CI Target for gcc-11.   - Bug 1760828 - Change to makefiles for gcc-4.8.   - Bug 1741688 - Update googletest to 1.11.0   - Bug 1759525 - Add SetTls13GreaseEchSize to experimental API.   - Bug 1755264 - TLS 1.3 Illegal legacy_version handling/alerts.   - Bug 1755904 - Fix calculation of ECH HRR Transcript.   - Bug 1758741 - Allow ld path to be set as environment variable.   - Bug 1760653 - Ensure we don't read uninitialized memory in ssl gtests.   - Bug 1758478 - Fix DataBuffer Move Assignment.   - Bug 1552254 - internal_error alert on Certificate Request with sha1+ecdsa in TLS 1.3   - Bug 1755092 - rework signature verification in mozilla::pkix
gcc bug	 https://github.com/ArrowOS-Devices/android_kernel_xiaomi_raphael/commit/d9ba1e2d272742e9a5859741dcee210975b1304d	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Panchajanya1999 <panchajanya@azure-dev.live>
gcc bug	 https://github.com/NusantaraROM-Devices/kernel_xiaomi_sdm439/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/feelpp/feelpp/commit/0ef7cc30f4d443db71a166f4d594b14f5574fcd2	fix compilation with gcc (seems a bug with gcc <=11 )
gcc bug	 https://github.com/npv12/kernel_oneplus_sm8150/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/NganuCoeg/kernel_realme_trinket/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/jcmdln/emacs/commit/6e52becfbe2a33c025b8c4838b3c8f06ba5a6fb8	Fix test lisp/cedet/semantic/bovine/gcc-tests on macOS (Bug#52431)* test/lisp/cedet/semantic/bovine/gcc-tests.el(semantic-gcc-test-output-parser-this-machine): Also detect Appleclang on macOS Monterey.
gcc bug	 https://github.com/NFS-projects/kernel_xiaomi_rosy/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/HyperTeam/android_kernel_realme_sm8150/commit/73bd0a29c2aea70141d7a0a10f22815ea1ebc813	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/miraclestars/android_kernel_samsung_sm8250/commit/5d0c056554085e3e317951543edcc628e2463821	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/gnu-mirror-unofficial/emacs/commit/6e52becfbe2a33c025b8c4838b3c8f06ba5a6fb8	Fix test lisp/cedet/semantic/bovine/gcc-tests on macOS (Bug#52431)* test/lisp/cedet/semantic/bovine/gcc-tests.el(semantic-gcc-test-output-parser-this-machine): Also detect Appleclang on macOS Monterey.
gcc bug	 https://github.com/ali-fareed/webrtc/commit/d71e5918945bfe3d13f77fc6cc196b9ee2113d11	Delete a gcc workaround in rtc::FinalRefCountedObjectwith bot using old version of gcc removed, this workaround is not needed.Bug: webrtc:12481Change-Id: Ib1bfb6260c7ff5688c39fa05e8a62225700b9f27Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/213187Reviewed-by: Mirko Bonadei <mbonadei@webrtc.org>Commit-Queue: Danil Chapovalov <danilchap@webrtc.org>Cr-Commit-Position: refs/heads/master@{#33592}
gcc bug	 https://github.com/Miku-UI-Devices/Miku_kernel_xiaomi_violet/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/bsdjhb/gdb/commit/6179e5f1d8d54e10a128e4de9c96ecda79e788bf	[gdb/testsuite] Fix timeout in gdb.mi/user-selected-context-sync.exp with gcc-11When running test-case gdb.mi/user-selected-context-sync.exp with gcc-11, weget:...continue^MContinuing.^MFAIL: gdb.mi/user-selected-context-sync.exp: mode=all-stop: test_setup: \  inferior 1: continue to breakpoint: continue thread 1.2 to infinite \  loop breakpoint (timeout)...This is a regression since commit aa33ea68330 "testsuite, mi: avoid a clangbug in 'user-selected-context-sync.exp'", which fixes a similar hang whenusing clang.The source before the commit contains:...  while (1);...and after the commit:...  int spin = 1;  while (spin);...[ FWIW, I've filed a PR gcc/101011 - Inconsistent debug info for "while (1);"to mention that gcc-11 has different behaviour for these two loops. ]The problem is that:- the test-case expects the behaviour that a breakpoint set  on the while line will trigger on every iteration, and- that is not guaranteed by either version of the loop.Fix this by using a while loop with a dummy body:...  volatile int dummy = 0;  while (1)    dummy = !dummy;...and setting the breakpoint in the body.Tested on x86_64-linux with clang 10.0.1, gcc-4.8, gcc 7.5.0 and gcc 11.1.1.gdb/testsuite/ChangeLog:2021-06-10  Tom de Vries  <tdevries@suse.de>
gcc bug	 https://github.com/jonmason/ntb/commit/d5962fb7d69073bf68fb647531cfd4f0adf84be3	perf annotate: Avoid TUI crash when navigating in the annotation of recursive functionsIn 'perf report', entering a recursive function from inside of itself(either directly of indirectly through some other function) results incalling symbol__annotate2 multiple() times, and freeing the wholedisassembly when exiting from the innermost instance.The first issue causes the function's disassembly to be duplicated, andthe latter a heap use-after-free (and crash) when trying to access thedisassembly again.I reproduced the bug on perf 5.11.22 (Ubuntu 20.04.3 LTS) and 5.16.rc8with the following testcase (compile with gcc recursive.c -o recursive).To reproduce:- perf record ./recursive- perf report- enter fibonacci and annotate it- move the cursor on one of the "callq fibonacci" instructions and press enter  - at this point there will be two copies of the function in the disassembly- go back by pressing q, and perf will crash  #include <stdio.h>  int fibonacci(int n)  {      if(n <= 2) return 1;      return fibonacci(n-1) + fibonacci(n-2);  }  int main()  {      printf("%d\n", fibonacci(40));  }This patch addresses the issue by annotating a function and freeing theassociated memory on exit only if no annotation is already present, sothat a recursive function is only annotated on entry.Signed-off-by: Dario Petrillo <dario.pk1@gmail.com>Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>Cc: Jiri Olsa <jolsa@redhat.com>Cc: Mark Rutland <mark.rutland@arm.com>Cc: Namhyung Kim <namhyung@kernel.org>Cc: Peter Zijlstra <peterz@infradead.org>Cc: stable@kernel.orgLink: http://lore.kernel.org/lkml/20220109234441.325106-1-dario.pk1@gmail.comSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
gcc bug	 https://github.com/GEOSX/LvArray/commit/87039a4a1e1213d95455c539b97b8f7c3fb5dd7b	Fix an indexing bug caught by gcc-10
gcc bug	 https://github.com/microsoft/WSL2-Linux-Kernel/commit/b4c9b6afa3a737b5d02828d1f7183ebde282907c	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/janvrany/binutils-gdb/commit/6179e5f1d8d54e10a128e4de9c96ecda79e788bf	[gdb/testsuite] Fix timeout in gdb.mi/user-selected-context-sync.exp with gcc-11When running test-case gdb.mi/user-selected-context-sync.exp with gcc-11, weget:...continue^MContinuing.^MFAIL: gdb.mi/user-selected-context-sync.exp: mode=all-stop: test_setup: \  inferior 1: continue to breakpoint: continue thread 1.2 to infinite \  loop breakpoint (timeout)...This is a regression since commit aa33ea68330 "testsuite, mi: avoid a clangbug in 'user-selected-context-sync.exp'", which fixes a similar hang whenusing clang.The source before the commit contains:...  while (1);...and after the commit:...  int spin = 1;  while (spin);...[ FWIW, I've filed a PR gcc/101011 - Inconsistent debug info for "while (1);"to mention that gcc-11 has different behaviour for these two loops. ]The problem is that:- the test-case expects the behaviour that a breakpoint set  on the while line will trigger on every iteration, and- that is not guaranteed by either version of the loop.Fix this by using a while loop with a dummy body:...  volatile int dummy = 0;  while (1)    dummy = !dummy;...and setting the breakpoint in the body.Tested on x86_64-linux with clang 10.0.1, gcc-4.8, gcc 7.5.0 and gcc 11.1.1.gdb/testsuite/ChangeLog:2021-06-10  Tom de Vries  <tdevries@suse.de>
gcc bug	 https://github.com/petermilne/acq400_buildroot/commit/4c9c02471a92161d3c324f37bb8843e4cb2178c9	package/gcc: bump to gcc 10.2Remove upstream patch backported to gcc 10.2:https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e86ae54172bb982e3c9d5aa62d20be5b72fe0f24"GCC 10.2 is a bug-fix release from the GCC 10 branchcontaining important fixes for regressions and serious bugs inGCC 10.1 with more than 94 bugs fixed since the previous release."https://gcc.gnu.org/pipermail/gcc-announce/2020/000164.htmlSigned-off-by: Romain Naour <romain.naour@gmail.com>Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
gcc bug	 https://github.com/hnhxk2983/buildroot/commit/4c9c02471a92161d3c324f37bb8843e4cb2178c9	package/gcc: bump to gcc 10.2Remove upstream patch backported to gcc 10.2:https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e86ae54172bb982e3c9d5aa62d20be5b72fe0f24"GCC 10.2 is a bug-fix release from the GCC 10 branchcontaining important fixes for regressions and serious bugs inGCC 10.1 with more than 94 bugs fixed since the previous release."https://gcc.gnu.org/pipermail/gcc-announce/2020/000164.htmlSigned-off-by: Romain Naour <romain.naour@gmail.com>Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
gcc bug	 https://github.com/Arieffst/phoenix-kernel-lavender/commit/ced9635ae4824ae67f75825df9e532cb7aadb6b1	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: sohamxda7 <sensoham135@gmail.com>
gcc bug	 https://github.com/mcdachpappe/android_kernel_oneplus_sdm845/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Luquidtester/kernel_xiaomi_selene_keongbalap/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/LineageOS/android_kernel_xiaomi_onclite/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/kotatogram/kotatogram-desktop/commit/4c2fc600a0ff35922d30f8961cd18ab539cae16c	Workaround gcc bug in other places too
gcc bug	 https://github.com/bluescan/tacent/commit/6c560c066897c3205df6e3fbcc10af0dcb2e0855	Fix gcc build. There's definitely a bug with how gcc handles templates because this change should not have been necessary.
gcc bug	 https://github.com/KudProject/kernel_msm-4.9/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/kerolosel3w/Iron-Kernel-Personal/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/dart-lang/sdk/commit/b514b74dee88b84b9e2bd82442d80009fb14e1c7	[format] Remove multiline comment that gcc errors on.TEST=comment only changeBug: https://github.com/dart-lang/sdk/issues/48855Change-Id: I39ea0593d2e660803b2e6520f51c2a1c9aaaaec7Reviewed-on: https://dart-review.googlesource.com/c/sdk/+/241967Auto-Submit: Clement Skau <cskau@google.com>Reviewed-by: Slava Egorov <vegorov@google.com>Reviewed-by: Ryan Macnak <rmacnak@google.com>Commit-Queue: Ryan Macnak <rmacnak@google.com>
gcc bug	 https://github.com/ekkusa/asumi_sony_sdm845/commit/da3c556a4709712ee5dee1bc4dc80f2b9103f087	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/abftech/cobalt/commit/1191f04c1496d0ae5f7db75c88f0ede69838d8a1	GCC Changes and bug fixes
gcc bug	 https://github.com/abftech/cobalt/commit/d38732f44ce705edf9767963a6c70abdf2d692dd	GCC Changes and bug fixes
gcc bug	 https://github.com/karthik558/MsM-4.14-RyZeN-/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/sequencer/rocket-doc/commit/8a1866d8414089551e8972d49314835f16b32e25	nix: Use bare clang instead of cross clang wrapperon darwin, cross clang wrapper wont compile (gcc bug)
gcc bug	 https://github.com/pranaya2005-workspace/kernel_realme_mt6785/commit/8a0e924a48163cd9d6b87427c1d0bdba5a5ac59f	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/zufuliu/notepad2/commit/e93997553a6127900d17bca18d3aa0d3d1524a91	[Clang & GCC] build with `-Wundef` to avoid potential bugs caused by undefined macro(which evaluated to zero), see https://bugs.python.org/issue46670.
gcc bug	 https://github.com/kalkioss/kernel_xiaomi_juice/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/clarencelol/kernel_xiaomi_sdm660-4.19/commit/107707a27cddcc5209ce0aca5ebb75cbbd0e0b81	kbuild: Only add -fno-var-tracking-assignments for old GCC versionsSome old GCC versions between 4.5.0 and 4.9.1 might miscompile codewith -fvar-tracking-assingments (which is enabled by default with -g -O2).Commit 2062afb ("Fix gcc-4.9.0 miscompilation of load_balance()in scheduler") added -fno-var-tracking-assignments unconditionally towork around this. But newer versions of GCC no longer have this bug, soonly add it for versions of GCC before 5.0. This allows various toolssuch as a perf probe or gdb debuggers or systemtap to resolve variablelocations using dwarf locations in more code.Signed-off-by: Mark Wielaard <mark@klomp.org>Acked-by: Ian Rogers <irogers@google.com>Reviewed-by: Andi Kleen <andi@firstfloor.org>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>Signed-off-by: Adam W. Willis <return.of.octobot@gmail.com>Signed-off-by: UtsavBalar1231 <utsavbalar1231@gmail.com>Signed-off-by: clarencelol <clarencekuiek@icloud.com>
gcc bug	 https://github.com/jomadeto/android_kernel_xiaomi_mido/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/jacksproject/android_kernel_xiaomi_onclite/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Inkypen79/kernel_xiaomi_andromeda/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Havoc-Devices/android_kernel_xiaomi_andromeda/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/linux-mailinglist-archives/linuxppc-dev.lists.ozlabs.org.0/commit/26e1d2f09bd4ba6fc728567d3aad863b9993aec5	[Bug 215217] Kernel fails to boot at an early stage when built with GCC_PLUGIN_LATENT_ENTROPY=y (PowerMac G4 3,6)
gcc bug	 https://github.com/OctaviOS-Devices/kernel_xiaomi_tucana/commit/820edc54806eed46d3fb3c4d778295a10add3918	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/GrettoRosella/kernel_xiaomi_alioth/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/gnu-mirror-unofficial/groff/commit/363fc31eebf42a61f6eeddb423492321d0f70544	[refer]: Quieten compiler warning.* src/preproc/refer/label.ypp: Drop redundant declaration of `yyparse`.  Both byacc 20140715 and GNU Bison 3.3.2 supply the the function  prototype themselves.  Addresses "-Wredundant-decls" warning from GCC.Fixes <https://savannah.gnu.org/bugs/?43569>.Also update editor aid comments; drop old-style Emacs file-localvariable setting.
gcc bug	 https://github.com/greenforce-project/kernel_xiaomi_citrus_sm6115/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/greearb/linux-ct-5.16/commit/edc4c8f18592451b97cc55e99010ef0d6a6b80a4	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/geekmaster21/a12a71/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/degawong/workflow/commit/86bae921e60ec995b19ee03271d9b33de1e6648e	[bug] rename g++ to gcc.
gcc bug	 https://github.com/JackieZN/SIMD_x86/commit/def8cd3812680fa2f4514453ea02e6d55037eb70	*fix bug: Compiler error in file SimdAvx512bwResizer.cpp (GCC 5.4.0) (part 2).
gcc bug	 https://github.com/DerpFest-Devices/kernel_xiaomi_vayu/commit/92583d15376c4dcc25ca555925fd8eb78dfe8aee	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: Nauval Rizky <enuma.alrizky@gmail.com>
gcc bug	 https://github.com/JackieZN/SIMD_x86/commit/8f405e19e56a8e55613de8438e1aaa22fc0cb72d	*fix bug: Compiler error in file SimdAvx512bwResizer.cpp (GCC 5.4.0).
gcc bug	 https://github.com/benoit-dubreuil/template-repo-cpp-ecosystem/commit/97402da8062644f0b3637c7fac7f80a74d64b39c	Merge pull request #99 from benoit-dubreuil/bug/#98/missing-machine-conf-files-for-gcc-and-clangBug/#98/missing machine conf files for gcc and clang
gcc bug	 https://github.com/freak07/Kirisakura_SAKE_Zenfone_8/commit/7e94539448ed6ea8b7d257a3b2f0933da30d82db	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/ShiftMediaProject/libgcrypt/commit/a44301f6d2051b6b4e20b4459f41aa2b95f8b2b7	jitterentropy: use wipememory for jent_memset_secure* random/jitterentropy-base-user.h (jent_memset_secure): Use wipememory.--Patch removes GCC inline assembly dependency on compiler barrier byinstead using wipememory for clearing memory.GnuPG-bug-id: 5523Signed-off-by: Jussi Kivilinna <jussi.kivilinna@iki.fi>
gcc bug	 https://github.com/rtx4d/android_kernel_oneplus_sm8350/commit/4ad96ea6876dabe3d468bb3bbc84e0e80969cffb	drivers: clk: Specify sync probe for gcc-lahainaBug: 115776306Bug: 77146523Signed-off-by: Miguel de Dios <migueldedios@google.com>Change-Id: I6c9e74fa5ee738581e84c7116333563af0206e31
gcc bug	 https://github.com/drjohnnyfever1/freebsd-ports-mod/commit/19dfb88623ab11b2d1d08fcf54e92f5eb6183aa2	lang/gcc9: Update to the GCC 9.4 releaseThis fixes more than 190 bugs compared to GCC 9.3.files/patch-gcc_dumpfile.c has made it upstream in the meantime, soremove it on our end.
gcc bug	 https://github.com/ferruhy/dpdk/commit/16b809d144dc2df7f31695b5abc64a809021b154	net/ice/base: fix strict-aliasing with GCCCode changes done for build issue as reported in Bug 817error: dereferencing type-punned pointer will break strict-aliasing rules.added union to avoid pointer dereferencingThe build issue has been reported with both gcc 4.8.5 (RHEL 7) andgcc 5.4.0 (Ubuntu 16.04).Bugzilla ID: 817Fixes: 39925373a333 ("net/ice/base: add parser execution main loop")Signed-off-by: Aman Deep Singh <aman.deep.singh@intel.com>Tested-by: David Marchand <david.marchand@redhat.com>Acked-by: Ferruh Yigit <ferruh.yigit@intel.com>
gcc bug	 https://github.com/agtonomy/eigen/commit/6035da5283f12f7e6a49cda0c21696c8e5a115b7	Fix compile issues for gcc 4.8.- Move constructors can only be defaulted as NOEXCEPT if all membershave NOEXCEPT move constructors.- gcc 4.8 has some funny parsing bug in `a < b->c`, thinking `b-` is a template parameter.
gcc bug	 https://github.com/johnmart19/Linux-kernel/commit/2a24d80fc86bcd70c8e780078254e873ea217379	powerpc/asm: Remove UPD_CONSTR after GCC 4.9 removalUPD_CONSTR was previously a preprocessor define for an old GCC 4.9inline asm bug with m<> constraints.Fixes: 6563139d90ad ("powerpc: remove GCC version check for UPD_CONSTR")Suggested-by: Nathan Chancellor <nathan@kernel.org>Suggested-by: Christophe Leroy <christophe.leroy@csgroup.eu>Suggested-by: Michael Ellerman <mpe@ellerman.id.au>Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://lore.kernel.org/r/20210914161712.2463458-1-ndesaulniers@google.com
gcc bug	 https://github.com/heeler/eigen/commit/6035da5283f12f7e6a49cda0c21696c8e5a115b7	Fix compile issues for gcc 4.8.- Move constructors can only be defaulted as NOEXCEPT if all membershave NOEXCEPT move constructors.- gcc 4.8 has some funny parsing bug in `a < b->c`, thinking `b-` is a template parameter.
gcc bug	 https://github.com/Ferroin/linux/commit/c894d2f9fd536c4dfc750cd1fe9c6bcd42a422dc	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/ShiftMediaProject/libgcrypt/commit/45974d87753978b953940045280e9f28f951dbe0	fips: Add constructor to run selftests.* src/fips.c (_gcry_fips_to_activate): New.* src/g10lib.h (_gcry_fips_to_activate): New.* src/global.c [ENABLE_HMAC_BINARY_CHECK] (_gcry_global_constructor):New.--Note: constructor is non-portable feature of GCC.  This behaviorof running selftests just after the load of the library isspecific to the build with ENABLE_HMAC_BINARY_CHECK.GnuPG-bug-id: 5636Signed-off-by: NIIBE Yutaka <gniibe@fsij.org>
gcc bug	 https://github.com/werckme/soundfont-server/commit/4d329dd17e38ffc825a178b97f79a15b1efabbce	gcc build bug fixed
gcc bug	 https://github.com/Farizmaul/Android_kernel_xiaomi_aliothinn/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/BenLangmead/bowtie2/commit/6baa54881c8a637f258c8b7032705da2f2caee9a	Use clang instead of GCC for ppc64le due to compiler bug -- https://github.com/simd-everywhere/simde/issues/535#
gcc bug	 https://github.com/anOrdinarySebastian/Prusa-Firmware-w-chamber/commit/53fcd6fc8f8d9545e6d069e457b70a6a059dae49	Work-around GCC LTO codegen bug in process_commands()When building with GCC 4.9.2 (bundled with PF-build-env-1.0.6.*), -Osand LTO enabled, PID_autotune gets automatically inlined intoprocess_commands().Sadly, due to the massive size of process_commands(), it results incodegen bug doing a partial stack overwrite in process_commands()itself, manifesting as random behavior depending on the timing ofinterrupts and the codepath taken inside the merged function.Mark the function as noinline and add a note about the affected compilerversion in order to be checked again in the future.
gcc bug	 https://github.com/fajar3109/gabutsih/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/zynaddsubfx/zynaddsubfx/commit/47eeb36f37eb3598a277b036ec6b0790a262f13b	Disable gcc optimizations for a specific functionDue to a gcc opt bug a piece of code was put in a separate function toprevent gcc from optimizing it. Later versions of gcc inlined thefunction and the bug reappeared. So now we explicitly tell gcc to notoptimize it.
gcc bug	 https://github.com/hamzaag49/kernel_xiaomi_sm8250/commit/32103fc2cfc4c86a12fb6567d5be2c347bb53dba	ARM: dts: msm: lito: Make sure GPU CX GDSC is on till gcc/gpucc probesThe gcc/gpucc clocks that are left on at boot need GPU CX GDSC to be on towork correctly. So add a proxy consumer for GPU CX GDSC and keep it ontill gcc/gpucc probes.Test: build, boot, all devices still probeBug: 145243279Change-Id: I682d2598b2272ffacca6c39d7d1f2c2700a772e1Signed-off-by: Hridya Valsaraju <hridya@google.com>Signed-off-by: Carlos Ayrton Lopez Arroyo <15030201@itcelaya.edu.mx>
gcc bug	 https://github.com/ayatakesi/emacs-mirror/commit/2337869fbf8b967eb53ee57f978f3751987e43dc	Pacify gcc 11.1.1 -Wanalyzer-null-argument* lib-src/etags.c (regexp): Omit member force_explicit_name,since it闁炽儲鐛?always true.  All uses removed.  This lets usremove calls to strlen (name) where GCC isn闁炽儲鐛?smart enoughto deduce that name must be nonnull.* lib-src/movemail.c (main): Fix bug that could causelink (tempname, NULL) to be called.* src/emacs.c (argmatch): Break check into two 闁炽儲f闁炽儲鐛?since GCC doesn闁炽儲鐛?seem to be smart enough to check the single 闁炽儲f闁?* src/gtkutil.c (xg_update_menu_item): Fix bug where strcmpcould be given a NULL arg.* src/xfont.c (xfont_list_family): Use nonnull value for dummyinitial value.
gcc bug	 https://github.com/googleprodkernel/linux-platforms/commit/3ad7befd4842afa2449026715987122a1c6dcb85	Merge tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linuxPull more clk updates from Stephen Boyd: "This is the second batch of clk driver updates that needed a little  more time to soak in linux-next.   - Use modern i2c probe in vc5   - Cleanup some includes   - Update links to datasheets   - Add UniPhier NX1 SoC clk support   - Fix DT bindings for SiFive FU740   - Revert the module platform driver support for Rockchip because it     wasn't actually tested   - Fix the composite clk code again as the previous fix had a one line     bug that broke rate changes for clks that want to use the same     parent still   - Use the right table for a divider in ast2600 driver   - Get rid of gcc_aggre1_pnoc_ahb_clk in qcom clk driver again because     its critical but unused"* tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux:  clk: qcom: gcc-msm8996: Drop (again) gcc_aggre1_pnoc_ahb_clk  clk: imx8m: Do not set IMX_COMPOSITE_CORE for non-regular composites  clk/ast2600: Fix soc revision for AHB  clk: composite: Fix 'switching' to same clock  clk: rockchip: drop module parts from rk3399 and rk3568 drivers  Revert "clk: rockchip: use module_platform_driver_probe"  clk:mediatek: remove duplicate include in clk-mt8195-imp_iic_wrap.c  dt-bindings: clock: fu740-prci: add reset-cells  clk: uniphier: Add SoC-glue clock source selector support for Pro4  dt-bindings: clock: uniphier: Add clock binding for SoC-glue  clk: uniphier: Add NX1 clock support  dt-bindings: clock: uniphier: Add NX1 clock binding  clk: uniphier: Add audio system and video input clock control for PXs3  clk: si5351: Update datasheet references  clk: vc5: Use i2c .probe_new  clk/actions/owl-factor.c: remove superfluous headers  clk: ingenic: Fix bugs with divided dividers
gcc bug	 https://github.com/nine7nine/linux-cachy-nspa/commit/3ad7befd4842afa2449026715987122a1c6dcb85	Merge tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linuxPull more clk updates from Stephen Boyd: "This is the second batch of clk driver updates that needed a little  more time to soak in linux-next.   - Use modern i2c probe in vc5   - Cleanup some includes   - Update links to datasheets   - Add UniPhier NX1 SoC clk support   - Fix DT bindings for SiFive FU740   - Revert the module platform driver support for Rockchip because it     wasn't actually tested   - Fix the composite clk code again as the previous fix had a one line     bug that broke rate changes for clks that want to use the same     parent still   - Use the right table for a divider in ast2600 driver   - Get rid of gcc_aggre1_pnoc_ahb_clk in qcom clk driver again because     its critical but unused"* tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux:  clk: qcom: gcc-msm8996: Drop (again) gcc_aggre1_pnoc_ahb_clk  clk: imx8m: Do not set IMX_COMPOSITE_CORE for non-regular composites  clk/ast2600: Fix soc revision for AHB  clk: composite: Fix 'switching' to same clock  clk: rockchip: drop module parts from rk3399 and rk3568 drivers  Revert "clk: rockchip: use module_platform_driver_probe"  clk:mediatek: remove duplicate include in clk-mt8195-imp_iic_wrap.c  dt-bindings: clock: fu740-prci: add reset-cells  clk: uniphier: Add SoC-glue clock source selector support for Pro4  dt-bindings: clock: uniphier: Add clock binding for SoC-glue  clk: uniphier: Add NX1 clock support  dt-bindings: clock: uniphier: Add NX1 clock binding  clk: uniphier: Add audio system and video input clock control for PXs3  clk: si5351: Update datasheet references  clk: vc5: Use i2c .probe_new  clk/actions/owl-factor.c: remove superfluous headers  clk: ingenic: Fix bugs with divided dividers
gcc bug	 https://github.com/Fagyi/kernel_xiaomi_cepheus/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Jabiyeff-Project/kernel-santoni/commit/f160e1e46466fb514bef7c1c400ff3b27a0ed1cf	Revert "lz4: fix bogus gcc warning"This reverts commit 529ada21ff9e37a14fd02ab1fb9d58d71d7a0d9e.In order to directly merge new LZ4 module from upstreamrevert the commit to solve the conflict.Bug: 111209481Change-Id: I19c3310f1941114b159f4b79766022104729fcfeSigned-off-by: Martin Liu <liumartin@google.com>
gcc bug	 https://github.com/Be-Secure/meta-agl-demo/commit/ec2e3fcf570a4bafec3c41cb0f58ce8393aceaa4	libmp4v2: add gcc 10 compatibility patchAdd patch to fix gcc 10 compilation issues in libmp4v2.Bug-AGL: SPEC-3819Signed-off-by: Scott Murray <scott.murray@konsulko.com>Change-Id: I94f8cbd4e1eef3ca86255540e9a0b52d5869a20e
gcc bug	 https://github.com/Evolution-X-Devices/kernel_xiaomi_raphael/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Spark-Devices/android_kernel_xiaomi_phoenix/commit/11487021d37f28c1dfc22860b826d43d4a060c0f	ARM: 9156/1: drop cc-option fallbacks for architecture selectioncommit 418ace9992a7647c446ed3186df40cf165b67298 upstream.Naresh and Antonio ran into a build failure with latest Debianarmhf compilers, with lots of output like tmp/ccY3nOAs.s:2215: Error: selected processor does not support `cpsid i' in ARM modeAs it turns out, $(cc-option) fails early here when the FPU is notselected before CPU architecture is selected, as the compileroption check runs before enabling -msoft-float, which causesa problem when testing a target architecture level without an FPU:cc1: error: '-mfloat-abi=hard': selected architecture lacks an FPUPassing e.g. -march=armv6k+fp in place of -march=armv6k would avoid thisissue, but the fallback logic is already broken because all supportedcompilers (gcc-5 and higher) are much more recent than these options,and building with -march=armv5t as a fallback no longer works.The best way forward that I see is to just remove all the checks, whichalso has the nice side-effect of slightly improving the startup time for'make'.The -mtune=marvell-f option was apparently never supported by any mainlinecompiler, and the custom Codesourcery gcc build that did support isnow too old to build kernels, so just use -mtune=xscale unconditionallyfor those.This should be safe to apply on all stable kernels, and will be requiredin order to keep building them with gcc-11 and higher.Link: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=996419Reported-by: Antonio Terceiro <antonio.terceiro@linaro.org>Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>Reported-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>Tested-by: Sebastian Reichel <sebastian.reichel@collabora.com>Tested-by: Klaus Kudielka <klaus.kudielka@gmail.com>Cc: Matthias Klose <doko@debian.org>Cc: stable@vger.kernel.orgSigned-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/GEOSX/GEOSX/commit/351aa11ae4f3fcdcb4364d61a390af2ffe00954a	Adding features for Wellbore meshing (#1424)* added option to specify inner radius of cartesian mapping* fix error in silo output* modifications to wellbore parallel mesh gen + addNeighbor changes to allow ranks to be mutual periodic neighbors (doubly-neighbored)* add hard coded coordinatese in the radial direction* bugfix for integer overflow with hypre int* fixes for mgr on gpu* - Add additional instrumentation for using MGR (make restrictor, compute Auu)- Update hypre linear algebra interface to the latest hypre/mgr- Update MGR recipes for GPU* modified LAIHelperFunctions::separateComponentFilter to batch insert rows. Introduced MatrixBase::separateComponentFilter as a specialized filter, implemented HypreMatrix::separateComponentFilter.* some cleanup for HypreMatrix::separateComponentFilterCo-authored-by: Sy-Tuan Nguyen <45685596+sytuannguyen@users.noreply.github.com>* implement single read variant of HypreMatrix::separateComponentFilter* Use full matrix instead of SDC approximation for mechanics in hydrofrac solver.Fix bug in setting options for mechanics block solver.* Changes to run on Summit. (#1546)Co-authored-by: Randolph R. Settgast <settgast1@llnl.gov>* fix bug from summit update* fix bug in SinglePhasePoromechanicsSolver::implicitStepComplete* resolve host-device ghost index array inconsistency* added annulus option to cylinder geometry. added error check for aperature table* Changes for new compilers on summit/lassen (#1611)* Updated hypre.* Force uberenv to use python3.* Added CUDA 11.0.3 on Summit.* Added GCC 9.1.0 to Summit* Added GCC 9.1.0 to Summit* Changes to work with GCC 9.1.0 on Summit.Co-authored-by: Benjamin Curtice Corbett <corbett5@llnl.gov>* Updating function parCSRtoIJ required by latest hypre versionCo-authored-by: wrtobin <tobin6@llnl.gov>Co-authored-by: Quan Bui <mquan.bui@gmail.com>Co-authored-by: Sy-Tuan Nguyen <45685596+sytuannguyen@users.noreply.github.com>Co-authored-by: Ben Corbett <32752943+corbett5@users.noreply.github.com>Co-authored-by: Benjamin Curtice Corbett <corbett5@llnl.gov>Co-authored-by: Nicola Castelletto <castelletto1@llnl.gov>
gcc bug	 https://github.com/apexrtos/apex/commit/719c3a926671af11835d7f10fb858ffa24b3a901	kmem: mark malloc as usedFor some reason gcc fails to link the call to malloc() from strdup()unless malloc() is marked with attribute used.clang doesn't have a problem with it. gcc bug?
gcc bug	 https://github.com/elpaablo/kernel_xiaomi_grus/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/legionos-devices/kernel_xiaomi_phoenix/commit/bc8f794006ac2fcbf0345e00b8cdd9a7a7b08cfc	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/nlamprian/gazebo_video_monitors/commit/294f053dacf5372716cbdd93db7345f77292d9f5	Address gcc lambda bug
gcc bug	 https://github.com/ekkusa/asumi_sony_sdm845/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/dotOS-Devices/android_kernel_xiaomi_dipper/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/lyrahgames/gnuplot/commit/294e6f420a45b8f91c0f09b00d64b50cffb3dbea	Add newline at end of file to fix GCC 11 bug
gcc bug	 https://github.com/yzgyyang/freebsd-ports/commit/19dfb88623ab11b2d1d08fcf54e92f5eb6183aa2	lang/gcc9: Update to the GCC 9.4 releaseThis fixes more than 190 bugs compared to GCC 9.3.files/patch-gcc_dumpfile.c has made it upstream in the meantime, soremove it on our end.
gcc bug	 https://github.com/dosbox-staging/dosbox-staging/commit/c7eb40d78a0cde0f16617d49803ac971bc342374	Workaround bug introduced in the ncurses MSYS2 packagesRevert-when-fixed.Flagged by @shermp in https://github.com/msys2/MINGW-packages/issues/10312Causes link errors, as follows:C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\msys64\tmp\ccCrSAYo.o:ncurses.c:(.text+0x10): undefined reference to `__imp_initscr'C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\msys64\tmp\ccCrSAYo.o:ncurses.c:(.text+0x23): undefined reference to `__imp_printw'C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\msys64\tmp\ccCrSAYo.o:ncurses.c:(.text+0x2c): undefined reference to `__imp_stdscr'C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\msys64\tmp\ccCrSAYo.o:ncurses.c:(.text+0x39): undefined reference to `__imp_wrefresh'C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\msys64\tmp\ccCrSAYo.o:ncurses.c:(.text+0x42): undefined reference to `__imp_stdscr'C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\msys64\tmp\ccCrSAYo.o:ncurses.c:(.text+0x4f): undefined reference to `__imp_wgetch'C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/11.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\msys64\tmp\ccCrSAYo.o:ncurses.c:(.text+0x58): undefined reference to `__imp_endwin'collect2.exe: error: ld returned 1 exit statusCo-authored-by: kcgen <1557255+kcgen@users.noreply.github.com>Co-authored-by: shermp <14854761+shermp@users.noreply.github.com>
gcc bug	 https://github.com/DerpFest-Devices/kernel_xiaomi_sm6150/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Dedrimer/android_kernel_xiaomi_sdm845/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/crdroidandroid/android_kernel_xiaomi_sm6150/commit/a6afd5fddc5d8042a0100c0c7fbbccd696f71c10	FROMLIST: [PATCH v5 03/12] arm: vdso: inline assembler operations to compiler.h(cherry picked from commit https://patchwork.kernel.org/patch/10044507/)Take an effort to recode the arm64 vdso code from assembler to Cpreviously submitted by Andrew Pinski <apinski@cavium.com>, reworkit for use in both arm and arm64, overlapping any optimizationsfor each architecture. But instead of landing it in arm64, land theresult into lib/vdso and unify both implementations to simplifyfuture maintenance.Move compiler-specific code to a local compiler.h file:- CONFIG_AEABI dependency check.- System call fallback functions standardized into a  DEFINE_FALLBACK macro.- Replace arch_counter_get_cntvct() with arch_vdso_read_counter.- Deal with architecture specific unresolved references emitted  by GCC.- Optimize handling of fallback calls in callers.- For time functions that always return success, do not waste time  checking return value for switch to fallback.- Optimize unlikely nullptr checking in __vdso_gettimeofday,  if tv null no need to proceed to fallback, as vdso is still  capable of filling in the tv values.Signed-off-by: Mark Salyzyn <salyzyn@android.com>Cc: James Morse <james.morse@arm.com>Cc: Russell King <linux@armlinux.org.uk>Cc: Catalin Marinas <catalin.marinas@arm.com>Cc: Will Deacon <will.deacon@arm.com>Cc: Andy Lutomirski <luto@amacapital.net>Cc: Dmitry Safonov <dsafonov@virtuozzo.com>Cc: John Stultz <john.stultz@linaro.org>Cc: Mark Rutland <mark.rutland@arm.com>Cc: Laura Abbott <labbott@redhat.com>Cc: Kees Cook <keescook@chromium.org>Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>Cc: Andy Gross <andy.gross@linaro.org>Cc: Kevin Brodsky <kevin.brodsky@arm.com>Cc: Andrew Pinski <apinski@cavium.com>Cc: Thomas Gleixner <tglx@linutronix.de>Cc: linux-kernel@vger.kernel.orgCc: linux-arm-kernel@lists.infradead.orgBug: 63737556Bug: 20045882Change-Id: I468e4c32b5136d199982bf25df8967321e384d90Signed-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/hiper25-OpenSource/kernel_oneplus_sm8250/commit/59100f7bab4944f2d343197afab7c1c420b57664	drivers: clk: Specify sync probe for gcc-konaBug: 115776306Bug: 77146523Signed-off-by: Miguel de Dios <migueldedios@google.com>Change-Id: I6c9e74fa5ee738581e84c7116333563af0206e31
gcc bug	 https://github.com/triSYCL/sycl/commit/e32e1dae61f20569fc16951b15ab9f63b9acfe08	[OpenMP][Tests] Fix test compatibilitygcc and clang disagree in how the event handle needs to be handled.According to OpenMP LC, gcc is right. Will open clang bug report
gcc bug	 https://github.com/DerpFest-12/kernel_oneplus_msm8998/commit/cf007aeb3ebc245387d1aa84d4a56dcbcd311f97	kernel/trace/bpf_trace.c: work around gcc-4.4.4 anon union initialization bugkernel/trace/bpf_trace.c: In function 'bpf_event_output':kernel/trace/bpf_trace.c:312: error: unknown field 'next' specified in initializerkernel/trace/bpf_trace.c:312: warning: missing braces around initializerkernel/trace/bpf_trace.c:312: warning: (near initialization for 'raw.frag.<anonymous>')Fixes: 555c8a8623a3a87 ("bpf: avoid stack copy and use skb ctx for event output")Acked-by: Daniel Borkmann <daniel@iogearbox.net>Cc: Alexei Starovoitov <ast@kernel.org>Cc: David S. Miller <davem@davemloft.net>Signed-off-by: Andrew Morton <akpm@linux-foundation.org>Acked-by: Alexei Starovoitov <ast@kernel.org>Signed-off-by: David S. Miller <davem@davemloft.net>Signed-off-by: Chatur27 <jasonbright2709@gmail.com>
gcc bug	 https://github.com/Cygnus-devices/kernel_xiaomi_beryllium/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/crdroidandroid/android_kernel_oneplus_sm8250/commit/1183ac3d572914e9eb8404780888c0a5179ee21d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/gentoo/gentoo/commit/187f062a6f1a768d0e33e0f10c63feb2e74d0b49	sys-devel/gcc: 10.3.0: cut 2 patchsetTwo new patches:+ 33_all_ctor-union-PR100489.patch: fix ICE on some c++ initializers+ 34_all_ICE-tsubst-PR100102.patch: fix ICE in c++ tempate substitutionBug: https://bugs.gentoo.org/788829Bug: https://gcc.gnu.org/PR100489Bug: https://bugs.gentoo.org/794775Bug: https://gcc.gnu.org/PR100102Package-Manager: Portage-3.0.19, Repoman-3.0.3Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
gcc bug	 https://github.com/linux-mailinglist-archives/linuxppc-dev.lists.ozlabs.org.0/commit/134c3a8eb420f9c3c880660902c6c63f328903c9	[Bug 215217] Kernel fails to boot at an early stage when built with GCC_PLUGIN_LATENT_ENTROPY=y (PowerMac G4 3,6)
gcc bug	 https://github.com/crdroidandroid/android_kernel_asus_sdm845/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/linux-mailinglist-archives/linuxppc-dev.lists.ozlabs.org.0/commit/36ecbe624ae4431a8f4f4c06bc5a79af64a06fec	[Bug 215217] Kernel fails to boot at an early stage when built with GCC_PLUGIN_LATENT_ENTROPY=y (PowerMac G4 3,6)
gcc bug	 https://github.com/Sleppyiecat/just_love_me/commit/e1180dd7e5677eca4077ec1d9f942a80e3e4c88b	drivers: clk: gcc-sm{6,7}150: Specify sync probe for gcc-sm{6,7}150Bug: 115776306Bug: 77146523Change-Id: Ie87e837dcb2e8737146ae775cffc86224a78d24eSigned-off-by: Miguel de Dios <migueldedios@google.com>
gcc bug	 https://github.com/scriptzteam/Tor-Browser-Build/commit/a730b8dd332eacbcdbadd41fccc0d081a8bcb0b8	Bug 40222: Bump GCC to 10.3.0 for Linux
gcc bug	 https://github.com/linux-mailinglist-archives/linuxppc-dev.lists.ozlabs.org.0/commit/2a31df182739526d11d8a80565b66ae42a05fdac	[Bug 215217] New: Kernel fails to boot at an early stage when built with GCC_PLUGIN_LATENT_ENTROPY=y (PowerMac G4 3,6)
gcc bug	 https://github.com/hexagon-geo-surv/poky/commit/80cd0b8a52b5681d1d85e72b9e713d5b3b764d27	gcc: Drop further unneeded precompiled header patchAccording to comments on the bug report from gcc developers, weno longer need to do this post gcc 10. Lets therefore drop the patch.(From OE-Core rev: 8ddc6f46d40cdcc462de23d1b1218f2ed9fd3d07)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc bug	 https://github.com/TheRealRobin/BlackJack/commit/e94c4166726279e8ebce15d29f70c53e8075e45e	refactored for compilation with gcc and vscode, some wierd bugs remain
gcc bug	 https://github.com/CODE-COSTARICA/android_kernel_xiaomi_sm8250/commit/49678489ffeecd55177f9fbabe536d16f2f1d390	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/CherishOS-Devices/kernel_xiaomi_santoni/commit/e148635ef9f5a0b301812b4dedfdeb157c59817d	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/BlissRoms-Devices/android_kernel_xiaomi_raphael/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/atndko/Neptune_kernel_sm8150_oneplus/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/atmark-techno/linux-5.10-at/commit/b4c9b6afa3a737b5d02828d1f7183ebde282907c	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/arter97/x86-kernel/commit/7e94539448ed6ea8b7d257a3b2f0933da30d82db	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/ArrowOS-Devices/android_kernel_xiaomi_sm6250/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/ArianK16a/android_kernel_qcom_sm8150/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Aquila-Lab/android_kernel_sm8150/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Anky-AD/awaken_kernel_xiaomi_phoenix/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/anirudhkosgi/android-kernel-xiaomi-laurel_sprout/commit/2a70d9a1b83a6df1828a7bfb54427470f2b2b8fe	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/intel/gvt-linux/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
gcc bug	 https://github.com/GNUWeeb/linux/commit/a55e65b80e318e8917faa781df9955549c6cdaff	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
gcc bug	 https://github.com/altera-opensource/linux-socfpga/commit/b4c9b6afa3a737b5d02828d1f7183ebde282907c	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/ALKALiKong-ROMProject/kernel_xiaomi_lisa/commit/7e94539448ed6ea8b7d257a3b2f0933da30d82db	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/TripleTrable/buildroot/commit/3245874961152628877d1fb8cd14406aa4c8bd6a	package/harfbuzz: work around arc gcc10 bugWith BR2_GCC_VERSION_ARC=y(arc gcc10) harfbuzz package exhibits a gcc bugthat makes build to fail. This bug is found only in official arc gcc10provided by Synopsis, so we can't use the BR2_TOOLCHAIN_HAS_GCC_BUG_approach since bug can't be even filed in gcc bugzilla.To work around this, if BR2_GCC_VERSION_ARC=y we force using -O0.Fixes:http://autobuild.buildroot.net/results/e4d/e4da9ba40c8f4567601d404e20dd6a0b322210c2/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/AICP/kernel_oneplus_sm8150/commit/7c08b460e8287aaabf2409895cc11bbd2914e304	powerpc/32: Fix boot failure with GCC latent entropy plugincommit bba496656a73fc1d1330b49c7f82843836e9feb1 upstream.Boot fails with GCC latent entropy plugin enabled.This is due to early boot functions trying to access 'latent_entropy'global data while the kernel is not relocated at its finaldestination yet.As there is no way to tell GCC to use PTRRELOC() to access it,disable latent entropy plugin in early_32.o and feature-fixups.o andcode-patching.oFixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.org # v4.9+Reported-by: Erhard Furtner <erhard_f@mailbox.org>Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://bugzilla.kernel.org/show_bug.cgi?id=215217Link: https://lore.kernel.org/r/2bac55483b8daf5b1caa163a45fa5f9cdbe18be4.1640178426.git.christophe.leroy@csgroup.euSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/percona/percona-server/commit/b3a9f571d3c0353560b9d16a4c805985a1d090c7	PS-7720: Fix CRC32 function selection in MyRocksSuppress the```\#error "AES/PCLMUL instructions not enabled"```bug in gcc-4.8.x or lower at https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56298
gcc bug	 https://github.com/crdroidandroid/android_kernel_xiaomi_vince/commit/559d556b58fc8eee97212f51abadf84b23ae8b2e	rcu: Fix uninitialized variable in nocb_gp_wait()[ Upstream commit b8889c9c89a2655a231dfed93cc9bdca0930ea67 ]We never set this to false.  This probably doesn't affect most people'sruntime because GCC will automatically initialize it to false at certaincommon optimization levels.  But that behavior is related to a bug inGCC and obviously should not be relied on.Fixes: 5d6742b37727 ("rcu/nocb: Use rcu_segcblist for no-CBs CPUs")Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>Signed-off-by: Paul E. McKenney <paulmck@kernel.org>Signed-off-by: Sasha Levin <sashal@kernel.org>Signed-off-by: DennySPB <dennyspb@gmail.com>Signed-off-by: Carlos Jimenez (JavaShin-X) <javashin1986@gmail.com>Signed-off-by: Dakkshesh <dakkshesh5@gmail.com>Signed-off-by: rk134 <rahul-k@bigdi.cc>
gcc bug	 https://github.com/sailfishos-mirror/qtbase/commit/81b9ee66b8e40ed145185fe46b7c91929688cafd	QLibrary: Suppress GCC 12 warning about dangling pointer accessIntroduced in commit d07742f333df89dc399fc5d9cabf2bdef0b346c5. Reportedby GCC 12:qlibrary.cpp:672:9: error: dangling pointer to 闁炽儲andidates闁?may be used [-Werror=dangling-pointer=]  672 |         if (isValidSuffix(*it++))      |         ^~qlibrary.cpp:634:29: note: 闁炽儲andidates闁?declared here  634 |         const QLatin1String candidates[] = {      |                             ^~~~~~~~~~This is a false positive report because the lambda does not return apointer or iterator. But it's a good update anyway to keep the arrayoutside the lambda, so it won't be recreated every time.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104492Pick-to: 6.3Change-Id: I74249c52dc02478ba93cfffd16d230abd1bf6166Reviewed-by: Marc Mutz <marc.mutz@qt.io>
gcc bug	 https://github.com/xdroid-devices/xd_kernel_xiaomi_dipper/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/wzwzx/kernel_xiaomi_mt6785/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Tomoms/android_kernel_essential_msm8998/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/thepsycopathlive/p/commit/a4250df12f44ec736c4e30ece86a63a2c379663b	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Spectrum-Kernel/kernel_xiaomi_sm6250/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Sleppyiecat/just_love_me/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/SakilMondal/kernul/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/redcliff-op/android_kernel_xiaomi_phoenix/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Ravi-Kishor/android_kernel_realme_RMX1821/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/PixelOS-Bluecross/kernel_google_crosshatch/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/rohankumardubey/deeplearning4j/commit/cdc35ac173a3d0fbf27c9a0eeffbb46938eaad04	C++ windows compilation fixes, onnx import updates, reshape bug fixes, training fixes, gcc mingw path fixes
gcc bug	 https://github.com/PixelExperience-Devices/kernel_xiaomi_pine/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/PixelExperience-Devices/kernel_xiaomi_davinci/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/PixelExperience-Devices/kernel_xiaomi_begonia/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Demon000/kernel_xiaomi_sm8350/commit/9468013c5abefc20dc92de8554105bdbb486f6e4	drivers: clk: Specify sync probe for gcc-lahainaBug: 115776306Bug: 77146523Signed-off-by: Miguel de Dios <migueldedios@google.com>Change-Id: I6c9e74fa5ee738581e84c7116333563af0206e31
gcc bug	 https://github.com/OpenNuvoton/NUC980-linux-4.4.y/commit/4918e5b0e9a508da868b2c8c938ed0d705528d2b	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Antonioya/blender/commit/6cd64f8caacc1a7c679d962a053f73263fc18c2c	Add workaround for gcc 11 compiler bugDifferential Revision: https://developer.blender.org/D11462
gcc bug	 https://github.com/noobbeast/begonia/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/fabio-d/fuchsia-stardock/commit/936a8559db562c09ab2872d25593b5b2bcf2a325	[cflags] Surround weave includes with Wextra-semi suppressionsBetter than public_configs with -Wno-extra-semi as this doesn'tfully "infect" dependents.Generated with:```fastmod -m --extensions c,cc,h,hpp,ipp '((#include <Weave[^\n]*\n:?)+)' '#pragma GCC diagnostic push$1#pragma GCC diagnostic pop'```When openweave code is fixit'ed for -Wextra-semi warnings we can removethese pragma wrappers with an inverse expression.Bug: 56257Change-Id: I3c6670cdb07b41adf32b857c1f537c6c709853c7Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/603364Fuchsia-Auto-Submit: Shai Barack <shayba@google.com>Reviewed-by: Prashanth Swaminathan <prashanthsw@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
gcc bug	 https://github.com/zhujun98/foamalgo/commit/62c28e19ee0d33618116b7ce9faec44909cfd044	Use gcc-8 in unittest due to compiler bug (ICE) in gcc-7
gcc bug	 https://github.com/monu70152/android_kernel_asus_sdm660-1/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/markcorbinuk/ti-linux-kernel/commit/59094296058d22864b7eebaed0fa1fc7adda3b74	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/AICP/kernel_xiaomi_sm6150/commit/b631f0b6d444a44468d13c209bcdfbfbc9fc9b94	drivers: clk: gcc-sm{6,7}150: Specify sync probe for gcc-sm{6,7}150Bug: 115776306Bug: 77146523Change-Id: Ie87e837dcb2e8737146ae775cffc86224a78d24eSigned-off-by: Miguel de Dios <migueldedios@google.com>
gcc bug	 https://github.com/KrishWalecha/android_kernel_realme_sdm710-common/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/RadiantDevices/kernel_xiaomi_whyred/commit/9ade568f9b8c507ef12b179230c6911fb55b397c	kernel/trace/bpf_trace.c: work around gcc-4.4.4 anon union initialization bugkernel/trace/bpf_trace.c: In function 'bpf_event_output':kernel/trace/bpf_trace.c:312: error: unknown field 'next' specified in initializerkernel/trace/bpf_trace.c:312: warning: missing braces around initializerkernel/trace/bpf_trace.c:312: warning: (near initialization for 'raw.frag.<anonymous>')Fixes: 555c8a8623a3a87 ("bpf: avoid stack copy and use skb ctx for event output")Acked-by: Daniel Borkmann <daniel@iogearbox.net>Cc: Alexei Starovoitov <ast@kernel.org>Cc: David S. Miller <davem@davemloft.net>Signed-off-by: Andrew Morton <akpm@linux-foundation.org>Acked-by: Alexei Starovoitov <ast@kernel.org>Signed-off-by: David S. Miller <davem@davemloft.net>
gcc bug	 https://github.com/khanhduytran0/mesa-zink-wip/commit/7d64f0dd1612a4ea645a83f507fa7612cb27aefa	nvc0: Fix uninitialized width/height/depth warning.This can happen if view->resource is false.Fixes a warning in GCC 9+ that's been bugging me for a very long time when building Mesa.Signed-off-by: Joshua Ashton <joshua@froggi.es>Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/12955>
gcc bug	 https://github.com/anuragbhaumik/kernel_xiaomi_raphael/commit/69d16fde194e47cd33575809a5a196763e287113	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: UtsavBalar1231 <utsavbalar1231@gmail.com>
gcc bug	 https://github.com/krazey/android_kernel_samsung_universal9810/commit/2993510403cf2463cc296d1efd6518f383c4d0a8	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Kendras056/kernel_asus_sdm636/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Dugy/bomba/commit/45882b73852e74a0271dc845b6dd65e324931335	Fix a bug manifesting in the non-GCC version of the code
gcc bug	 https://github.com/gentoo-mirror/sinustrom/commit/b8b967789a79d13b5282ce33b5165036fda3e5cb	media-libs/opensubdiv: Ebuild without GCC checkFor users with nVidia Pascal and later cards using CUDA 11 and GCC 10is an option. GCC <9 is too restrictive for any recent Gentoo system.Bug: https://bugs.gentoo.org/751382Package-Manager: Portage-3.0.20, Repoman-3.0.3Signed-off-by: Zoltan Puskas <zoltan@sinustrom.info>
gcc bug	 https://github.com/sophiapoirier/destroyfx/commit/5cb83a7bc87e4f47f20be697c12ac4d3edc669df	Suppress warnings for vstgui headers using the same approach for GCC, although multichar seems to specifically not work due to a long-standing bug
gcc bug	 https://github.com/karo-electronics/karo-tx-linux/commit/59094296058d22864b7eebaed0fa1fc7adda3b74	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/gentoo/gentoo/commit/b250f4243abd49acdd459751ae1e55c995bf9818	sys-devel/gcc: 11.1.0: cut 2 patchsetFive new patches:+ 27_all_msp430-f2c.patch: fix build on 16-bit targets+ 28_all_ctor-union-PR100489.patch: fix ICE on some c++ initializers+ 29_all_perfect-implicit-PR100644.patch: fix move deletion (fireofx build)+ 30_all_arm-lto-ICE-march-mix.patch: fix LTO ICE on arm -march=/-mtune mix+ 31_all_ICE-tsubst-PR100102.patch: fix ICE in c++ tempate substitutionBug: https://gcc.gnu.org/PR100361Bug: https://bugs.gentoo.org/788829Bug: https://gcc.gnu.org/PR100489Bug: https://gcc.gnu.org/PR100644Bug: https://bugs.gentoo.org/792705Bug: https://gcc.gnu.org/PR100767Bug: https://bugs.gentoo.org/792291Bug: https://bugs.gentoo.org/794775Bug: https://gcc.gnu.org/PR100102Package-Manager: Portage-3.0.19, Repoman-3.0.3Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
gcc bug	 https://github.com/kailashrs/kernel_z01r/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/loongarch64/postgresql/commit/de447bb8e6fbbad19f964a2d7f04c9ccc1d06903	Suppress warning about stack_base_ptr with late-model GCC.GCC 12 complains that set_stack_base is storing the address ofa local variable in a long-lived pointer.  This is an entirelyreasonable warning (indeed, it just helped us find a bug);but that behavior is intentional here.  We can work around itby using __builtin_frame_address(0) instead of a specific localvariable; that produces an address a dozen or so bytes different,in my testing, but we don't care about such a small difference.Maybe someday a compiler lacking that function will start to issuea similar warning, but we'll worry about that when it happens.Patch by me, per a suggestion from Andres Freund.  Back-patch tov12, which is as far back as the patch will go without some pain.(Recently-established project policy would permit a back-patch asfar as 9.2, but I'm disinclined to expend the work until GCC 12is much more widespread.)Discussion: https://postgr.es/m/3773792.1645141467@sss.pgh.pa.us
gcc bug	 https://github.com/gentoouser832/gentoo/commit/06ea13f0cc404136e28f91943ee06a9187b0b939	sys-devel/gcc: fix (disable) CET for x86 / no CMOVOpting not to revbump for now as the number of peoplewith USE=hardened && USE=cet on < i686 seems quite small;we can revisit this if necessary though.This also fixes build failures in some cases on < i686in the same environment aforementioned.Bug: https://bugs.gentoo.org/828081Bug: https://bugs.gentoo.org/827880Bug: https://bugs.gentoo.org/827905Bug: https://bugs.gentoo.org/777117Signed-off-by: Sam James <sam@gentoo.org>
gcc bug	 https://github.com/herobuxx/lunatic_WSA/commit/59094296058d22864b7eebaed0fa1fc7adda3b74	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Havoc-Devices/android_kernel_realme_RMX1971/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/hamadmarri/linux-baby/commit/958c616efce30c575479a01c123f108415241a8d	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/GTCxprice/kernel_xiaomi_msm8998/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/GrapheneOS/kernel_google_coral/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/link0ff/emacs-mirror/commit/d8bd7d015e626c73351938626a01288028ebe1c5	Make gnus-gcc-externalize-attachments work again* lisp/gnus/gnus-msg.el (gnus-inews-do-gcc): Allow externalizingparts again by defeating the cache (bug#49436).
gcc bug	 https://github.com/gpioblink/linux/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/LorenzoBianconi/bpf-next/commit/d3b0b80064e0416850f818184b8f7bba9fdf8c40	selftests/bpf: Fix GCC11 compiler warnings in -O2 modeWhen compiling selftests in -O2 mode with GCC1, we get three newcompilations warnings about potentially uninitialized variables.Compiler is wrong 2 out of 3 times, but this patch makes GCC11 happyanyways, as it doesn't cost us anything and makes optimized selftestsbuild less annoying.The amazing one is tc_redirect case of token that is malloc()'ed beforeASSERT_OK_PTR() check is done on it. Seems like GCC pessimisticallyassumes that libbpf_get_error() will dereference the contents of thepointer (no it won't), so the only way I found to shut GCC up was to dozero-initializaing calloc(). This one was new to me.For linfo case, GCC didn't realize that linfo_size will be initializedby the function that is returning linfo_size as out parameter.core_reloc.c case was a real bug, we can goto cleanup before initializingobj. But we don't need to do any clean up, so just continue iterationintstead.Signed-off-by: Andrii Nakryiko <andrii@kernel.org>Signed-off-by: Alexei Starovoitov <ast@kernel.org>Link: https://lore.kernel.org/bpf/20220211190927.1434329-1-andrii@kernel.org
gcc bug	 https://github.com/geekmaster21/a12a71/commit/3f47d0ce94cae2844c60bff19f793c3d281a2311	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/DerpFest-12/kernel_oneplus_msm8998/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/cbendot/kernel_asus_sdm660/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/OCamlPro/gnucobol2/commit/e2362ecb96ad5cfb685fc57ec019e9cb046fc17f	Merged revisions 3561-3562,3669,3706,4400 from branches/gnucobol-3.x:silenced GCC's char-subscript warnings by casts to unsigned charadditional: limit scope of some variables in parser.y........silenced GCC's char-subscript warnings by casts to unsigned char (fixing r3561)additional: limit scope of some variables in parser.y........CALL and RETURNING adjustments, fixing [bugs:#641], [bugs:#651], prevent [bugs:#650]cobc:* codegen.c (output_internal_function): fix bug #641 FUNCTION RETURNING with variable field size* parser.y (_procedure_returning): work around for bug #650 disabled PROCEDURE DIVISION USING for normal programs as pending* codegen.c (output_call): use a temporary integer for CALL ... RETURNING to not pollute RETURN-CODE in this case, fixing bug #651........Fixed [bugs:#659] "compiler divide-by-zero crasher".........Work on improved COBOL 202x supportcobc:* reserved.c, cobc.h, tree.h: added missing COBOL 202x reserved words and intrinsic functions to the internal lists* parser.y: _parsing_ of INSPECT BACKWARD, SEND mcs........
gcc bug	 https://github.com/CalyxOS/kernel_xiaomi_jasmine_sprout/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/BlitzFire3/kernel_xiaomi_sdm845-wip/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/arrowos-tulip/android_kernel_xiaomi_sdm660/commit/a4250df12f44ec736c4e30ece86a63a2c379663b	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/archie9211/android_kernel_motorola_chef/commit/6482984599bbbbc26375e903ca66453051e092ea	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/AospExtended-Devices/kernel_xiaomi_laurel_sprout/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/MADEAPPS/newton-dynamics/commit/a3d24b32bb5eb61c1375bc0f40ef5ff191af4e6a	fixed syntax error when building with GCC mingwgbug reported but  ImperatorS79 in github.Thank you.
gcc bug	 https://github.com/evanacox/fuchsia/commit/a72db2cf4437309008ee336897e29864668099c4	[musl] Fix GCC compiler warningsBuilding bringup.arm64 with the 'gcc' variant was broken due to afew minor GCC-specific conversion compiler warnings. This wentundetected in CI because an infra "optimization" reduced the setof targets being built for the bringup.arm64-gcc configuration(see bug for details, this is now fixed).This CL fixes the conversion errors by using a few explicitcasts where they are needed for GCC.Bug: 84045Change-Id: I1cf21f3fa84ccfdb539a75be924c9cb90da58bbfReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/576843Reviewed-by: Shai Barack <shayba@google.com>Commit-Queue: David Turner <digit@google.com>
gcc bug	 https://github.com/gnu-mirror-unofficial/gnulib/commit/ebc4aef867bdac47d82f990b3ee0e6cd25424a42	intprops: streamline and get ready for Clang 14* lib/intprops.h (_GL_HAS_BUILTIN_ADD_OVERFLOW):Rely on __has_builtin first, since GCC didn闁炽儲鐛?introduce it untilGCC 9 so we don闁炽儲鐛?need to special-case GCC first.(_GL_HAS_BUILTIN_ADD_OVERFLOW, _GL_HAS_BUILTIN_OVERFLOW_P):Look at __EDG__ rather than __ICC, since icc defines __EDG__ too.(_GL_HAS_BUILTIN_MUL_OVERFLOW): Define to 1 in Clang 14 and later,as a bug fix is scheduled for Clang 14.(_GL_HAS_BUILTIN_OVERFLOW_P): Do not bother to special-case__clang__, since __has_builtin should do the right thing anyway.
gcc bug	 https://github.com/xhennessey/eigen/commit/9882aec279cbea28f5cd9ff40fc0f3e3988ab6f0	Silence string overflow warning for GCC in initializer_list_construction test.This looks to be a GCC bug.  It doesn't seem to reproduce is a smaller example,making it hard to isolate.
gcc bug	 https://github.com/gentoouser832/gentoo/commit/6f46c580900c559ff34f27f4118e9bb70b510c8b	sys-devel/gcc-config: warn on obsolete gcj wrapperBug: https://bugs.gentoo.org/804178Signed-off-by: Sam James <sam@gentoo.org>Closes: https://github.com/gentoo/gentoo/pull/22985Signed-off-by: Sam James <sam@gentoo.org>
gcc bug	 https://github.com/CrackerCat/android_kernel_xiaomi_miatoll/commit/c3e613f3399fbf6e4e3aaf54efa9b590a643e4fc	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: reaPeR1010 <reaPeR10x10x@gmail.com>
gcc bug	 https://github.com/aospa-pasco/kernel_xiaomi_ginkgo/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/andreyuniar/kernel/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/seelabs/vcpkg-rippled/commit/9f69089cb9352824c9caa184eb0e12518e9edaf3	[s2n] disable -Werror for gcc 11 build (#22446)s2n fails to build with gcc 11 (seehttps://github.com/aws/s2n-tls/issues/2989) due to problematic typedeclarations which generate compiler warnings, coupled with the factthat s2n builds with -Werror by default. The underlying bug is not yetfixed upstream.Building with -Werror is not helpful for an end user trying to use s2nfrom vcpkg, since a build failure like this is not actionable. Thischange therefore uses the UNSAFE_TREAT_AS_ERRORS=OFF option to disable-Werror.
gcc bug	 https://github.com/ancient-devices/kernel_xiaomi_tissot/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/AICP/kernel_xiaomi_vayu/commit/40faa4d13add5b6f79083f734b1a3a79e14a3336	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/westerndigitalcorporation/dm-zap/commit/d5f6545934c47e97c0b48a645418e877b452a992	qnx4: work around gcc false positive warning bugIn commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/StollD/linux-fedora/commit/d5f6545934c47e97c0b48a645418e877b452a992	qnx4: work around gcc false positive warning bugIn commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/gentoo/prefix/commit/17dd90017df422633ffbb32cbbbc00ceeadef47c	scripts/bootstrap=prefix: bump snapshot for sys-devel/gcc fixesBug: https://bugs.gentoo.org/812278Signed-off-by: Fabian Groffen <grobian@gentoo.org>
gcc bug	 https://github.com/gentoouser832/gentoo/commit/c397cbff26bf100ae36eefe886497e8238e53515	sys-devel/gcc: add 11.2.1_p20211127upstream has indicated that 11.3 is unlikely to bereleased soon, and 11.2 has accumulated enough bugsto require an intermediate release for Gentoo.Bug: https://bugs.gentoo.org/806482Bug: https://bugs.gentoo.org/811867Bug: https://bugs.gentoo.org/823780Signed-off-by: David Seifert <soap@gentoo.org>Signed-off-by: Sam James <sam@gentoo.org>
gcc bug	 https://github.com/awesometic/android_kernel_samsung_msm8996/commit/2e3f7d9fc32ef2cd1452dcd16815e890191b115f	UPSTREAM: wireguard: selftests: use newer iproute2 for gcc-10gcc-10 switched to defaulting to -fno-common, which broke iproute2-5.4.This was fixed in iproute-5.6, so switch to that. Because we're after astable testing surface, we generally don't like to bump theseunnecessarily, but in this case, being able to actually build is a basicnecessity.Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: David S. Miller <davem@davemloft.net>(cherry picked from commit ee3c1aa3f34b7842c1557cfe5d8c3f7b8c692de8)Bug: 152722841Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>Change-Id: Id88bafaca825112ed4e3d53baf2b724bcf70fe00
gcc bug	 https://github.com/sourceruckus/linux-mdl/commit/d5f6545934c47e97c0b48a645418e877b452a992	qnx4: work around gcc false positive warning bugIn commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/RobertCNelson/linux-stable-rcn-ee/commit/d5f6545934c47e97c0b48a645418e877b452a992	qnx4: work around gcc false positive warning bugIn commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/memorizer-dev/memrz-linux5/commit/d5f6545934c47e97c0b48a645418e877b452a992	qnx4: work around gcc false positive warning bugIn commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/linuxppc/linux-ci/commit/d5f6545934c47e97c0b48a645418e877b452a992	qnx4: work around gcc false positive warning bugIn commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/kernel-patches/bpf/commit/d5f6545934c47e97c0b48a645418e877b452a992	qnx4: work around gcc false positive warning bugIn commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/johnmart19/Linux-kernel/commit/d5f6545934c47e97c0b48a645418e877b452a992	qnx4: work around gcc false positive warning bugIn commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc bug	 https://github.com/LimpingNinja/ngenmud/commit/75b6d43a1e50b986d7fda8831be6efa7c23783e9	Quick patch for GCC 10+GCC 10+ defaults to -fno-common which causes the build to fail miserably on duplicate PyX_Y definitions. Temporarily patched by passing -fcommon to the build, need to clean up the duplicates. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85678
gcc bug	 https://github.com/pd95/m68k-atari-mint-cross-tools/commit/b25b325b9888d84efa566f47855efcc7d9b8b482	Re-added previously macos specific patch- "gcc-4.6.4/gcc/combine" needs patching to avoid compiler crashposix/regex.c internal compiler error: in "fixup reorder chain"see also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52714
gcc bug	 https://github.com/Zealandia-Systems/eigen/commit/8f8c2ba2fe19c6c2e47bbe2fbaf87594642e523d	Remove bad "take" impl that causes g++-11 crash.For some reason, having `take<n, numeric_list<T>>` for `n > 0` causesg++-11 to ICE with```sorry, unimplemented: unexpected AST of kind nontype_argument_pack```It does work with other versions of gcc, and with clang.I filed a GCC bug[here](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102999).Technically we should never actually run into this case, since youcan't take n > 0 elements from an empty list.  Commenting it outallows our Eigen tests to pass.
gcc bug	 https://github.com/rbagd/libeigen-eigen-mirror/commit/8f8c2ba2fe19c6c2e47bbe2fbaf87594642e523d	Remove bad "take" impl that causes g++-11 crash.For some reason, having `take<n, numeric_list<T>>` for `n > 0` causesg++-11 to ICE with```sorry, unimplemented: unexpected AST of kind nontype_argument_pack```It does work with other versions of gcc, and with clang.I filed a GCC bug[here](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102999).Technically we should never actually run into this case, since youcan't take n > 0 elements from an empty list.  Commenting it outallows our Eigen tests to pass.
gcc bug	 https://github.com/heeler/eigen/commit/8f8c2ba2fe19c6c2e47bbe2fbaf87594642e523d	Remove bad "take" impl that causes g++-11 crash.For some reason, having `take<n, numeric_list<T>>` for `n > 0` causesg++-11 to ICE with```sorry, unimplemented: unexpected AST of kind nontype_argument_pack```It does work with other versions of gcc, and with clang.I filed a GCC bug[here](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102999).Technically we should never actually run into this case, since youcan't take n > 0 elements from an empty list.  Commenting it outallows our Eigen tests to pass.
gcc bug	 https://github.com/eigen-mirror/eigen/commit/8f8c2ba2fe19c6c2e47bbe2fbaf87594642e523d	Remove bad "take" impl that causes g++-11 crash.For some reason, having `take<n, numeric_list<T>>` for `n > 0` causesg++-11 to ICE with```sorry, unimplemented: unexpected AST of kind nontype_argument_pack```It does work with other versions of gcc, and with clang.I filed a GCC bug[here](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102999).Technically we should never actually run into this case, since youcan't take n > 0 elements from an empty list.  Commenting it outallows our Eigen tests to pass.
gcc bug	 https://github.com/ChenHuaYou/eigen/commit/8f8c2ba2fe19c6c2e47bbe2fbaf87594642e523d	Remove bad "take" impl that causes g++-11 crash.For some reason, having `take<n, numeric_list<T>>` for `n > 0` causesg++-11 to ICE with```sorry, unimplemented: unexpected AST of kind nontype_argument_pack```It does work with other versions of gcc, and with clang.I filed a GCC bug[here](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102999).Technically we should never actually run into this case, since youcan't take n > 0 elements from an empty list.  Commenting it outallows our Eigen tests to pass.
gcc bug	 https://github.com/vbuslov/linux/commit/0e96ea5c3eb5904e5dc2f3d414e2aba361933b87	MIPS: Loongson64: Clean up use of cc-ifversionThis Makefile checks that GCC is 4.9 or newer, which is redundant aftercommit 76ae847497bc ("Documentation: raise minimum supported version ofGCC to 5.1"), so cc-option can be removed.Clang does not support -march=loongson3a so it needs to continue to use-march=mips64r2, which no longer needs cc-option because all supportedclang versions recognize this flag.-march=loonson3a can be used unconditionally with GCC because theminimum supported GCC version has been bumped past 4.9.0, which won'thave the bug mentioned in the comment. The _MIPS_ISA macro redefinitioncan be removed at the same time for the same reason.Suggested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>Suggested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
gcc bug	 https://github.com/google/tcmalloc/commit/ad2dcab74fa228799b1dc6886926eacd74cbe8d3	Repair GCC build by ignoring a false-positive error message. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96003 for more details.PiperOrigin-RevId: 399216495Change-Id: I0c479e351ad0f32994347989f9c5eec52e03a292
gcc bug	 https://github.com/simgrid/simgrid/commit/8989e31e81c82d0a754da9b1a0850ca23a27d0d1	Revert "Silly workaround for coverage build with gcc-10."This reverts commit d345b5dad90a1ec9829011b9188185aaf4d3240a.The problem with gcc was likely fixed with PR fortran/95847(see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95847)
gcc bug	 https://github.com/turex/siberia_hi6250_kernel/commit/e738a64220d4b4fb70a3a7b21a9d127abae09333	rtlwifi: fix uninitialized rtlhal->last_suspend_sec timecommit 3f2a162fab15aee243178b5308bb5d1206fc4043 upstream.We set rtlhal->last_suspend_sec to an uninitialized stack variable,but unfortunately gcc never warned about this, I only found itwhile working on another patch. I opened a gcc bug for this.Presumably the value of rtlhal->last_suspend_sec is not all thatimportant, but it does get used, so we probably want thepatch backported to stable kernels.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82839Signed-off-by: Arnd Bergmann <arnd@arndb.de>Acked-by: Larry Finger <Larry.Finger@lwfinger.net>Signed-off-by: Kalle Valo <kvalo@codeaurora.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/MIPS/glibc/commit/844b4d8b4b937fe6943d2c0c80ce7d871cdb1eb5	s390x: Require GCC 7.1 or later to build glibc.GCC 6.5 fails to correctly build ldconfig with recent ld.so.cachecommits, e.g.:785969a047ad2f23f758901c6816422573544453elf: Implement a string table for ldconfig, with tail mergingIf glibc is build with gcc 6.5.0:__builtin_add_overflow is used in<glibc>/elf/stringtable.c:stringtable_finalize()which leads to ldconfig failing with "String table is too large".This is also recognizable in following tests:FAIL: elf/tst-glibc-hwcaps-cacheFAIL: elf/tst-glibc-hwcaps-prepend-cacheFAIL: elf/tst-ldconfig-XFAIL: elf/tst-ldconfig-bad-aux-cacheFAIL: elf/tst-ldconfig-ld_so_conf-updateFAIL: elf/tst-stringtableSee gcc "Bug 98269 - gcc 6.5.0 __builtin_add_overflow() with smalluint32_t values incorrectly detects overflow"(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98269)
gcc bug	 https://github.com/ceseo/glibc/commit/844b4d8b4b937fe6943d2c0c80ce7d871cdb1eb5	s390x: Require GCC 7.1 or later to build glibc.GCC 6.5 fails to correctly build ldconfig with recent ld.so.cachecommits, e.g.:785969a047ad2f23f758901c6816422573544453elf: Implement a string table for ldconfig, with tail mergingIf glibc is build with gcc 6.5.0:__builtin_add_overflow is used in<glibc>/elf/stringtable.c:stringtable_finalize()which leads to ldconfig failing with "String table is too large".This is also recognizable in following tests:FAIL: elf/tst-glibc-hwcaps-cacheFAIL: elf/tst-glibc-hwcaps-prepend-cacheFAIL: elf/tst-ldconfig-XFAIL: elf/tst-ldconfig-bad-aux-cacheFAIL: elf/tst-ldconfig-ld_so_conf-updateFAIL: elf/tst-stringtableSee gcc "Bug 98269 - gcc 6.5.0 __builtin_add_overflow() with smalluint32_t values incorrectly detects overflow"(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98269)
gcc bug	 https://github.com/bminor/glibc/commit/844b4d8b4b937fe6943d2c0c80ce7d871cdb1eb5	s390x: Require GCC 7.1 or later to build glibc.GCC 6.5 fails to correctly build ldconfig with recent ld.so.cachecommits, e.g.:785969a047ad2f23f758901c6816422573544453elf: Implement a string table for ldconfig, with tail mergingIf glibc is build with gcc 6.5.0:__builtin_add_overflow is used in<glibc>/elf/stringtable.c:stringtable_finalize()which leads to ldconfig failing with "String table is too large".This is also recognizable in following tests:FAIL: elf/tst-glibc-hwcaps-cacheFAIL: elf/tst-glibc-hwcaps-prepend-cacheFAIL: elf/tst-ldconfig-XFAIL: elf/tst-ldconfig-bad-aux-cacheFAIL: elf/tst-ldconfig-ld_so_conf-updateFAIL: elf/tst-stringtableSee gcc "Bug 98269 - gcc 6.5.0 __builtin_add_overflow() with smalluint32_t values incorrectly detects overflow"(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98269)
gcc bug	 https://github.com/ahjragaas/glibc/commit/844b4d8b4b937fe6943d2c0c80ce7d871cdb1eb5	s390x: Require GCC 7.1 or later to build glibc.GCC 6.5 fails to correctly build ldconfig with recent ld.so.cachecommits, e.g.:785969a047ad2f23f758901c6816422573544453elf: Implement a string table for ldconfig, with tail mergingIf glibc is build with gcc 6.5.0:__builtin_add_overflow is used in<glibc>/elf/stringtable.c:stringtable_finalize()which leads to ldconfig failing with "String table is too large".This is also recognizable in following tests:FAIL: elf/tst-glibc-hwcaps-cacheFAIL: elf/tst-glibc-hwcaps-prepend-cacheFAIL: elf/tst-ldconfig-XFAIL: elf/tst-ldconfig-bad-aux-cacheFAIL: elf/tst-ldconfig-ld_so_conf-updateFAIL: elf/tst-stringtableSee gcc "Bug 98269 - gcc 6.5.0 __builtin_add_overflow() with smalluint32_t values incorrectly detects overflow"(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98269)
gcc bug	 https://github.com/kyx0r/nextvi/commit/3ca0a9b7d298f74bedd67af3e5e72eca393cccac	sbuf: use unsigned values (remove gcc workaround)int overflow into negative half is undefined behaviorsee: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103103Use unsigned, then cast down to int makes the expressionwork.
gcc bug	 https://github.com/MollySophia/linux-next-primus/commit/3bf5f8785235da89fa0ffd161e0dbeba4c1a232d	btrfs: replace BUILD_BUG_ON by static_assertThe static_assert introduced in 6bab69c65013 ("build_bug.h: add wrapperfor _Static_assert") has been supported by compilers for a long time(gcc 4.6, clang 3.0) and can be used in header files. We don't need toput BUILD_BUG_ON to random functions but rather keep it next to thedefinition.The exception here is the UAPI header btrfs_tree.h that could bepotentially included by userspace code and the static assert is notdefined (nor used in any other header).Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>Signed-off-by: David Sterba <dsterba@suse.com>
gcc bug	 https://github.com/ammarfaizi2/linux-block/commit/b53823fb2ef854222853be164f3b1e815f315144	selftests/rseq: Fix: work-around asm goto compiler bugsgcc and clang each have their own compiler bugs with respect to asmgoto. Implement a work-around for compiler versions known to have thosebugs.gcc prior to 4.8.2 miscompiles asm goto.https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58670gcc prior to 8.1.0 miscompiles asm goto at O1.https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103908clang prior to version 13.0.1 miscompiles asm goto at O2.https://github.com/llvm/llvm-project/issues/52735Work around these issues by adding a volatile inline asm withmemory clobber in the fallthrough after the asm goto and at eachlabel target.  Emit this for all compilers in case other similarissues are found in the future.Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Link: https://lkml.kernel.org/r/20220124171253.22072-14-mathieu.desnoyers@efficios.com
gcc bug	 https://github.com/MartB/buildroot-satos/commit/3245874961152628877d1fb8cd14406aa4c8bd6a	package/harfbuzz: work around arc gcc10 bugWith BR2_GCC_VERSION_ARC=y(arc gcc10) harfbuzz package exhibits a gcc bugthat makes build to fail. This bug is found only in official arc gcc10provided by Synopsis, so we can't use the BR2_TOOLCHAIN_HAS_GCC_BUG_approach since bug can't be even filed in gcc bugzilla.To work around this, if BR2_GCC_VERSION_ARC=y we force using -O0.Fixes:http://autobuild.buildroot.net/results/e4d/e4da9ba40c8f4567601d404e20dd6a0b322210c2/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/vries/nvidia-bugs/commit/d022995af1146e3b8311179559032360143dbc8b	shift-and: AddFiled at:- https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105014- https://developer.nvidia.com/nvidia_bug/3585290Fails on Quadro K2000 with driver 470.103.01.
gcc bug	 https://github.com/GrapheneOS/hardened_malloc/commit/75952581ee2391438b933a4d4021d7f2f4f43724	Silence a GCC warningAs suggested in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66425#c34
gcc bug	 https://github.com/bsd-hacker/freebsd/commit/5a8dc1ce273383a8c27063e6b58112900ba42480	Silence GCC's -Wno-unused-result during bootstrapUnlike clang, GCC still warns even with (void) casts (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66425)
gcc bug	 https://github.com/CTSRD-CHERI/cheribsd/commit/d4010b6c35943b9f7cefeb4d950c3d4d403bd03b	Silence GCC's -Wno-unused-result during bootstrapUnlike clang, GCC still warns even with (void) casts (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66425)(cherry picked from commit 5a8dc1ce273383a8c27063e6b58112900ba42480)
gcc bug	 https://github.com/sailfishos-mirror/cmake/commit/ae101921e8441d2a87ce0f09804cad2409726cc5	Source: Avoid gcc 12 compilation warningGCC 12 warns:    warning: '%04d' directive output may be truncated writing between    4 and 11 bytes into a region of size 5 [-Wformat-truncation=]The surrounding logic guarantees the formatted integer will neverbe more than 4 bytes, but it doesn't hurt to use a larger buffer.This GCC behavior is documented:    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104012#c5
gcc bug	 https://github.com/Kitware/CMake/commit/ae101921e8441d2a87ce0f09804cad2409726cc5	Source: Avoid gcc 12 compilation warningGCC 12 warns:    warning: '%04d' directive output may be truncated writing between    4 and 11 bytes into a region of size 5 [-Wformat-truncation=]The surrounding logic guarantees the formatted integer will neverbe more than 4 bytes, but it doesn't hurt to use a larger buffer.This GCC behavior is documented:    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104012#c5
gcc bug	 https://github.com/simd-everywhere/simde/commit/4b7394fc2609c70540772769092014bf970a0b43	sse2: ignore broken _mm_loadu_si{16,32} on GCCPending a fix for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99754Fixes #674
gcc bug	 https://github.com/sourceruckus/linux-mdl/commit/14b6cff54edaca5740068e9ed070152727ed7718	staging: rtl8723bs: avoid bogus gcc warninggcc gets confused by some of the type casts and produces anapparently senseless warning about an out-of-bound memcpy toan unrelated array in the same structure:drivers/staging/rtl8723bs/os_dep/ioctl_cfg80211.c: In function 'rtw_cfg80211_ap_set_encryption':cc1: error: writing 8 bytes into a region of size 0 [-Werror=stringop-overflow=]In file included from drivers/staging/rtl8723bs/include/drv_types.h:32,                 from drivers/staging/rtl8723bs/os_dep/ioctl_cfg80211.c:10:drivers/staging/rtl8723bs/include/rtw_security.h:98:15: note: at offset [184, 4264] into destination object 'dot11AuthAlgrthm' of size 4   98 |         u32   dot11AuthAlgrthm;         /*  802.11 auth, could be open, shared, 8021x and authswitch */      |               ^~~~~~~~~~~~~~~~cc1: error: writing 8 bytes into a region of size 0 [-Werror=stringop-overflow=]drivers/staging/rtl8723bs/include/rtw_security.h:98:15: note: at offset [264, 4344] into destination object 'dot11AuthAlgrthm' of size 4This is a known gcc bug, and the patch here is only a workaround,but the approach of using a temporary variable to hold a pointerto the key also improves readability in addition to avoiding thewarning, so overall this should still help.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99673Signed-off-by: Arnd Bergmann <arnd@arndb.de>Link: https://lore.kernel.org/r/20210422152648.2891996-1-arnd@kernel.orgCc: stable <stable@vger.kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/php/php-src/commit/150ebfdf77320b24b0358f8a903e90d7940ad4a4	Suppress bogus [-Wlogical-op] warning from GCCSee GCC bug 69602: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69602which emits the warning for (errno == EWOULDBLOCK || errno == EAGAIN)which is the correct way of handling errors as the value of EWOULDBLOCKand EAGAIN is implementation defined.Therefore introduce a new macro function PHP_IS_TRANSIENT_ERROR()which handles the case when EWOULDBLOCK and EAGAIN are identical.Thanks to @twose for the idea.
gcc bug	 https://github.com/nluhux/buildroot/commit/3245874961152628877d1fb8cd14406aa4c8bd6a	package/harfbuzz: work around arc gcc10 bugWith BR2_GCC_VERSION_ARC=y(arc gcc10) harfbuzz package exhibits a gcc bugthat makes build to fail. This bug is found only in official arc gcc10provided by Synopsis, so we can't use the BR2_TOOLCHAIN_HAS_GCC_BUG_approach since bug can't be even filed in gcc bugzilla.To work around this, if BR2_GCC_VERSION_ARC=y we force using -O0.Fixes:http://autobuild.buildroot.net/results/e4d/e4da9ba40c8f4567601d404e20dd6a0b322210c2/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/sumoprojects/sumokoin/commit/8e8a37b5f2338bbced7914bfb54d2a5e9698a36c	suppress warning due to gcc bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51712
gcc bug	 https://github.com/gentoo/gentoo/commit/7af3ec75563c6744dba7db4bd94da818844c6039	sys-apps/fakeroot: add flag-o-matic filter for flag -fno-semantic-interpositionBug: https://bugs.gentoo.org/834445Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101270Signed-off-by: Randall Vasquez <ran.dall@icloud.com>Closes: https://github.com/gentoo/gentoo/pull/25007Signed-off-by: Sam James <sam@gentoo.org>
gcc bug	 https://github.com/GNUWeeb/linux/commit/0e96ea5c3eb5904e5dc2f3d414e2aba361933b87	MIPS: Loongson64: Clean up use of cc-ifversionThis Makefile checks that GCC is 4.9 or newer, which is redundant aftercommit 76ae847497bc ("Documentation: raise minimum supported version ofGCC to 5.1"), so cc-option can be removed.Clang does not support -march=loongson3a so it needs to continue to use-march=mips64r2, which no longer needs cc-option because all supportedclang versions recognize this flag.-march=loonson3a can be used unconditionally with GCC because theminimum supported GCC version has been bumped past 4.9.0, which won'thave the bug mentioned in the comment. The _MIPS_ISA macro redefinitioncan be removed at the same time for the same reason.Suggested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>Suggested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
gcc bug	 https://github.com/sisyphus/math-mpfr/commit/c5585cc128ad687eac5c369b1a5eb411cc938484	t/nvtoa2.t - improve detection of buggy assignment of subnormals.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94756
gcc bug	 https://github.com/wasmx/fizzy/commit/b0e84d2b72f58f63b10a05b165c871699668ef72	test: Disable pointer-subtract sanitizer in constexprThe "pointer-subtract" sanitizer is disabled because GCC fails to compileconstexpr function with pointer subtraction.The bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97145is to be fixed in GCC 10.3.
gcc bug	 https://github.com/novns/thing/commit/b0ea1c8b474b8adc32eea6045c5a6435d842f8af	test: Test for NULL values explicitly due to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104288
gcc bug	 https://github.com/Luquidtester/kernel_xiaomi_selene_keongbalap/commit/f88bd0e0a583240781fa714dc654d554da850954	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: UtsavBalar1231 <utsavbalar1231@gmail.com>
gcc bug	 https://github.com/uli/basicengine-buildroot/commit/cf912e852a01fffc2b1bfe1de3d68dbca939a18d	package/gnuradio: disable package if affected from gcc bug 43744This package is affected by gcc bug 43744 and I have not found a workaround for it(i.e. the common -O0 we use or other), so let's disable it ifgcc has such bug.Fixes:http://autobuild.buildroot.net/results/1db/1db6c59c98e3c09fa13277076ee2fbe7967f1f6b/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/WYC-2020/lede/commit/5afa82e64f59d4102cdd302afe392e56135a4fa6	toolchain/binutils: sync upstream (#8661)* toolchain/binutils: switch to version 2.36.1 by defaultRuntime-tested on:* ath79* bcm27xx/bcm2708* bcm27xx/bcm2709* bcm27xx/bcm2711* mvebu/cortexa53* octeon* realtek* x86/64Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Acked-by: Hauke Mehrtens <hauke@hauke-m.de>* toolchain/binutils: switch to version 2.37 by defaultCompile tests:* allRuntime tests:* ipq806x/generic* lantiq/mt7621* lantiq/xrx200* x86/64Signed-off-by: Paul Spooren <mail@aparcar.org>Tested-by: Paul Spooren <mail@aparcar.org>Tested-by: Rosen Penev <rosenp@gmail.com>Tested-by: Andre Heider <a.heider@gmail.com>Tested-by: Ansuel Smith <ansuelsmth@gmail.com>Tested-by: Rui Salvaterra <rsalvaterra@gmail.com>Signed-off-by: Paul Spooren <mail@aparcar.org>* toolchain/binutils: v2.37 Close the file descriptor if there is no archive fdThis fixes the following build error:/home/build/openwrt/staging_dir/toolchain-aarch64_cortex-a53_gcc-11.2.0_musl/lib/gcc/aarch64-openwrt-linux-musl/11.2.0/../../../../aarch64-openwrt-linux-musl/bin/ld: /home/sergey/openwrt2/build_dir/target-aarch64_cortex-a53_musl/node-v14.18.2/out/Release/obj.target/tools/v8_gypfiles/libv8_base_without_compiler.a: error adding symbols: malformed archivecollect2: error: ld returned 1 exit statusIt's a bad error handling related to -EMFILE (too many open files). nodejs is probably just very close to open file limit.https://sourceware.org/bugzilla/show_bug.cgi?id=28138https://github.com/nodejs/node/issues/39452https://github.com/openwrt/packages/issues/17496https://github.com/openwrt/packages/issues/16729https://github.com/openwrt/packages/issues/17164Signed-off-by: Hirokazu MORIKAWA <morikw2@gmail.com>[Take full patch from 2.37 branch and refresh]Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>Co-authored-by: Stijn Tintel <stijn@linux-ipv6.be>Co-authored-by: Paul Spooren <mail@aparcar.org>Co-authored-by: Hirokazu MORIKAWA <morikw2@gmail.com>
gcc bug	 https://github.com/qxwd1123/op/commit/5afa82e64f59d4102cdd302afe392e56135a4fa6	toolchain/binutils: sync upstream (#8661)* toolchain/binutils: switch to version 2.36.1 by defaultRuntime-tested on:* ath79* bcm27xx/bcm2708* bcm27xx/bcm2709* bcm27xx/bcm2711* mvebu/cortexa53* octeon* realtek* x86/64Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Acked-by: Hauke Mehrtens <hauke@hauke-m.de>* toolchain/binutils: switch to version 2.37 by defaultCompile tests:* allRuntime tests:* ipq806x/generic* lantiq/mt7621* lantiq/xrx200* x86/64Signed-off-by: Paul Spooren <mail@aparcar.org>Tested-by: Paul Spooren <mail@aparcar.org>Tested-by: Rosen Penev <rosenp@gmail.com>Tested-by: Andre Heider <a.heider@gmail.com>Tested-by: Ansuel Smith <ansuelsmth@gmail.com>Tested-by: Rui Salvaterra <rsalvaterra@gmail.com>Signed-off-by: Paul Spooren <mail@aparcar.org>* toolchain/binutils: v2.37 Close the file descriptor if there is no archive fdThis fixes the following build error:/home/build/openwrt/staging_dir/toolchain-aarch64_cortex-a53_gcc-11.2.0_musl/lib/gcc/aarch64-openwrt-linux-musl/11.2.0/../../../../aarch64-openwrt-linux-musl/bin/ld: /home/sergey/openwrt2/build_dir/target-aarch64_cortex-a53_musl/node-v14.18.2/out/Release/obj.target/tools/v8_gypfiles/libv8_base_without_compiler.a: error adding symbols: malformed archivecollect2: error: ld returned 1 exit statusIt's a bad error handling related to -EMFILE (too many open files). nodejs is probably just very close to open file limit.https://sourceware.org/bugzilla/show_bug.cgi?id=28138https://github.com/nodejs/node/issues/39452https://github.com/openwrt/packages/issues/17496https://github.com/openwrt/packages/issues/16729https://github.com/openwrt/packages/issues/17164Signed-off-by: Hirokazu MORIKAWA <morikw2@gmail.com>[Take full patch from 2.37 branch and refresh]Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>Co-authored-by: Stijn Tintel <stijn@linux-ipv6.be>Co-authored-by: Paul Spooren <mail@aparcar.org>Co-authored-by: Hirokazu MORIKAWA <morikw2@gmail.com>
gcc bug	 https://github.com/KDr2/emacs/commit/1283c2db5c3a846046612617f0b83f76d885e963	Merge from origin/emacs-280d374b1b83 Work around GCC bug 102671
gcc bug	 https://github.com/quicky2000/edge_matching_puzzle/commit/a5df68061a149bbf0ef5469be4ff342452737a47	Disable focal configuration on travis until migration to gcc 10.4 due to a bug with std::chrono and CUDA in gcc 10.3
gcc bug	 https://github.com/Mattraks/lean-lede/commit/5afa82e64f59d4102cdd302afe392e56135a4fa6	toolchain/binutils: sync upstream (#8661)* toolchain/binutils: switch to version 2.36.1 by defaultRuntime-tested on:* ath79* bcm27xx/bcm2708* bcm27xx/bcm2709* bcm27xx/bcm2711* mvebu/cortexa53* octeon* realtek* x86/64Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Acked-by: Hauke Mehrtens <hauke@hauke-m.de>* toolchain/binutils: switch to version 2.37 by defaultCompile tests:* allRuntime tests:* ipq806x/generic* lantiq/mt7621* lantiq/xrx200* x86/64Signed-off-by: Paul Spooren <mail@aparcar.org>Tested-by: Paul Spooren <mail@aparcar.org>Tested-by: Rosen Penev <rosenp@gmail.com>Tested-by: Andre Heider <a.heider@gmail.com>Tested-by: Ansuel Smith <ansuelsmth@gmail.com>Tested-by: Rui Salvaterra <rsalvaterra@gmail.com>Signed-off-by: Paul Spooren <mail@aparcar.org>* toolchain/binutils: v2.37 Close the file descriptor if there is no archive fdThis fixes the following build error:/home/build/openwrt/staging_dir/toolchain-aarch64_cortex-a53_gcc-11.2.0_musl/lib/gcc/aarch64-openwrt-linux-musl/11.2.0/../../../../aarch64-openwrt-linux-musl/bin/ld: /home/sergey/openwrt2/build_dir/target-aarch64_cortex-a53_musl/node-v14.18.2/out/Release/obj.target/tools/v8_gypfiles/libv8_base_without_compiler.a: error adding symbols: malformed archivecollect2: error: ld returned 1 exit statusIt's a bad error handling related to -EMFILE (too many open files). nodejs is probably just very close to open file limit.https://sourceware.org/bugzilla/show_bug.cgi?id=28138https://github.com/nodejs/node/issues/39452https://github.com/openwrt/packages/issues/17496https://github.com/openwrt/packages/issues/16729https://github.com/openwrt/packages/issues/17164Signed-off-by: Hirokazu MORIKAWA <morikw2@gmail.com>[Take full patch from 2.37 branch and refresh]Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>Co-authored-by: Stijn Tintel <stijn@linux-ipv6.be>Co-authored-by: Paul Spooren <mail@aparcar.org>Co-authored-by: Hirokazu MORIKAWA <morikw2@gmail.com>
gcc bug	 https://github.com/Galaxstudio/tyu/commit/8c501bf9feeaadfb9d950806a312b328baabddcb	toolchain/binutils: v2.37 Close the file descriptor if there is no archive fdThis fixes the following build error:/home/build/openwrt/staging_dir/toolchain-aarch64_cortex-a53_gcc-11.2.0_musl/lib/gcc/aarch64-openwrt-linux-musl/11.2.0/../../../../aarch64-openwrt-linux-musl/bin/ld: /home/sergey/openwrt2/build_dir/target-aarch64_cortex-a53_musl/node-v14.18.2/out/Release/obj.target/tools/v8_gypfiles/libv8_base_without_compiler.a: error adding symbols: malformed archivecollect2: error: ld returned 1 exit statusIt's a bad error handling related to -EMFILE (too many open files). nodejs is probably just very close to open file limit.https://sourceware.org/bugzilla/show_bug.cgi?id=28138https://github.com/nodejs/node/issues/39452https://github.com/openwrt/packages/issues/17496https://github.com/openwrt/packages/issues/16729https://github.com/openwrt/packages/issues/17164Signed-off-by: Hirokazu MORIKAWA <morikw2@gmail.com>[Take full patch from 2.37 branch and refresh]Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
gcc bug	 https://github.com/buzarini/openwrt-base/commit/8c501bf9feeaadfb9d950806a312b328baabddcb	toolchain/binutils: v2.37 Close the file descriptor if there is no archive fdThis fixes the following build error:/home/build/openwrt/staging_dir/toolchain-aarch64_cortex-a53_gcc-11.2.0_musl/lib/gcc/aarch64-openwrt-linux-musl/11.2.0/../../../../aarch64-openwrt-linux-musl/bin/ld: /home/sergey/openwrt2/build_dir/target-aarch64_cortex-a53_musl/node-v14.18.2/out/Release/obj.target/tools/v8_gypfiles/libv8_base_without_compiler.a: error adding symbols: malformed archivecollect2: error: ld returned 1 exit statusIt's a bad error handling related to -EMFILE (too many open files). nodejs is probably just very close to open file limit.https://sourceware.org/bugzilla/show_bug.cgi?id=28138https://github.com/nodejs/node/issues/39452https://github.com/openwrt/packages/issues/17496https://github.com/openwrt/packages/issues/16729https://github.com/openwrt/packages/issues/17164Signed-off-by: Hirokazu MORIKAWA <morikw2@gmail.com>[Take full patch from 2.37 branch and refresh]Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
gcc bug	 https://github.com/18816230015/immortalwrt/commit/8c501bf9feeaadfb9d950806a312b328baabddcb	toolchain/binutils: v2.37 Close the file descriptor if there is no archive fdThis fixes the following build error:/home/build/openwrt/staging_dir/toolchain-aarch64_cortex-a53_gcc-11.2.0_musl/lib/gcc/aarch64-openwrt-linux-musl/11.2.0/../../../../aarch64-openwrt-linux-musl/bin/ld: /home/sergey/openwrt2/build_dir/target-aarch64_cortex-a53_musl/node-v14.18.2/out/Release/obj.target/tools/v8_gypfiles/libv8_base_without_compiler.a: error adding symbols: malformed archivecollect2: error: ld returned 1 exit statusIt's a bad error handling related to -EMFILE (too many open files). nodejs is probably just very close to open file limit.https://sourceware.org/bugzilla/show_bug.cgi?id=28138https://github.com/nodejs/node/issues/39452https://github.com/openwrt/packages/issues/17496https://github.com/openwrt/packages/issues/16729https://github.com/openwrt/packages/issues/17164Signed-off-by: Hirokazu MORIKAWA <morikw2@gmail.com>[Take full patch from 2.37 branch and refresh]Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
gcc bug	 https://github.com/wongsyrone/lede-1/commit/6e2556963d523ecef9a2a6130c899d146a3b7333	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>
gcc bug	 https://github.com/Sleppyiecat/just_love_me/commit/128a3e9b3e5e503cbaf963e27a0f85a32f003cdd	drivers: clk: gcc-sm{6,7}150: Specify sync probe for gcc-sm{6,7}150Bug: 115776306Bug: 77146523Change-Id: Ie87e837dcb2e8737146ae775cffc86224a78d24eSigned-off-by: Miguel de Dios <migueldedios@google.com>
gcc bug	 https://github.com/sky1703/friendlywrt/commit/6e2556963d523ecef9a2a6130c899d146a3b7333	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>
gcc bug	 https://github.com/foss-for-synopsys-dwc-arc-processors/buildroot/commit/3245874961152628877d1fb8cd14406aa4c8bd6a	package/harfbuzz: work around arc gcc10 bugWith BR2_GCC_VERSION_ARC=y(arc gcc10) harfbuzz package exhibits a gcc bugthat makes build to fail. This bug is found only in official arc gcc10provided by Synopsis, so we can't use the BR2_TOOLCHAIN_HAS_GCC_BUG_approach since bug can't be even filed in gcc bugzilla.To work around this, if BR2_GCC_VERSION_ARC=y we force using -O0.Fixes:http://autobuild.buildroot.net/results/e4d/e4da9ba40c8f4567601d404e20dd6a0b322210c2/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/sinkap/linux-krsi/commit/0e96ea5c3eb5904e5dc2f3d414e2aba361933b87	MIPS: Loongson64: Clean up use of cc-ifversionThis Makefile checks that GCC is 4.9 or newer, which is redundant aftercommit 76ae847497bc ("Documentation: raise minimum supported version ofGCC to 5.1"), so cc-option can be removed.Clang does not support -march=loongson3a so it needs to continue to use-march=mips64r2, which no longer needs cc-option because all supportedclang versions recognize this flag.-march=loonson3a can be used unconditionally with GCC because theminimum supported GCC version has been bumped past 4.9.0, which won'thave the bug mentioned in the comment. The _MIPS_ISA macro redefinitioncan be removed at the same time for the same reason.Suggested-by: Jiaxun Yang <jiaxun.yang@flygoat.com>Suggested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
gcc bug	 https://github.com/PixelExperience-Devices/kernel_asus_sdm660/commit/a4c8336e63f00b9346938cd116b2f65cdeb9a17f	UPSTREAM: wireguard: selftests: use newer iproute2 for gcc-10gcc-10 switched to defaulting to -fno-common, which broke iproute2-5.4.This was fixed in iproute-5.6, so switch to that. Because we're after astable testing surface, we generally don't like to bump theseunnecessarily, but in this case, being able to actually build is a basicnecessity.Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: David S. Miller <davem@davemloft.net>(cherry picked from commit ee3c1aa3f34b7842c1557cfe5d8c3f7b8c692de8)Bug: 152722841Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>Change-Id: Id88bafaca825112ed4e3d53baf2b724bcf70fe00
gcc bug	 https://github.com/mrlong32/Openwrt/commit/6e2556963d523ecef9a2a6130c899d146a3b7333	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>
gcc bug	 https://github.com/maskedeken/immortalwrt/commit/48debfcb5d3bbe311dfc8f4dfffd8a5d81c56c98	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>
gcc bug	 https://github.com/ios235free/ts4310/commit/6e2556963d523ecef9a2a6130c899d146a3b7333	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>
gcc bug	 https://github.com/helejiang/Openwrt_K2p/commit/6e2556963d523ecef9a2a6130c899d146a3b7333	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>
gcc bug	 https://github.com/mozilla/libwebrtc/commit/49a1d621be799d3da7ac02ed422a0c1f8f802542	Fix possible compile issue with PeerConnectionInterface::AsString.AsString is constexpr, but RTC_CHECK_NOTREACHED is not. Using some gcccompile rules, having a constexpr make use of RTC_CHECK_NOTREACHED doesnot compile.See internal issue number 215785261. We could either remove constexpror remove the RTC_CHECK_NOTREACHED. This CL does the latter.Bug: NoneChange-Id: I7ea84b345e9abdba60a7620e1d92c3159c0d7974Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/248167Reviewed-by: Harald Alvestrand <hta@webrtc.org>Commit-Queue: Henrik Bostr閺嬫 <hbos@webrtc.org>Cr-Commit-Position: refs/heads/main@{#35768}
gcc bug	 https://github.com/rockstar5495/kernel_xiaomi_sm6150_requeim/commit/a5fe4af8eb5e09cb8ba35ce626af5dd77fee924b	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>
gcc bug	 https://github.com/bgk1993/dart-sdk/commit/e78e0dd2610f6d67419bb65ceeabfaf0c405e6ab	[build] Add missing -latomic.Newer versions of gcc seem to require this dependency to be explicit.TEST=ciBug: https://github.com/dart-lang/sdk/issues/38587Change-Id: Ie27d901b639505091d86abeec51146c65bee0ef1Reviewed-on: https://dart-review.googlesource.com/c/sdk/+/221886Commit-Queue: Ryan Macnak <rmacnak@google.com>Reviewed-by: Alexander Aprelev <aam@google.com>
gcc bug	 https://github.com/ghent360/lede-project/commit/6e2556963d523ecef9a2a6130c899d146a3b7333	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>
gcc bug	 https://github.com/NetworkManager/NetworkManager/commit/dab2ee8ac5c025cc8f3dcb0f0aae7bcecab961e4	all: suppress wrong gcc-12 warning "-Wdangling-pointer"gcc-12.0.1-0.8.fc36 is annoying with false positives.It's related to g_error() and its `for(;;) ;`.For example:    ../src/libnm-glib-aux/nm-shared-utils.c: In function 'nm_utils_parse_inaddr_bin_full':    ../src/libnm-glib-aux/nm-shared-utils.c:1145:26: error: dangling pointer to 'error' may be used [-Werror=dangling-pointer=]     1145 |                     error->message);          |                          ^~    /usr/include/glib-2.0/glib/gmessages.h:343:32: note: in definition of macro 'g_error'      343 |                                __VA_ARGS__);         \          |                                ^~~~~~~~~~~    ../src/libnm-glib-aux/nm-shared-utils.c:1133:31: note: 'error' declared here     1133 |         gs_free_error GError *error = NULL;          |                               ^~~~~    /usr/include/glib-2.0/glib/gmessages.h:341:25: error: dangling pointer to 'addrbin' may be used [-Werror=dangling-pointer=]      341 |                         g_log (G_LOG_DOMAIN,         \          |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~      342 |                                G_LOG_LEVEL_ERROR,    \          |                                ~~~~~~~~~~~~~~~~~~~~~~~      343 |                                __VA_ARGS__);         \          |                                ~~~~~~~~~~~~    ../src/libnm-glib-aux/nm-shared-utils.c:1141:13: note: in expansion of macro 'g_error'     1141 |             g_error("unexpected assertion failure: could parse \"%s\" as %s, but not accepted by "          |             ^~~~~~~    ../src/libnm-glib-aux/nm-shared-utils.c:1112:14: note: 'addrbin' declared here     1112 |     NMIPAddr addrbin;          |              ^~~~~~~I think the warning could potentially be useful and prevent real bugs.So don't disable it altogether, but go through the effort to suppress itat the places where it currently happens.Note that NM_PRAGMA_WARNING_DISABLE_DANGLING_POINTER macro only expandsto suppressing the warning with __GNUC__ equal to 12. The purpose is toonly suppress the warning where we know we want to. Hopefully other gccversions don't have this problem.I guess, we could also write a NM_COMPILER_WARNING() check in"m4/compiler_options.m4", to disable the warning if we detect it. Butthat seems too cumbersome.
gcc bug	 https://github.com/fldc/openwrt-ac2100/commit/6e2556963d523ecef9a2a6130c899d146a3b7333	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>
gcc bug	 https://github.com/dirker/rpi-intercom-buildroot/commit/4b22106fb5e199aa26f148b0b159aecb7da7f7e0	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101737pixman package fails to build for the SH4 architecture with optimizationenabled with gcc up to 11.1.0:http://autobuild.buildroot.net/results/b20/b20869bbb48edb1f0a847ea9e2e1a0462d6350be/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101737Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/haveneer/cpp-advanced-training/commit/5489bed754d6f93e5f4d1c4e6ef065fe75740bd3	Add bug report in GCCThis test will fail when the bug will be solved.
gcc bug	 https://github.com/dgist-datalab/cxl-kernel/commit/e27256a55e6dd6d83818f70eed0e9dcd6e85e319	powerpc/Makefile: Don't pass -mcpu=powerpc64 when building 32-bit[ Upstream commit 2863dd2db23e0407f6c50b8ba5c0e55abef894f1 ]When CONFIG_GENERIC_CPU=y (true for all our defconfigs) we pass-mcpu=powerpc64 to the compiler, even when we're building a 32-bitkernel.This happens because we have an ifdef CONFIG_PPC_BOOK3S_64/else block inthe Makefile that was written before 32-bit supported GENERIC_CPU. Priorto that the else block only applied to 64-bit Book3E.The GCC man page says -mcpu=powerpc64 "[specifies] a pure ... 64-bit bigendian PowerPC ... architecture machine [type], with an appropriate,generic processor model assumed for scheduling purposes."It's unclear how that interacts with -m32, which we are also passing,although obviously -m32 is taking precedence in some sense, as the32-bit kernel only contains 32-bit instructions.This was noticed by inspection, not via any bug reports, but it doesaffect code generation. Comparing before/after code generation, thereare some changes to instruction scheduling, and the after case (with-mcpu=powerpc64 removed) the compiler seems more keen to use r8.Fix it by making the else case only apply to Book3E 64, which excludes32-bit.Fixes: 0e00a8c9fd92 ("powerpc: Allow CPU selection also on PPC32")Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://lore.kernel.org/r/20220215112858.304779-1-mpe@ellerman.id.auSigned-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/Dexus/buildroot-greenbone-gvmd/commit/dc6e0f75d98dfb0ec4c675f30d85161fca19394b	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101737pixman package fails to build for the SH4 architecture with optimizationenabled with gcc up to 11.1.0:http://autobuild.buildroot.net/results/b20/b20869bbb48edb1f0a847ea9e2e1a0462d6350be/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101737Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>(cherry picked from commit 4b22106fb5e199aa26f148b0b159aecb7da7f7e0)Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
gcc bug	 https://github.com/buildroot/buildroot/commit/4b22106fb5e199aa26f148b0b159aecb7da7f7e0	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101737pixman package fails to build for the SH4 architecture with optimizationenabled with gcc up to 11.1.0:http://autobuild.buildroot.net/results/b20/b20869bbb48edb1f0a847ea9e2e1a0462d6350be/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101737Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/mendersoftware/poky/commit/80cd0b8a52b5681d1d85e72b9e713d5b3b764d27	gcc: Drop further unneeded precompiled header patchAccording to comments on the bug report from gcc developers, weno longer need to do this post gcc 10. Lets therefore drop the patch.(From OE-Core rev: 8ddc6f46d40cdcc462de23d1b1218f2ed9fd3d07)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc bug	 https://github.com/RomainNaour/buildroot/commit/b61c93645da26a2b6a674881e61c5d72297fc74a	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101915lmbench package fails to build for the Microblaze architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/ae1/ae1e4d61ed367c6cb64442c60d98882cc7985346/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101915Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/jolivain/buildroot/commit/b61c93645da26a2b6a674881e61c5d72297fc74a	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101915lmbench package fails to build for the Microblaze architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/ae1/ae1e4d61ed367c6cb64442c60d98882cc7985346/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101915Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/buildroot/buildroot/commit/b61c93645da26a2b6a674881e61c5d72297fc74a	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101915lmbench package fails to build for the Microblaze architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/ae1/ae1e4d61ed367c6cb64442c60d98882cc7985346/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101915Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/nluhux/buildroot/commit/fe4e06d3176b01834fda92d25ae7ece65f3550e0	toolchain: improve conditions for gcc bug 99140Gcc bug 99140 has been fixed on gcc 8.x but reappeared on gcc 9.x whileit's been fixed on gcc 10.x+. So let's updateBR2_TOOLCHAIN_HAS_GCC_BUG_99140 accordingly.Fixes:http://autobuild.buildroot.net/results/c55/c55f50a8d657695f0d5492c32efa666254cd7f99/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/boundarydevices/buildroot/commit/b61c93645da26a2b6a674881e61c5d72297fc74a	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101915lmbench package fails to build for the Microblaze architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/ae1/ae1e4d61ed367c6cb64442c60d98882cc7985346/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101915Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/beagleboard/buildroot/commit/b61c93645da26a2b6a674881e61c5d72297fc74a	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101915lmbench package fails to build for the Microblaze architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/ae1/ae1e4d61ed367c6cb64442c60d98882cc7985346/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101915Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/RomainNaour/buildroot/commit/25c092b15b2002400b7175fd4997038ac5c86e9f	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101916heirloom-mailx package fails to build for the SH4 architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101916Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/robertlinux/yocto/commit/80cd0b8a52b5681d1d85e72b9e713d5b3b764d27	gcc: Drop further unneeded precompiled header patchAccording to comments on the bug report from gcc developers, weno longer need to do this post gcc 10. Lets therefore drop the patch.(From OE-Core rev: 8ddc6f46d40cdcc462de23d1b1218f2ed9fd3d07)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc bug	 https://github.com/jolivain/buildroot/commit/25c092b15b2002400b7175fd4997038ac5c86e9f	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101916heirloom-mailx package fails to build for the SH4 architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101916Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/buildroot/buildroot/commit/25c092b15b2002400b7175fd4997038ac5c86e9f	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101916heirloom-mailx package fails to build for the SH4 architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101916Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/boundarydevices/buildroot/commit/25c092b15b2002400b7175fd4997038ac5c86e9f	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101916heirloom-mailx package fails to build for the SH4 architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101916Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/beagleboard/buildroot/commit/25c092b15b2002400b7175fd4997038ac5c86e9f	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101916heirloom-mailx package fails to build for the SH4 architecture withoptimization enabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101916Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/RomainNaour/buildroot/commit/b8417ceee078df531be2ec3555f60b0a07ae4a0c	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101952bullet package fails to build for the SH4 architecture with optimizationenabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/32b/32bfaf0aae57ed18c18e82a72a958af9b3e1b241/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101952Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/jolivain/buildroot/commit/b8417ceee078df531be2ec3555f60b0a07ae4a0c	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101952bullet package fails to build for the SH4 architecture with optimizationenabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/32b/32bfaf0aae57ed18c18e82a72a958af9b3e1b241/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101952Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/buildroot/buildroot/commit/b8417ceee078df531be2ec3555f60b0a07ae4a0c	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101952bullet package fails to build for the SH4 architecture with optimizationenabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/32b/32bfaf0aae57ed18c18e82a72a958af9b3e1b241/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101952Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/boundarydevices/buildroot/commit/b8417ceee078df531be2ec3555f60b0a07ae4a0c	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101952bullet package fails to build for the SH4 architecture with optimizationenabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/32b/32bfaf0aae57ed18c18e82a72a958af9b3e1b241/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101952Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/beagleboard/buildroot/commit/b8417ceee078df531be2ec3555f60b0a07ae4a0c	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101952bullet package fails to build for the SH4 architecture with optimizationenabled with gcc = 11.1.0:http://autobuild.buildroot.net/results/32b/32bfaf0aae57ed18c18e82a72a958af9b3e1b241/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101952Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/quicky2000/Travis_experiment/commit/a5df68061a149bbf0ef5469be4ff342452737a47	Disable focal configuration on travis until migration to gcc 10.4 due to a bug with std::chrono and CUDA in gcc 10.3
gcc bug	 https://github.com/Zopolis4/gcj/commit/99c8e906b1e813b2f22eb3f7cb5e72ab12a3f1e7	[Ada] Document the SuSE kernel buggcc/ada/
gcc bug	 https://github.com/RomainNaour/buildroot/commit/dec95d8d79923fbf96f5692b24ea987eeec1d516	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_43744gnuradio package fails to build for the SH4 architecture with optimizationenabled with gcc 9.3.0:http://autobuild.buildroot.net/results/1db/1db6c59c98e3c09fa13277076ee2fbe7967f1f6b/    http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/and I've tested it shows up with gcc 10.x and 11.xI've commented it and supplied preprocessed file to reopen it since it wasclosed with gcc 4.x:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=43744Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/boundarydevices/buildroot/commit/949a66e660b29917e5890e3ea07dd7c10095f00c	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_83143ruby package fails to build for the SH4 architecture with optimizationenabled with gcc = 9.3.0:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/It's already been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143Anyway let's assume all SuperH(BR2_sh) have this bug according to:http://lists.busybox.net/pipermail/buildroot/2021-August/621906.htmlSigned-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc bug	 https://github.com/od-contrib/buildroot-rg350-old-kernel/commit/d667267b8f7acdb54993981813aaa05d97fdbebe	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_99410belle-sip package fails to build for the Nios2 architecture withoptimization enabled with gcc < 8.x:http://autobuild.buildroot.net/results/71f26fd81db8e9b19b3f18f3f3cefd9c768f094f/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99410Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
gcc bug	 https://github.com/feitome/buildroot/commit/d667267b8f7acdb54993981813aaa05d97fdbebe	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_99410belle-sip package fails to build for the Nios2 architecture withoptimization enabled with gcc < 8.x:http://autobuild.buildroot.net/results/71f26fd81db8e9b19b3f18f3f3cefd9c768f094f/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99410Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
gcc bug	 https://github.com/Clecius/CppMagic/commit/526df46e2e456a8994b453f610b3802af871a94f	Can specify a directory to work; Can specify a project configuration file; Can specify a directory to copy the output binary; Fixed linking static library to another static library file (.a), now extract (.o) and add to final binary; Better GCC Linux sample configuration file; Minor bug fixes.
gcc bug	 https://github.com/openlgtv/buildroot-nc4/commit/27b425ef4995e43c84b36c44d7d7d1c018b0fdef	package/heirloom-mailx: fix build failure due to gcc bug 101916The heirloom-mailx package exhibits gcc bug 101916 when built for theSH4 architecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101916=y.Also introduce HEIRLOOM_MAILX_CFLAGS as done for other packages and movethe already present -fPIC CFLAG to it.Fixes:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/kerneltoast/kernel_x86_laptop/commit/f7b95b396700a43a44a7e541c1cbf14031b42604	x86/bug: Merge annotate_reachable() into _BUG_FLAGS() asm[ Upstream commit bfb1a7c91fb7758273b4a8d735313d9cc388b502 ]In __WARN_FLAGS(), we had two asm statements (abbreviated):  asm volatile("ud2");  asm volatile(".pushsection .discard.reachable");These pair of statements are used to trigger an exception, but then helpobjtool understand that for warnings, control flow will be restoredimmediately afterwards.The problem is that volatile is not a compiler barrier. GCC explicitlydocuments this:> Note that the compiler can move even volatile asm instructions> relative to other code, including across jump instructions.Also, no clobbers are specified to prevent instructions from subsequentstatements from being scheduled by compiler before the second asmstatement. This can lead to instructions from subsequent statementsbeing emitted by the compiler before the second asm statement.Providing a scheduling model such as via -march= options enables thecompiler to better schedule instructions with known latencies to hidelatencies from data hazards compared to inline asm statements in whichlatencies are not estimated.If an instruction gets scheduled by the compiler between the two asmstatements, then objtool will think that it is not reachable, producinga warning.To prevent instructions from being scheduled in between the two asmstatements, merge them.Also remove an unnecessary unreachable() asm annotation from BUG() infavor of __builtin_unreachable(). objtool is able to track that the ud2from BUG() terminates control flow within the function.Link: https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#VolatileLink: https://github.com/ClangBuiltLinux/linux/issues/1483Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220202205557.2260694-1-ndesaulniers@google.comSigned-off-by: Sasha Levin <sashal@kernel.org>
gcc bug	 https://github.com/ruby-compiler-survey/yjit/commit/f752382688f18b98ac36aff10158309b4cf91e1c	spec/ruby/optional/capi/ext: must support GCC 5What a silly bug.
gcc bug	 https://github.com/libbpf/bpftool/commit/8453d858494cdabb32a5cf884ce14b084a59c12f	mirror: Fix definition of __compiletime_assert in included headersBuilding disasm.o with clang <= 13 fails because the__compiletime_error() function eventually pulled from macroBUILD_BUG_ON() seems to have an issue, at least when used in the contextof __compiletime_assert() as in include/linux/compiler.h. Starting withclang 14, it works better, which could be related to clang having an__error__ attribute and redefining __compiletime_error() to use it (tobe confirmed), as GCC does in include/linux/compiler-gcc.h.To fix BUILD_BUG_ON(), make sure we only use __compiletime_error() ifthe __error__ attribute exists. If not, we default to the alternativeimplementation of __compiletime_assert(), supposed to be used when__OPTIMIZE__ is unset.Signed-off-by: Quentin Monnet <quentin@isovalent.com>
gcc bug	 https://github.com/Zealandia-Systems/eigen/commit/9882aec279cbea28f5cd9ff40fc0f3e3988ab6f0	Silence string overflow warning for GCC in initializer_list_construction test.This looks to be a GCC bug.  It doesn't seem to reproduce is a smaller example,making it hard to isolate.
gcc bug	 https://github.com/percona/percona-server/commit/b8bfd2ae325b65bef95e65176af38ca052670e96	Bug #33058987 LOOK FOR ALTERNATIVE AR AND RANLIB ON UBUNTU 18.04The patch for:    Bug #32877062 SWITCH TO GCC 8 ON UBUNTU 18.04selected alternative gcc version gcc-8 on Ubuntu 18.04This patch looks for accompanying gcc-ar and gcc-ranlib tools as well.Change-Id: I07423bc78192d992e587aad081de71889fd7c4ce
gcc bug	 https://github.com/dickolsson/buildroot/commit/d667267b8f7acdb54993981813aaa05d97fdbebe	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_99410belle-sip package fails to build for the Nios2 architecture withoptimization enabled with gcc < 8.x:http://autobuild.buildroot.net/results/71f26fd81db8e9b19b3f18f3f3cefd9c768f094f/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99410Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
gcc bug	 https://github.com/build2/build2/commit/e636d8c3965cee0d0621da0696aa897049f5b269	Disable GCC -Wstringop-overread (false positives in GCC 11, bug 101361)
gcc bug	 https://github.com/longturn/freeciv21/commit/0df9a42647cb904d51ab2b225539edb81982382d	Try to work around a crash on GCC 9https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60855
gcc bug	 https://github.com/uli/basicengine-buildroot/commit/27b425ef4995e43c84b36c44d7d7d1c018b0fdef	package/heirloom-mailx: fix build failure due to gcc bug 101916The heirloom-mailx package exhibits gcc bug 101916 when built for theSH4 architecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101916=y.Also introduce HEIRLOOM_MAILX_CFLAGS as done for other packages and movethe already present -fPIC CFLAG to it.Fixes:http://autobuild.buildroot.net/results/911/911f5c024834741754102ff1bbb05c4a64c54a0b/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/checkpoint-restore/criu/commit/04f8368eaee2b29bb92ff0ba4f5c43501408d15e	compel: fix parasite with GCC 12Parasite creation started to fail with GCC 12:On x86_64 with: ./compel/compel-host hgen -f criu/pie/restorer.built-in.o -o criu/pie/restorer-blob.h Error (compel/src/lib/handle-elf-host.c:337): Unexpected undefined symbol: `strlen'. External symbol in PIE?On aarch64 with: ld: criu/pie/restorer.o: in function `lsm_set_label': /drone/src/criu/pie/restorer.c:174: undefined reference to `strlen'Line 174 is: "for (len = 0; label[len]; len++)"Adding '-ffreestanding' to parasite compilation fixes these errorsbecause, according to GCC developers:"strlen is a standard C function, so I don't see any bug in that being usedunless you do a freestanding compilation (-nostdlib isn't that)."Signed-off-by: Adrian Reber <areber@redhat.com>
gcc bug	 https://github.com/PlanetaryRobotics/eigen/commit/9882aec279cbea28f5cd9ff40fc0f3e3988ab6f0	Silence string overflow warning for GCC in initializer_list_construction test.This looks to be a GCC bug.  It doesn't seem to reproduce is a smaller example,making it hard to isolate.
gcc bug	 https://github.com/tewk/MINGW-packages/commit/bb822c43ffcce3cb861d4e61b6662de322606267	coin: limit GCC bug workaround to MINGW32clang doesn't know about that flag.
gcc bug	 https://github.com/dgist-datalab/cxl-kernel/commit/f23653fe64479d96910bfda2b700b1af17c991ac	tty: Partially revert the removal of the Cyclades public APIFix a user API regression introduced with commit f76edd8f7ce0 ("tty:cyclades, remove this orphan"), which removed a part of the API andcaused compilation errors for user programs using said part, such asGCC 9 in its libsanitizer component[1]:.../libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc:160:10: fatal error: linux/cyclades.h: No such file or directory  160 | #include <linux/cyclades.h>      |          ^~~~~~~~~~~~~~~~~~compilation terminated.make[4]: *** [Makefile:664: sanitizer_platform_limits_posix.lo] Error 1As the absolute minimum required bring `struct cyclades_monitor' andioctl numbers back then so as to make the library build again.  Add apreprocessor warning as to the obsolescence of the features provided.References:[1] GCC PR sanitizer/100379, "cyclades.h is removed from linux kernel    header files", <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100379>Fixes: f76edd8f7ce0 ("tty: cyclades, remove this orphan")Cc: stable@vger.kernel.org # v5.13+Reviewed-by: Christoph Hellwig <hch@lst.de>Signed-off-by: Maciej W. Rozycki <macro@embecosm.com>Link: https://lore.kernel.org/r/alpine.DEB.2.20.2201260733430.11348@tpp.orcam.me.ukSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/Peppe289/kernel_xiaomi_sdm660/commit/a6153f1d0d405a4a33b0a4c4a35990a7dce230d2	msm: camera_v2: remove gcc invocationsRemove gcc invocations, so that we can move to pure clang compilation.Resolves:make CC=clang HOSTCC=clang mrproper...Android GCC has been deprecated in favor of Clang, and will be removed fromAndroid in 2020-01 as per the deprecation plan in:https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.mdBug: 141693040Change-Id: I10557fb29b4a5d4139d690661c22ab5be3fedaafSigned-off-by: Petri Gynther <pgynther@google.com>Signed-off-by: Peppe289 <gsperanza204@gmail.com>
gcc bug	 https://github.com/gentoo/gentoo/commit/51ccff56f32185f96e3d371987806c597692569d	sys-devel/gcc-apple: cleanup (EAPI=5), bug #827155Closes: https://bugs.gentoo.org/827155Package-Manager: Portage-3.0.28, Repoman-3.0.3Signed-off-by: Fabian Groffen <grobian@gentoo.org>
gcc bug	 https://github.com/ElectroPerf/android_kernel_asus_sdm660-LTO/commit/2673065658d203302268b485af7a6581a7905ac0	ANDROID: arm64: vdso32: fix CC=clang buildclang build had wrong --gcc-toolchain for cross compiler.Signed-off-by: Mark Salyzyn <salyzyn@google.com>Bug: 63737556Change-Id: Ib0c3bbb250943a0309da021ba5335a8320b584f4Signed-off-by: Oktapra Amtono <oktapra.amtono@gmail.com>Signed-off-by: Kunmun <kunmun.devroms@gmail.com>
gcc bug	 https://github.com/buzzcut-s/kernel-x86/commit/f23653fe64479d96910bfda2b700b1af17c991ac	tty: Partially revert the removal of the Cyclades public APIFix a user API regression introduced with commit f76edd8f7ce0 ("tty:cyclades, remove this orphan"), which removed a part of the API andcaused compilation errors for user programs using said part, such asGCC 9 in its libsanitizer component[1]:.../libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc:160:10: fatal error: linux/cyclades.h: No such file or directory  160 | #include <linux/cyclades.h>      |          ^~~~~~~~~~~~~~~~~~compilation terminated.make[4]: *** [Makefile:664: sanitizer_platform_limits_posix.lo] Error 1As the absolute minimum required bring `struct cyclades_monitor' andioctl numbers back then so as to make the library build again.  Add apreprocessor warning as to the obsolescence of the features provided.References:[1] GCC PR sanitizer/100379, "cyclades.h is removed from linux kernel    header files", <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100379>Fixes: f76edd8f7ce0 ("tty: cyclades, remove this orphan")Cc: stable@vger.kernel.org # v5.13+Reviewed-by: Christoph Hellwig <hch@lst.de>Signed-off-by: Maciej W. Rozycki <macro@embecosm.com>Link: https://lore.kernel.org/r/alpine.DEB.2.20.2201260733430.11348@tpp.orcam.me.ukSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc bug	 https://github.com/kofuk/WebKit/commit/af81f9b0fe47238d9cf6cef555f4a65b035ae0ef	Unreviewed, -latomic is only available for GCChttps://bugs.webkit.org/show_bug.cgi?id=233097* CMakeLists.txt:Canonical link: https://commits.webkit.org/244306@maingit-svn-id: https://svn.webkit.org/repository/webkit/trunk@285880 268f45cc-cd09-0410-ab3c-d52691b4dbfc
gcc bug	 https://github.com/kutemeikito/android_kernel_xiaomi_vince-4.9/commit/60020838066714e6efe5f4ba7649458177f01e73	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Danny Lin <danny@kdrag0n.dev>Signed-off-by: GhostMaster69-dev <rathore6375@gmail.com>
gcc bug	 https://github.com/bmwiedemann/openSUSE/commit/1b188382c07cdcd9c3c59f7ab7ff906e71e18701	Update libqt5-qtbase to version 5.15.2+kde294 / rev 129 via SR 969356https://build.opensuse.org/request/show/969356by user Vogtinator + dimstar_suse- Add mitigate-FORTIFY_SOURCE-3.patch that should mitigate  new -D_FORTIFY_SOURCE=3 level as analyzed in GCC bug:  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105078. (forwarded request 969342 from marxin)
gcc bug	 https://github.com/lllgts/android_kernel_xiaomi_gemini/commit/65523b899b2256c8eac9e0daf8eee9dd495c427a	UPSTREAM: lib: crc32: constify crc32 lookup tableCommit 8f243af42ade ("sections: fix const sections for crc32 table")removed the compile-time generated crc32 tables from the RO sections,because it conflicts with the definition of __cacheline_aligned whichputs all such aligned data into .data..cacheline_aligned sectionoptimized for wasting less space, and can cause alignment issues whenused in combination with const with some gcc versions like 4.7.0 due toa gcc bug [1].Given that most gcc versions should have the fix by now, we can just use____cacheline_aligned, which only aligns the data but doesn't move itinto specific sections as opposed to __cacheline_aligned.  In case ofgcc versions having the mentioned bug, the alignment attribute will haveno effect, but the data will still be made RO.After patch tables are in RO:  $ nm -v lib/crc32.o | grep -1 -E "crc32c?table"  0000000000000000 t arch_local_irq_enable  0000000000000000 r crc32ctable_le  0000000000000000 t crc32_exit  --  0000000000000960 t test_buf  0000000000002000 r crc32table_be  0000000000004000 r crc32table_le  000000001d1056e5 A __crc_crc32_be  [1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52181Signed-off-by: Daniel Borkmann <dborkman@redhat.com>Cc: Joe Mario <jmario@redhat.com>Signed-off-by: Andrew Morton <akpm@linux-foundation.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Link: https://git.kernel.org/linus/f5e38b9284e13e28c1ef00e508238f279cf0ac3aSigned-off-by: Nathan Chancellor <natechancellor@gmail.com>
gcc bug	 https://github.com/OPM/opm-simulators/commit/924bf5ed1971b3fd5e58f640c997e03fd4633b7f	Use old style traits class approach to check for face tag support.Old version failed due to a gcc compilerbug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77446 with error:"non-constant condition for static assertion"
gcc bug	 https://github.com/imx6ull-pro/buildroot/commit/3529e8c21c939d73cc0090cb41c17b02db5b1013	board/andes: fix build failure with host gcc >= 10Add patch to fix linux bug:```  HOSTLD  scripts/dtc/dtc/usr/bin/ld: scripts/dtc/dtc-parser.tab.o:(.bss+0x10): multiple definition of `yylloc'; scripts/dtc/dtc-lexer.lex.o:(.bss+0x0): first defined herecollect2: error: ld returned 1 exit status```Fixes:https://gitlab.com/buildroot.org/buildroot/-/jobs/2021478164Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/buildroot/buildroot/commit/3529e8c21c939d73cc0090cb41c17b02db5b1013	board/andes: fix build failure with host gcc >= 10Add patch to fix linux bug:```  HOSTLD  scripts/dtc/dtc/usr/bin/ld: scripts/dtc/dtc-parser.tab.o:(.bss+0x10): multiple definition of `yylloc'; scripts/dtc/dtc-lexer.lex.o:(.bss+0x0): first defined herecollect2: error: ld returned 1 exit status```Fixes:https://gitlab.com/buildroot.org/buildroot/-/jobs/2021478164Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/boostorg/nowide/commit/4d3afcef3cb81721502361251cd8fbbad91a8bac	Use typedef for qualified struct ::stat`using` triggers a bogus warning in GCC (e.g. MinGW) < 11:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66159
gcc bug	 https://github.com/jgrant27/ryzen-fedora-kernel/commit/64d63e754c89bae4f6c1de25f7e4a5f81989a0df	Work around for gcc bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96377Signed-off-by: Justin M. Forbes <jforbes@fedoraproject.org>
gcc bug	 https://github.com/quick-lint/quick-lint-js/commit/0f7b21707e18d0326098cdc1302b4980dbf96ea2	Work around GCC 12 (beta) bugBuilding with GCC 12 (beta) is failing. It seems that GCC doesn't likeuninitialized member variables in constexpr objects, leading to builderrors [1]. Work around this GCC bug by initializing the offendingmembers.[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105191
gcc bug	 https://github.com/fabio-d/fuchsia-stardock/commit/17476fa910f12de049f65e5336e7d0b480f16204	[kernel][crypto] Suppress GCC warning in boringssl codeNewer GCC warns about suspicious-looking code that is in factsafe at runtime in boringssl (albeit not a great best-practicefor using array types in C).Bug: 88803Change-Id: I3e9ebb435ba2b7e1b5db70558ce3f1d5df44fb0cReviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/607701Fuchsia-Auto-Submit: Roland McGrath <mcgrathr@google.com>Reviewed-by: Drew Fisher <zarvox@google.com>Commit-Queue: Auto-Submit <auto-submit@fuchsia-infra.iam.gserviceaccount.com>
gcc bug	 https://github.com/facebook/fbthrift/commit/1a758c721fbf88b1ced6e3736043b8e447012122	work around gcc bug on extern+auto declsSummary:Gcc seems have an old bug of reporting conflict decls when extern and auto are involved. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78217Changing "auto" with explicit type to work around this bugReviewed By: prakashgayasenDifferential Revision: D34347715fbshipit-source-id: b7757d0279c3b6b98cfac663f28bf8849933f3b9
gcc bug	 https://github.com/Bitcoin-ABC/bitcoin-abc/commit/978dc6c00a227b0ff396cf084d4810f39d7475c9	Work around GCC -Wmaybe-uninitialized false positiveSummary:This works around a GCC bug:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80635Test Plan:With an affected GCC version:  ninja all checkReviewers: #bitcoin_abc, majcostaReviewed By: #bitcoin_abc, majcostaDifferential Revision: https://reviews.bitcoinabc.org/D8630
gcc bug	 https://github.com/facebook/fbthrift/commit/dced3aebffd498459a562546e1636ebf1bdbaef4	Workaround a gcc issue (#495)Summary:Works around the following error when building with gcc:```thrift/lib/cpp2/GeneratedCodeHelper.h:991:16: error: 闁炽儲螜rocessor闁?was not declared in this scope                processor,                ^~~~~~~~~```Likely the gcc bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71546.Pull Request resolved: https://github.com/facebook/fbthrift/pull/495Test Plan: https://github.com/facebook/fbthrift/runs/6066858917Reviewed By: iahsDifferential Revision: D35726038Pulled By: vitautfbshipit-source-id: b536f30995546c6a6843fa41cd57d7186b765896
gcc bug	 https://github.com/sqlite/sqlite/commit/2f04583f041c7b49b0db98d3a653dd0f802b6284	Work-around for [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96270|GCC bug 96270].FossilOrigin-Name: 9679c0c61131f0e986551701a64191da0ee0f50880eaa57fe4bf520e3fecf634
gcc bug	 https://github.com/cyberknight777/linux-dragonheart/commit/6ec281c72fe648a9a51ed748832d7dc5eca6f590	x86/kconfig: more uarches for kernel 5.15+FEATURESThis patch adds additional CPU options to the Linux kernel accessible under: Processor type and features  --->  Processor family --->With the release of gcc 11.1 and clang 12.0, several generic 64-bit levels areoffered which are good for supported Intel or AMD CPUs:闁?x86-64-v2闁?x86-64-v3闁?x86-64-v4Users of glibc 2.33 and above can see which level is supported by currenthardware by running:  /lib/ld-linux-x86-64.so.2 --help | grep supportedAlternatively, compare the flags from /proc/cpuinfo to this list.[1]CPU-specific microarchitectures include:闁?AMD Improved K8-family闁?AMD K10-family闁?AMD Family 10h (Barcelona)闁?AMD Family 14h (Bobcat)闁?AMD Family 16h (Jaguar)闁?AMD Family 15h (Bulldozer)闁?AMD Family 15h (Piledriver)闁?AMD Family 15h (Steamroller)闁?AMD Family 15h (Excavator)闁?AMD Family 17h (Zen)闁?AMD Family 17h (Zen 2)闁?AMD Family 19h (Zen 3)闁炽儳濮埀 Intel Silvermont low-power processors闁?Intel Goldmont low-power processors (Apollo Lake and Denverton)闁?Intel Goldmont Plus low-power processors (Gemini Lake)闁?Intel 1st Gen Core i3/i5/i7 (Nehalem)闁?Intel 1.5 Gen Core i3/i5/i7 (Westmere)闁?Intel 2nd Gen Core i3/i5/i7 (Sandybridge)闁?Intel 3rd Gen Core i3/i5/i7 (Ivybridge)闁?Intel 4th Gen Core i3/i5/i7 (Haswell)闁?Intel 5th Gen Core i3/i5/i7 (Broadwell)闁?Intel 6th Gen Core i3/i5/i7 (Skylake)闁?Intel 6th Gen Core i7/i9 (Skylake X)闁?Intel 8th Gen Core i3/i5/i7 (Cannon Lake)闁?Intel 10th Gen Core i7/i9 (Ice Lake)闁?Intel Xeon (Cascade Lake)闁?Intel Xeon (Cooper Lake)*闁?Intel 3rd Gen 10nm++ i3/i5/i7/i9-family (Tiger Lake)*闁?Intel 3rd Gen 10nm++ Xeon (Sapphire Rapids)闁炽儮妾ч埀 Intel 11th Gen i3/i5/i7/i9-family (Rocket Lake)闁炽儮妾ч埀 Intel 12th Gen i3/i5/i7/i9-family (Alder Lake)闁硉es: If not otherwise noted, gcc >=9.1 is required for support.       *Requires gcc >=10.1 or clang >=10.0       闁炽儳鍤漞quired gcc >=10.3 or clang >=12.0       闁硄uired gcc >=11.1 or clang >=12.0It also offers to compile passing the 'native' option which, "selects the CPUto generate code for at compilation time by determining the processor type ofthe compiling machine. Using -march=native enables all instruction subsetssupported by the local machine and will produce code optimized for the localmachine under the constraints of the selected instruction set."[2]Users of Intel CPUs should select the 'Intel-Native' option and users of AMDCPUs should select the 'AMD-Native' option.MINOR NOTES RELATING TO INTEL ATOM PROCESSORSThis patch also changes -march=atom to -march=bonnell in accordance with thegcc v4.9 changes. Upstream is using the deprecated -match=atom flags when Ibelieve it should use the newer -march=bonnell flag for atom processors.[3]It is not recommended to compile on Atom-CPUs with the 'native' option.[4] Therecommendation is to use the 'atom' option instead.BENEFITSSmall but real speed increases are measurable using a make endpoint comparinga generic kernel to one built with one of the respective microarchs.See the following experimental evidence supporting this statement:https://github.com/graysky2/kernel_gcc_patchREQUIREMENTSlinux version >=5.15gcc version >=9.0 or clang version >=9.0ACKNOWLEDGMENTSThis patch builds on the seminal work by Jeroen.[5]REFERENCES1.  https://gitlab.com/x86-psABIs/x86-64-ABI/-/commit/77566eb03bc6a326811cb7e92.  https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html#index-x86-Options3.  https://bugzilla.kernel.org/show_bug.cgi?id=774614.  https://github.com/graysky2/kernel_gcc_patch/issues/155.  http://www.linuxforge.net/docs/linux/linux-gcc.phpSigned-off-by: graysky <graysky@archlinux.us>Signed-off-by: Dakkshesh <dakkshesh5@gmail.com>Signed-off-by: Cyber Knight <cyberknight755@gmail.com>
gcc bug	 https://github.com/pfsense/FreeBSD-src/commit/77396775753d244fd3dee6b1920faf942d42536b	Reapply r344852:Put in a temporary workaround for what is likely a gcc 6 bug (it doesnot occur with gcc 7 or later).  This should prevent the following errorfrom breaking the head-amd64-gcc CI builds:In file included from /workspace/src/contrib/llvm/tools/lldb/source/API/SBMemoryRegionInfo.cpp:14:0:/workspace/src/contrib/llvm/tools/lldb/include/lldb/Target/MemoryRegionInfo.h:128:54: error: 'template<class _InputIterator> lldb_private::MemoryRegionInfos::MemoryRegionInfos(_InputIterator, _InputIterator, const allocator_type&)' inherited from 'std::__1::vector<lldb_private::MemoryRegionInfo>'   using std::vector<lldb_private::MemoryRegionInfo>::vector;                                                      ^~~~~~/workspace/src/contrib/llvm/tools/lldb/include/lldb/Target/MemoryRegionInfo.h:128:54: error: conflicts with version inherited from 'std::__1::vector<lldb_private::MemoryRegionInfo>'Reported by:
gcc bug	 https://github.com/andyholst/linux-stable-fork/commit/bfb1a7c91fb7758273b4a8d735313d9cc388b502	x86/bug: Merge annotate_reachable() into _BUG_FLAGS() asmIn __WARN_FLAGS(), we had two asm statements (abbreviated):  asm volatile("ud2");  asm volatile(".pushsection .discard.reachable");These pair of statements are used to trigger an exception, but then helpobjtool understand that for warnings, control flow will be restoredimmediately afterwards.The problem is that volatile is not a compiler barrier. GCC explicitlydocuments this:> Note that the compiler can move even volatile asm instructions> relative to other code, including across jump instructions.Also, no clobbers are specified to prevent instructions from subsequentstatements from being scheduled by compiler before the second asmstatement. This can lead to instructions from subsequent statementsbeing emitted by the compiler before the second asm statement.Providing a scheduling model such as via -march= options enables thecompiler to better schedule instructions with known latencies to hidelatencies from data hazards compared to inline asm statements in whichlatencies are not estimated.If an instruction gets scheduled by the compiler between the two asmstatements, then objtool will think that it is not reachable, producinga warning.To prevent instructions from being scheduled in between the two asmstatements, merge them.Also remove an unnecessary unreachable() asm annotation from BUG() infavor of __builtin_unreachable(). objtool is able to track that the ud2from BUG() terminates control flow within the function.Link: https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#VolatileLink: https://github.com/ClangBuiltLinux/linux/issues/1483Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>Link: https://lore.kernel.org/r/20220202205557.2260694-1-ndesaulniers@google.com
gcc bug	 https://github.com/starfive-tech/linux/commit/ad7489d5262d2aa775b5e5a1782793925fa90065	mm: uninline copy_overflow()While building a small config with CONFIG_CC_OPTIMISE_FOR_SIZE, I endedup with more than 50 times the following function in vmlinux because GCCdoesn't honor the 'inline' keyword:
gcc bug	 https://github.com/linuxppc/linux-ci/commit/e463a09af2f0677b9485a7e8e4e70b396b2ffb6f	x86: Add straight-line-speculation mitigationMake use of an upcoming GCC feature to mitigatestraight-line-speculation for x86:  https://gcc.gnu.org/g:53a643f8568067d7700a9f2facc8ba39974973d3  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952  https://bugs.llvm.org/show_bug.cgi?id=52323It's built tested on x86_64-allyesconfig using GCC-12 and GCC-11.Maintenance overhead of this should be fairly low due to objtoolvalidation.Size overhead of all these additional int3 instructions comes to:     text
gcc bug	 https://github.com/rollbear/trompeloeil/commit/32984f5d97219448acf60d5288aa1ad852b36700	Specialize printer<wildcard> to work around GCC oddity (bug?)
gcc bug	 https://github.com/gramineproject/gramine/commit/97704a59456cf94e7a90ec995f7eade1cf426a82	[Pal/LibOS] Fix overflow checks in calloc()- Fixes a bug in PAL's calloc() (missing overflow check, most likely a  security issue).- Changes LibOS's calloc() to use overflow builtins for better  performance (no division needed; we use GCC/clang builtins everywhere  anyways).Signed-off-by: Micha閼?Kowalczyk <mkow@invisiblethingslab.com>
gcc bug	 https://github.com/linux4sam/buildroot-at91/commit/b785de9f3f4f87732a657ded2809706763502163	package/bullet: fix build failure due to gcc bug 101952The bullet package exhibits gcc bug 101952 when built for the SH4architecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101952=y like wealready do for BR2_TOOLCHAIN_HAS_GCC_BUG_85180=y.Fixes:http://autobuild.buildroot.net/results/32b/32bfaf0aae57ed18c18e82a72a958af9b3e1b241/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/gentoo/gentoo/commit/192068fcd5aa14c681bcd90fe28f4bff641599e1	sys-devel/gcc: add workaround for cross-compile failureBug: https://bugs.gentoo.org/803371Signed-off-by: Sam James <sam@gentoo.org>
gcc bug	 https://github.com/build2/libbutl/commit/c4c21166951b6da7418f85408ea1bfd11e662ebb	Disable GCC -Wstringop-overread (false positives in GCC 11, bug 101361)
gcc bug	 https://github.com/dirker/rpi-intercom-buildroot/commit/63943ecf455fabba2b91f5c2a901f220d3975cb4	package/lmbench: fix build failure due to gcc bug 101915The lmbench package exhibits gcc bug 101915 when built for theMicroblaze architecture with optimization enabled, which causes a buildfailure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101915=y.Fixes:http://autobuild.buildroot.net/results/ae1/ae1e4d61ed367c6cb64442c60d98882cc7985346/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/xdroid-devices/xd_kernel_xiaomi_selene/commit/f88bd0e0a583240781fa714dc654d554da850954	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: khusika <khusikadhamar@gmail.com>Signed-off-by: UtsavBalar1231 <utsavbalar1231@gmail.com>
gcc bug	 https://github.com/foss-for-synopsys-dwc-arc-processors/buildroot/commit/b1e8594f0926c7867b0efbff5fafa411e54c2782	toolchain: reorder gcc bugs by numberReorder gcc bugs by numberSigned-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/kernel-patches/bpf/commit/e463a09af2f0677b9485a7e8e4e70b396b2ffb6f	x86: Add straight-line-speculation mitigationMake use of an upcoming GCC feature to mitigatestraight-line-speculation for x86:  https://gcc.gnu.org/g:53a643f8568067d7700a9f2facc8ba39974973d3  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952  https://bugs.llvm.org/show_bug.cgi?id=52323It's built tested on x86_64-allyesconfig using GCC-12 and GCC-11.Maintenance overhead of this should be fairly low due to objtoolvalidation.Size overhead of all these additional int3 instructions comes to:     text
gcc bug	 https://github.com/tensorflow/tflite-micro/commit/111411523bc7bcaf8dad75a9b0e2fc47948ef70d	Workaround for failing arm-gcc download. (#509)BUG=#508 and http://b/200052821
gcc bug	 https://github.com/greearb/linux-ct-5.17/commit/e463a09af2f0677b9485a7e8e4e70b396b2ffb6f	x86: Add straight-line-speculation mitigationMake use of an upcoming GCC feature to mitigatestraight-line-speculation for x86:  https://gcc.gnu.org/g:53a643f8568067d7700a9f2facc8ba39974973d3  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952  https://bugs.llvm.org/show_bug.cgi?id=52323It's built tested on x86_64-allyesconfig using GCC-12 and GCC-11.Maintenance overhead of this should be fairly low due to objtoolvalidation.Size overhead of all these additional int3 instructions comes to:     text
gcc bug	 https://github.com/aagit/aa/commit/e463a09af2f0677b9485a7e8e4e70b396b2ffb6f	x86: Add straight-line-speculation mitigationMake use of an upcoming GCC feature to mitigatestraight-line-speculation for x86:  https://gcc.gnu.org/g:53a643f8568067d7700a9f2facc8ba39974973d3  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952  https://bugs.llvm.org/show_bug.cgi?id=52323It's built tested on x86_64-allyesconfig using GCC-12 and GCC-11.Maintenance overhead of this should be fairly low due to objtoolvalidation.Size overhead of all these additional int3 instructions comes to:     text
gcc bug	 https://github.com/lu-zero/aom/commit/06e13e8174b6109b3c7c9aab91305062e17fd0ee	quiet -Warray-parameter warningsw/gcc-11this matches the definition of the function with the declarationthis is similar to the change in libvpx:7fbcee49d quiet -Warray-parameter warningsBug: aomedia:3204Change-Id: I757b731b9560cb0b0ceec4ec258ec5af5a183b3d
gcc bug	 https://github.com/build2/libbuild2-kconfig/commit/ea04620c4786c24b810114b635bc8c82ad953527	Disable GCC -Wstringop-overread (false positives in GCC 11, bug 101361)
gcc bug	 https://github.com/foss-for-synopsys-dwc-arc-processors/buildroot/commit/b785de9f3f4f87732a657ded2809706763502163	package/bullet: fix build failure due to gcc bug 101952The bullet package exhibits gcc bug 101952 when built for the SH4architecture with optimization enabled, which causes a build failure.As done for other packages in Buildroot work around this gcc bug bysetting optimization to -O0 if BR2_TOOLCHAIN_HAS_GCC_BUG_101952=y like wealready do for BR2_TOOLCHAIN_HAS_GCC_BUG_85180=y.Fixes:http://autobuild.buildroot.net/results/32b/32bfaf0aae57ed18c18e82a72a958af9b3e1b241/Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
gcc bug	 https://github.com/dirker/rpi-intercom-buildroot/commit/b1e8594f0926c7867b0efbff5fafa411e54c2782	toolchain: reorder gcc bugs by numberReorder gcc bugs by numberSigned-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Yann E. MORIN <yann.morin.1998@free.fr>
gcc bug	 https://github.com/sgtest/megarepo/commit/3edba7e9e16252b97e324fda7f65eece187dc71c	linux: qnx4: work around gcc false positive warning bugCommit: d5f6545934c47e97c0b48a645418e877b452a992
gcc bug	 https://github.com/sgtest/megarepo/commit/4ba43446bca09d24fcf011c1a6b74040e3bd7da8	linux: qnx4: work around gcc false positive warning bugCommit: d5f6545934c47e97c0b48a645418e877b452a992
gcc bug	 https://github.com/sgtest/megarepo/commit/05bb973784e362f3978557816a8014cb3f3b1b6e	linux: qnx4: work around gcc false positive warning bugCommit: d5f6545934c47e97c0b48a645418e877b452a992
gcc bug	 https://github.com/sgtest/megarepo/commit/056024043df3104c1fdedb3718e1e813baea41c3	linux: qnx4: work around gcc false positive warning bugCommit: d5f6545934c47e97c0b48a645418e877b452a992
gcc bug	 https://github.com/jack603047588/meigen/commit/9882aec279cbea28f5cd9ff40fc0f3e3988ab6f0	Silence string overflow warning for GCC in initializer_list_construction test.This looks to be a GCC bug.  It doesn't seem to reproduce is a smaller example,making it hard to isolate.
gcc bug	 https://github.com/torvalds/linux/commit/68cf4f2a72ef8786e6b7af6fd9a89f27ac0f520d	x86: Use -mindirect-branch-cs-prefix for RETPOLINE buildsIn order to further enable commit:  bbe2df3f6b6d ("x86/alternative: Try inline spectre_v2=retpoline,amd")add the new GCC flag -mindirect-branch-cs-prefix:  https://gcc.gnu.org/g:2196a681d7810ad8b227bf983f38ba716620545e  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952  https://bugs.llvm.org/show_bug.cgi?id=52323to RETPOLINE=y builds. This should allow fully inlining retpoline,amdfor GCC builds.Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Signed-off-by: Borislav Petkov <bp@suse.de>Reviewed-by: Kees Cook <keescook@chromium.org>Acked-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lkml.kernel.org/r/20211119165630.276205624@infradead.org
gcc bug	 https://github.com/peterzuger/linux/commit/68cf4f2a72ef8786e6b7af6fd9a89f27ac0f520d	x86: Use -mindirect-branch-cs-prefix for RETPOLINE buildsIn order to further enable commit:  bbe2df3f6b6d ("x86/alternative: Try inline spectre_v2=retpoline,amd")add the new GCC flag -mindirect-branch-cs-prefix:  https://gcc.gnu.org/g:2196a681d7810ad8b227bf983f38ba716620545e  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952  https://bugs.llvm.org/show_bug.cgi?id=52323to RETPOLINE=y builds. This should allow fully inlining retpoline,amdfor GCC builds.Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Signed-off-by: Borislav Petkov <bp@suse.de>Reviewed-by: Kees Cook <keescook@chromium.org>Acked-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lkml.kernel.org/r/20211119165630.276205624@infradead.org
gcc bug	 https://github.com/oss-mirror/ghostscript/commit/a9ce865035e798c30d0619399b3bdc69a4cc5943	Bug 703948: move pragmas out of function bodyOlder gcc versions give the error:"#pragma GCC diagnostic not allowed inside functions",
gcc bug	 https://github.com/AnGgIt88/Finix_kernel-4.9-rosy/commit/0c7a1a7971d88f923ca6ca60cbdb856b8e45405a	vdso32: Invoke clang with correct path to GCC toolchainClang needs to have access to a GCC toolchain which we advertise usingthe command line option --gcc-toolchain=. Clang previously picked thewrong toolchain which resulted in the following error message:/..//bin/as: unrecognized option '-EL'Bug: 123422077Signed-off-by: Daniel Mentz <danielmentz@google.com>Change-Id: I3e339dd446b71e2c75eb9e2c186eba715b3771cdSigned-off-by: Albert I <kras@raphielgang.org>
gcc bug	 https://github.com/ishkamiel/linux/commit/68cf4f2a72ef8786e6b7af6fd9a89f27ac0f520d	x86: Use -mindirect-branch-cs-prefix for RETPOLINE buildsIn order to further enable commit:  bbe2df3f6b6d ("x86/alternative: Try inline spectre_v2=retpoline,amd")add the new GCC flag -mindirect-branch-cs-prefix:  https://gcc.gnu.org/g:2196a681d7810ad8b227bf983f38ba716620545e  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952  https://bugs.llvm.org/show_bug.cgi?id=52323to RETPOLINE=y builds. This should allow fully inlining retpoline,amdfor GCC builds.Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Signed-off-by: Borislav Petkov <bp@suse.de>Reviewed-by: Kees Cook <keescook@chromium.org>Acked-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lkml.kernel.org/r/20211119165630.276205624@infradead.org
gcc bug	 https://github.com/iKeramat/msm-4.4/commit/ba92f1d631192b3f1a103194bb9cefec11f1da30	FROMLIST: BACKPORT: kbuild: add __cc-ifversion and compiler-specific variantsThis change adds macros for testing both compiler name andversion. Current cc-version, cc-ifversion etc. macros that testgcc version are left unchanged to prevent compatibility issueswith existing tests.Bug: 62093296Bug: 67506682Change-Id: I14965fcc21dae8dfe31881b172214bf6f8a9f440(am from https://patchwork.kernel.org/patch/10085767/)Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
gcc bug	 https://github.com/iKeramat/msm-4.4/commit/c234f96402ecab31c4e59cb94802844be08d8821	FROMLIST: kbuild: add clang-version.shBased on gcc-version.sh, clang-version.sh prints out the correctversion of clang.Bug: 62093296Bug: 67506682Change-Id: I399ed4cfbe30f6ac93e519abd84dd4c7cb96e32c(am from https://patchwork.kernel.org/patch/10085763/)Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Sami Tolvanen <samitolvanen@google.com>Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>Signed-off-by: Mohammad Hasan Keramat J <ikeramat@protonmail.com>
gcc bug	 https://github.com/intel/gvt-linux/commit/68cf4f2a72ef8786e6b7af6fd9a89f27ac0f520d	x86: Use -mindirect-branch-cs-prefix for RETPOLINE buildsIn order to further enable commit:  bbe2df3f6b6d ("x86/alternative: Try inline spectre_v2=retpoline,amd")add the new GCC flag -mindirect-branch-cs-prefix:  https://gcc.gnu.org/g:2196a681d7810ad8b227bf983f38ba716620545e  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102952  https://bugs.llvm.org/show_bug.cgi?id=52323to RETPOLINE=y builds. This should allow fully inlining retpoline,amdfor GCC builds.Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Signed-off-by: Borislav Petkov <bp@suse.de>Reviewed-by: Kees Cook <keescook@chromium.org>Acked-by: Nick Desaulniers <ndesaulniers@google.com>Link: https://lkml.kernel.org/r/20211119165630.276205624@infradead.org
gcc bug	 https://github.com/Yinwhe/hJH-OS/commit/b937af7e7181b2789888422bb01d89a319d1c41f	fix: Some bugs about params of gcc
gcc bug	 https://github.com/gentoouser832/gentoo/commit/2f5e024709d3890cc93fa59b65985fd938730195	sys-devel/gcc-apple-4.2.1_p5666-r3: revbump for EAPI=7Bug: https://bugs.gentoo.org/827155Package-Manager: Portage-3.0.28, Repoman-3.0.3Signed-off-by: Fabian Groffen <grobian@gentoo.org>
gcc bug	 https://github.com/eigen-mirror/eigen/commit/9882aec279cbea28f5cd9ff40fc0f3e3988ab6f0	Silence string overflow warning for GCC in initializer_list_construction test.This looks to be a GCC bug.  It doesn't seem to reproduce is a smaller example,making it hard to isolate.
gcc workaround	 https://github.com/xenia-project/xenia/commit/10ff77a24f25827021a900b730e8868b878b1f14	[Base] Add workaround for GCC bughttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=100801
gcc workaround	 https://github.com/navsystem/gentoo-portage/commit/4a66e15deb7f7ec7ad747c292da3d88adf674f30	dev-libs/libgcrypt: add workaround for GCC 11 bug for ARM64Need to revbump because of miscompilation with -O3/-ftree-vectorize onARM64 with < GCC 11.3 (or 11.2.1_p* in Gentoo). Let's be on the safe side.Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/sourceruckus/linux-mdl/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/vladlogyin/linux-tb-j616f/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/StollD/linux-fedora/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/scivision/mumps/commit/6a3b7c69f39af6e1b6066922031d83a624dcc7f9	apply INSTALL-suggested Intel intsize64 workaround.MKL is still not working. But GCC alone without MKL works with intsize64.
gcc workaround	 https://github.com/ODEX-TOS/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Panchajanya1999/linux-mainline/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Demon000/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/yoctoproject/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/tewk/MINGW-packages/commit/bb822c43ffcce3cb861d4e61b6662de322606267	coin: limit GCC bug workaround to MINGW32clang doesn't know about that flag.
gcc workaround	 https://github.com/tewk/MINGW-packages/commit/5b75f89fb59982adf45d25cc08d0fef400916d2a	Merge pull request #8985 from jeremyd2019/grpc-gcc-workaroundsgrpc: add back LDFLAGS workarounds.
gcc workaround	 https://github.com/mingw-w64/mingw-w64/commit/bbf8ca00fb848dd5b56d804248ab52bfe455c7a6	headers: Enable WIDL_EXPLICIT_AGGREGATE_RETURNS on arm/aarch64 tooWhile clang does match MSVC with regards to aggregate returns, whenrun in MSVC mode, it matches GCC when run in mingw mode - and thesame behaviour extends to arm/aarch64 too.Thus, this workaround needs to be enabled on all architectures,not only on x86.Signed-off-by: Martin Storsjö <martin@martin.st>
gcc workaround	 https://github.com/scivision/homebrew-tap/commit/b784ec31e28bae199d211ff2805d0393e84ac2ee	gcc-10 for workaround
gcc workaround	 https://github.com/SNSystems/pstore/commit/d3324b9135ba821b72efa65af12c16587da9936f	Fix for a GCC 5.5.0 Ci build failure introduce by commit 329d12fe.A workaround for an issue with some versions GNU libc++ that wasexposed by the GCC 5.5.0 CI/ build. Prior to a change in 2018-09-18,std::is_default_constructible<> would return true forpstore::unique_pointer<> but a static assertion would fire when thedefault constructor was used.The fix injects a specialization of BuiltinDefaultValue<> into GoogleMock which bypasses std::is_default_constructible<>.Tweak the DbArchiveReadSpan fixture so that it avoids inheriting fromEmptyStore but instead aggregates InMemoryStore.
gcc workaround	 https://github.com/josibake/champcoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/tsduck/tsduck/commit/b2530ca67815154038d6b93f23c19fbf69747603	Workaround for old GCC 4/8 bug
gcc workaround	 https://github.com/parkovski/wscoro/commit/282f109af6024f72ae7f6af1ed32cbe97a9a2b38	gcc workaround bug
gcc workaround	 https://github.com/awenocur/cag-overlay/commit/34d574480f82ed2e6778a696554e7942521be30b	fqtools workaround for GCC 10
gcc workaround	 https://github.com/nodfur/nixpkgs/commit/d01533ceabdd84674a90691969bf4294e9d97ce1	pkgsCross.avr.buildPackages.gcc{10,11}: avoid log limit on hydraWhen upgrading from gcc 9 to 10, avr-gcc started to hit the hydra loglimit, preventing the binary cache from being populated.This commit tries to workaround this issue by passing `-s` to make foravr-gcc 10 and 11 which seem to exhibit this problem.Reference #135605.
gcc workaround	 https://github.com/gitlab-freedesktop-mirrors/drm/commit/eaf234c1489f53035fba1698c1a27781f5755be6	meson: switch to cc.get_supported_argumentsThis is generally faster, as meson is able to parallelize the checks forus.This also removes the workaround for checking gcc/clang -Wno-*arguments, which meson now handles internally so we don't need to handleit ourselves.Signed-off-by: Dylan Baker <dylan@pnwbakers.com>Reviewed-by: Simon Ser <contact@emersion.fr>
gcc workaround	 https://github.com/ProjectElixir-Devices/kernel_oneplus_sm8250/commit/694acfadaa9c064cb71d5a977c263d8c2ecbd047	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/pfsense/FreeBSD-src/commit/4184d83296dfcec12e3fae94870715b968e8cf83	Undo r230021 again, further shrinking the diff against upstream.This revision worked around an endless recursion when compiling clzdi2.cand ctzdi2.c with gcc, upstream landed a different workaround for thisin https://reviews.llvm.org/rL324593, which is effective enough.Noticed by:
gcc workaround	 https://github.com/seqsense/aports-ros-experimental/commit/e714716ffc149962329400181a490a4305747e82	ros/noetic.v3.14/ros-noetic-roscpp: workaround gcc segmentation fault
gcc workaround	 https://github.com/kotatogram/kotatogram-desktop/commit/3defb067833999c240f0ecc39864952515f22fba	Workaround build issues on GCC.
gcc workaround	 https://github.com/kismetwireless/kismet/commit/d1b511f0aaf3dd5d8e9e595ecd20657fe98fc2c0	re-implement gcc <4.9 workaround for timed mutexesre-implement gcc <4.9 workaround for timed mutexes
gcc workaround	 https://github.com/moonlight-stream/moonlight-common-c/commit/221af8295064b24222dee7a42fff179e89ec9a0f	Add workaround for false GCC warning in CI
gcc workaround	 https://github.com/rgreenblatt/path/commit/dee1f1d51a748cd2291ea4db691cddd3d9d5ed21	gcc workarounds
gcc workaround	 https://github.com/MontaVista-OpenSourceTechnology/linux-live-app-coredump/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/lanl/nubhlight/commit/0fd28c95570d9e79b123f0b3bbd48da82b21c7cb	workaround dumb gcc 10 fortran 'fixes'
gcc workaround	 https://github.com/googleprodkernel/linux-platforms/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/nine7nine/linux-cachy-nspa/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/herrnst/dddvb-linux-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/mbd98/hp-touchpad-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/FarGroup/FarManager/commit/19074debd07d1d00d8f97f1dcf81b11359701959	Workaround for gcc 10
gcc workaround	 https://github.com/ccns/dreambbs/commit/5d9a900bf61bbb5d74918603f7e6ac881c39edf1	fix(Xover, C++): fix KeyFunc* definition errors since bed0a98151e15ba2511888fabd731699edb35ef3This partially reverts commit b4cbfcec30b59b14c400c17eafa6a3a03e6fffd7.GCC did not properly support function overload resolutionfor designated initializers in C++20.It seems that GCC 10 does not have this issue anymore,and therefore the workaround is removed.
gcc workaround	 https://github.com/openembedded/openembedded-core/commit/567e199862acb948cb8b3361010a9ec221147c41	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/interruptinuse/mingw-w64-subdirs/commit/bbf8ca00fb848dd5b56d804248ab52bfe455c7a6	headers: Enable WIDL_EXPLICIT_AGGREGATE_RETURNS on arm/aarch64 tooWhile clang does match MSVC with regards to aggregate returns, whenrun in MSVC mode, it matches GCC when run in mingw mode - and thesame behaviour extends to arm/aarch64 too.Thus, this workaround needs to be enabled on all architectures,not only on x86.Signed-off-by: Martin Storsjö <martin@martin.st>
gcc workaround	 https://github.com/pro-bitcoin/pro-bitcoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/SeokWooo/fmt/commit/8c1b22ba6d2758a0a7a3da04c5ad42beab5b130b	Workaround a gcc 9.1 bug (#2334)
gcc workaround	 https://github.com/ShaunakChakraborty/Vlang/commit/117091452b2afe2ad2031cdc03f720bb13df24e7	os: workaround `_ = C.pipe(&pipeset[0])` gcc warning `warning: ignoring return value of pipe declared with attribute warn_unused_result` (#12046)
gcc workaround	 https://github.com/MarcoFalke/bitcoin-core-with-ci/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/wapchangex/git/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/ljmf00/lldb-d/commit/d9eb6c7cf55f88b28bdc6edad2eb45d0d52dfa1a	[libc++abi] Remove workarounds for missing -Wno-exceptions on older GCCshttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=97675 has now been resolvedin GCC 11, so we can remove those workarounds.Differential Revision: https://reviews.llvm.org/D109188
gcc workaround	 https://github.com/MontaVista-OpenSourceTechnology/meta-xilinx/commit/2a41a15473fa4d965095422bc9ee7a9a9b9b627b	gcc standalone: Add workaround for microblaze -Os bugRemove -enable-target-optspace, which forces -Os when building variousinternal libraries.Signed-off-by: Mark Hatle <mark.hatle@xilinx.com>
gcc workaround	 https://github.com/danielmundi/sbuild-debian-package/commit/76b82cba11f23973673db3d8aa32f38fd353b805	Fix workaroundCopy qemu-arm-static into schroot and also fix schroot command chain. `--` is important between `--directory` and `gcc`.
gcc workaround	 https://github.com/TorqueGameEngines/Torque3D/commit/3aa7174a646f74c3d80581f212d2089a94d8025e	Merge pull request #559 from Ragora/bugfix-gcc-release-mode* Workaround: GCC Release mode Runtime Errors
gcc workaround	 https://github.com/Ergus/Emacs/commit/dd2a8468904c2da57b4f1efe812c31742b4ff6aa	Add workaround to compilation warning in gcc 10.x in image.c* src/image.c (webp_load): Work around a (wrong) compiler warningin gcc 10.x (bug#52276).
gcc workaround	 https://github.com/c0001/entropy-gnu-emacs-src/commit/dd2a8468904c2da57b4f1efe812c31742b4ff6aa	Add workaround to compilation warning in gcc 10.x in image.c* src/image.c (webp_load): Work around a (wrong) compiler warningin gcc 10.x (bug#52276).
gcc workaround	 https://github.com/dalanicolai/emacs/commit/dd2a8468904c2da57b4f1efe812c31742b4ff6aa	Add workaround to compilation warning in gcc 10.x in image.c* src/image.c (webp_load): Work around a (wrong) compiler warningin gcc 10.x (bug#52276).
gcc workaround	 https://github.com/Prajwal-Koirala/fuchsia/commit/2956f19738b524808a0c609640edbbbb46d7489f	[kernel][x86] Remove <cpuid.h> inclusion workaroundPreviously, both GCC and Clang supplied <cpuid.h> without a multipleinclusion guard. This has since been fixed (as of GCC 11.2.1 and Clang14.0.0).Fixed: 64109Change-Id: I37a0f045890829eda7447c17be4c7b7f2fc41a53Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/650342Fuchsia-Auto-Submit: Joshua Seaton <joshuaseaton@google.com>Reviewed-by: Roland McGrath <mcgrathr@google.com>Commit-Queue: Joshua Seaton <joshuaseaton@google.com>
gcc workaround	 https://github.com/PixelExp-Project/frameworks_av/commit/9314b79f9e90fa214fc1bb50e880f1e576ccd524	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
gcc workaround	 https://github.com/Prajwal-Koirala/fuchsia/commit/44c7821781fde89dd1786f3561a1dbdae3a8e92c	[kernel] Punt GCC <arm_acle.h> workaroundThe arcane workaround for -mgeneral-regs-only has regressed in somecases under GCC 11.  Unfortunately, the GCC bug that motivated itstill has not been fixed yet.  However, it turns out that GCC's<arm_acle.h> is not actually providing anything the kernel is using.So punt the workaround kludge and go back to -mgeneral-regs-only onthe command line for kernel code, which avoids GCC 11's new issues.Bug: 88803Change-Id: I490dd24bf938b72e3ad9b2facdeb240a402204a1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/611947Fuchsia-Auto-Submit: Roland McGrath <mcgrathr@google.com>Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Roland McGrath <mcgrathr@google.com>
gcc workaround	 https://github.com/strace/strace/commit/ec1cfe685f86f14fbb3bd62954bd31f2d1b3aabf	gcc_compat.h: bump required GCC version for diagnostic workaroundsDiagnostic push/pop pragmas were added only in gcc 4.6.* src/gcc_compat.h [!GNUC_PREREQ(4, 6)] (DIAG_PUSH_IGNORE_OVERRIDE_INIT,DIAG_POP_IGNORE_OVERRIDE_INIT, DIAG_PUSH_IGNORE_NONNULL,DIAG_POP_IGNORE_NONNULL): Define as empty.
gcc workaround	 https://github.com/lairworks/nas2d-core/commit/462da285d66c3327d8b10fefd357d7aee58f3e0c	Remove workaround for old GCC compilersThat bug was closed 15 years ago. This project targets C++17. There's noway that's still relevant.
gcc workaround	 https://github.com/Ryan-rsm-McKenzie/bsa/commit/34d44fda382053a9dbc5b9c0ca516c7fbe69e9cd	workaround for gcc 10
gcc workaround	 https://github.com/systemd/systemd/commit/478c632e00ffbf50012b1946a8a025494c012353	ci: switch to fedora-35 on i386 on Packitsystemd seems to be failing to compile there with gcc-12 but consideringthat gcc-12 hasn't been released yet it doesn't seem to make senseto add workarounds to get it to compile there. Until gcc-12 isstabilized it should be enough to build systemd on fedora-35 tomake sure it's buildable on i386.
gcc workaround	 https://github.com/Gateworks/linux-venice/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/dxx-rebirth/dxx-rebirth/commit/87cc8f0794e87a881894afc964be15dc89093461	Simplify clearing UDP_SocketRemove the workaround added for issue #289 [1].  That issue covered amiscompilation by early versions of gcc-4.9.  gcc-4.9.x is no longersupported, so the workaround is no longer needed.[1]: https://github.com/dxx-rebirth/dxx-rebirth/issues/289
gcc workaround	 https://github.com/WireGuard/wireguard-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/nadrino/cpp-generic-toolbox/commit/42198d79123f05b3d345a957ac2401344b59e2e6	 - Workaround for GCC < 4.9, since std::regex isn't working properly
gcc workaround	 https://github.com/nadrino/cpp-generic-toolbox/commit/53a38a9a924887df7f979fa50b9ea8e9593fc742	 - Workaround for GCC < 4.9, since std::regex isn't working properly
gcc workaround	 https://github.com/Maccraft123/dtg-ng/commit/4ffdccee5d6dc7924265b7ae7df5ab43cbe1177d	uhhhhh workaround qemu + gcc segfault
gcc workaround	 https://github.com/fabio-d/fuchsia-stardock/commit/44c7821781fde89dd1786f3561a1dbdae3a8e92c	[kernel] Punt GCC <arm_acle.h> workaroundThe arcane workaround for -mgeneral-regs-only has regressed in somecases under GCC 11.  Unfortunately, the GCC bug that motivated itstill has not been fixed yet.  However, it turns out that GCC's<arm_acle.h> is not actually providing anything the kernel is using.So punt the workaround kludge and go back to -mgeneral-regs-only onthe command line for kernel code, which avoids GCC 11's new issues.Bug: 88803Change-Id: I490dd24bf938b72e3ad9b2facdeb240a402204a1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/611947Fuchsia-Auto-Submit: Roland McGrath <mcgrathr@google.com>Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Roland McGrath <mcgrathr@google.com>
gcc workaround	 https://github.com/gnoliyil/fuchsia/commit/44c7821781fde89dd1786f3561a1dbdae3a8e92c	[kernel] Punt GCC <arm_acle.h> workaroundThe arcane workaround for -mgeneral-regs-only has regressed in somecases under GCC 11.  Unfortunately, the GCC bug that motivated itstill has not been fixed yet.  However, it turns out that GCC's<arm_acle.h> is not actually providing anything the kernel is using.So punt the workaround kludge and go back to -mgeneral-regs-only onthe command line for kernel code, which avoids GCC 11's new issues.Bug: 88803Change-Id: I490dd24bf938b72e3ad9b2facdeb240a402204a1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/611947Fuchsia-Auto-Submit: Roland McGrath <mcgrathr@google.com>Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Roland McGrath <mcgrathr@google.com>
gcc workaround	 https://github.com/WaterfoxCo/Waterfox-Classic/commit/e1c90dc9f213197905ba9b3f15f80104b81c4000	Bug 1481097 - wasm: Remove inline template workaround for gcc 4.8.5 bug. r=lthThis gcc 4.8.5 workaround (from bug 1316850) is no longer needed because Firefox currently requires gcc 6.1 or later (as of bug 1444274).
gcc workaround	 https://github.com/cdown/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/linuxppc/linux-ci/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/boschmitt/tweedledum/commit/5d545f8c5758ceb911cbde581d72ec725cf211a3	Workaround gcc bug
gcc workaround	 https://github.com/johnmart19/Linux-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/YoeDistro/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/MontaVista-OpenSourceTechnology/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/PKRoma/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/intel/gvt-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/jpbrucker/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/sekiguchi-nagisa/Aquarius-cxx/commit/893bccae0493e5fa8c87e49718c7779097b9bac3	add workaround for gcc
gcc workaround	 https://github.com/c3lang/c3c/commit/3a75032ba9bd31a4ebe843a63bcb38dea0f200c2	Workaround for GCC warning.
gcc workaround	 https://github.com/sekiguchi-nagisa/Aquarius-cxx/commit/abdfdd1affbccbecb31e73cc99b67390c9e95243	add workaround for gcc
gcc workaround	 https://github.com/sekiguchi-nagisa/Aquarius-cxx/commit/d2c2ccbe0945bcabcba90b911b68606e37c4cb0a	add workaround for gcc
gcc workaround	 https://github.com/Emerald-Phoenix/odroidn1-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/ljfranklin/deployments/commit/ff5acf4a116128705eb1bc612bbbf52099a40847	Workaround gcc 11 issues
gcc workaround	 https://github.com/neovim/neovim/commit/04985f69ebd7bfb3fc4ebf369593672b1f0cbe4c	fix(ci): Remove gcc@8/gcc@9 homebrew workaround
gcc workaround	 https://github.com/google/highway/commit/b7fd380f3eb9976109a0153eb730da9f4f3b506d	const& for vector args in noinline - windows GCC workaround, refs #332PiperOrigin-RevId: 392384005
gcc workaround	 https://github.com/sailfishos/testrunner-lite/commit/5b0f6267a36781126a3bf1d50d15b827502c82a1	[testrunner-lite] Workaround gcc 10.3.0 problems. JB#55239Signed-off-by: Matti Kosola <matti.kosola@jolla.com>
gcc workaround	 https://github.com/kokkos/kokkos/commit/27c86eba7def35936e15997c28b96bfa5a05149e	Workaround GCC bugGuard definition of infinity numeric trait for GCC version >= 7.1
gcc workaround	 https://github.com/robertlinux/yocto/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/evadot/freebsd-ports/commit/8f6de3a4e36590748b26b579be9554e0742d572d	Add workaround for Fortran frontend to GCC 10.PR:
gcc workaround	 https://github.com/evadot/freebsd-ports/commit/9657fec72cb89da33430eb1afd6e9de308de9de0	Add workaround for Fortran frontend in GCC 10.PR:
gcc workaround	 https://github.com/c0der88/webrtc/commit/d71e5918945bfe3d13f77fc6cc196b9ee2113d11	Delete a gcc workaround in rtc::FinalRefCountedObjectwith bot using old version of gcc removed, this workaround is not needed.Bug: webrtc:12481Change-Id: Ib1bfb6260c7ff5688c39fa05e8a62225700b9f27Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/213187Reviewed-by: Mirko Bonadei <mbonadei@webrtc.org>Commit-Queue: Danil Chapovalov <danilchap@webrtc.org>Cr-Commit-Position: refs/heads/master@{#33592}
gcc workaround	 https://github.com/pro-bitcoin/pro-bitcoin/commit/003523d239aa41533482313aa3fd97c00641d69e	Merge bitcoin/bitcoin#24338: util: Work around libstdc++ create_directories issueb223c3c21e89f6af76b5401413880923f7c444d6 test: Add functional test for symlinked blocks directory (laanwj)ddb75c2e87a60ed24065bdf0c3bfabf4e058cef1 test: Add fs_tests/create_directories unit test (Hennadii Stepanov)1f46b6e46e1454b91ff7ceb31853bc440952f8eb util: Work around libstdc++ create_directories issue (laanwj)Pull request description:  Work around libstdc++ issue [PR101510] with create_directories where the leaf already exists as a symlink. Fixes #24257, introduced by the switch to `std::filesystem`. It is meant to be more thorough than #24266, which worked around one instance of the problem.  The issue was [fixed upstream](https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc), but unfortunately we'll have to carry a fix for it for a while.  This introduces a function `fs::create_directories` which wraps  `std::filesystem::create_directories`. This allows easiliy reverting the  workaround when it is no longer necessary.ACKs for top commit:  jonatack:    re-ACK b223c3c21e89f6af76b5401413880923f7c444d6 per `git range-diff df08250 67019cd b223c3c`  hebasto:    re-ACK b223c3c21e89f6af76b5401413880923f7c444d6  w0xlt:    re-ACK b223c3c  vasild:    ACK b223c3c21e89f6af76b5401413880923f7c444d6Tree-SHA512: 028321717c8b10d16185c3711b35da6b05fb7aa31cee1c8c7e754e92bf5a0b02719a3785cd0f6f8bf052b3bd759f644af212320672baabc9e44e0b93ba464abc
gcc workaround	 https://github.com/kotatogram/kotatogram-desktop/commit/e26fc26d7d739e99e9ff17dfa1003193c550cb9e	Workaround gcc bug
gcc workaround	 https://github.com/oxen-io/lokinet/commit/5765c128ad944c15328d11ad620c95c47f9bb3d9	Remove gcc-5 workaround (#1360)
gcc workaround	 https://github.com/herrnst/dddvb-linux-kernel/commit/6563139d90ad6178a990d051c7980f0998b5d2e8	powerpc: remove GCC version check for UPD_CONSTRNow that GCC 5.1 is the minimum supported version, we can drop thisworkaround for older versions of GCC. This adversely affected clang,too.Cc: Michael Ellerman <mpe@ellerman.id.au>Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>Cc: Paul Mackerras <paulus@samba.org>Cc: Segher Boessenkool <segher@kernel.crashing.org>Cc: Christophe Leroy <christophe.leroy@csgroup.eu>Cc: linuxppc-dev@lists.ozlabs.orgSigned-off-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Robbbert/store1/commit/c7adaa808f02615b3f3979e1dcd6122e60ba5dbc	Use gcc broken friend workaround also with clang 8 (#6933)* Use gcc broken friend workaround also with clang 8
gcc workaround	 https://github.com/facebookincubator/BOLT/commit/d9eb6c7cf55f88b28bdc6edad2eb45d0d52dfa1a	[libc++abi] Remove workarounds for missing -Wno-exceptions on older GCCshttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=97675 has now been resolvedin GCC 11, so we can remove those workarounds.Differential Revision: https://reviews.llvm.org/D109188
gcc workaround	 https://github.com/dankan1890/mewui/commit/c7adaa808f02615b3f3979e1dcd6122e60ba5dbc	Use gcc broken friend workaround also with clang 8 (#6933)* Use gcc broken friend workaround also with clang 8
gcc workaround	 https://github.com/doxygen/doxygen/commit/88fa344260802ddbbc7e248c7b4ca9fe66877815	Workaround for a compiler issue with gcc-5.4.0
gcc workaround	 https://github.com/Teslos-Dev/fmtlib/commit/f81c14aa1edd48919d452da872b425c9368cf782	Workaround an issue with mixing std versions in gcc (#2017)
gcc workaround	 https://github.com/mmp/pbrt-v4/commit/95b4c9b42d0c4d160b99745be55659cf54da34ed	Pass -fkeep-inline-functions to gcc before version 8Attempt to workaround gcc bug.Issue #37.
gcc workaround	 https://github.com/fmtlib/fmt/commit/f81c14aa1edd48919d452da872b425c9368cf782	Workaround an issue with mixing std versions in gcc (#2017)
gcc workaround	 https://github.com/FredrikAleksander/mame/commit/c7adaa808f02615b3f3979e1dcd6122e60ba5dbc	Use gcc broken friend workaround also with clang 8 (#6933)* Use gcc broken friend workaround also with clang 8
gcc workaround	 https://github.com/triSYCL/sycl/commit/d9eb6c7cf55f88b28bdc6edad2eb45d0d52dfa1a	[libc++abi] Remove workarounds for missing -Wno-exceptions on older GCCshttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=97675 has now been resolvedin GCC 11, so we can remove those workarounds.Differential Revision: https://reviews.llvm.org/D109188
gcc workaround	 https://github.com/beached/daw_json_link/commit/ab90519685e4d08c43e7feb00311c1e71c8ffcfb	Added Intel jcc eratum workaround for gcc to gcc tests
gcc workaround	 https://github.com/pld-linux/ploop/commit/6c2cc55bf476dfb7e3349899037081d3cb3e1742	- added gcc patch (workaround over-zelous gcc 8+ warning)
gcc workaround	 https://github.com/animetosho/ParPar/commit/ff81a957511c6fca847d42e59078fe84d41d453d	Workaround GCC<10 bug with GFNI
gcc workaround	 https://github.com/pkeir/cest/commit/f88a67b2c377772b4e717150fccd1eb71b169162	Removed unneeded GCC workaround.
gcc workaround	 https://github.com/y2kbadbug/freebsd-ports-y2kbadbug/commit/ecbe8ee95ab86253a5c6a3ba398aa7433f6c256e	Add workaround for Fortran frontend to GCC 10.PR:
gcc workaround	 https://github.com/y2kbadbug/freebsd-ports-y2kbadbug/commit/1c29d89e106c42b10a64c79ffb5a59eb11e8ada0	Add workaround for Fortran frontend to GCC 10.PR:
gcc workaround	 https://github.com/y2kbadbug/freebsd-ports-y2kbadbug/commit/1235e729ee11a8f36def144b94a00882dd9d90f9	Add workaround for Fortran frontend in GCC 10.PR:
gcc workaround	 https://github.com/seqan/seqan3/commit/4f4589d4eeaedc4b35fe89b3b7b88f57534a125d	[MISC] gcc-10.2: SEQAN3_WORKAROUND_GCC_93467 was fixed
gcc workaround	 https://github.com/seqan/seqan3/commit/06b4afda854e2c5260afd9939861a12921e46475	[FIX] gcc-11 bugs hidden by SEQAN3_WORKAROUND_GCC_93467
gcc workaround	 https://github.com/msys2/MINGW-packages/commit/2a1986d6a50e667156437f2e9be8e9774b730e86	Merge pull request #7102 from jeremyd2019/arm-newlib-remove-workaroundarm-none-eabi-newlib: remove workaround from gcc
gcc workaround	 https://github.com/Tarsnap/tarsnap/commit/5399ac18866a0a82f46a743d09d19a7df902952f	sha256.c: workaround for gcc + arm speed penaltyHopefully we'll be able to remove this in the future (or at least, restrict itto older versions of gcc).
gcc workaround	 https://github.com/g-regex/prove/commit/2d03c6379f1504a15d557c01d28bd452e56e89ce	gcc 10.2.0: -fcommon workaround; user-friendly syntax errmsgs
gcc workaround	 https://github.com/mhjacobson/avr-objc/commit/6187e336d706f1a87a7f0cbd9efa838f9d966737	objc.m: add workaround for GCC bug (difference from clang in how it emitsclasses when `sizeof (unsigned int) != sizeof (uint8_t *)`)
gcc workaround	 https://github.com/StollD/linux-fedora/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/kernel-patches/bpf/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/telegramdesktop/tdesktop/commit/348b4d54ba05bb271f2c70d35e2a6372bd264d21	Revert "Workaround build issues on GCC."This reverts commit 3defb067833999c240f0ecc39864952515f22fba.
gcc workaround	 https://github.com/jarro2783/cxxopts/commit/834fb9999bc906693f1abaf257acbddbc57a6f48	Ignore gcc-10 warning (#273)Workaround for GCC 10 null dereference warning.
gcc workaround	 https://github.com/ftk/quickjspp/commit/3be1175d276f3abb6e421a866a01707905e78ca5	gcc-8 constexpr workaround
gcc workaround	 https://github.com/gentoouser832/gentoo/commit/07eaa92245ec0d73522a721eddbb40514a049159	app-editors/emacs: Check for gcc in jit workaroundPackage-Manager: Portage-3.0.20, Repoman-3.0.3Signed-off-by: Ulrich Müller <ulm@gentoo.org>
gcc workaround	 https://github.com/sailfishos-mirror/ruby/commit/5bde2e61db8148cd5a7974f640aee38be60bf368	Workaround for gcc-4 bugFalse positive `-Wundef` in `#elif` after `#if defined`.
gcc workaround	 https://github.com/jeremia017/backend/commit/b1f8abfa88ff6a103eeea453250dc18011557a0b	add and edit workaround gcc
gcc workaround	 https://github.com/freedesktop/drm-intel/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/wireshark/wireshark/commit/09147397007c5456fd5acd4794b5ba15330bdad3	MAC-NR: workaround a gcc 9.3.0 for AMR64 false positive.
gcc workaround	 https://github.com/dxx-rebirth/dxx-rebirth/commit/775d03908367410ba834b009d2a7d6033504cbf8	Expand gcc memcpy workaround to gcc-10The upstream bug is still not fixed.
gcc workaround	 https://github.com/Panchajanya1999/linux-mainline/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/OpenXRay/xray-16/commit/465eafcaf6438a3bf2b80ab314c893feb326566c	xrCore/fastdelegate.h: removed old GCC workaround
gcc workaround	 https://github.com/swidi/CFI-based-attestation/commit/f9264ac0fdb7b58d1eb088ea91af0fee48816033	[HIP] Workaround ICE compiling SemaChecking.cpp with gcc 5Change-Id: I6c6213bc6b90365bfb78636ce7fb0700a58807cf
gcc workaround	 https://github.com/lemourin/coro-http/commit/131eceaddb2027a2125034cadb8dfd169d1fd093	curl_http: workaround gcc bug.
gcc workaround	 https://github.com/sourceruckus/linux-mdl/commit/802b5560393423166e436c7914b565f3cda9e6b9	powerpc/Makefile: Remove workaround for gcc versions below 4.9Commit 6ec4476ac825 ("Raise gcc version requirement to 4.9")made it impossible to build with gcc 4.8 and under.Remove related workaround.Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>Link: https://lore.kernel.org/r/a1e552006b8c51f23edd2f6cabdd9a986c631146.1615380184.git.christophe.leroy@csgroup.eu
gcc workaround	 https://github.com/build2/cxx20-modules-examples/commit/57f1221145f9ec3ac45ce5f052e1d12035482ecb	Adjust GCC bug workaround information (99051 out, 99380 in)
gcc workaround	 https://github.com/googleprodkernel/linux-platforms/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/nine7nine/linux-cachy-nspa/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/rizinorg/rizin/commit/3d76332c3380d3f3af0bad4c4e7ac8d287524919	Workaround for the GCC < 5.0 bug
gcc workaround	 https://github.com/percona/percona-xtradb-cluster/commit/ae8cc9b2ea5a0ea2657798e5bd2956bbc6b164ea	Bug#32929012 remove gcc-4.x workaround for std::regexIssue=====The http server plugin depends on posix regex C-functions to workaroundthe missing std::regex support in the libstdc++ of gcc-4.x.As GCC 4.x isn't supported anymore as C++14 is the base requirement tobuild MySQL Router, the corresponding code can be removed and std::regexbe used on all supported compilers.Change======- use std::regex directly- remove posix_re.hRB: 26471
gcc workaround	 https://github.com/lemourin/coro-cloudstorage/commit/b9d1f8e341438f6171feaba135b386eea9719b19	src: workaround gcc bugs.
gcc workaround	 https://github.com/herrnst/dddvb-linux-kernel/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/rafaeljw/linux-pm/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/mmind/linux-riscv/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Demon000/linux/commit/6d2ef226f2f18d530e48ead0cb5704505628b797	compiler_attributes.h: drop __has_attribute() support for gcc4Now that GCC 5.1 is the minimally supported default, the manualworkaround for older gcc versions not having __has_attribute() are nolonger relevant and can be removed.Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/googleprodkernel/linux-mm/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/TeamFahQ/linux-lz_kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/gentoo-mirror/musl/commit/cae17298ec9c0d1c84577a026545491a95af2ea8	sys-devel/gcc: add workaround for cross-compile failureBug: https://bugs.gentoo.org/803371Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/cyberknight777/linux-dragonheart/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/dipayan2/kernel-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/peterzuger/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Silverlan/prosper/commit/0b861f515b41384be14132e70cd0701e70eead70	Add workaround for gcc compiler bug - https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88165
gcc workaround	 https://github.com/GNUWeeb/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/grate-driver/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Au-Zone/linux-maivin/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/dgist-datalab/cxl-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/jeffmerkey/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/youling257/android-mainline/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/hexagon-geo-surv/openembedded-core/commit/567e199862acb948cb8b3361010a9ec221147c41	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/freedesktop/drm-intel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/woodsts/linux-stable/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/jonmason/ntb/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/kerneltoast/kernel_x86_laptop/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/fiqri19102002/kernel_x86/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Tomoms/android_frameworks_av/commit/fc84b6daf941c2c32b86f2148c35d0da7b7eb0d4	camera: Workaround for GCC-compiled HAL3 drivers* When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2
gcc workaround	 https://github.com/gentoo/gentoo/commit/192068fcd5aa14c681bcd90fe28f4bff641599e1	sys-devel/gcc: add workaround for cross-compile failureBug: https://bugs.gentoo.org/803371Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/sffc/fuchsia-clone/commit/44c7821781fde89dd1786f3561a1dbdae3a8e92c	[kernel] Punt GCC <arm_acle.h> workaroundThe arcane workaround for -mgeneral-regs-only has regressed in somecases under GCC 11.  Unfortunately, the GCC bug that motivated itstill has not been fixed yet.  However, it turns out that GCC's<arm_acle.h> is not actually providing anything the kernel is using.So punt the workaround kludge and go back to -mgeneral-regs-only onthe command line for kernel code, which avoids GCC 11's new issues.Bug: 88803Change-Id: I490dd24bf938b72e3ad9b2facdeb240a402204a1Reviewed-on: https://fuchsia-review.googlesource.com/c/fuchsia/+/611947Fuchsia-Auto-Submit: Roland McGrath <mcgrathr@google.com>Reviewed-by: Petr Hosek <phosek@google.com>Commit-Queue: Roland McGrath <mcgrathr@google.com>
gcc workaround	 https://github.com/navsystem/gentoo-portage/commit/192068fcd5aa14c681bcd90fe28f4bff641599e1	sys-devel/gcc: add workaround for cross-compile failureBug: https://bugs.gentoo.org/803371Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/sinkap/linux-krsi/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/jayhusemi/pulpissimo/commit/2e152ef8049d9be3e011839e66caecff071b5b07	Merge pull request #263 from TobiasFaller/fix-werror-nonnull-workaroundAdded documentation of workaround for GCC 11.1.0
gcc workaround	 https://github.com/rehsack/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/Zopolis4/gcj/commit/2fc20260619b9f68044b7a3eb042726a382b5002	gcc/expr.c: Remove historic workaround for broken SIMD subregA long time ago, using a parallel to take a subreg of a SIMD registerwas broken. This temporary fix[1] (from 2003) spilled these registersto memory and reloaded the appropriate part to obtain the subreg.The fix initially existed for the benefit of the PowerPC E500 - aplatform for which GCC removed support a number of years ago.Regardless, a proper mechanism for taking a subreg of a SIMD registerexists now anyway.This patch removes the workaround thus preventing SIMD registersbeing dumped to memory unnecessarily - which sometimes can't be fixedby later passes.[1] https://gcc.gnu.org/pipermail/gcc-patches/2003-April/102099.htmlgcc/ChangeLog:2021-10-11  Jonathan Wright  <jonathan.wright@arm.com>
gcc workaround	 https://github.com/Evolution-X/frameworks_av/commit/ca77b9234092c12cd8171d1613c8b3ec7667bdb2	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>Signed-off-by: Joey Huab <joey@evolution-x.org>
gcc workaround	 https://github.com/npwoods/bletchmame/commit/eeba91f6ad4ac1f930b5af796031afe8df6da045	Workaround for lack of std::from_chars() FP support in GCC 10
gcc workaround	 https://github.com/Hasiergo/Lenovo_TB-X606F_kernel/commit/800911df6142097c328c5581ee35648b644f0707	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/SquallATF/mingw-w64/commit/bbf8ca00fb848dd5b56d804248ab52bfe455c7a6	headers: Enable WIDL_EXPLICIT_AGGREGATE_RETURNS on arm/aarch64 tooWhile clang does match MSVC with regards to aggregate returns, whenrun in MSVC mode, it matches GCC when run in mingw mode - and thesame behaviour extends to arm/aarch64 too.Thus, this workaround needs to be enabled on all architectures,not only on x86.Signed-off-by: Martin Storsjö <martin@martin.st>
gcc workaround	 https://github.com/googleapis/google-cloud-cpp/commit/a984b4eaa0f340f2428b787bb8e6bb125036991c	cleanup: remove workaround for old protobuf+compiler (#7681)Old versions of protobuf (prior to 3.15, we require 3.15.8) generatedcode that could not be compiled with older compilers (GCC < 6, werequire >= 6.x). In other words, this workaround is not necessary fortwo reasons, we can safely remove it I think.
gcc workaround	 https://github.com/jayhusemi/pulpissimo/commit/8bee69a11f8c8246292765a3370e811b985e0ab7	Added documentation of workaround for GCC 11.1.0
gcc workaround	 https://github.com/kubagalecki/L3STER/commit/07c21f61db32d7321c81b046d4e77b115af07e37	Gcc version proofing (#12)* gcc bug workaround, ci no longer triggers on PR* more range algos, gcc 11.1 conformance
gcc workaround	 https://github.com/couchbaselabs/couchbase-mobile-tools/commit/51eaea9131c8b2413739bd51f38bca645da7ddb9	Add ugly GCC workaround for compiling cbl-log
gcc workaround	 https://github.com/seqan/seqan3/commit/ff61cb64effe2c61bc65e0380256dcd87acee353	[MISC] gcc-10.3 supports SEQAN3_WORKAROUND_GCC_99318 now
gcc workaround	 https://github.com/woodsts/buildroot/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/minesoption/minesoption-crypto/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/PKRoma/git/commit/846a29afb0b1a206426a3fa0867c37dc406415bc	config.mak.dev: workaround gcc 12 bug affecting "pedantic" CI jobOriginally noticed by Peff[1], but yet to be corrected[2] and planned tobe released with Fedora 36 (scheduled for Apr 19).  dir.c: In function ‘git_url_basename’:  dir.c:3085:13: error: ‘memchr’ specified bound [9223372036854775808, 0] exceeds maximum object size 9223372036854775807 [-Werror=stringop-overread]   3085 |         if (memchr(start, '/', end - start) == NULL        |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Fedora is used as part of the CI, and therefore that release will triggerfailures, unless the version of the image used is locked to an olderrelease, as an alternative.Restricting the flag to the affected source file, as well as implementingan independent facility to track these workarounds was specifically puntedto minimize the risk of introducing problems so close to a release.This change should be reverted once the underlying gcc bug is solved andwhich should be visible by NOT triggering a warning, otherwise.[1] https://lore.kernel.org/git/YZQhLh2BU5Hquhpo@coredump.intra.peff.net/[2] https://bugzilla.redhat.com/show_bug.cgi?id=2075786Signed-off-by: Carlo Marcelo Arenas Belón <carenas@gmail.com>Signed-off-by: Junio C Hamano <gitster@pobox.com>
gcc workaround	 https://github.com/mayurwaghmode/envoy-older/commit/bbcd487bd178ef5254545941ac369d944da41913	bazel: update to v5.0.0 (#19706)* bazel: update to v5.0.0* Updated envoy-build-tools dependency* Removed envoy_build_tools.patch* Fixed java runtime version flag* Fixed gcc test* Remove outdated java flags* Workaround attempt for test failures* Incorporate review commentsSigned-off-by: Faseela K <faseela.k@est.tech>
gcc workaround	 https://github.com/ProjectElixir-Devices/kernel_samsung_exynos9810/commit/dd0e1fb27c8f8956d0dea7dab8fba9f56c43d74e	MIPS: lib: Provide MIPS64r6 __multi3() for GCC < 7commit 690d9163bf4b8563a2682e619f938e6a0443947f upstream.Some versions of GCC suboptimally generate calls to the __multi3()intrinsic for MIPS64r6 builds, resulting in link failures due to themissing function:    LD      vmlinux.o    MODPOST vmlinux.o  kernel/bpf/verifier.o: In function `kmalloc_array':  include/linux/slab.h:631: undefined reference to `__multi3'  fs/select.o: In function `kmalloc_array':  include/linux/slab.h:631: undefined reference to `__multi3'  ...We already have a workaround for this in which we provide theinstrinsic, but we do so selectively for GCC 7 only. Unfortunately theissue occurs with older GCC versions too - it has been observed withboth GCC 5.4.0 & GCC 6.4.0.MIPSr6 support was introduced in GCC 5, so all major GCC versions priorto GCC 8 are affected and we extend our workaround accordingly to allMIPS64r6 builds using GCC versions older than GCC 8.Signed-off-by: Paul Burton <paul.burton@mips.com>Reported-by: Vladimir Kondratiev <vladimir.kondratiev@intel.com>Fixes: ebabcf17bcd7 ("MIPS: Implement __multi3 for GCC7 MIPS64r6 builds")Patchwork: https://patchwork.linux-mips.org/patch/20297/Cc: James Hogan <jhogan@kernel.org>Cc: Ralf Baechle <ralf@linux-mips.org>Cc: linux-mips@linux-mips.orgCc: stable@vger.kernel.org # 4.15+Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/suace07/2012/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/chipcraft-ic/toolchain-component-git/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/linux4sam/buildroot-at91/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/foonathan/lexy/commit/fc277d584dda39acb47937217ef7adc53793a5fa	Workaround miscompilation (?) on GCC 7
gcc workaround	 https://github.com/ldalek/buildroot/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/Stratosphere-Kernel/android_kernel_xiaomi_surya/commit/5023c8eccaf1b311f54b9dab416b0b9169501bf2	gcov: Disable gcov build with GCC 10[ Upstream commit cfc905f158eaa099d6258031614d11869e7ef71c ]GCOV built with GCC 10 doesn't initialize n_function variable.  Thisproduces different kernel panics as was seen by Colin in Ubuntu and mein FC 32.As a workaround, let's disable GCOV build for broken GCC 10 version.Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1891288Link: https://lore.kernel.org/lkml/20200827133932.3338519-1-leon@kernel.orgLink: https://lore.kernel.org/lkml/CAHk-=whbijeSdSvx-Xcr0DPMj0BiwhJ+uiNnDSVZcr_h_kg7UA@mail.gmail.com/Cc: Colin Ian King <colin.king@canonical.com>Signed-off-by: Leon Romanovsky <leonro@nvidia.com>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc workaround	 https://github.com/boostorg/geometry/commit/68274399ce4c318b326a3deef181e8073817b37f	[algorithms][io] Add workaround for gcc-5 name lookup.
gcc workaround	 https://github.com/mpe/linux-fullhistory/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/FireBurn/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/thara-gopinath/linaro-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/mq-glodroid/gki-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/53d63fea5654326325f697b8dbf94d5f1db98075	Re: [PATCH 08/10] Makefile: drop GCC < 5 -fno-var-tracking-assignments workaround
gcc workaround	 https://github.com/git/git/commit/846a29afb0b1a206426a3fa0867c37dc406415bc	config.mak.dev: workaround gcc 12 bug affecting "pedantic" CI jobOriginally noticed by Peff[1], but yet to be corrected[2] and planned tobe released with Fedora 36 (scheduled for Apr 19).  dir.c: In function ‘git_url_basename’:  dir.c:3085:13: error: ‘memchr’ specified bound [9223372036854775808, 0] exceeds maximum object size 9223372036854775807 [-Werror=stringop-overread]   3085 |         if (memchr(start, '/', end - start) == NULL        |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Fedora is used as part of the CI, and therefore that release will triggerfailures, unless the version of the image used is locked to an olderrelease, as an alternative.Restricting the flag to the affected source file, as well as implementingan independent facility to track these workarounds was specifically puntedto minimize the risk of introducing problems so close to a release.This change should be reverted once the underlying gcc bug is solved andwhich should be visible by NOT triggering a warning, otherwise.[1] https://lore.kernel.org/git/YZQhLh2BU5Hquhpo@coredump.intra.peff.net/[2] https://bugzilla.redhat.com/show_bug.cgi?id=2075786Signed-off-by: Carlo Marcelo Arenas Belón <carenas@gmail.com>Signed-off-by: Junio C Hamano <gitster@pobox.com>
gcc workaround	 https://github.com/OpenMandrivaAssociation/php/commit/168f05706fe3b29e061af7a276cbed366f34dff8	8.0.10, drop aarch64 gcc workaround [fixed in clang 13]
gcc workaround	 https://github.com/jessfraz/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/ayushsawl/ktls-net-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/openedev/kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/948a85dc062021a3e064a646be319e1f7ce42165	Re: [PATCH 08/10] Makefile: drop GCC < 5 -fno-var-tracking-assignments workaround
gcc workaround	 https://github.com/linux-mailinglist-archives/linux-kernel.vger.kernel.org.2/commit/40f4842545813828181f770e167aaf2ae50bf609	[PATCH 08/10] Makefile: drop GCC < 5 -fno-var-tracking-assignments workaround
gcc workaround	 https://github.com/Klozz/WSL2-Linux-Kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/kernel-patches/bpf/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/google/kmsan/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/svanheule/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/dgreid/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/sprasad-microsoft/smb3-kernel-client/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/gregkh/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/dirty-south-supercomputing/torvalds-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/gentoo-mirror/gentoo/commit/192068fcd5aa14c681bcd90fe28f4bff641599e1	sys-devel/gcc: add workaround for cross-compile failureBug: https://bugs.gentoo.org/803371Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/wambu-i/linux-drm/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/tprrt/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/koverstreet/bcachefs/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/juliopolycarpo/Elysian_Kernel_Samsung_Exynos7904/commit/359a51e8a06f5d9bb1909ffabc7535952ba4f6de	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/ned14/status-code/commit/85ab0c13edc8fbfa7182cfb2b947b5e40ff24aa5	Merge fixes for #35 and #37, which includes:- Use Concepts instead of SFINAE when available.- Workarounds to prevent ICE on GCCs 7 and earlier in certain use cases.
gcc workaround	 https://github.com/gentoo/musl/commit/cae17298ec9c0d1c84577a026545491a95af2ea8	sys-devel/gcc: add workaround for cross-compile failureBug: https://bugs.gentoo.org/803371Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/venoomdev/xiaomi_surya/commit/e9fb0235d8f54fc4c60fa00a60e8478a4f82b50f	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/libreswan/libreswan/commit/60c13446394ea74a331f82e494a275ca9858c47b	connections: move .where to end of connection_filterWorkaround https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102288
gcc workaround	 https://github.com/DanielOgorchock/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/buzzcut-s/kernel-x86/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/ahunter6/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/embed-3d/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/saurabhchardereal/kernel_hp_x86/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/openSUSE/kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/smfrench/smb3-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Kyuofox/android-mainline/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/tensorflow/tflite-micro/commit/111411523bc7bcaf8dad75a9b0e2fc47948ef70d	Workaround for failing arm-gcc download. (#509)BUG=#508 and http://b/200052821
gcc workaround	 https://github.com/SELinuxProject/selinux-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/liwg06/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/sapphire1896/xnu-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/jpirko/linux_mlxsw/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/bcopeland/wireless-testing/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Vynax/Linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/flipreverse/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/navsystem/gentoo-portage/commit/89a6a8647d74612648f0502baa27660008cc256c	sys-libs/glibc: don't apply GCC 11 AVX512 workaround to upcoming patch releaseBug: https://bugs.gentoo.org/823780Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/linux-audit/audit-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/denysvitali/surface-pro-x-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/dakkshesh07/linux-dejavu/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/westerndigitalcorporation/dm-zap/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/memorizer-dev/memrz-linux5/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/kdrag0n/linux-m1/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/mediatek-jitao/linuxnextmirror/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/olcf/openmp-offload/commit/bf10a217436b71d2d944032b3fe3a75fa73c5655	Workaround for allocate() bug in GCC; Better seed for random number; Fixed bug in Validate().
gcc workaround	 https://github.com/kvm-riscv/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/RobertCNelson/linux-stable-rcn-ee/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/joergroedel/linux-iommu/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/gentoouser832/gentoo/commit/192068fcd5aa14c681bcd90fe28f4bff641599e1	sys-devel/gcc: add workaround for cross-compile failureBug: https://bugs.gentoo.org/803371Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/cerfacs-globc/icclim/commit/8e45e9891a3e98bc989e3a3c7801f13299f422cd	Fix: Add gcc to environmentThis is a workaround because we import the whole world when doing `import icclim` for now.We should try to get this in order.
gcc workaround	 https://github.com/LorenzoBianconi/bpf-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/LelouBil/linux-kernel-powervr-rogue-6XT/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/intel/meta-intel-sgx/commit/cc8cd6674a8a46f4513a25b8652bbbf15f3fe8b8	Fix for Yocto Kirkstone 3.5 build (#18)- cppmicroservices: fix c++ header file with gcc 11.2- sgx: fix build issue with openssl-3.0- The workaround to suppress deprecated errors with openssl-3.0and supposed to be dropped when proper fix and porting is done.- layer.conf: bump up to kirkstone- Update layer compatibility to kirkstoneSigned-off-by: Preeti Sachan <preeti.sachan@intel.com>
gcc workaround	 https://github.com/yocto-mirror-raspberrypi/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/brunodOut/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/rage/secret-project-331/commit/3d2862a888f93ba8db65defdbfb1082d88223bd9	Split backend into separate crates (#482)* Split backend into crates* Try mold* Switch mold to multi-stage build* Try gcc workaround* Update mold ld workaround folder name* Start using cargo-chef for caching dependencies in Docker* Moved seed and migrations back into server* Fixed dev Dockerfile* Updated history snapshots* Fixed ts binding generation* Fix cachingCo-authored-by: Henrik Nygren <nygrenh@gmail.com>
gcc workaround	 https://github.com/Linaro/linux-kernel-uadk/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/aagit/aa/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Ferroin/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/bluez/bluetooth-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/lfd/PreemptRT/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/intel/mainline-tracking/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/WanzenBug/fedora-src-qemu/commit/f9f5de99949d58a308ae03ab2a0f4fd35b3e1160	Define STAP_SDT_ARG_CONSTRAINT=g on %%{arm}, workaround for:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103395See also /usr/include/sys/sdt.h
gcc workaround	 https://github.com/milkice-fedora-patches/qemu/commit/f9f5de99949d58a308ae03ab2a0f4fd35b3e1160	Define STAP_SDT_ARG_CONSTRAINT=g on %%{arm}, workaround for:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103395See also /usr/include/sys/sdt.h
gcc workaround	 https://github.com/amd/mumps-build/commit/6a3b7c69f39af6e1b6066922031d83a624dcc7f9	apply INSTALL-suggested Intel intsize64 workaround.MKL is still not working. But GCC alone without MKL works with intsize64.
gcc workaround	 https://github.com/sean0921/neovim0.5-deb/commit/04985f69ebd7bfb3fc4ebf369593672b1f0cbe4c	fix(ci): Remove gcc@8/gcc@9 homebrew workaround
gcc workaround	 https://github.com/navsystem/gentoo-portage/commit/dcefab179a1230eed77c6732e355a1e32edd1950	dev-games/ogre: workaround 1.9.0 USE=examples failure with GCC 11Fixed properly in newer versions.Closes: https://bugs.gentoo.org/829253Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/nbd168/wireless/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/dinguyen702/linux-bringup/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/markpash/bpf-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/kluoyun/linux-stable/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/badtoperfect/linux.org/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Dirk1980ac/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Zopolis4/gcj/commit/db33b1059bcee3eeb36d174d59abf19f2bef5d66	expr: Workaround profiledbootstrap uninit false positive [PR103899]The threader changes resulted in a false positive warning duringprofiledbootstrap:In file included from ../../gcc/expr.c:26:../../gcc/tree.h: In function ‘rtx_def* expand_expr_real_1(tree, rtx, machine_mode, expand_modifier, rtx_def**, bool)’:../../gcc/tree.h:244:56: error: ‘context’ may be used uninitialized in this function [-Werror=maybe-uninitialized]  244 | #define TREE_CODE(NODE) ((enum tree_code) (NODE)->base.code)      |                                                        ^~~~../../gcc/expr.c:10343:8: note: ‘context’ was declared here10343 |   tree context;      |        ^~~~~~~While it will be nice to improve the uninit pass to handle it if possible(I do not want to close the PR until that is done), doing profiledbootstrapis a common thing to do, so a workaround is handy, especially as in thiscase when the workaround seems to be the right thing to do, as it movesa variable declaration to the only place where it is set and used and avoidsthe weird and for uninit asking  tree context;...  if (exp)    context = ...;  gcc_assert (!exp              || use (context)              || use_some_more (context));2022-01-06  Jakub Jelinek  <jakub@redhat.com>
gcc workaround	 https://github.com/msm8974-mainline/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/xiguahexizang/envoy/commit/bbcd487bd178ef5254545941ac369d944da41913	bazel: update to v5.0.0 (#19706)* bazel: update to v5.0.0* Updated envoy-build-tools dependency* Removed envoy_build_tools.patch* Fixed java runtime version flag* Fixed gcc test* Remove outdated java flags* Workaround attempt for test failures* Incorporate review commentsSigned-off-by: Faseela K <faseela.k@est.tech>
gcc workaround	 https://github.com/timmydo/guix/commit/11284cb3218727c36060aa2df1eba8ffe0b69a19	gnu: gfortran: Remove obsolete workaround.* gnu/packages/gcc.scm (gfortran): Use GCC directly.
gcc workaround	 https://github.com/ZhangFengze/CrazyTang/commit/e25a2552ea0d162092604d02ace6c8f70a0da395	gcc doesn't support format, workaround
gcc workaround	 https://github.com/ZhangFengze/CrazyTang/commit/5be4d8f793da0c0d00969e45396f13586f8f9cf9	gcc doesn't support format, workaround
gcc workaround	 https://github.com/TorqueGameEngines/Torque3D/commit/1b55dce613dab6122aa7660d546328e83b103534	* Workaround: Implement noinline attributes for problematic functions in str.cpp due to what appears to be GCC compiler bugs.
gcc workaround	 https://github.com/xaya/xaya/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/reerajput930/opencv/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/ERGO-Code/HiGHS/commit/20f72184cd35c4d067028beeb461a0e312b62c58	more workarounds for gcc 4.8
gcc workaround	 https://github.com/demining/bitcoin-Google-Colab/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/jsoo1/guix/commit/11284cb3218727c36060aa2df1eba8ffe0b69a19	gnu: gfortran: Remove obsolete workaround.* gnu/packages/gcc.scm (gfortran): Use GCC directly.
gcc workaround	 https://github.com/E3SM-Project/E3SM/commit/16bba291dfcb896764873ac8176e31cc0dc99917	Hommexx/SL: Cuda 10 GCC 7 C++14 workarounds for compose
gcc workaround	 https://github.com/igajsin/guix/commit/11284cb3218727c36060aa2df1eba8ffe0b69a19	gnu: gfortran: Remove obsolete workaround.* gnu/packages/gcc.scm (gfortran): Use GCC directly.
gcc workaround	 https://github.com/bitcoin/bitcoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/nawawi/buildroot/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/bluescarni/mppp/commit/628651b9928e35dc09c0c2de3d2561abababb55f	Test workaround for a GCC issue in C++20 mode.
gcc workaround	 https://github.com/seqan/seqan3/commit/49189ee4fb779270ded242bfb77ae598b27f6aba	Remove workarounds (#2624)* [MISC] remove SEQAN3_WORKAROUND_GCC_93983* [MISC] remove SEQAN3_WORKAROUND_GCC_95371* [MISC] remove SEQAN3_WORKAROUND_GCC_95578* Apply suggestions from code review* Update include/seqan3/core/platform.hppCo-authored-by: Enrico Seiler <eseiler@users.noreply.github.com>
gcc workaround	 https://github.com/foonathan/lexy/commit/282cc7f81f7033bc5ac4f599c2437bc76a60e7d7	Properly workaround GCC 7 compiler bug
gcc workaround	 https://github.com/golang/go/commit/1d6051380c1faa3e515db73c4cfe14f807e2c686	cmd/dist: skip internal linking tests on arm64The previous workaround for issue #39466 only disabled this test forLinux. However, the issue manifests for all arm64 systems with gcc 9.4and above. The new netbsd-arm64 builder uses NetBSD-current with gcc10.3, so it fails in the same way.Updates #39466Change-Id: I276a99a5e60914e5c22f74a680e461bea17cfe92Reviewed-on: https://go-review.googlesource.com/c/go/+/383554Trust: Benny Siegert <bsiegert@gmail.com>Run-TryBot: Ian Lance Taylor <iant@golang.org>TryBot-Result: Gopher Robot <gobot@golang.org>Reviewed-by: Ian Lance Taylor <iant@golang.org>
gcc workaround	 https://github.com/sapphire1896/netbsd-src/commit/109c0a924ca37d51c9df7efb4dad1ca006ef4d11	PR port-sh3/56311As a workaround for GCC bug, compile initdecl() with -O0 for sh3.
gcc workaround	 https://github.com/gromgit/pibrew-core/commit/4a260cf1facd480e2bbc34f8b4c44987455402da	gcc@4.9: remove workaround
gcc workaround	 https://github.com/Blaster4385/IllusionX_sm8250/commit/694acfadaa9c064cb71d5a977c263d8c2ecbd047	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/envoyproxy/envoy/commit/bbcd487bd178ef5254545941ac369d944da41913	bazel: update to v5.0.0 (#19706)* bazel: update to v5.0.0* Updated envoy-build-tools dependency* Removed envoy_build_tools.patch* Fixed java runtime version flag* Fixed gcc test* Remove outdated java flags* Workaround attempt for test failures* Incorporate review commentsSigned-off-by: Faseela K <faseela.k@est.tech>
gcc workaround	 https://github.com/greearb/linux-ct-5.16/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Medusa-Team/linux-medusa/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Vishalcj17/kernel-x86-WSL/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/kkdwivedi/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/multipath-tcp/mptcp_net-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/tq-systems/linux-em/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Kamalheib/rdmasim-dev/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/giuliobenetti/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/iwamatsu/linux-watchdog/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/openSUSE/systemd/commit/478c632e00ffbf50012b1946a8a025494c012353	ci: switch to fedora-35 on i386 on Packitsystemd seems to be failing to compile there with gcc-12 but consideringthat gcc-12 hasn't been released yet it doesn't seem to make senseto add workarounds to get it to compile there. Until gcc-12 isstabilized it should be enough to build systemd on fedora-35 tomake sure it's buildable on i386.
gcc workaround	 https://github.com/gentoo/gentoo/commit/89a6a8647d74612648f0502baa27660008cc256c	sys-libs/glibc: don't apply GCC 11 AVX512 workaround to upcoming patch releaseBug: https://bugs.gentoo.org/823780Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/raspbian-packages/qt4-x11/commit/002c17b20968c9fb7ecebc91548e0bc358191cdb	workaround FTBFS on powerpc/gcc 4.6 in signalsloteditorOrigin: vendorForwarded: not-neededLast-Update: 2011-05-07This should workaround g++-4.6/powerpc ICE that is related to dwarf2 [1][2].It is very likely the patch will not be needed long term as the gcc bug mighteventually be fixed.[1] .moc/release-shared/qteditorfactory.moc:237:1: internal compiler error: in size_of_die, at dwarf2out.c:10749Please submit a full bug report,with preprocessed source if appropriate.[2] https://buildd.debian.org/status/fetch.php?pkg=qt4-x11&arch=powerpc&ver=4%3A4.7.2-4&stamp=1304320067Gbp-Pq: Name powerpc_designer_gstabs.diff
gcc workaround	 https://github.com/utky/bpf-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/beagleboard/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/OPAE/linux-dfl/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/MartB/buildroot-satos/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/PixelPlusUI-SnowCone/frameworks_av/commit/3b29f9507777b4171e9bca5b10ca7edb5b244ca9	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Corey Edwards <ensabahnur16@gmail.com>Signed-off-by: DennySPB <dennyspb@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>
gcc workaround	 https://github.com/dhruv/bitcoin-core-ci/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/tenzir/vast/commit/6c4be56370e173c069350bc391d6bb94d9f5b5c9	Workaround a GCC-8 bug
gcc workaround	 https://github.com/PKRoma/git/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/jimga150/git-gaslight/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/Homebrew/linuxbrew-core/commit/2c93ae5bd03dc36bdbbba5d8ca8f1c3fd3adb0ea	gcc@9: remove workaround
gcc workaround	 https://github.com/Homebrew/linuxbrew-core/commit/c5f7a614d7a7f49f4a7d0fda7ae84c94472ee3ec	gcc@8: remove workaround
gcc workaround	 https://github.com/Homebrew/linuxbrew-core/commit/bc176e0238554f17228c8c4638c55e2c0cdc03c4	gcc@7: remove workaround
gcc workaround	 https://github.com/Homebrew/linuxbrew-core/commit/2b8b95ab1162c9f767151ea935260453ac3e7db0	gcc@6: remove workaround
gcc workaround	 https://github.com/Homebrew/linuxbrew-core/commit/28eccff9b9b2916a8cef2a0bd17db79a39729868	gcc@5: remove workaround
gcc workaround	 https://github.com/Homebrew/linuxbrew-core/commit/ea64ad3aefa7a638a42afcf567a001bef7147077	gcc: remove workaround (#23029)
gcc workaround	 https://github.com/mogeku/MyOpenCV/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/wdx66966/opencv/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/sean0921/neovim0.5-deb/commit/ca802046bf0667b211f72330619a18fec3fea5f0	Merge pull request #14721 from jamessan/mac-cifix(ci): Remove gcc@8/gcc@9 homebrew workaround
gcc workaround	 https://github.com/gromgit/pibrew-core/commit/2c93ae5bd03dc36bdbbba5d8ca8f1c3fd3adb0ea	gcc@9: remove workaround
gcc workaround	 https://github.com/gromgit/pibrew-core/commit/c5f7a614d7a7f49f4a7d0fda7ae84c94472ee3ec	gcc@8: remove workaround
gcc workaround	 https://github.com/gromgit/pibrew-core/commit/bc176e0238554f17228c8c4638c55e2c0cdc03c4	gcc@7: remove workaround
gcc workaround	 https://github.com/gromgit/pibrew-core/commit/2b8b95ab1162c9f767151ea935260453ac3e7db0	gcc@6: remove workaround
gcc workaround	 https://github.com/gromgit/pibrew-core/commit/28eccff9b9b2916a8cef2a0bd17db79a39729868	gcc@5: remove workaround
gcc workaround	 https://github.com/gromgit/pibrew-core/commit/ea64ad3aefa7a638a42afcf567a001bef7147077	gcc: remove workaround (#23029)
gcc workaround	 https://github.com/prati0100/linux-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/buzzcut-s/kernel-x86-5.15/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/MollySophia/linux-next-primus/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/ArrowOS-Devices/android_kernel_xiaomi_daisy/commit/c148278b8399520858af6c1189d285559885651e	crypto: aes-generic - build with -Os on gcc-7+While testing other changes, I discovered that gcc-7.2.1 produces badlyoptimized code for aes_encrypt/aes_decrypt. This is especially true whenCONFIG_UBSAN_SANITIZE_ALL is enabled, where it leads to extremelylarge stack usage that in turn might cause kernel stack overflows:crypto/aes_generic.c: In function 'aes_encrypt':crypto/aes_generic.c:1371:1: warning: the frame size of 4880 bytes is larger than 2048 bytes [-Wframe-larger-than=]crypto/aes_generic.c: In function 'aes_decrypt':crypto/aes_generic.c:1441:1: warning: the frame size of 4864 bytes is larger than 2048 bytes [-Wframe-larger-than=]I verified that this problem exists on all architectures that aresupported by gcc-7.2, though arm64 in particular is less affected thanthe others. I also found that gcc-7.1 and gcc-8 do not show the extremestack usage but still produce worse code than earlier versions for thisfile, apparently because of optimization passes that generally providea substantial improvement in object code quality but understandably failto find any shortcuts in the AES algorithm.Possible workarounds includea) disabling -ftree-pre and -ftree-sra optimizations, this was an earlier   patch I tried, which reliably fixed the stack usage, but caused a   serious performance regression in some versions, as later testing   found.b) disabling UBSAN on this file or all ciphers, as suggested by Ard   Biesheuvel. This would lead to massively better crypto performance in   UBSAN-enabled kernels and avoid the stack usage, but there is a concern   over whether we should exclude arbitrary files from UBSAN at all.c) Forcing the optimization level in a different way. Similar to a),   but rather than deselecting specific optimization stages,   this now uses "gcc -Os" for this file, regardless of the   CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE/SIZE option. This is a reliable   workaround for the stack consumption on all architecture, and I've   retested the performance results now on x86, cycles/byte (lower is   better) for cbc(aes-generic) with 256 bit keys:
gcc workaround	 https://github.com/tbsdtv/linux_media/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/jjkennedy3/bpf-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/greearb/linux-ct-5.15/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/tai/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/XBurst/Linux-XBurst/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/SeokWooo/fmt/commit/3e7a29cc9221f7c595c8fc322328d06e4a0bbd9e	Workaround clang/gcc incompatibility
gcc workaround	 https://github.com/yad-tahir/gentoo-mirror/commit/192068fcd5aa14c681bcd90fe28f4bff641599e1	sys-devel/gcc: add workaround for cross-compile failureBug: https://bugs.gentoo.org/803371Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/xu1119/torvalds-linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/sammko/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/vbuslov/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/rtreffer/ubuntu-kernel-pinephone-pro/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Project-Zephyrus/android_frameworks_av/commit/3fdd1303752551daff334c7205e6f6e325082561	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
gcc workaround	 https://github.com/SUSE/kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/ungeskriptet/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/endlessm/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/cthbleachbit/linux-aosc/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/RezaT4795/WSLackware-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/amir73il/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/bol-van/zapret/commit/9402cd2cf0a16352a3401f7bce1a894bf131138b	ip2net : zero less significant bits in ip4/ip6 addresses, workaround GCC bug
gcc workaround	 https://github.com/JBKim-Project/ceph/commit/c04f5a2acf73ef8d87a5560d74951cf4b0cc7683	crimson/os: workaround the segfaulting GCC 11 issue.Signed-off-by: Radoslaw Zarzynski <rzarzyns@redhat.com>
gcc workaround	 https://github.com/spandruvada/linux-kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/DaveWysochanskiRH/kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/veggiemike/linux-mdl/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/erkia/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/anirudhrb/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/LorenzoBianconi/wireless-drivers/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/ipodclassic-mainline/kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/brauner/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/jhrutgers/programming-tips/commit/26d57ed53b3e26e9b6f67777847606f15f1261b7	workaround for gcc-11
gcc workaround	 https://github.com/phcerdan/SGEXT/commit/9c206392c6b6b3a5aff63c68655e306f92104c81	Fix tests with workaround for gcc 10.1 bug with std::array initializer listSee: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95319
gcc workaround	 https://github.com/StagOS/android_frameworks_av/commit/ed51de5fbf6b456fb71267b4e33084008dd45d98	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
gcc workaround	 https://github.com/microsoft/electionguard-cpp/commit/a29c8b4a2be1c2424593649e3dc68799f64af718	Fix Build warning C4068 for MSVC (#221)- GCC pragma is not a valid pragma in MSVC, thus produces warning C4068:unknown pragma 'GCC'.- The workaround is to encapsulate the GCC pragma in if GNUC definedblock.Signed-off-by: Avinal Kumar <avinal.xlvii@gmail.com>
gcc workaround	 https://github.com/meganz/sdk/commit/87a53eee6681d649baba483ffea77524e9cd088c	Merge branch 'fix/SDK-1804_gcc_4_8_5_fix-hotfix-for-3911' into 'release/v3.8.11a'SDK-1804. Workaround to fix bug found when using gcc 4.8.5 (hotfix for 3.9.11a)See merge request sdk/sdk!3069
gcc workaround	 https://github.com/meganz/sdk/commit/301933fbfaf7206c93bc23b53438df5515cc964b	Merge branch 'fix/SDK-1804_gcc_4_8_5_fix-hotfix-for-396b' into 'release/v3.9.6b'SDK-1804. Workaround to fix bug found when using gcc 4.8.5 (hotfix for 3.9.6b)See merge request sdk/sdk!3068
gcc workaround	 https://github.com/mohe2015/guix/commit/11284cb3218727c36060aa2df1eba8ffe0b69a19	gnu: gfortran: Remove obsolete workaround.* gnu/packages/gcc.scm (gfortran): Use GCC directly.
gcc workaround	 https://github.com/pulp-platform/pulpissimo/commit/8bee69a11f8c8246292765a3370e811b985e0ab7	Added documentation of workaround for GCC 11.1.0
gcc workaround	 https://github.com/radareorg/radare2/commit/4b461609435e6ea001ecd0eb8c9025f802d6e3ff	Workaround gcc warning bug (#18655)
gcc workaround	 https://github.com/mirror/mingw-w64/commit/bbf8ca00fb848dd5b56d804248ab52bfe455c7a6	headers: Enable WIDL_EXPLICIT_AGGREGATE_RETURNS on arm/aarch64 tooWhile clang does match MSVC with regards to aggregate returns, whenrun in MSVC mode, it matches GCC when run in mingw mode - and thesame behaviour extends to arm/aarch64 too.Thus, this workaround needs to be enabled on all architectures,not only on x86.Signed-off-by: Martin Storsjö <martin@martin.st>
gcc workaround	 https://github.com/fmtlib/fmt/commit/8c1b22ba6d2758a0a7a3da04c5ad42beab5b130b	Workaround a gcc 9.1 bug (#2334)
gcc workaround	 https://github.com/greghogan/guix/commit/11284cb3218727c36060aa2df1eba8ffe0b69a19	gnu: gfortran: Remove obsolete workaround.* gnu/packages/gcc.scm (gfortran): Use GCC directly.
gcc workaround	 https://github.com/jamesgmorgan/greenpeacebitcoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/eclipse/deeplearning4j/commit/705533d586a281647a9d8a2be8e3cbdcee0a51f3	re-write is_callable to workaround gcc 8 sfinae bugsSigned-off-by: AbdelRauf <rauf@konduit.ai>
gcc workaround	 https://github.com/envoyproxy/data-plane-api/commit/477d5f5d50089d31c42d922a861148fd5bf4d267	bazel: update to v5.0.0 (#19706)* bazel: update to v5.0.0* Updated envoy-build-tools dependency* Removed envoy_build_tools.patch* Fixed java runtime version flag* Fixed gcc test* Remove outdated java flags* Workaround attempt for test failures* Incorporate review commentsSigned-off-by: Faseela K <faseela.k@est.tech>Mirrored from https://github.com/envoyproxy/envoy @ bbcd487bd178ef5254545941ac369d944da41913
gcc workaround	 https://github.com/Ultra119/kernel_leeco_msm8976/commit/d24694f4e3d71d81f54966fd26825e112779b721	gcov: disable tree-loop-im to reduce stack usage[ Upstream commit c87bf431448b404a6ef5fbabd74c0e3e42157a7f ]Enabling CONFIG_GCOV_PROFILE_ALL produces us a lot of warnings likelib/lz4/lz4hc_compress.c: In function 'lz4_compresshcctx':lib/lz4/lz4hc_compress.c:514:1: warning: the frame size of 1504 bytes is larger than 1024 bytes [-Wframe-larger-than=]After some investigation, I found that this behavior started with gcc-4.9,and opened https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69702.A suggested workaround for it is to use the -fno-tree-loop-imflag that turns off one of the optimization stages in gcc, so thecode runs a little slower but does not use excessive amountsof stack.We could make this conditional on the gcc version, but I could notfind an easy way to do this in Kbuild and the benefit would befairly small, given that most of the gcc version in production areaffected now.I'm marking this for 'stable' backports because it addresses a bugwith code generation in gcc that exists in all kernel versionswith the affected gcc releases.Signed-off-by: Arnd Bergmann <arnd@arndb.de>Acked-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>Cc: stable@vger.kernel.orgSigned-off-by: Michal Marek <mmarek@suse.com>Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
gcc workaround	 https://github.com/PixelExperience-Devices/kernel_oneplus_sm8150/commit/80bce197b75b7745bfb4d67778c480a0578f65c8	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/fmyuan/E3SM/commit/16bba291dfcb896764873ac8176e31cc0dc99917	Hommexx/SL: Cuda 10 GCC 7 C++14 workarounds for compose
gcc workaround	 https://github.com/TW-a-coin/a-coin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/Brif169/bitcoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/zhangshuyun/git-mirror/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/gentoo-mirror/gentoo/commit/146fff709a4168bd9011831dfb64ff3a021855e9	sys-cluster/mpich: workaround build failure with GCC 10 (stable)Bug: https://bugs.gentoo.org/725842Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/gentoo-mirror/gentoo/commit/4c2a5999e1c81c0fc121361463751f1e034edfdf	sys-cluster/mpich2: workaround build failures with GCC 10Closes: https://bugs.gentoo.org/725722Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/gentoo-mirror/gentoo/commit/14d08304513db0d19e6b4720d747fbce302074c3	sys-cluster/mpich: workaround build failure with GCC 10Closes: https://bugs.gentoo.org/725842Signed-off-by: Sam James <sam@gentoo.org>
gcc workaround	 https://github.com/CruelKernel/samsung-exynos9820/commit/e0a4ca9dbe661405572bf51d5600b31d43ece2ad	gcov: Disable gcov build with GCC 10[ Upstream commit cfc905f158eaa099d6258031614d11869e7ef71c ]GCOV built with GCC 10 doesn't initialize n_function variable.  Thisproduces different kernel panics as was seen by Colin in Ubuntu and mein FC 32.As a workaround, let's disable GCOV build for broken GCC 10 version.Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1891288Link: https://lore.kernel.org/lkml/20200827133932.3338519-1-leon@kernel.orgLink: https://lore.kernel.org/lkml/CAHk-=whbijeSdSvx-Xcr0DPMj0BiwhJ+uiNnDSVZcr_h_kg7UA@mail.gmail.com/Cc: Colin Ian King <colin.king@canonical.com>Signed-off-by: Leon Romanovsky <leonro@nvidia.com>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc workaround	 https://github.com/alexhenrie/git/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/Octavi-Testing-Org/platform_frameworks_av/commit/035a036563b633139209adb75f0fbebb5cd3351b	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Corey Edwards <ensabahnur16@gmail.com>Signed-off-by: DennySPB <dennyspb@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>Signed-off-by: Sagarrokade006 <Sagarrokade006@gmail.com>
gcc workaround	 https://github.com/leaningtech/cheerp-compiler/commit/3a244fcf298838c9a9765c61d32a9bbcfd2c033a	[libc++] Remove more test-suite workarounds for unsupported GCC versionsDifferential Revision: https://reviews.llvm.org/D108466
gcc workaround	 https://github.com/buildroot/buildroot/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/imx6ull-pro/buildroot/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/archie9211/android_kernel_motorola_chef/commit/cd4dc03ce37ec6ccb7444de581c1ef6edbf69e31	tree: Remove unnecessary GCC_VERSION invocationsUnnecessary in our case where we compile with Clang and latter GCC versions of which have likely fixed the issues the source code is trying to workaround.Signed-off-by: ederekun <sedrickvince@gmail.com>Change-Id: Ic07855d6141179a5715cb7c644dbd058f4946451
gcc workaround	 https://github.com/vlang/vc/commit/cd082117f7f51035882e2181eb1c02bf7cb5b23c	[v:master] 1170914 - os: workaround `_ = C.pipe(&pipeset[0])` gcc warning `warning: ignoring return value of pipe declared with attribute warn_unused_result` (#12046)
gcc workaround	 https://github.com/kuma35/git-docs-ja/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/NetBSD/src/commit/448bd16e76ffe1198ba48109e49e4c60d3fb73ba	PR port-sh3/56311As a workaround for GCC bug, compile initdecl() with -O0 for sh3.
gcc workaround	 https://github.com/madisongh/openembedded-core/commit/567e199862acb948cb8b3361010a9ec221147c41	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/miraclestars/android_kernel_samsung_sm8250/commit/6069f26c0c58deb09f8d174343c33a6e95b362a4	gcov: Disable gcov build with GCC 10[ Upstream commit cfc905f158eaa099d6258031614d11869e7ef71c ]GCOV built with GCC 10 doesn't initialize n_function variable.  Thisproduces different kernel panics as was seen by Colin in Ubuntu and mein FC 32.As a workaround, let's disable GCOV build for broken GCC 10 version.Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1891288Link: https://lore.kernel.org/lkml/20200827133932.3338519-1-leon@kernel.orgLink: https://lore.kernel.org/lkml/CAHk-=whbijeSdSvx-Xcr0DPMj0BiwhJ+uiNnDSVZcr_h_kg7UA@mail.gmail.com/Cc: Colin Ian King <colin.king@canonical.com>Signed-off-by: Leon Romanovsky <leonro@nvidia.com>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc workaround	 https://github.com/haggertk/linux-stable/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/openedev/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/underground-software/linux/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/VARoDeK/linux-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/freedesktop/drm-tip/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/akaros/linux-guest/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/Tomoms/android_kernel_oppo_msm8974/commit/9b29506f105448d2716a293df5d831ae81e42588	gcov: disable tree-loop-im to reduce stack usageEnabling CONFIG_GCOV_PROFILE_ALL produces us a lot of warnings likelib/lz4/lz4hc_compress.c: In function 'lz4_compresshcctx':lib/lz4/lz4hc_compress.c:514:1: warning: the frame size of 1504 bytes is larger than 1024 bytes [-Wframe-larger-than=]After some investigation, I found that this behavior started with gcc-4.9,and opened https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69702.A suggested workaround for it is to use the -fno-tree-loop-imflag that turns off one of the optimization stages in gcc, so thecode runs a little slower but does not use excessive amountsof stack.We could make this conditional on the gcc version, but I could notfind an easy way to do this in Kbuild and the benefit would befairly small, given that most of the gcc version in production areaffected now.I'm marking this for 'stable' backports because it addresses a bugwith code generation in gcc that exists in all kernel versionswith the affected gcc releases.Signed-off-by: Arnd Bergmann <arnd@arndb.de>Acked-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>Cc: stable@vger.kernel.orgSigned-off-by: Michal Marek <mmarek@suse.com>Change-Id: I64d37dbf5a1ff37c00d007ead97b3de3c0d830df
gcc workaround	 https://github.com/msys2/MINGW-packages/commit/5b75f89fb59982adf45d25cc08d0fef400916d2a	Merge pull request #8985 from jeremyd2019/grpc-gcc-workaroundsgrpc: add back LDFLAGS workarounds.
gcc workaround	 https://github.com/NetworkManager/NetworkManager/commit/445dcd9d9b3bfe61da5860e6cc9f1e598a3ae376	glib-aux: add NM_PRAGMA_WARNING_DISABLE_DANGLING_POINTER macro for workaroundNew gcc-12.0.1-0.8.fc36 on Fedora rawhide likes to emit false"-Wdangling-pointer" warnings with some g_error() uses. It seemsrelated to g_error()'s `for(;;) ;`.As workaround, add a macro to suppress the warning.But only do that for gcc-12. This bug hopefully gets fixedand we don't want to suppress useful warnings too eagerly.https://bugzilla.redhat.com/show_bug.cgi?id=2056613
gcc workaround	 https://github.com/fujicoin/fujicoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/phodina/guix/commit/11284cb3218727c36060aa2df1eba8ffe0b69a19	gnu: gfortran: Remove obsolete workaround.* gnu/packages/gcc.scm (gfortran): Use GCC directly.
gcc workaround	 https://github.com/gsnw/git-for-windows/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/gopro/gopro-lib-node.gl/commit/9fa4e790a268b88cb7fcefbba669df079575721a	internal: workaround a critical gcc 10 issueWorkarounds a critical issue¹ that has not been fixed within the last 6months.[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189[1]: http://r6.ca/blog/20200929T023701Z.html
gcc workaround	 https://github.com/romahanpro/radare2/commit/4b461609435e6ea001ecd0eb8c9025f802d6e3ff	Workaround gcc warning bug (#18655)
gcc workaround	 https://github.com/sunzu94/radare2/commit/4b461609435e6ea001ecd0eb8c9025f802d6e3ff	Workaround gcc warning bug (#18655)
gcc workaround	 https://github.com/reactos/reactos/commit/04eca8e2b21e6da084eea163372a2cbbadb753de	[WIN32K] Remove incorrect packing specification around _TL, _WIN32THREAD and _THREADINFO structures.CORE-18140This was introduced historically in commit 583de66b3 (r7460) toworkaround some compiler problems (or replace already existingGCC-specific __attribute__((packed)) annotations); however thesestructures are in-memory-only, do not describe any on-disk dataformat and don't describe hardware-specific data. So they shouldhave the "natural" alignment of the target platform.They also have to match the documented layouts at:https://reactos.org/wiki/Techwiki:Win32k/THREADINFOhttps://www.geoffchappell.com/studies/windows/km/win32k/structs/threadinfo/index.htmat least for the compatible parts that ReactOS shares.
gcc workaround	 https://github.com/ColinIanKing/linux-next/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/ljmf00/lldb-d/commit/e781e03e40337fba4ed57fcfb257d1d4a5e00e2b	[libc++] Remove workaround for broken __is_trivially_copyable on old GCCAll supported versions of GCC now do the right thing.Differential Revision: https://reviews.llvm.org/D108997
gcc workaround	 https://github.com/catboost/catboost/commit/8589dd1c43faf98abef82552f4a1717474ecb83b	Update libc++ to 1fe897df (21 Dec 2021).Notable changes:* allow __move_constexpr to work with unrelated pointers* add deprecation warnings to ATOMIC_FLAG_INIT and ATOMIC_VAR_INIT* add __transaction class to write code with strong exception guarantee* implement ranges::uninitialized_value_construct{,_n} anduninitialized_fill{,_n}* add missing inline and _LIBCPP_HIDE_FROM_ABI in __threading_support header* disable _LIBCPP_DEBUG_ASSERT during constant evaluation* add GCC workaround for std::char_traits::length() which doesn't support constexpr builtin* enable optimized _IsSame on GCC and Clang* implement monadic operations for std::optional* use _LIBCPP_DEBUG_ASSERT in string header instead of _LIBCPP_ASSERT* implement ranges::uninitialized_default_construct{,_n}* add inline to basic_string::shrink_to_fit* make __swap_allocator constexpr* make __compressed_pair fully constexpr* remove goto from std::string* make ThrowingIterator constexpr* fix noexcept in __decay_copy* improve workaround for init_priority((100)) outside of system headersref:521f7a7e8727dbec9dad6bc611e3590938b4ebee
gcc workaround	 https://github.com/ProjectStreak/platform_frameworks_av/commit/3caaba78a80849b075230158a7c35753bad32f27	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>Signed-off-by: Joey Huab <joey@evolution-x.org>
gcc workaround	 https://github.com/openeuler-mirror/kernel/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/fsouza/neovim/commit/04985f69ebd7bfb3fc4ebf369593672b1f0cbe4c	fix(ci): Remove gcc@8/gcc@9 homebrew workaround
gcc workaround	 https://github.com/shiqingziyang/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/geekmaster21/a71-masterkernel/commit/d068fd2ee5401261cf6ea9f8aac3e71d2cdd4fdf	gcov: Disable gcov build with GCC 10[ Upstream commit cfc905f158eaa099d6258031614d11869e7ef71c ]GCOV built with GCC 10 doesn't initialize n_function variable.  Thisproduces different kernel panics as was seen by Colin in Ubuntu and mein FC 32.As a workaround, let's disable GCOV build for broken GCC 10 version.Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1891288Link: https://lore.kernel.org/lkml/20200827133932.3338519-1-leon@kernel.orgLink: https://lore.kernel.org/lkml/CAHk-=whbijeSdSvx-Xcr0DPMj0BiwhJ+uiNnDSVZcr_h_kg7UA@mail.gmail.com/Cc: Colin Ian King <colin.king@canonical.com>Signed-off-by: Leon Romanovsky <leonro@nvidia.com>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Sasha Levin <sashal@kernel.org>
gcc workaround	 https://github.com/Atom-X-Devs/android_kernel_samsung_9611-m21/commit/e2b3a8200abad48ceae5dd56683a7e09dfcb7789	lto, workaround: Disable LTO for BPFDisable LTO for the BPF interpreter. This works around a gcc bug in the LTOpartitioner that partitions the jumptable used the BPF interpreterinto a different LTO unit. This in term causes assemblererrors because the jump table contains references to thecode labels in the original file.gcc problem tracked in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50676Signed-off-by: Andi Kleen <ak@linux.intel.com>
gcc workaround	 https://github.com/7Soldier/frameworks_av/commit/e514fef024047aa6ad49607f99e86596e01dcb32	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>Signed-off-by: Joey Huab <joey@evolution-x.org>
gcc workaround	 https://github.com/ac-frg/poky-fork/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/wesnoth/wesnoth/commit/6b52e1f76a8aa00976d22b7a05e33d4f26a8101b	Replace std::regex by boost to temporary workaround for Mingw-w64's bugSee https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98723
gcc workaround	 https://github.com/boostorg/geometry/commit/3d8d40ee5cf122ae46dea7bbb59cc95ae5debc86	[util] Add workaround for mismatched argument pack lengths error with gcc-11 c++20.
gcc workaround	 https://github.com/ElectroPerf/android_kernel_asus_sdm660/commit/94b982d113c27106c4fded58589958767e968bc8	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>[nc: Backport, workaround lack of e2079e93f562 in older branches]Change-Id: I5df95411de20b0da760bcb3be48690e3f9268962Signed-off-by: Kunmun <kunmun.devroms@gmail.com>
gcc workaround	 https://github.com/chandranshhh/kernel-a12_845/commit/26ea3231a17b0551d852f84d6de488ee2280ae0f	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/turex/siberia_hi6250_kernel/commit/525c27836e16e3d071d3643f054cb47a709279cc	MIPS: lib: Provide MIPS64r6 __multi3() for GCC < 7commit 690d9163bf4b8563a2682e619f938e6a0443947f upstream.Some versions of GCC suboptimally generate calls to the __multi3()intrinsic for MIPS64r6 builds, resulting in link failures due to themissing function:    LD      vmlinux.o    MODPOST vmlinux.o  kernel/bpf/verifier.o: In function `kmalloc_array':  include/linux/slab.h:631: undefined reference to `__multi3'  fs/select.o: In function `kmalloc_array':  include/linux/slab.h:631: undefined reference to `__multi3'  ...We already have a workaround for this in which we provide theinstrinsic, but we do so selectively for GCC 7 only. Unfortunately theissue occurs with older GCC versions too - it has been observed withboth GCC 5.4.0 & GCC 6.4.0.MIPSr6 support was introduced in GCC 5, so all major GCC versions priorto GCC 8 are affected and we extend our workaround accordingly to allMIPS64r6 builds using GCC versions older than GCC 8.Signed-off-by: Paul Burton <paul.burton@mips.com>Reported-by: Vladimir Kondratiev <vladimir.kondratiev@intel.com>Fixes: ebabcf17bcd7 ("MIPS: Implement __multi3 for GCC7 MIPS64r6 builds")Patchwork: https://patchwork.linux-mips.org/patch/20297/Cc: James Hogan <jhogan@kernel.org>Cc: Ralf Baechle <ralf@linux-mips.org>Cc: linux-mips@linux-mips.orgCc: stable@vger.kernel.org # 4.15+Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/rohankumardubey/deeplearning/commit/705533d586a281647a9d8a2be8e3cbdcee0a51f3	re-write is_callable to workaround gcc 8 sfinae bugsSigned-off-by: AbdelRauf <rauf@konduit.ai>
gcc workaround	 https://github.com/kpua/bitcoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/DarioMazhara/OpenCV/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/Davidgould187/Bitcoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/opencv/opencv/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/Keisuke-eng/opencv-haarcascades/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/gao745/git/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/boostorg/log/commit/b15d02ab3b14bfbae1be4290eb24d57d0ef0e376	Added workarounds of older gcc and clang for AVX2 dump implementation.Use inline asm instead of _mm256_broadcastsi128_si256 to work around issues: - gcc 4.7 is missing _mm256_broadcastsi128_si256 declaration in immintrin.h. - gcc 4.8 generates vmovdqu+vinserti128 instead of a single vbroadcasti128. - clang up until 4.0 generates vmovdqu+vinserti128 or worse.
gcc workaround	 https://github.com/madmann91/sol/commit/1db95b59f2f32dc401ccc11972b66c44fa7477d2	Add default parameter to `PathTracer` constructor (with gcc/clang workaround)
gcc workaround	 https://github.com/CipherVector/Brand_deals/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/lssfau/walberla/commit/a013d16f104e3d65c6e80105b8c866bd2e350246	Workaround for __BIGGEST_ALIGNMENT__ on ClangOn x86_64, this is always 128 bits, rendering it incompatible with AVX.GCC reports the maximum enabled vector width (which is what we want) and Intel reports the maximum supported vector width (which is okay too).
gcc workaround	 https://github.com/guix-mirror/guix/commit/11284cb3218727c36060aa2df1eba8ffe0b69a19	gnu: gfortran: Remove obsolete workaround.* gnu/packages/gcc.scm (gfortran): Use GCC directly.
gcc workaround	 https://github.com/tejas115/git-tutorial/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/triSYCL/sycl/commit/e781e03e40337fba4ed57fcfb257d1d4a5e00e2b	[libc++] Remove workaround for broken __is_trivially_copyable on old GCCAll supported versions of GCC now do the right thing.Differential Revision: https://reviews.llvm.org/D108997
gcc workaround	 https://github.com/facebookincubator/BOLT/commit/ca867ef47b8aebc2d8167049544954e78eeeb9e8	Revert GCC -Wnon-virtual-dtor workarounds "[SCEV] Fix GCC -Wnon-virtual-dtor" & "[SampleFDO] Fix -Wnon-virtual-dtor"This reverts commits 4852c770fe8703145dd2a35395985646ce57a454 and 6df09d6ccbc0cb72d3278cafb592e9bc0e6b84a1.After D109404, -Wnon-virtual-dtor will not be added when the host compiler is GCC.
gcc workaround	 https://github.com/PixelPlusUI/frameworks_av/commit/4433b5d8e7a4b07a807747b4fc36900e51f2a856	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>Signed-off-by: Joey Huab <joey@evolution-x.org>
gcc workaround	 https://github.com/leaningtech/cheerp-compiler/commit/e781e03e40337fba4ed57fcfb257d1d4a5e00e2b	[libc++] Remove workaround for broken __is_trivially_copyable on old GCCAll supported versions of GCC now do the right thing.Differential Revision: https://reviews.llvm.org/D108997
gcc workaround	 https://github.com/simrlog/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/andyholst/linux-stable-fork/commit/156102fe0bb669f40f2fd27856b21f9fa8157090	Makefile: drop GCC < 5 -fno-var-tracking-assignments workaroundNow that GCC 5.1 is the minimally supported version, we can drop thisworkaround for older versions of GCC.Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>Reviewed-by: Kees Cook <keescook@chromium.org>Reviewed-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
gcc workaround	 https://github.com/grinisrit/tnl-dev/commit/e5fc6a96122ec8a693bf398fb490458af17b2d36	Workaround for a bug in GCC 11.1.0See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100963
gcc workaround	 https://github.com/lgirdk/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/LLNL/axom/commit/48ba6490ac471191179145e662b81c091a19a83d	Merge pull request #641 from LLNL/bugfix/kweiss/sidre-dc-gcc-4.9.3Workaround for C++14 feature missing from gcc@4.9.3
gcc workaround	 https://github.com/alexander-mipt/LLVM-edu/commit/ca867ef47b8aebc2d8167049544954e78eeeb9e8	Revert GCC -Wnon-virtual-dtor workarounds "[SCEV] Fix GCC -Wnon-virtual-dtor" & "[SampleFDO] Fix -Wnon-virtual-dtor"This reverts commits 4852c770fe8703145dd2a35395985646ce57a454 and 6df09d6ccbc0cb72d3278cafb592e9bc0e6b84a1.After D109404, -Wnon-virtual-dtor will not be added when the host compiler is GCC.
gcc workaround	 https://github.com/TheNageek/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/hexagon-geo-surv/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/Zopolis4/gcj/commit/8103623923ac4ea19b97a369979d4bd5731aab57	rs6000: Disable MMA if no VSX support [PR103627]As PR103627 shows, there is an unexpected case where !TARGET_VSXand TARGET_MMA co-exist.  As ISA3.1 claims, SIMD is a requirementfor MMA.  By looking into the ICE, I noticed that the currentMMA implementation depends on vector pairs load/store which useVSX register, but we don't have a separated option to controlPower10 vector support and Segher pointed out "-mpower9-vector isa workaround that should go away" and more explanations in [1].So this patch makes MMA require VSX instead.[1] https://gcc.gnu.org/pipermail/gcc-patches/2022-January/589303.htmlgcc/ChangeLog:
gcc workaround	 https://github.com/GregTheMadMonk/tnl-noa/commit/ce5ed26984fc9cc93dc04e8fc53022fd02a1f715	Workaround for a bug in GCC 11.1.0Amends e5fc6a96122ec8a693bf398fb490458af17b2d36
gcc workaround	 https://github.com/ndsev/zserio/commit/86dd546b1db155bb43a824faeaab7463a877d454	Workaround GCC 8/9 bug when cross-compiling with -m32
gcc workaround	 https://github.com/eProsima/Fast-DDS/commit/53ac0123a350d8b03356d5e055bf9bde4c612682	Added PrintTo function for null_type (#2462)* Added workaround for GCC's incorrect GTest handling of null_typesSigned-off-by: Javier Santiago <javiersantiago@eprosima.com>* Added GTest printer for dds::core::null_typeSigned-off-by: Javier Santiago <javiersantiago@eprosima.com>
gcc workaround	 https://github.com/mendersoftware/poky/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/ubinux/yocto-ubinux/commit/5bf43c8c29bd334c5da6b1343f408171b2b0dc30	gcc: Dropping mips workaroundI've tested without this and the ptest results for mips are the same withand without it so the issue this was fixing in gcc 9 was likely resolvedby gcc 11.(From OE-Core rev: 567e199862acb948cb8b3361010a9ec221147c41)Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>
gcc workaround	 https://github.com/mosra/magnum/commit/fb51f25a7b613aa5be744deea5a4ddb88f3de064	Math: workaround rounding errors in assert tests in latest GCC (glibc?).Only in release. One of the number now had 6 at the end instead of 5.Not my problem, so using a different angle to hopefully circumvent that.
gcc workaround	 https://github.com/triSYCL/sycl/commit/ca867ef47b8aebc2d8167049544954e78eeeb9e8	Revert GCC -Wnon-virtual-dtor workarounds "[SCEV] Fix GCC -Wnon-virtual-dtor" & "[SampleFDO] Fix -Wnon-virtual-dtor"This reverts commits 4852c770fe8703145dd2a35395985646ce57a454 and 6df09d6ccbc0cb72d3278cafb592e9bc0e6b84a1.After D109404, -Wnon-virtual-dtor will not be added when the host compiler is GCC.
gcc workaround	 https://github.com/polymage-labs/mlirx/commit/e781e03e40337fba4ed57fcfb257d1d4a5e00e2b	[libc++] Remove workaround for broken __is_trivially_copyable on old GCCAll supported versions of GCC now do the right thing.Differential Revision: https://reviews.llvm.org/D108997
gcc workaround	 https://github.com/ColinIanKing/stress-ng/commit/00c9feff5b19ce00c17e9ad99ddd8e52521e3a0e	stress-cache: add clobbering warning pragma workaroundgcc warning about variable j being clobbered, this is actually OKand not an issue, so add a pragma to workaround this.Signed-off-by: Colin Ian King <colin.king@canonical.com>
gcc workaround	 https://github.com/sileshn/android_kernel_oneplus_sdm845/commit/31d2c159c6253cbbd220e8bffcad4ed1e89ee3fe	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/arachsys/packages/commit/aa3685807e0f75f7ad9b13b22cabd74493ce7b7c	Build gcc with itself unless we're bootstrappingRetain isl.diff although it's only needed when building with clang, toensure the bootstrap build continues to work fine.Drop the workaround for a binutils installation bug that is now fixed.Only check for minor version updates of binutils. Shared-tree builds needthe corresponding binutils and gcc release branches to be contemporaneous.
gcc workaround	 https://github.com/catboost/catboost/commit/b51cc2e0fd373dbec4f87f68d38508c0bb861aab	Update libc++ to d7444d9f (4 Sep 2021).Notable changes:* implement formatters* add assertion in the subrange constructors with a size hint* define insert_iterator::iter in terms of ranges::iterator_t* add __format_arg_store* remove some workarounds for unsupported GCC and Clang versions* remove workarounds for [[nodebug]] not working properly on typedefs* use std::enable_if instead of _EnableB in pair for better diagnostics* don't require pointer or complete element types in contiguous iterator concept* remove workaround for broken __is_trivially_copyable on old GCC* remove the locale fallback for NuttX since it is no longer needed* add missing HIDE_FROM_ABI on implementation detail of launderref:aada0f460a4528de9540ecce6e5195578bd2e3f7
gcc workaround	 https://github.com/altlinux/specs/commit/968f621ba987b44cf421b5eb63c09e4e8ad7e9b9	284449: acpica-20201113-alt2- fix -Wstrict-aliasing use; see also mcst#4656 and the suggested  http://gcc.gnu.org/onlinedocs/gcc-7.5.0/gcc/Warning-Options.html#Warning-Options- E2K: ftbfs workarounds (still the warnings might be real)
gcc workaround	 https://github.com/leaningtech/cheerp-compiler/commit/ca867ef47b8aebc2d8167049544954e78eeeb9e8	Revert GCC -Wnon-virtual-dtor workarounds "[SCEV] Fix GCC -Wnon-virtual-dtor" & "[SampleFDO] Fix -Wnon-virtual-dtor"This reverts commits 4852c770fe8703145dd2a35395985646ce57a454 and 6df09d6ccbc0cb72d3278cafb592e9bc0e6b84a1.After D109404, -Wnon-virtual-dtor will not be added when the host compiler is GCC.
gcc workaround	 https://github.com/cailiwei/buildroot/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/xogium/buildroot/commit/f439f7c60b3734d3920c32aee027c2cb73621682	package/pkg-cargo.mk: fix building cargo packages on 32bit armThere are duplicated symbols between rustc and gcc. Specifying--allow-multiple-definition to the linker as workaround untilrustc is fixed.rust-lang issue: https://github.com/rust-lang/compiler-builtins/issues/420Fixes: http://autobuild.buildroot.net/results/53f/53f5598b8e520caaa135fb4923c09da382dab329Signed-off-by: Moritz Bitsch <moritz@h6t.eu>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
gcc workaround	 https://github.com/pradeepyadavz/radhekrishna/commit/ac2158649dee9dc0644aefc0be5d25d54f63ad90	Merge branch 'ab/trace2-squelch-gcc-warning'Workaround compiler warnings.* ab/trace2-squelch-gcc-warning:  trace2: refactor to avoid gcc warning under -O3
gcc workaround	 https://github.com/pop-os/libdrm/commit/eaf234c1489f53035fba1698c1a27781f5755be6	meson: switch to cc.get_supported_argumentsThis is generally faster, as meson is able to parallelize the checks forus.This also removes the workaround for checking gcc/clang -Wno-*arguments, which meson now handles internally so we don't need to handleit ourselves.Signed-off-by: Dylan Baker <dylan@pnwbakers.com>Reviewed-by: Simon Ser <contact@emersion.fr>
gcc workaround	 https://github.com/namecoin/namecoin-core/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/rohankumardubey/OpenMLDB/commit/df6fd1a8d76fa8b973af433ce620136f3c2e1a8a	build(thirdparty): add a option to workaround zookeeper buildtaken from https://github.com/apache/zookeeper/commit/b3577278ab23f142fdb104a07bd61fbc74a4f152the patched zookeeper may work on some linux distros where gcc >= 9
gcc workaround	 https://github.com/tensorflow/tflite-micro/commit/6091bec50a9b6f1429a28a00c07f7041b8b95c17	Workaround for fpu-related bug in gcc (#572)needed because of the following bug:https://gcc.gnu.org/bugzilla//show_bug.cgi?id=83206Co-authored-by: Advait Jain <advaitjain@users.noreply.github.com>
gcc workaround	 https://github.com/jtham1511/opencv/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/nginx/unit/commit/aeed86c6829c62359e79f239b849766efb8857a7	Workaround for the warning in nxt_realloc() on GCC 12.This closes #639 issue on Github.
gcc workaround	 https://github.com/TanushriDeshmukh/Open-CV/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/KhronosGroup/LLVM-SPIRV-Backend/commit/3a244fcf298838c9a9765c61d32a9bbcfd2c033a	[libc++] Remove more test-suite workarounds for unsupported GCC versionsDifferential Revision: https://reviews.llvm.org/D108466
gcc workaround	 https://github.com/classified/android_kernel_oneplus_sm8150/commit/80bce197b75b7745bfb4d67778c480a0578f65c8	Makefile: Move -Wno-unused-but-set-variable out of GCC only blockcommit 885480b084696331bea61a4f7eba10652999a9c1 upstream.Currently, -Wunused-but-set-variable is only supported by GCC so it isdisabled unconditionally in a GCC only block (it is enabled with W=1).clang currently has its implementation for this warning in review sopreemptively move this statement out of the GCC only block and wrap itwith cc-disable-warning so that both compilers function the same.Cc: stable@vger.kernel.orgLink: https://reviews.llvm.org/D100581Signed-off-by: Nathan Chancellor <nathan@kernel.org>Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>Tested-by: Nick Desaulniers <ndesaulniers@google.com>Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>[nc: Backport, workaround lack of e2079e93f562 in older branches]Signed-off-by: Nathan Chancellor <nathan@kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
gcc workaround	 https://github.com/sudiptapatowary/my_private/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/vlang/v/commit/117091452b2afe2ad2031cdc03f720bb13df24e7	os: workaround `_ = C.pipe(&pipeset[0])` gcc warning `warning: ignoring return value of pipe declared with attribute warn_unused_result` (#12046)
gcc workaround	 https://github.com/furszy/bitcoin/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/ljmf00/lldb-d/commit/3a244fcf298838c9a9765c61d32a9bbcfd2c033a	[libc++] Remove more test-suite workarounds for unsupported GCC versionsDifferential Revision: https://reviews.llvm.org/D108466
gcc workaround	 https://github.com/Jack-Hinze/Camera-Capture/commit/3995deaf76d0c988d315630ace46eb01dba37174	fix opencv/opencv#20544 nodiscard for msvc/gcc- includes workaround for preprocessor non-compliance- enable attribute syntax checking in msvc
gcc workaround	 https://github.com/sailfishos-mirror/drm/commit/eaf234c1489f53035fba1698c1a27781f5755be6	meson: switch to cc.get_supported_argumentsThis is generally faster, as meson is able to parallelize the checks forus.This also removes the workaround for checking gcc/clang -Wno-*arguments, which meson now handles internally so we don't need to handleit ourselves.Signed-off-by: Dylan Baker <dylan@pnwbakers.com>Reviewed-by: Simon Ser <contact@emersion.fr>
gcc workaround	 https://github.com/Ambrosys/os-matcher/commit/bccd3f74ed7d5cf27f89b6997167662218f529da	Update docker builds and docs- Remove bibermann/os-matcher:gcc-sphinx image dependency.- Use sphinxdoc/sphinx-latexpdf:4.1.2 instead.- Remove outdated workarounds.- Update build documentation.- Deploy os-matcher image in our registry
gcc workaround	 https://github.com/davidbrowne/dsga/commit/c2ab38464f0f8ca58676f55926e140cbcdc94909	upgraded to cxcm v0.1.7 (with workaround for gcc ICE)
gcc workaround	 https://github.com/theresiayazbeck/ELM_Act_Wetland/commit/16bba291dfcb896764873ac8176e31cc0dc99917	Hommexx/SL: Cuda 10 GCC 7 C++14 workarounds for compose
gcc workaround	 https://github.com/facebookincubator/BOLT/commit/3a244fcf298838c9a9765c61d32a9bbcfd2c033a	[libc++] Remove more test-suite workarounds for unsupported GCC versionsDifferential Revision: https://reviews.llvm.org/D108466
gcc workaround	 https://github.com/bitcoin-core/gui/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/Actinium-project/Actinium-ng/commit/1f46b6e46e1454b91ff7ceb31853bc440952f8eb	util: Work around libstdc++ create_directories issueWork around libstdc++ issue [PR101510] with create_directories where theleaf already exists as a symlink. Fixes #24257, introduced by the switchto `std::filesystem`. It is meant to be more thorough than #24266, whichonly worked around one instance of the problem.The issue was fixed upstream inhttps://gcc.gnu.org/git/?p=gcc.git;a=commit;h=124eaa50e0a34f5f89572c1aa812c50979da58fc,but unfortunately we'll have to carry a fix for it for a while.This introduces a function `fs::create_directories` which wraps`std::filesystem::create_directories`. This allows easiliy reverting theworkaround when it is no longer necessary.
gcc workaround	 https://github.com/PixelDust-Twelve/android_frameworks_av/commit/c0f0b077606cdd6cc5258758b735d704b0d5f15d	camera: Workaround for GCC-compiled HAL3 drivers * When starting HAL3 using an older camera library (blob),   the internal structure is aligned differently when compiled   with GCC vs. LLVM. This could cause the "mLocked" field to   be overwritten unintentionally, resulting in all update()   calls from the HAL failing with "CameraMetadata is locked"   even though nothing actually locked it! This would cause   the service to kick out the HAL, and nobody gets a camera. * Cheap fix is to add a padding byte between mBuffer and   mLocked, and we are back in business.Change-Id: I3306e14867007a90885aca13e238dee5b49d8da2Signed-off-by: Corey Edwards <ensabahnur16@gmail.com>Signed-off-by: DennySPB <dennyspb@gmail.com>Signed-off-by: DennySPb <dennyspb@gmail.com>Signed-off-by: spezi77 <spezi7713@gmx.net>
