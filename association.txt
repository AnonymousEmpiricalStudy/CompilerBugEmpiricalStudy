compiler	symptom	workaround	url	commit		
gcc	rejects-valid	switching libraries	 https://github.com/pavel532/libdeflate/commit/d045a4933585fceef38d235727c49d9eac61cd61	Don't use ARM CRC32 intrinsics when affected by gcc bug 104439The following build error was reported athttps://github.com/ebiggers/libdeflate/pull/163:    /tmp/ccAwbDTP.s:140: Error: selected processor does not support crc32b r0,r0,r3' in ARM mode    [followed by lots of similar errors]This is caused by https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104439, agcc bug that has been fixed.  To work around this, disable buildingcrc32_arm() as dynamically-dispatched code on the affected gcc versions.		
gcc	environment	disabling components	 https://github.com/spack/spack/commit/6e36c71d6873d5b2feb9494f670b0277a9e68649	Fix GCC 8 build on macOS bigsur %apple-clang@12.0.5 (#28795)* gcc: revise patch range on darwin* gcc: add conflict to work around bootstrap failurecloses #23296 . See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340.```Comparing stages 2 and 3Bootstrap comparison failure!gcc/tree-ssa-operands.o differsgcc/tree-ssanames.o differsgcc/ipa-inline.o differsgcc/tree-ssa-pre.o differsgcc/gimple-loop-interchange.o differs...```639 total differences.* gcc: bump conflict up to correct later version		
gcc	c++-feature,crash	restricting compiler versions	 https://github.com/rohankumardubey/scyllaDB/commit/33f8ec09df309b055766aec5c2845f0c4e525bd4	Merge 'treewide: improve compatibility with gcc 11' from Avi KivityOur source base drifted away from gcc compatibility; this mostlyrestores the ability to build with gcc. An important exception iscoroutines that have an initializer list [1]; this still doesn't work.We aim to switch back to gcc 11 if/when this gives us betterC++ compatibility and performance.Test: unit (dev)[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98056Closes #9459* github.com:scylladb/scylla:  test: radix_tree_printer: avoid template specialization in class context  test: raft: avoid ignored variable errors  test: reader_concurrency_semaphore_test: isolate from namespace of source_location  test: cql_query_test: drop unused lambda assert_replication_not_contains  test: commitlog_test: don't use deprecated seastar::unaligned_cast  test: adjust signed/unsigned comparisons in loops and boost tests  build: silence some gcc 11 warnings  sstables: processing_result_generator: make coroutine support palatable for C++20 compilers  managed_bytes: avoid compile-time loop in converting constructor  service: service_level_controller: drop unused variable sl_compare  raft: disambiguate promise name in raft::active_read  locator: azure_snitch: use full type name in definition of globals  cql3: statements: create_service_level_statement: don't ignore replace_defaults()  cql3: statement_restrictions: adjust call to std::vector deduction guide  types: remove recursive constraint in deserialize_value  cql3: restrictions: relax constraint on visitor_with_binary_operator_content  treewide: handle switch statements that return  cql3: expr: correct type of captured map value_type  cdc: adjust type of streams_count  alternator: disambiguate attrs_to_get in table_requests		
gcc	c++-feature	refactoring	 https://github.com/M680x0/M680x0-mono-repo/commit/6cd232056c3cdaf5e9eb85ede8e42d0db97f0f71	[MLIR][NFC] Inline lambda to workaround gcc 9.1,9.2 buggcc 9.1/9.2 has a bug (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90538)which leads to an incorrect error when expanding parameter packs multipletimes in a lambda. Inlining this lambda to work around this issue.Reviewed By: rriddle, CarolineConcattoDifferential Revision: https://reviews.llvm.org/D81828		
gcc	c++-feature,crash	refactoring	https://github.com/longturn/freeciv21/commit/0df9a42647cb904d51ab2b225539edb81982382d	Try to work around a crash on GCC 9https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60855		
gcc	c++-feature,rejects-valid	refactoring	 https://github.com/facebook/fbthrift/commit/dced3aebffd498459a562546e1636ebf1bdbaef4	Workaround a gcc issue (#495)Summary:Works around the following error when building with gcc:```thrift/lib/cpp2/GeneratedCodeHelper.h:991:16: error: 闁炽儲螜rocessor闁?was not declared in this scope                processor,                ^~~~~~~~~```Likely the gcc bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=71546.Pull Request resolved: https://github.com/facebook/fbthrift/pull/495Test Plan: https://github.com/facebook/fbthrift/runs/6066858917Reviewed By: iahsDifferential Revision: D35726038Pulled By: vitautfbshipit-source-id: b536f30995546c6a6843fa41cd57d7186b765896		
gcc	diagnostic	refactoring	 https://github.com/php/php-src/commit/150ebfdf77320b24b0358f8a903e90d7940ad4a4	Suppress bogus [-Wlogical-op] warning from GCCSee GCC bug 69602: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69602which emits the warning for (errno == EWOULDBLOCK || errno == EAGAIN)which is the correct way of handling errors as the value of EWOULDBLOCKand EAGAIN is implementation defined.Therefore introduce a new macro function PHP_IS_TRANSIENT_ERROR()which handles the case when EWOULDBLOCK and EAGAIN are identical.Thanks to @twose for the idea.		
gcc	diagnostic	refactoring	 https://github.com/ARM-software/armnn/commit/e118e0423d6ec95c9894a987db671844f8220117	Bugfix: GCC-11 stringop-overread warning treated as error * Occured in Ubuntu Impish * GCC Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578Signed-off-by: Francis Murtagh <francis.murtagh@arm.com>Change-Id: Ic2b1ae64bb2f1362ec3eb5c2b7a829deee2e9018		
gcc	diagnostic	refactoring	 https://github.com/xcd0/qmk_firmware/commit/a535d24ecfd465124cdb255e53b5cc301cbda6d9	core: chibios: bootloader: use integer pointers as volatile (#13450)This prevents gcc from incorrectly trying to validate array bounds.```tmk_core/common/chibios/bootloader.c: error: '__builtin_memcpy' offset [0, 21] is out of the bounds [0, 0] [-Werror=array-bounds]  107 |     __builtin_memcpy((void *) VBAT, (const void *)sys_reset_to_loader_magic, sizeof(sys_reset_to_loader_magic));      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~```See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c16Fixes #12925		
gcc	diagnostic	suppressing warning messages	 https://github.com/haraldkl/aotus/commit/8447c59aa1dc46f4bf74ce662fc38671a92889c2	Do not warn about maybe uninitialized values for GCC, as it doesnot work properly, see:https://gcc.gnu.org/bugzilla//show_bug.cgi?id=86117#c5		
gcc	diagnostic	refactoring	 https://github.com/BelledonneCommunications/bcg729/commit/dcfa63fc9d52d7fc761d5fb253e8ece8b11e06c8	Fix #10: Making it build on debian jessieAvoiding missing-braces error wich is apparently a GCC bug (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119)		
gcc	diagnostic	refactoring	 https://github.com/chenshuo/muduo/commit/9aaeda812bde476d231495212e6cf331ae2792b4	Fix build on gcc <= 4.9, #512.Workaround a bug in gcc "-Wshadow is too strict / has false positives"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57709This should fix build on Ubuntu 14.04, Debian 7&8, CentOS 7.		
gcc	diagnostic	refactoring	 https://github.com/dxx-rebirth/dxx-rebirth/commit/bace34343789cbab2995d0c22aa6822b9e5b67ce	Fix gcc-11 warning -Wmaybe-uninitialized on input arrayFor gcc bug #10138 [1], gcc-11 gained a new way to show a-Wmaybe-uninitialized warning.  When an uninitialized array is passed by`const T *` to a function, gcc-11 assumes the array is an input to thefunction, and warns accordingly.  This is often useful, but is incorrectfor the Rebirth partial_range code.  In this code, the pointer is onlypassed so that the eventual exception can print the memory address ofthe affected array.  The called function does not dereference thepointer, and so cannot be influenced by any uninitialized values in theunderlying array.Change the report function to take the array address in a `uintptr_t`,and cast it back for printing.  This silences the gcc-11 warning, whilepreserving the previous semantics in the code.[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=10138		
gcc	diagnostic	suppressing warning messages	 https://github.com/MontaVista-OpenSourceTechnology/linux-live-app-coredump/commit/b06a17583f6f810f620f95382b171cc5ce9848ee	Merge tag 'array-bounds-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linuxPull array-bounds updates from Kees Cook: "This enables -Warray-bounds and -Wzero-length-bounds, now that the  many bug fixes have landed all over the place in the kernel, and in  GCC itself[1].  A couple fixes[2] for known corner-case issues currently live in my  "pending-fixes" tree which I'm expecting to send next week if other  maintainers still haven't picked them up.  I'm also expecting we can enable -Wstringop-overflow next cycle, as  there are only a few stragglers[3], but it might even be possible for  this release"[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578[2] https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/commit/?h=for-next/pending-fixes&id=2d253138910eec553fc706379914243d71de9b85[3] https://github.com/KSPP/linux/issues/181* tag 'array-bounds-v5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:  Makefile: Enable -Wzero-length-bounds  Makefile: Enable -Warray-bounds		
gcc	diagnostic	suppressing warning messages	 https://github.com/SoptikHa2/gnulib-2020/commit/f60dd0747ad75c2971cc314111c8fc2b8a38ce19	nl_langinfo-tests: work around GCC bug 44511* tests/test-nl_langinfo-mt.c: Ignore -Wreturn-type, to workaround a GCC bug <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=44511>.Problem reported for GNU grep by Andreas Schwab<https://bugs.gnu.org/44535>.		
gcc	diagnostic,wrong-code	suppressing warning messages	 https://github.com/Deus-Ex-Mortis/RIOT-security/commit/6588db65805c01c8ceb8d6c7cddb41602b30d1f7	pkg/qcbor,wakaama,wolfssl: remove maybe-uninitialized warningsome variable seem uninitialized to gcc with -Og but aren'thttps://gcc.gnu.org/bugzilla/buglist.cgi?quicksearch=may%20be%20used%20uninitializedhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=42145especialy:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90710#c1		
gcc	diagnostic,c++-feature	refactoring	 https://github.com/sailfishos-mirror/qtbase/commit/81b9ee66b8e40ed145185fe46b7c91929688cafd	QLibrary: Suppress GCC 12 warning about dangling pointer accessIntroduced in commit d07742f333df89dc399fc5d9cabf2bdef0b346c5. Reportedby GCC 12:qlibrary.cpp:672:9: error: dangling pointer to 闁炽儲andidates闁?may be used [-Werror=dangling-pointer=]  672 |         if (isValidSuffix(*it++))      |         ^~qlibrary.cpp:634:29: note: 闁炽儲andidates闁?declared here  634 |         const QLatin1String candidates[] = {      |                             ^~~~~~~~~~This is a false positive report because the lambda does not return apointer or iterator. But it's a good update anyway to keep the arrayoutside the lambda, so it won't be recreated every time.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104492Pick-to: 6.3Change-Id: I74249c52dc02478ba93cfffd16d230abd1bf6166Reviewed-by: Marc Mutz <marc.mutz@qt.io>		
gcc	diagnostic	refactoring	 https://github.com/xdroid-devices/xd_kernel_xiaomi_dipper/commit/d488b40a3442b16e741edc80971caad1574b4098	qnx4: work around gcc false positive warning bugcommit d5f6545934c47e97c0b48a645418e877b452a992 upstream.In commit b7213ffa0e58 ("qnx4: avoid stringop-overread errors") I triedto teach gcc about how the directory entry structure can be twodifferent things depending on a status flag.  It made the code clearer,and it seemed to make gcc happy.However, Arnd points to a gcc bug, where despite using two differentmembers of a union, gcc then gets confused, and uses the size of one ofthe members to decide if a string overrun happens.  And not necessarilythe rigth one.End result: with some configurations, gcc-11 will still complain aboutthe source buffer size being overread:  fs/qnx4/dir.c: In function 'qnx4_readdir':  fs/qnx4/dir.c:76:32: error: 'strnlen' specified bound [16, 48] exceeds source size 1 [-Werror=stringop-overread]     76 |                         size = strnlen(name, size);        |                                ^~~~~~~~~~~~~~~~~~~  fs/qnx4/dir.c:26:22: note: source object declared here     26 |                 char de_name;        |                      ^~~~~~~because gcc will get confused about which union member entry is actuallygetting accessed, even when the source code is very clear about it.  Gccinternally will have combined two "redundant" pointers (pointing todifferent union elements that are at the same offset), and takes thesize checking from one or the other - not necessarily the right one.This is clearly a gcc bug, but we can work around it fairly easily.  Thebiggest thing here is the big honking comment about why we do what wedo.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578#c6Reported-and-tested-by: Arnd Bergmann <arnd@kernel.org>Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>		
gcc	diagnostic	suppressing warning messages	 https://github.com/google/tcmalloc/commit/ad2dcab74fa228799b1dc6886926eacd74cbe8d3	Repair GCC build by ignoring a false-positive error message. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96003 for more details.PiperOrigin-RevId: 399216495Change-Id: I0c479e351ad0f32994347989f9c5eec52e03a292		
gcc	diagnostic	modifying non-triggered programs	 https://github.com/turex/siberia_hi6250_kernel/commit/e738a64220d4b4fb70a3a7b21a9d127abae09333	rtlwifi: fix uninitialized rtlhal->last_suspend_sec timecommit 3f2a162fab15aee243178b5308bb5d1206fc4043 upstream.We set rtlhal->last_suspend_sec to an uninitialized stack variable,but unfortunately gcc never warned about this, I only found itwhile working on another patch. I opened a gcc bug for this.Presumably the value of rtlhal->last_suspend_sec is not all thatimportant, but it does get used, so we probably want thepatch backported to stable kernels.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82839Signed-off-by: Arnd Bergmann <arnd@arndb.de>Acked-by: Larry Finger <Larry.Finger@lwfinger.net>Signed-off-by: Kalle Valo <kvalo@codeaurora.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>		
gcc	diagnostic	suppressing warning messages	 https://github.com/GrapheneOS/hardened_malloc/commit/75952581ee2391438b933a4d4021d7f2f4f43724	Silence a GCC warningAs suggested in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66425#c34		
gcc	diagnostic	suppressing warning messages	 https://github.com/bsd-hacker/freebsd/commit/5a8dc1ce273383a8c27063e6b58112900ba42480	Silence GCC's -Wno-unused-result during bootstrapUnlike clang, GCC still warns even with (void) casts (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66425)		
gcc	diagnostic	refactoring	 https://github.com/sailfishos-mirror/cmake/commit/ae101921e8441d2a87ce0f09804cad2409726cc5	Source: Avoid gcc 12 compilation warningGCC 12 warns:    warning: '%04d' directive output may be truncated writing between    4 and 11 bytes into a region of size 5 [-Wformat-truncation=]The surrounding logic guarantees the formatted integer will neverbe more than 4 bytes, but it doesn't hurt to use a larger buffer.This GCC behavior is documented:    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104012#c5		
gcc	diagnostic	refactoring	 https://github.com/sourceruckus/linux-mdl/commit/14b6cff54edaca5740068e9ed070152727ed7718	staging: rtl8723bs: avoid bogus gcc warninggcc gets confused by some of the type casts and produces anapparently senseless warning about an out-of-bound memcpy toan unrelated array in the same structure:drivers/staging/rtl8723bs/os_dep/ioctl_cfg80211.c: In function 'rtw_cfg80211_ap_set_encryption':cc1: error: writing 8 bytes into a region of size 0 [-Werror=stringop-overflow=]In file included from drivers/staging/rtl8723bs/include/drv_types.h:32,                 from drivers/staging/rtl8723bs/os_dep/ioctl_cfg80211.c:10:drivers/staging/rtl8723bs/include/rtw_security.h:98:15: note: at offset [184, 4264] into destination object 'dot11AuthAlgrthm' of size 4   98 |         u32   dot11AuthAlgrthm;         /*  802.11 auth, could be open, shared, 8021x and authswitch */      |               ^~~~~~~~~~~~~~~~cc1: error: writing 8 bytes into a region of size 0 [-Werror=stringop-overflow=]drivers/staging/rtl8723bs/include/rtw_security.h:98:15: note: at offset [264, 4344] into destination object 'dot11AuthAlgrthm' of size 4This is a known gcc bug, and the patch here is only a workaround,but the approach of using a temporary variable to hold a pointerto the key also improves readability in addition to avoiding thewarning, so overall this should still help.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99673Signed-off-by: Arnd Bergmann <arnd@arndb.de>Link: https://lore.kernel.org/r/20210422152648.2891996-1-arnd@kernel.orgCc: stable <stable@vger.kernel.org>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>		
gcc	diagnostic	suppressing warning messages	 https://github.com/sumoprojects/sumokoin/commit/8e8a37b5f2338bbced7914bfb54d2a5e9698a36c	suppress warning due to gcc bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51712		
gcc	diagnostic	refactoring	 https://github.com/boostorg/nowide/commit/4d3afcef3cb81721502361251cd8fbbad91a8bac	Use typedef for qualified struct ::stat`using` triggers a bogus warning in GCC (e.g. MinGW) < 11:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66159		
gcc	diagnostic	refactoring	 https://github.com/Bitcoin-ABC/bitcoin-abc/commit/978dc6c00a227b0ff396cf084d4810f39d7475c9	Work around GCC -Wmaybe-uninitialized false positiveSummary:This works around a GCC bug:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80635Test Plan:With an affected GCC version:  ninja all checkReviewers: #bitcoin_abc, majcostaReviewed By: #bitcoin_abc, majcostaDifferential Revision: https://reviews.bitcoinabc.org/D8630		
gcc	diagnostic	suppressing warning messages	 https://github.com/ljmf00/lldb-d/commit/d9eb6c7cf55f88b28bdc6edad2eb45d0d52dfa1a	[libc++abi] Remove workarounds for missing -Wno-exceptions on older GCCshttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=97675 has now been resolvedin GCC 11, so we can remove those workarounds.Differential Revision: https://reviews.llvm.org/D109188		
gcc	diagnostic	refactoring	 https://github.com/libreswan/libreswan/commit/60c13446394ea74a331f82e494a275ca9858c47b	connections: move .where to end of connection_filterWorkaround https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102288		
gcc	diagnostic,optimization	modifying non-triggered programs	 https://github.com/xenia-project/xenia/commit/10ff77a24f25827021a900b730e8868b878b1f14	[Base] Add workaround for GCC bughttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=100801		
gcc	diagnostic,wrong-code	others	 https://github.com/BossHobby/QUICKSILVER/commit/cd821b919d0ca514b6ea3c6ff3dd39e6be63d1c4	pio: update compiler packagethis reveals a compiler bug with missaligned reads on packed structshttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=51628		
gcc	optimization	modifying non-triggered programs	 https://github.com/roberteg16/Quark/commit/3d89fb4d13bc3af1c3643a310b90fce51a649119	[RISCV] Support machine constraint "S"Similar to D46745, "S" represents an absolute symbolic operand, whichcan be used to specify the access models, e.g.  extern int var;  void *addr_via_asm() {    void *ret;    asm("lui %0, %%hi(%1)\naddi %0,%0,%%lo(%1)" : "=r"(ret) : "S"(&var));    return ret;  }'S' is documented in trunk GCC: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101275Reviewed By: luismarquesDifferential Revision: https://reviews.llvm.org/D105254		
gcc	crash	refactoring	 https://github.com/apache/arrow/commit/482ac5fa763f48efca8f83560da51fff1084df49	ARROW-10867: [C++] Workaround gcc internal compiler errorSeveral gcc versions (from at least 7.x to 10.x) crash on the current development version of Arrow.Upstream bug report is at https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98282Closes #8923 from pitrou/ARROW-10867-internal-gcc-errorAuthored-by: Antoine Pitrou <antoine@python.org>Signed-off-by: Benjamin Kietzman <bengilgit@gmail.com>		
gcc	crash	refactoring	 https://github.com/ComputationalRadiationPhysics/picongpu/commit/2841fbc749c17a986c692f686eb43e2f8dedbb30	fix GCC constexpr lambda bugApply workaround for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91377		
gcc	crash	refactoring	 https://github.com/simgrid/simgrid/commit/8989e31e81c82d0a754da9b1a0850ca23a27d0d1	Revert "Silly workaround for coverage build with gcc-10."This reverts commit d345b5dad90a1ec9829011b9188185aaf4d3240a.The problem with gcc was likely fixed with PR fortran/95847(see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95847)		
gcc	crash	others	 https://github.com/WanzenBug/fedora-src-qemu/commit/f9f5de99949d58a308ae03ab2a0f4fd35b3e1160	Define STAP_SDT_ARG_CONSTRAINT=g on %%{arm}, workaround for:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103395See also /usr/include/sys/sdt.h		
gcc	wrong-code	modifying non-triggered programs	 https://github.com/ammarfaizi2/linux-block/commit/b53823fb2ef854222853be164f3b1e815f315144	selftests/rseq: Fix: work-around asm goto compiler bugsgcc and clang each have their own compiler bugs with respect to asmgoto. Implement a work-around for compiler versions known to have thosebugs.gcc prior to 4.8.2 miscompiles asm goto.https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58670gcc prior to 8.1.0 miscompiles asm goto at O1.https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103908clang prior to version 13.0.1 miscompiles asm goto at O2.https://github.com/llvm/llvm-project/issues/52735Work around these issues by adding a volatile inline asm withmemory clobber in the fallthrough after the asm goto and at eachlabel target.  Emit this for all compilers in case other similarissues are found in the future.Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>Link: https://lkml.kernel.org/r/20220124171253.22072-14-mathieu.desnoyers@efficios.com		
gcc	link-failure	modifying non-triggered programs	 https://github.com/beagleboard/buildroot/commit/137225cef423ccbebc31d0c562bf3f37192739ac	package/gcc: add OpenRisc patches for gcc version 11.1.0At the moment of gcc 11.1.0 release the OpenRisc patches for -mcmodel=largewere still pending. They have been upstreamed yesterday as pointed in gccbugzilla[1]. So they will be part of gcc 11.3.0 or maybe before on 11.2.2. Anyway at the moment if we try to build packages libgeos and protobufwith OpenRisc gcc 11.1.0 it fails due to missing -mcmodel=large. So let'sadd OpenRisc patches for it as done for all the previous versions.Fixes:still not appeared on autobuilers[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99783Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>		
gcc	optimization	modifying non-triggered programs	 https://github.com/golang/go/commit/96081f854547353caaa77b795974f76b24572493	cmd/compile: remove a false dependency for TZCNTLZCNT/TZCNT on some Intel CPUs suffer from a false dependency onthe destination register.The problem was mentioned in the GCC Ticket: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=62011#c7and fixed with https://gcc.gnu.org/viewcvs?rev=214112&root=gcc&view=revChange-Id: I8109e84f03ac85f221b06d3b913612b58320d151Reviewed-on: https://go-review.googlesource.com/c/go/+/369019Reviewed-by: Keith Randall <khr@golang.org>Trust: Alex Rakoczy <alex@golang.org>Run-TryBot: Alex Rakoczy <alex@golang.org>TryBot-Result: Gopher Robot <gobot@golang.org>		
gcc	optimization	disabling optimizations	 https://github.com/RevengeOS-Devices/kernel_realme_RMX1971/commit/2a49e83992f499ceed9e3371b9f5eaf162388ed7	crypto: aes-generic - fix aes-generic regression on powerpcMy last bugfix added -Os on the command line, which unfortunately causeda build regression on powerpc in some configurations.I've done some more analysis of the original problem and found slightlydifferent workaround that avoids this regression and also results inbetter performance on gcc-7.0: -fcode-hoisting is an optimization stepthat got added in gcc-7 and that for all gcc-7 versions causes worseperformance.This disables -fcode-hoisting on all compilers that understand the option.For gcc-7.1 and 7.2 I found the same performance as my previous patch(using -Os), in gcc-7.0 it was even better. On gcc-8 I could see nochange in performance from this patch. In theory, code hoisting shouldnot be able make things better for the AES cipher, so leaving itdisabled for gcc-8 only serves to simplify the Makefile change.Reported-by: kbuild test robot <fengguang.wu@intel.com>Link: https://www.mail-archive.com/linux-crypto@vger.kernel.org/msg30418.htmlLink: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83356Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83651Fixes: 148b974deea9 ("crypto: aes-generic - build with -Os on gcc-7+")Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>Signed-off-by: Raphiel Rollerscaperers <raphielscape@outlook.com>Signed-off-by: laststandrighthere <laststandrighthere@gmail.com>Signed-off-by: Lau <laststandrighthere@gmail.com>		
gcc	optimization	disabling optimizations	 https://github.com/Ultra119/kernel_leeco_msm8976/commit/d24694f4e3d71d81f54966fd26825e112779b721	gcov: disable tree-loop-im to reduce stack usage[ Upstream commit c87bf431448b404a6ef5fbabd74c0e3e42157a7f ]Enabling CONFIG_GCOV_PROFILE_ALL produces us a lot of warnings likelib/lz4/lz4hc_compress.c: In function 'lz4_compresshcctx':lib/lz4/lz4hc_compress.c:514:1: warning: the frame size of 1504 bytes is larger than 1024 bytes [-Wframe-larger-than=]After some investigation, I found that this behavior started with gcc-4.9,and opened https://gcc.gnu.org/bugzilla/show_bug.cgi?id=69702.A suggested workaround for it is to use the -fno-tree-loop-imflag that turns off one of the optimization stages in gcc, so thecode runs a little slower but does not use excessive amountsof stack.We could make this conditional on the gcc version, but I could notfind an easy way to do this in Kbuild and the benefit would befairly small, given that most of the gcc version in production areaffected now.I'm marking this for 'stable' backports because it addresses a bugwith code generation in gcc that exists in all kernel versionswith the affected gcc releases.Signed-off-by: Arnd Bergmann <arnd@arndb.de>Acked-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>Cc: stable@vger.kernel.orgSigned-off-by: Michal Marek <mmarek@suse.com>Signed-off-by: Sasha Levin <sasha.levin@oracle.com>		
gcc	wrong-code	refactoring	 https://github.com/TKChattoraj/bitcoin/commit/252d1a70fb452893efe4ab64298139eb08d8ac98	ci: use Debian Bullseye in ARM CIThis works around an issue when trying to use `std::filesystem::remove_all`with the ARM GCC on Buster. Has been split out of #20744.See comments starting here:https://github.com/bitcoin/bitcoin/pull/20744#issuecomment-810279549.Also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93201.		
gcc	rejects-valid	refactoring	 https://github.com/wagerr/wagerr/commit/8ea542b7aad7c582c45bcf3758153a0f7048a2a8	fix old gcc compiler bug (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50025)		
gcc	rejects-valid	implementing methods	 https://github.com/sleepybishop/oblas/commit/877a4bffae1bcb18d74015889a11ae0b2d6cbb12	gcc has added avx intrinsics (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91341#c3)		
gcc	rejects-valid	disabling optimizations	 https://github.com/isrc-cas/chromium-v8-build/commit/e2395fc5f7856c4976433964b70e4400a4cb627f	GCC: no -fno-delete-null-pointer-checks in compiler flagsGCC seems to have a bug with constexpr when this flag is present:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97913So enable it only on clang for now.Bug: 1139129Change-Id: If657d5e3fac1621adf57c266cfd64ce628dc7b86Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2551494Commit-Queue: Matthew Denton <mpdenton@chromium.org>Reviewed-by: Nico Weber <thakis@chromium.org>Cr-Commit-Position: refs/heads/master@{#829585}GitOrigin-RevId: 023af6393c5555cd66eb8c45e33d18c6a0cf38ba		
gcc	wrong-code	refactoring	 https://github.com/TwistedPrime/Twisted-OP7/commit/846737e63cfe7ee81788c4ca9babe0d3bf687677	gcc-plugins: latent_entropy: use /dev/urandomcommit c40160f2998c897231f8454bf797558d30a20375 upstream.While the latent entropy plugin mostly doesn't derive entropy fromget_random_const() for measuring the call graph, when __latent_entropy isapplied to a constant, then it's initialized statically to output fromget_random_const(). In that case, this data is derived from a 64-bitseed, which means a buffer of 512 bits doesn't really have that amountof compile-time entropy.This patch fixes that shortcoming by just buffering chunks of/dev/urandom output and doling it out as requested.At the same time, it's important that we don't break the use of-frandom-seed, for people who want the runtime benefits of the latententropy plugin, while still having compile-time determinism. In thatcase, we detect whether gcc's set_random_seed() has been called bymaking a call to get_random_seed(noinit=true) in the plugin initfunction, which is called after set_random_seed() is called but beforeanything that calls get_random_seed(noinit=false), and seeing if it'szero or not. If it's not zero, we're in deterministic mode, and so wejust generate numbers with a basic xorshift prng.Note that we don't detect if -frandom-seed is being used using thedocumented local_tick variable, because it's assigned via:   local_tick = (unsigned) tv.tv_sec * 1000 + tv.tv_usec / 1000;which may well overflow and become -1 on its own, and so isn'treliable: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105171[kees: The 256 byte rnd_buf size was chosen based on average (250), median (64), and std deviation (575) bytes of used entropy for a defconfig x86_64 build]Fixes: 38addce8b600 ("gcc-plugins: Add latent_entropy plugin")Cc: stable@vger.kernel.orgCc: PaX Team <pageexec@freemail.hu>Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>Signed-off-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20220405222815.21155-1-Jason@zx2c4.comSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>		
gcc	diagnostic	others	 https://github.com/guoren83/linux-allwinner-d1/commit/2ba50da9ec34196a895b4947dc6bb1dbf1ace670	kconfig: nconf: get rid of (void) casts from wattrset() callsThis reverts commit 10175ba65fde ("nconfig: Silence unused return valuesfrom wattrset").With this patch applied, recent GCC versions can cleanly build nconfwithout "value computed is not used" warnings.The wattrset() used to be implemented as a macro, like this:  #define wattrset(win,at) \          (NCURSES_OK_ADDR(win) \            ? ((win)->_attrs = NCURSES_CAST(attr_t, at), \               OK) \            : ERR)The GCC bugzilla [1] reported a false-positive -Wunused-value warningin a similar test case. It was fixed by GCC 4.4.1.Let's revert that commit, and see if somebody will claim the issue.[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=39889Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>		
gcc	wrong-code	disabling optimizations	 https://github.com/Kaz205/renoir/commit/961753b6eb9d58e3bd1f0806afd203c90527b9ae	lib/string.c: Use freestanding environmentgcc can transform the loop in a naive implementation of memset/memcpyetc into a call to the function itself.  This optimization is enabled by-ftree-loop-distribute-patterns.This has been the case for a while, but gcc-10.x enables this option at-O2 rather than -O3 as in previous versions.Add -ffreestanding, which implicitly disables this optimization withgcc.  It is unclear whether clang performs such optimizations, buthopefully it will also not do so in a freestanding environment.Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56888Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>		
gcc	wrong-code	refactoring	 https://github.com/OP-TEE/optee_os/commit/30e743f6b08776e41843a81d8f628c334f24e73f	lib: libutils: Use ret for longjmp with Clang and BTIlongjmp uses br instead of ret to jump to the target. Thus the targetlocation should have the right BTI launchpad to handle this.clang has a bug [1] and doesn't add the BTI after setjmp causingexception when BTI is enabled. This works well with gcc [2]and can be tested when compiling xtests with WITH_CXX_TESTS=n.To avoid the exception, use ret instead of br with clang and BTI.[1] - https://bugs.llvm.org/show_bug.cgi?id=49544[2] - https://gcc.gnu.org/legacy-ml/gcc-patches/2018-11/msg02472.htmlSigned-off-by: Ruchika Gupta <ruchika.gupta@linaro.org>Reviewed-by: Jerome Forissier <jerome@forissier.org>		
gcc	link-failure	others	 https://github.com/libjxl/libjxl/commit/87fe7c16e1fb2e21b6a1dca26782950ae1559d99	libjxl implementation rely on c11 atomics (cache_aligned.cc) (#1128)* Initialize c++ requirements before calling check_cxx_source_compiles* libjxl implementation rely on c11 atomics (cache_aligned.cc)It turns out that GCC requires explicitly linking to a library `atomic`in order to support c11/atomics. gcc spec file will not handle itdirectly at least not on the following Debian archs: armel, mipsel,powerpc and riscv64.Introduce a new cmake module to detect usage of gcc/atomic and addmissing library to the link step.For reference:* https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104248		
gcc	link-failure	disabling optimizations	 https://github.com/Dark-Matter7232/Cosmic-fresh/commit/4ee1f68d99593e906913c4e50316600d2e2c4086	lto, workaround: Disable LTO for BPFDisable LTO for the BPF interpreter. This works around a gcc bug in the LTOpartitioner that partitions the jumptable used the BPF interpreterinto a different LTO unit. This in term causes assemblererrors because the jump table contains references to thecode labels in the original file.gcc problem tracked in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50676Signed-off-by: Andi Kleen <ak@linux.intel.com>		
gcc	optimization	modifying non-triggered programs	 https://github.com/turex/siberia_hi6250_kernel/commit/c08097124192cce912d24064358c60a6f6214938	media: r820t: fix r820t_write_reg for KASANcommit 16c3ada89cff9a8c2a0eea34ffa1aa20af3f6008 upstream.With CONFIG_KASAN, we get an overly long stack frame due to inliningthe register access functions:drivers/media/tuners/r820t.c: In function 'generic_set_freq.isra.7':drivers/media/tuners/r820t.c:1334:1: error: the frame size of 2880 bytes is larger than 2048 bytes [-Werror=frame-larger-than=]This is caused by a gcc bug that has now been fixed in gcc-8.To work around the problem, we can pass the register datathrough a local variable that older gcc versions can optimizeout as well.Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>		
gcc	rejects-valid	disabling optimizations	 https://github.com/TripleTrable/buildroot/commit/4e070082495c1686b2b207db7fe7720271dc7d86	package/ruby: fix build failure due to gcc bug 83143The ruby package exhibits gcc bug 83143 when built for the SH4 architecturewith optimization enabled, which causes a build failure.Differentely from other packages in Buildroot where we work around thisgcc bug by setting optimization to -O0 we can use -freorder-blocks-algorithm=simpleas suggested here [1] if BR2_TOOLCHAIN_HAS_GCC_BUG_83143=y.Fixes:http://autobuild.buildroot.net/results/f57/f5742e7fb6e8142bcdb53b7f4f5e9c1bea3558cd/[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83143#c15Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>		
gcc	optimization	disabling optimizations	 https://github.com/gregkh/linux/commit/5c34aea341b16e29fde6e6c8d4b18866cd99754d	perf test: Fix DWARF unwind for optimized builds.To ensure the stack frames are on the stack tail calls optimizationsneed to be inhibited. If your compiler supports an attribute use it,otherwise use an asm volatile barrier.The barrier fix was suggested here:https://lore.kernel.org/lkml/20201028081123.GT2628@hirez.programming.kicks-ass.net/Tested with an optimized clang build and by forcing the asm barrierroute with an optimized clang build.A GCC bug tracking a proper disable_tail_calls is:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97831Fixes: 9ae1e990f1ab ("perf tools: Remove broken __no_tail_call       attribute")v2. is a rebase. The original fix patch generated quite a lot of    discussion over the right place for the fix:    https://lore.kernel.org/lkml/20201114000803.909530-1-irogers@google.com/    The patch reflects my preference of it being near the use, so that    future code cleanups don't break this somewhat special usage.Signed-off-by: Ian Rogers <irogers@google.com>Acked-by: Jiri Olsa <jolsa@redhat.com>Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>Cc: Ard Biesheuvel <ardb@kernel.org>Cc: Mark Rutland <mark.rutland@arm.com>Cc: Miguel Ojeda <ojeda@kernel.org>Cc: Namhyung Kim <namhyung@kernel.org>Cc: Peter Zijlstra <peterz@infradead.org>Cc: Stephane Eranian <eranian@google.com>Cc: clang-built-linux@googlegroups.comLink: http://lore.kernel.org/lkml/20210922173812.456348-1-irogers@google.comSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>		
gcc	environment	others	 https://github.com/percona/percona-server/commit/b3a9f571d3c0353560b9d16a4c805985a1d090c7	PS-7720: Fix CRC32 function selection in MyRocksSuppress the```\#error "AES/PCLMUL instructions not enabled"```bug in gcc-4.8.x or lower at https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56298		
gcc	optimization	modifying non-triggered programs	 https://github.com/LimpingNinja/ngenmud/commit/75b6d43a1e50b986d7fda8831be6efa7c23783e9	Quick patch for GCC 10+GCC 10+ defaults to -fno-common which causes the build to fail miserably on duplicate PyX_Y definitions. Temporarily patched by passing -fcommon to the build, need to clean up the duplicates. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85678		
gcc	crash	others	 https://github.com/pd95/m68k-atari-mint-cross-tools/commit/b25b325b9888d84efa566f47855efcc7d9b8b482	Re-added previously macos specific patch- "gcc-4.6.4/gcc/combine" needs patching to avoid compiler crashposix/regex.c internal compiler error: in "fixup reorder chain"see also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52714		
gcc	rejects-valid	disabling components	 https://github.com/Zealandia-Systems/eigen/commit/8f8c2ba2fe19c6c2e47bbe2fbaf87594642e523d	Remove bad "take" impl that causes g++-11 crash.For some reason, having `take<n, numeric_list<T>>` for `n > 0` causesg++-11 to ICE with```sorry, unimplemented: unexpected AST of kind nontype_argument_pack```It does work with other versions of gcc, and with clang.I filed a GCC bug[here](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102999).Technically we should never actually run into this case, since youcan't take n > 0 elements from an empty list.  Commenting it outallows our Eigen tests to pass.		
gcc	wrong-code	restricting compiler versions	 https://github.com/MIPS/glibc/commit/844b4d8b4b937fe6943d2c0c80ce7d871cdb1eb5	s390x: Require GCC 7.1 or later to build glibc.GCC 6.5 fails to correctly build ldconfig with recent ld.so.cachecommits, e.g.:785969a047ad2f23f758901c6816422573544453elf: Implement a string table for ldconfig, with tail mergingIf glibc is build with gcc 6.5.0:__builtin_add_overflow is used in<glibc>/elf/stringtable.c:stringtable_finalize()which leads to ldconfig failing with "String table is too large".This is also recognizable in following tests:FAIL: elf/tst-glibc-hwcaps-cacheFAIL: elf/tst-glibc-hwcaps-prepend-cacheFAIL: elf/tst-ldconfig-XFAIL: elf/tst-ldconfig-bad-aux-cacheFAIL: elf/tst-ldconfig-ld_so_conf-updateFAIL: elf/tst-stringtableSee gcc "Bug 98269 - gcc 6.5.0 __builtin_add_overflow() with smalluint32_t values incorrectly detects overflow"(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98269)		
gcc	wrong-code	modifying non-triggered programs	 https://github.com/sisyphus/math-mpfr/commit/c5585cc128ad687eac5c369b1a5eb411cc938484	t/nvtoa2.t - improve detection of buggy assignment of subnormals.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94756		
gcc	rejects-valid	disabling components	 https://github.com/wasmx/fizzy/commit/b0e84d2b72f58f63b10a05b165c871699668ef72	test: Disable pointer-subtract sanitizer in constexprThe "pointer-subtract" sanitizer is disabled because GCC fails to compileconstexpr function with pointer subtraction.The bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97145is to be fixed in GCC 10.3.		
gcc	optimization	switching libraries	 https://github.com/wongsyrone/lede-1/commit/6e2556963d523ecef9a2a6130c899d146a3b7333	toolchain/gcc: use ELFv2 ABI on ppc64 with muslAt configuration time, gcc assumes that ppc64be targets use the ELFv1ABI, and ppc64le targets use the ELFv2 ABI. However, musl libc does notsupport the ELFv1 ABI on ppc64 at all, regardless of the endianness.Therefore, when building for a ppc64 arch and with musl libc, instructgcc to use the ELFv2 ABI.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93157 for more info.Signed-off-by: Stijn Tintel <stijn@linux-ipv6.be>Reviewed-by: Rui Salvaterra <rsalvaterra@gmail.com>		
gcc	crash	others	 https://github.com/dirker/rpi-intercom-buildroot/commit/4b22106fb5e199aa26f148b0b159aecb7da7f7e0	toolchain: introduce BR2_TOOLCHAIN_HAS_GCC_BUG_101737pixman package fails to build for the SH4 architecture with optimizationenabled with gcc up to 11.1.0:http://autobuild.buildroot.net/results/b20/b20869bbb48edb1f0a847ea9e2e1a0462d6350be/It's been reported upstream:https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101737Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>		
gcc	environment	refactoring	 https://github.com/dgist-datalab/cxl-kernel/commit/f23653fe64479d96910bfda2b700b1af17c991ac	tty: Partially revert the removal of the Cyclades public APIFix a user API regression introduced with commit f76edd8f7ce0 ("tty:cyclades, remove this orphan"), which removed a part of the API andcaused compilation errors for user programs using said part, such asGCC 9 in its libsanitizer component[1]:.../libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc:160:10: fatal error: linux/cyclades.h: No such file or directory  160 | #include <linux/cyclades.h>      |          ^~~~~~~~~~~~~~~~~~compilation terminated.make[4]: *** [Makefile:664: sanitizer_platform_limits_posix.lo] Error 1As the absolute minimum required bring `struct cyclades_monitor' andioctl numbers back then so as to make the library build again.  Add apreprocessor warning as to the obsolescence of the features provided.References:[1] GCC PR sanitizer/100379, "cyclades.h is removed from linux kernel    header files", <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100379>Fixes: f76edd8f7ce0 ("tty: cyclades, remove this orphan")Cc: stable@vger.kernel.org # v5.13+Reviewed-by: Christoph Hellwig <hch@lst.de>Signed-off-by: Maciej W. Rozycki <macro@embecosm.com>Link: https://lore.kernel.org/r/alpine.DEB.2.20.2201260733430.11348@tpp.orcam.me.ukSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>		
gcc	rejects-valid	refactoring	 https://github.com/bmwiedemann/openSUSE/commit/1b188382c07cdcd9c3c59f7ab7ff906e71e18701	Update libqt5-qtbase to version 5.15.2+kde294 / rev 129 via SR 969356https://build.opensuse.org/request/show/969356by user Vogtinator + dimstar_suse- Add mitigate-FORTIFY_SOURCE-3.patch that should mitigate  new -D_FORTIFY_SOURCE=3 level as analyzed in GCC bug:  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105078. (forwarded request 969342 from marxin)		
gcc	optimization	switching libraries	 https://github.com/wesnoth/wesnoth/commit/6b52e1f76a8aa00976d22b7a05e33d4f26a8101b	Replace std::regex by boost to temporary workaround for Mingw-w64's bugSee https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98723		
gcc	optimization	refactoring	 https://github.com/Tomoms/android_kernel_sony_msm8960t/commit/f74d38ffaa43a0981de7aa1b2d3e0142b4d0f025	[PATCH] ARM: fix put_user() for gcc-8Building kernels before linux-4.7 with gcc-8 results in many build failureswhen gcc triggers a check that was meant to catch broken compilers:/tmp/ccCGMQmS.s:648: Error: .err encounteredAccording to the discussion in the gcc bugzilla, a local "registerasm()" variable is still supposed to be the correct way to force aninline assembly to use a particular register, but marking it 'const'lets the compiler do optimizations that break that, i.e the compiler isfree to treat the variable as either 'const' or 'register' in that case.Upstream commit 9f73bd8bb445 ("ARM: uaccess: remove put_user() codeduplication") fixed this problem in linux-4.8 as part of a larger change,but seems a little too big to be backported to 4.4.Let's take the simplest fix and change only the one broken line in thesame way as newer kernels.Suggested-by: Bernd Edlinger <bernd.edlinger@hotmail.de>Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85745Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86673Signed-off-by: Arnd Bergmann <arnd@arndb.de>Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>		
gcc	rejects-valid	refactoring	 https://github.com/tc3t/dfglib/commit/91751e82471d8654fc15704c0753c952d042192e	[buildfix] cont::TrivialPair: adjustment to fix building on older GCC.-Probably affects GCC's before version 7 (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56480)		
gcc	rejects-valid	refactoring	 https://github.com/Silverlan/prosper/commit/0b861f515b41384be14132e70cd0701e70eead70	Add workaround for gcc compiler bug - https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88165		
gcc	rejects-valid	refactoring	 https://github.com/inet-framework/inet/commit/96b05e617a8e3506fc5a7460a14dd04d377b3c2f	Chunk: Fixed GCC compilation error: explicit specialization in non-namespace scope.This is a GCC bug, see here: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85282		
gcc	rejects-valid	refactoring	 https://github.com/rohankumardubey/scyllaDB/commit/25f8e9c078d6915f9e8c2d47845100c58c83d9aa	cql3: statement_restrictions: adjust call to std::vector deduction guidegcc 11 has a hard time parsing a deduction guide use withbraced initializer. The bug [1] was already fixed in gcc 12,and I've requested a backport, but reduce friction meanwhileby switching to a form that works in gcc 11.[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89062		
gcc	rejects-valid	refactoring	 https://github.com/swidi/CFI-based-attestation/commit/0e3d7e61867d69721b28e557272bdf4b66010327	Fix gcc build after de3a485d9 due to a gcc bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92598This should fix gcc based builders such as http://lab.llvm.org:8011/#/builders/76/builds/1683		
gcc	rejects-valid	switching libraries	 https://github.com/pablode/gatling/commit/d9f61a67bd9aae7134ee5c79a8db96fe6fdb2b32	hdGatling: fix gcc 11 compilation error.Due to this bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79700		
gcc	rejects-valid	refactoring	 https://github.com/bniehoff/lennard-jonesium/commit/1320aa6aad5b09d73887de1f6bdebc525e0c0e79	Move Parameters structs back inside PhasesIt really makes more sense to have the Parameters structs inside theSimulationPhase class definitions as nested classes.  To get around theGCC bug described in (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88165),we simply declare a second constructor overload which is defined in thecpp file.  At this point in the translation unit, the outer class isfully defined, so the bug does not occur and we can call the nestedclass's default constructor without problem.		
gcc	rejects-valid	others	 https://github.com/gentoo/gentoo/commit/7af3ec75563c6744dba7db4bd94da818844c6039	sys-apps/fakeroot: add flag-o-matic filter for flag -fno-semantic-interpositionBug: https://bugs.gentoo.org/834445Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101270Signed-off-by: Randall Vasquez <ran.dall@icloud.com>Closes: https://github.com/gentoo/gentoo/pull/25007Signed-off-by: Sam James <sam@gentoo.org>		
gcc	rejects-valid	refactoring	 https://github.com/OPM/opm-simulators/commit/924bf5ed1971b3fd5e58f640c997e03fd4633b7f	Use old style traits class approach to check for face tag support.Old version failed due to a gcc compilerbug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77446 with error:"non-constant condition for static assertion"		
gcc	rejects-valid	refactoring	 https://github.com/jgrant27/ryzen-fedora-kernel/commit/64d63e754c89bae4f6c1de25f7e4a5f81989a0df	Work around for gcc bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96377Signed-off-by: Justin M. Forbes <jforbes@fedoraproject.org>		
gcc	rejects-valid	refactoring	 https://github.com/quick-lint/quick-lint-js/commit/0f7b21707e18d0326098cdc1302b4980dbf96ea2	Work around GCC 12 (beta) bugBuilding with GCC 12 (beta) is failing. It seems that GCC doesn't likeuninitialized member variables in constexpr objects, leading to builderrors [1]. Work around this GCC bug by initializing the offendingmembers.[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105191		
gcc	rejects-valid	refactoring	 https://github.com/facebook/fbthrift/commit/1a758c721fbf88b1ced6e3736043b8e447012122	work around gcc bug on extern+auto declsSummary:Gcc seems have an old bug of reporting conflict decls when extern and auto are involved. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78217Changing "auto" with explicit type to work around this bugReviewed By: prakashgayasenDifferential Revision: D34347715fbshipit-source-id: b7757d0279c3b6b98cfac663f28bf8849933f3b9		
gcc	wrong-code	disabling components	 https://github.com/glscopeclient/scopehal/commit/8672f04120dec3e735ec1e411a187d225347a7f2	#295: turn off AVX2/512 on Windows/GCC until https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412 is resolved		
gcc	wrong-code	refactoring	 https://github.com/NixOS/nix/commit/fc2d31c423377cea2355e7f7a4ce75e64a7f3620	Add `(StoreConfig*)` casts to work around a GCC bugWork around https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80431 that wasalready there in the code but was accidentally removed in the lastcommits		
gcc	wrong-code	switching libraries	 https://github.com/CraftRom/Chidori-Kernel_surya/commit/2f18d095474ef519612cd2e7a9917bd596e207f3	BACKPORT: lib: Prepare zstd for preboot environment, improve performanceThese changes are necessary to get the build to work in the prebootenvironment, and to get reasonable performance:- Remove a double definition of the CHECK_F macro when the zstd  library is amalgamated.- Switch ZSTD_copy8() to __builtin_memcpy(), because in the preboot  environment on x86 gcc can't inline `memcpy()` otherwise.- Limit the gcc hack in ZSTD_wildcopy() to the broken gcc version. See  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81388.ZSTD_copy8() and ZSTD_wildcopy() are in the core of the zstd hot loop.So outlining these calls to memcpy(), and having an extra branch are verydetrimental to performance.Signed-off-by: Nick Terrell <terrelln@fb.com>Signed-off-by: Ingo Molnar <mingo@kernel.org>Tested-by: Sedat Dilek <sedat.dilek@gmail.com>Reviewed-by: Kees Cook <keescook@chromium.org>Link: https://lore.kernel.org/r/20200730190841.2071656-2-nickrterrell@gmail.com[cyberknight777: backport to 4.14]Signed-off-by: Cyber Knight <cyberknight755@gmail.com>Signed-off-by: Salllz <sal235222727@gmail.com>		
gcc	wrong-code	restricting compiler versions	 https://github.com/urcu/userspace-rcu/commit/39c2747c011f2d7563c8fa63e26cd92ca552d15b	Blacklist GCC 4.4.0, 4.4.1 and 4.4.2 on ARMGCC added __sync_synchronize() in 4.4.0 but it was broken on ARM until4.4.3, see the GCC bug report for more details :  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=42263Signed-off-by: Michael Jeanson <mjeanson@efficios.com>Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>Change-Id: I629e3c8b4baaccb34b2311e220f30d0ad8b69a19		
gcc	wrong-code	suppressing warning messages	 https://github.com/scylladb/scylla/commit/193d1942f22f399742b3fb15193b48e0ca3af2a5	build: silence gcc ABI interoperability warning on armA gcc bug [1] caused objects built by different versions of gccnot to interoperate. Gcc helpfully warns when it encounters code thatcould be affected.Since we build everything with one version, and as that versions is farnewer than the last version generating incorrect code, we can silencethat warning without issue.[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77728Closes #7495		
gcc	wrong-code	refactoring	 https://github.com/optimad/bitpit/commit/dd53eab45f21e8df4460aa7abb0fbf49d97c0780	containers: move assignment operator and move constructor of ProxyVector should be implemented explicitlyWe need to explicitly implement move assigment operator and modeconstructor to workaround a bug in gcc, see:    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60796    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57728		
gcc	wrong-code	disabling components	 https://github.com/xaya/xaya/commit/d6fae988eff78e28756d9b6219ec0239c420f51b	guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to makeit avoid using aligned vmov instructions. This works around a longstanding issuein GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recentlydiscovered to be causing issues, see #24726.Note that distros like Debian are also patching around this issue, and that iswhere this patch comes from. This would also explain why we haven't run into thisproblem earlier, in development builds. See:https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.Fixes #24726.Alternative to #24727.See also:https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559		
gcc	wrong-code	refactoring	 https://github.com/gopro/gopro-lib-node.gl/commit/9fa4e790a268b88cb7fcefbba669df079575721a	internal: workaround a critical gcc 10 issueWorkarounds a critical issue妤?that has not been fixed within the last 6months.[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189[1]: http://r6.ca/blog/20200929T023701Z.html		
gcc	wrong-code	disabling optimizations	 https://github.com/ArtifexSoftware/mujs/commit/90a63426ee93d9079a032740e519988e26d1949c	Issue #152: Work around GCC compiler bug introduced in 2015.See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103052 for details.		
gcc	wrong-code	restricting compiler versions	 https://github.com/hebasto/bitcoin-qtw/commit/32a8a09a08df46781c7c7d98d83df9936f9de961	Merge bitcoin/bitcoin#23778: release: Guix 1.4.0 & GCC 10.3698eda4780b83f7e1b11c7b9564191548324afdb guix: use upstream python-requests (2.26.0) (fanquake)2fdb6d0f11509914ae896ff64d0935e73eb80a83 build: use python-asn1crypto from upstream (fanquake)52f4f1c9de6aec6d765fbe06b0c8b0fa34432ac2 guix: use uptream nsis-x86_64 (fanquake)b55be93a9846ab438d9d1e5f21c458d4af439e07 guix: use GCC 10 (over GCC 8) to build releases (fanquake)Pull request description:  Guix's `core-updates-frozen` branch has been merged back into `master`, and a [`version-1.4.0`](https://git.savannah.gnu.org/cgit/guix.git/log/?h=version-1.4.0) branch has been created. This is great, as it means the next Guix release is on the horizon, and it contains a number of changes I'd like to take advantage of. In particular, is migrating the version of GCC we use for releases from GCC 8 to GCC 10.3.0 (which is also the new Guix default GCC). This is my preferred method of unblocking progress in #20744, which is currently stalled due to support for `std::filesystem` for Windows not arriving in GCC until version 9, whereas it's usable on Linux starting with GCC 8. The current set of changes in that PR [attempt to backport support](https://github.com/bitcoin/bitcoin/pull/20744/commits/9604eda1abe6ffc02c97e3434c3c2c4ce1250794) for `std::filesystem`, for Windows, to GCC 8, similar to what is currently done by Debian, however that is somewhat convoluted, and using GCC 10 with our current Guix version would require updating at least one Guix patch to GCC, so is not completely straightforward either.  Other changes included here:  * Dropping our `--no-*` patch for mingw binutils ld, as we can take advantage of the `--disable-*` flags that are now available in binutlils 2.37. The security check tests are updated accordingly.  * Dropping our current patch for NSIS, as it's been integrated upstream, however given we are building v3.05, we need a different one (https://github.com/kichik/nsis/commit/229b6136c41ba5caba25936f4927476d20aa283f) for compiling against GCC 10.  * Removing our `python-asn1crypto` package definition, as an identical package is available in Guix. Over time we should look at trying to get the rest of the python packages we define here upstreamed.  * Adding a patch for `python-elfsteem` to fix an issue in the example code when using Python 3.9+.  * Our base glibc (`2.24`) now inherits from glibc-2.31. Guix has removed packages of glibc < 2.29, and the current version of glibc is `2.33`. However glibc-2.31 is the newest version that still contains a workaround for installing sunrpc data, which we need, so inheriting from that version seemed like the most straightforward solution.  * As mentioned, Guix has removed glibcs < 2.29, so we add our own package definition for glibc 2.27, which we use for our RISC-V toolchain (also inheriting from 2.31).  The guix commit hash currently points to the head of the `version-1.4.0` branch. This can be updated to an official release tag when one is available.  Looking for Concept ACKs on migrating to using GCC 10.3 for building releases. Keeping in mind issues like #20005, however that particular bug should be fixed in GCC 10.3.0+, according to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189.  Guix Builds:  ```bash  bash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum  ea56ef38bd94dbcb11b9d10e2f10c205109daad03fea4313f79892fc497ba68d  guix-build-698eda4780b8/output/aarch64-linux-gnu/SHA256SUMS.part  01123ab23e5a09dc06a897837389e859d302ba2b18fbe827936ec8983765e7df  guix-build-698eda4780b8/output/aarch64-linux-gnu/bitcoin-698eda4780b8-aarch64-linux-gnu-debug.tar.gz  7a24e25c2237e5aeb14508b91c5c6954572814e1767e892c164494f32d73b0c0  guix-build-698eda4780b8/output/aarch64-linux-gnu/bitcoin-698eda4780b8-aarch64-linux-gnu.tar.gz  0e1dba0233da1f487222b128964980d50393e61a6971bcf4c71951c29fdf3993  guix-build-698eda4780b8/output/arm-linux-gnueabihf/SHA256SUMS.part  8cd4c6f42abc81427f1d2500f86daced2a4ee78882dd9d03b5a0211a1d96306e  guix-build-698eda4780b8/output/arm-linux-gnueabihf/bitcoin-698eda4780b8-arm-linux-gnueabihf-debug.tar.gz  c180db6bffb1a54b6dc65929d86d5eba9adf876a28ad320590ed230233e57299  guix-build-698eda4780b8/output/arm-linux-gnueabihf/bitcoin-698eda4780b8-arm-linux-gnueabihf.tar.gz  4efcda7b63646eb46dabea7122fb026f2c063d2919a9dcbbffbc0929b9c56ced  guix-build-698eda4780b8/output/dist-archive/bitcoin-698eda4780b8.tar.gz  1e35e96034fed00674f362d6471fb402dd2758cec2860ded4fd7e37c38935a44  guix-build-698eda4780b8/output/powerpc64-linux-gnu/SHA256SUMS.part  96a0b7f54d3b3935c134f8c2aaaf11a314b54c9d7924ba751503caa16bd1c840  guix-build-698eda4780b8/output/powerpc64-linux-gnu/bitcoin-698eda4780b8-powerpc64-linux-gnu-debug.tar.gz  ae05137b6fb3494120f5413bf8a94ca3c1b0c047e1f512e6c2c5a0b1f122f075  guix-build-698eda4780b8/output/powerpc64-linux-gnu/bitcoin-698eda4780b8-powerpc64-linux-gnu.tar.gz  c22e5fbcdcdbfa5d385537e2c1dab55004d9e94396ebccef0bc3d216edfacbbe  guix-build-698eda4780b8/output/powerpc64le-linux-gnu/SHA256SUMS.part  52602b41e81a921435d93f2a3ae29549aa65a4147cdbf1ed7d9e4a44c4dc902a  guix-build-698eda4780b8/output/powerpc64le-linux-gnu/bitcoin-698eda4780b8-powerpc64le-linux-gnu-debug.tar.gz  a2cc7e9385452163a7bda99f6f9aa630fd35d4ba13d4fd9a4dd7e8062206650d  guix-build-698eda4780b8/output/powerpc64le-linux-gnu/bitcoin-698eda4780b8-powerpc64le-linux-gnu.tar.gz  e75fadf1b1c7e4ae3d52e7a8051a881de17bd4d9d32c1ca29ca0ddbb8028ee51  guix-build-698eda4780b8/output/riscv64-linux-gnu/SHA256SUMS.part  3b643c33842a15befb5d36d13b598a5e628c11b95671336c8dea51b5eed9c79a  guix-build-698eda4780b8/output/riscv64-linux-gnu/bitcoin-698eda4780b8-riscv64-linux-gnu-debug.tar.gz  e9a1ee7451502508cde73dc300aca8a421e379ac08c3f4adaf8c768fbfa942ac  guix-build-698eda4780b8/output/riscv64-linux-gnu/bitcoin-698eda4780b8-riscv64-linux-gnu.tar.gz  c0508a0872cf1415a47983d2ebbc9e5a46282ce7b6453afac544e0d1315b7bf9  guix-build-698eda4780b8/output/x86_64-apple-darwin/SHA256SUMS.part  7c02267cb91e2649088af5e96f81142beaad67f6a1a0588355174a4157b31458  guix-build-698eda4780b8/output/x86_64-apple-darwin/bitcoin-698eda4780b8-osx-unsigned.dmg  46dbf5a911abfa63e3c5aa8440289da5fdea89da013253c08768ce58b798a99d  guix-build-698eda4780b8/output/x86_64-apple-darwin/bitcoin-698eda4780b8-osx-unsigned.tar.gz  ab2e2360f18cb1b80bfd37f1a9508a938e89237767120472f932402cc809f0eb  guix-build-698eda4780b8/output/x86_64-apple-darwin/bitcoin-698eda4780b8-osx64.tar.gz  f58aa000692f7ea09ab8e7ec159a806d3a665f0f70558e62a53d56afb361eb02  guix-build-698eda4780b8/output/x86_64-linux-gnu/SHA256SUMS.part  78a76aef8469b07a41588e019a6dfa890c36fd5becf2c8d73a71c9e72bcabde6  guix-build-698eda4780b8/output/x86_64-linux-gnu/bitcoin-698eda4780b8-x86_64-linux-gnu-debug.tar.gz  5e6e0040b37ff035de41c8fcfee5d498bd19fa489024704dd4caa0ab9f566450  guix-build-698eda4780b8/output/x86_64-linux-gnu/bitcoin-698eda4780b8-x86_64-linux-gnu.tar.gz  d6e6af70f277d9c9ef9b4773ec05920355ac07ebec71ff3e179676047329964b  guix-build-698eda4780b8/output/x86_64-w64-mingw32/SHA256SUMS.part  37f24f6899e7803ed07bd0f5eb3f0fb6237ac1254dd72f446e9e4e488a927c8e  guix-build-698eda4780b8/output/x86_64-w64-mingw32/bitcoin-698eda4780b8-win-unsigned.tar.gz  14f7d1c14a5fc3b4c336d301f936c5578d6e31d61ec720dfc9d4129445d1e2a2  guix-build-698eda4780b8/output/x86_64-w64-mingw32/bitcoin-698eda4780b8-win64-debug.zip  c8049dcc0308a76f21dd781e8561ebbafa84034fbf8e3afa7d4017866d7fd195  guix-build-698eda4780b8/output/x86_64-w64-mingw32/bitcoin-698eda4780b8-win64-setup-unsigned.exe  fb1e6580c25b073118f121aabaa04aa09643bc97cfeaea7c9a24bbe65c33cbb6  guix-build-698eda4780b8/output/x86_64-w64-mingw32/bitcoin-698eda4780b8-win64.zip  ```ACKs for top commit:  hebasto:    re-ACK 698eda4780b83f7e1b11c7b9564191548324afdbTree-SHA512: 2f5f4f6bb1f55a048dba88523f235320e51c4af963355abf6a86b7035623b2100ae3dc44396c76fbeea89ae9cfbc5342abd3e2c41760ede8b689d7757d6e7f25		
gcc	wrong-code	refactoring	 https://github.com/hebasto/bitcoin-qtw/commit/d4b9f34eaf13ed695f874cccce84943efe4c3f94	Merge bitcoin/bitcoin#24736: guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64d3ef3cfa82377fb3b4746a9d16fa1b7e41eba647 guix: fix vmov alignment issues with gcc 10.3.0 & mingw-w64 (fanquake)Pull request description:  This introduces a patch to our GCC (10.3.0) mingw-w64 compiler, in Guix, to make  it avoid using aligned vmov instructions. This works around a longstanding issue  in GCC, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412, which was recently  discovered to be causing issues, see #24726.  Note that distros like Debian are also patching around this issue, and that is  where this patch comes from. This would also explain why we haven't run into this  problem earlier, in development builds. See:  https://salsa.debian.org/mingw-w64-team/gcc-mingw-w64/-/blob/master/debian/patches/vmov-alignment.patch.  Fixes #24726.  Alternative to #24727.  See also:  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939559ACKs for top commit:  laanwj:    Concept and code review ACK d3ef3cfa82377fb3b4746a9d16fa1b7e41eba647  hebasto:    ACK d3ef3cfa82377fb3b4746a9d16fa1b7e41eba647, tested Guix ` bitcoin-d3ef3cfa8237-win64.zip` artifact on Windows 11 Pro 21H2:Tree-SHA512: f522efd8e604ab1d9f9c385147f6f488767cfe66f08a1c8b4ff67d448e065f8f2334bf825d99e7fe9571ada9038002b08434585f639120cb29b2e314da7b556e		
gcc	wrong-code	disabling components	 https://github.com/xu1119/torvalds-linux/commit/2df3fc4a84e917a422935cc5bae18f43f9955d31	net: bcmgenet: Revert "Use stronger register read/writes to assure ordering"It turns out after digging deeper into this bug, that it was beingtriggered by GCC12 failing to call the bcmgenet_enable_dma()routine. Given that a gcc12 fix has been merged [1] and the genetdriver now works properly when built with gcc12, this commit shouldbe reverted.[1]https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105160https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=aabb9a261ef060cf24fd626713f1d7d9df81aa57Fixes: 8d3ea3d402db ("net: bcmgenet: Use stronger register read/writes to assure ordering")Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>Acked-by: Florian Fainelli <f.fainelli@gmail.com>Link: https://lore.kernel.org/r/20220412210420.1129430-1-jeremy.linton@arm.comSigned-off-by: Paolo Abeni <pabeni@redhat.com>		
gcc	wrong-code	refactoring	 https://github.com/sourceruckus/linux-mdl/commit/c42813b71a06a2ff4a155aa87ac609feeab76cf3	parisc: Fix unaligned-access crash in bootloaderKernel v5.14 has various changes to optimize unaligned memory accesses,e.g. commit 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers").Those changes triggered an unalignment-exception and thus crashed thebootloader on parisc because the unaligned "output_len" variable now suddenlywas read word-wise while it was read byte-wise in the past.Fix this issue by declaring the external output_len variable as char which thenforces the compiler to generate byte-accesses.Signed-off-by: Helge Deller <deller@gmx.de>Cc: Arnd Bergmann <arnd@kernel.org>Cc: John David Anglin <dave.anglin@bell.net>Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102162Fixes: 8c031ba63f8f ("parisc: Unbreak bootloader due to gcc-7 optimizations")Fixes: 0652035a5794 ("asm-generic: unaligned: remove byteshift helpers")Cc: <stable@vger.kernel.org> # v5.14+		
gcc	wrong-code	implementing methods	 https://github.com/simd-everywhere/simde/commit/4b7394fc2609c70540772769092014bf970a0b43	sse2: ignore broken _mm_loadu_si{16,32} on GCCPending a fix for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99754Fixes #674		
gcc	wrong-code	refactoring	 https://github.com/sqlite/sqlite/commit/2f04583f041c7b49b0db98d3a653dd0f802b6284	Work-around for [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96270|GCC bug 96270].FossilOrigin-Name: 9679c0c61131f0e986551701a64191da0ee0f50880eaa57fe4bf520e3fecf634		
gcc	wrong-code	refactoring	 https://github.com/grinisrit/tnl-dev/commit/e5fc6a96122ec8a693bf398fb490458af17b2d36	Workaround for a bug in GCC 11.1.0See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100963		
gcc	diagnostic	suppressing warning messages	 https://github.com/RTEMS/sourceware-mirror-binutils-gdb/commit/f766f79a1f40a0b91fee711b83e204789398c6b6	[gdb/testsuite] Add xfail for PR gcc/101643With gcc 8.5.0 I run into:...(gdb) print bad^M$2 = (0 => 0 <repeats 25 times>)^M(gdb) FAIL: gdb.ada/big_packed_array.exp: scenario=minimal: print bad...while with gcc 9.3.1 we have instead:...(gdb) print bad^M$2 = (false <repeats 196 times>)^M(gdb) PASS: gdb.ada/big_packed_array.exp: scenario=minimal: print bad...This is caused by gcc PR, which I've filed athttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=101643 "[debug, ada] packed arraynot described as packed".Fix by marking this as XFAIL.Tested on x86_64-linux.gdb/ChangeLog:2021-07-27  Tom de Vries  <tdevries@suse.de>	PR testsuite/26904	* gdb/testsuite/gdb.ada/big_packed_array.exp: Add xfail.
